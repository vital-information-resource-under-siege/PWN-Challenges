


Gadgets
=======


0x000000000012f6b0: adc ah, 0xac; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa50: adc ah, 0xac; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015ded0: adc ah, 0xac; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e190: adc ah, 0xac; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f70: adc ah, 0xac; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd10: adc ah, 0xac; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df570: adc ah, 0xac; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba10: adc ah, 0xac; jns 0xfba4f; ret 0x3fe5; 
0x00000000000a88a5: adc ah, al; mov r9d, 0xc4c0d26b; ret; 
0x000000000008fc9c: adc ah, al; ret 0x99a9; 
0x0000000000090690: adc ah, al; ret 0x9da1; 
0x00000000000914d8: adc ah, al; ret 0xb9c9; 
0x0000000000090e8a: adc ah, al; ret 0xbdc9; 
0x000000000005042a: adc ah, byte ptr [rdi + 3]; add dh, dh; jp 0x5043a; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x00000000000e76ea: adc ah, byte ptr [rdi]; ret; 
0x000000000000edbd: adc ah, byte ptr [rsi + 0xf]; add eax, 0xbc50a; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000007de33: adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x4fe8; 
0x000000000005e77a: adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x8e8; 
0x0000000000190215: adc ah, ch; call rax; 
0x00000000000948d3: adc al, 0; add ah, al; pop r12; ret; 
0x0000000000192eb0: adc al, 0; add byte ptr [rax], al; and al, 0x1f; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x00000000001930d0: adc al, 0; add byte ptr [rax], al; and dword ptr [rax], r8d; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x00000000001948d0: adc al, 0; add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x0000000000194c70: adc al, 0; add byte ptr [rax], al; in al, 0x3c; add byte ptr [rax], al; mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x000000000019a340: adc al, 0; add byte ptr [rax], al; mov ah, 0x93; add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000192e98: adc al, 0; add byte ptr [rax], al; or al, 0x1f; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000195d10: adc al, 0; add byte ptr [rax], al; test byte ptr [rbp], cl; add byte ptr [rax], ch; add al, 0xec; call qword ptr [rdi]; 
0x00000000000b74b9: adc al, 0; add ch, al; and ebx, dword ptr [rax + rbx*8 - 0x3c]; jns 0xb74ec; ret; 
0x000000000007de44: adc al, 0x24; add rsp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000002e05d: adc al, 0x24; add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x0000000000074831: adc al, 0x24; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000045524: adc al, 0x24; add rsp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x00000000000723ac: adc al, 0x24; jle 0x7242f; movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000724fa: adc al, 0x24; jle 0x72582; movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x000000000006c0f4: adc al, 0x24; mov qword ptr [rsp + 0x18], rdi; movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x0000000000074829: adc al, 0x24; mov qword ptr [rsp], rsi; movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x000000000006eee2: adc al, 0x24; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000006c1a7: adc al, 0x24; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000000be5a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bf20: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf69: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000c31b: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35d: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000001bb85: adc al, 0x38; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000000bcfb: adc al, 0x39; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000017a0: adc al, 0x3a; cmp eax, 0xbfdeff0f; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x00000000000eb662: adc al, 0x3c; ret 0x445c; 
0x0000000000012d13: adc al, 0x48; add esp, 0x10; fchs; pop rbx; ret; 
0x00000000000495df: adc al, 0x48; mov eax, dword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000012c423: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c3: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac43: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af03: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece3: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a83: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e3: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8783: adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x00000000001966a4: adc al, 0x57; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x000000000001b2b3: adc al, 0x66; cmp edx, 0x6cdb7fff; and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x000000000007db2b: adc al, 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000001985a4: adc al, 0x76; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x00000000001035f4: adc al, 0x81; cmc; ret; 
0x0000000000050c44: adc al, 0x89; ret 0xe281; 
0x000000000010cf24: adc al, 0x8b; ret 0xfc10; 
0x00000000000d58d0: adc al, 0x93; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x00000000001083a3: adc al, 0xbc; or al, 0x91; push rbx; ret; 
0x00000000000ecd4e: adc al, 0xbf; add byte ptr [rax - 0x74c161fe], al; ret; 
0x000000000009d08d: adc al, 0xc0; vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009ce52: adc al, 0xc0; vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cf72: adc al, 0xc1; vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cf92: adc al, 0xc1; vmulpd xmm0, xmm0, xmm4; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cf5b: adc al, 0xc2; vmulpd xmm0, xmm0, xmm4; vcvtpd2ps xmm0, xmm0; vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x00000000000e8ba1: adc al, 0xc4; and byte ptr [rax], cl; xor byte ptr [r15], dil; add byte ptr [rax], al; or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x0000000000020a2b: adc al, 0xdd; fcomp st(3); jl 0x20a55; or cl, ch; sub dword ptr [rbp - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000192135: adc al, 0xe8; jmp qword ptr [rcx + 2]; 
0x000000000018fba5: adc al, 0xe9; call qword ptr [rax + 0x43]; 
0x0000000000198eb9: adc al, 0xf0; jmp qword ptr [rdi + 3]; 
0x0000000000190e2d: adc al, 0xf2; jmp rax; 
0x000000000004951b: adc al, 0xf2; movups xmm0, xmmword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000048993: adc al, 0xf2; movups xmm0, xmmword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x0000000000055dbb: adc al, 0xf3; movd dword ptr [rsp + 0x10], mm0; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e5a: adc al, 0xf3; movd dword ptr [rsp + 0x10], mm0; add rsp, 0x38; ret; 
0x00000000000526bd: adc al, 0xf3; movd dword ptr [rsp + 0x10], mm0; add rsp, 0x48; ret; 
0x00000000000c4532: adc al, 0xf3; movups xmmword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000008677b: adc al, 0xf3; ret; 
0x000000000010bdf5: adc al, 0xf6; inc eax; adc dh, dh; jmp rax; 
0x0000000000077112: adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000002a3cb: adc al, 0xfe; jmp qword ptr [rsi - 0x70]; 
0x000000000007da35: adc al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000010e733: adc al, 5; and ecx, dword ptr [rsi + 0x10fa3969]; xchg byte ptr [r14 + 0x786045bf], cl; ret; 
0x00000000000af76c: adc al, 6; add ah, al; ret; 
0x0000000000068231: adc al, 6; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x89; ret; 
0x000000000004b846: adc al, 8; add bl, dh; divps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000001318d: adc al, bl; ret 0x6cdb; 
0x00000000000186f8: adc al, bl; stc; js 0x18740; faddp st(1); pop rbx; ret; 
0x000000000010d31e: adc al, byte ptr [rax + 0x65]; xor al, 0xa7; ret; 
0x000000000010d09e: adc al, byte ptr [rax + 7]; sbb eax, 0x9144ab1a; jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x00000000000cd63a: adc al, byte ptr [rax]; insd dword ptr [rdi], dx; ret 0x4d; 
0x0000000000105b44: adc al, byte ptr [rdx + rdx*8 + 0x61]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000cd639: adc al, byte ptr es:[rax]; insd dword ptr [rdi], dx; ret 0x4d; 
0x000000000005db8b: adc al, ch; call qword ptr [rcx + 0xf660006]; 
0x000000000006aa8e: adc al, ch; cld; ret 5; 
0x000000000005a9e4: adc al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000005aae3: adc al, ch; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x000000000007bf8d: adc al, ch; insd dword ptr [rdi], dx; push -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000068b8b: adc al, ch; jmp rcx; 
0x0000000000045daa: adc al, ch; mov al, 0x5a; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000005a99c: adc al, ch; out dx, al; ret; 
0x000000000005aa9b: adc al, ch; out dx, eax; ret 6; 
0x000000000005ab2b: adc al, ch; pop rdi; ret 6; 
0x000000000000f69e: adc al, ch; pop rsp; ret 0xffff; 
0x00000000000668c8: adc al, ch; ret 0x604; 
0x000000000005d8c8: adc al, ch; ret 0x694; 
0x000000000005bec8: adc al, ch; ret 0x6ae; 
0x000000000005b0c8: adc al, ch; ret 0x6bc; 
0x0000000000048f27: adc al, ch; ret; 
0x000000000007a63d: adc al, ch; std; out 0xfd, al; jmp qword ptr [rsi + 0xf]; 
0x000000000004922e: adc al, ch; sub al, 0x26; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000005aab3: adc al, ch; xlatb; ret 6; 
0x00000000000d9b6d: adc bh, byte ptr [rdx + 0x45db833f]; ret 0x961a; 
0x0000000000043164: adc bh, cl; or dword ptr [rax], eax; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002a6d3: adc bh, dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000015ca7: adc bl, bl; cmp al, 0x24; call 0xc410; add rsp, 0x28; ret; 
0x000000000000d121: adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000cb8a: adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x0000000000019e88: adc bl, bl; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000000cd481: adc bl, byte ptr [rax + rax + 0x7b20ab]; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x000000000003d1fa: adc bl, byte ptr [rcx + 0x40f60004]; jp 0x3d20a; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x0000000000194a21: adc bl, ch; jmp qword ptr [rcx + 1]; 
0x000000000004ddfb: adc bl, dh; addps xmm0, xmm0; pop rbx; ret; 
0x0000000000055db5: adc bl, dh; movups xmmword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e54: adc bl, dh; movups xmmword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000056999: adc bl, dh; movups xmmword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b7: adc bl, dh; movups xmmword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000004ddeb: adc bl, dh; mulps xmm0, xmm2; pop rbx; ret; 
0x00000000000ca39c: adc bl, dl; call 0xffffffffd64445e2; ret; 
0x000000000007bab5: adc byte ptr [r13 + 0xa], sil; add rsp, 0x38; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000075ae1: adc byte ptr [r13 + 9], sil; add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x000000000010d1c8: adc byte ptr [r15 + rbp*8 - 0x6b], r9b; pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x00000000000758d6: adc byte ptr [r15], cl; test dword ptr [rdi + 0x48000001], ecx; add esp, 0x50; pop rbx; ret; 
0x00000000000de7e0: adc byte ptr [rax + 0x16], 0xd2; ret; 
0x0000000000069803: adc byte ptr [rax + 0x21], cl; ret; 
0x0000000000017f86: adc byte ptr [rax + 0x403d80f4], al; rol byte ptr [rax], 0; jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x000000000002a5f5: adc byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000001aa03: adc byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000068a06: adc byte ptr [rax + 9], cl; ret 0x8948; 
0x00000000000830cb: adc byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001a17b: adc byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x00000000000a7f38: adc byte ptr [rax - 0x3c], ah; ret; 
0x00000000000a3f06: adc byte ptr [rax - 0x3c], dh; ret; 
0x00000000000a8fad: adc byte ptr [rax - 0x3c], dl; ret; 
0x00000000000a3f05: adc byte ptr [rax - 0x3c], sil; ret; 
0x00000000000f1371: adc byte ptr [rax - 0x41], bl; mov ebp, 0x383fd5d1; ret 0xc9c7; 
0x000000000001320b: adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000009d6b3: adc byte ptr [rax - 0x77], cl; ret 0xebc5; 
0x0000000000199914: adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rcx + 0x61040000], cl; int1; call qword ptr [rbp + 5]; 
0x0000000000198dbc: adc byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rsi], bh; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x00000000000b526c: adc byte ptr [rax], al; add ch, al; jns 0xb52a0; ret; 
0x000000000008968b: adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000830c5: adc byte ptr [rbp + 0x44], dh; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d2c0: adc byte ptr [rbp + 0x77], al; mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x000000000007bab6: adc byte ptr [rbp + 0xa], dh; add rsp, 0x38; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000005700d: adc byte ptr [rbp + 0xe], dh; mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000005118d: adc byte ptr [rbp + 0xe], dh; mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000049891: adc byte ptr [rbp + 0xe], dh; mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000075ae2: adc byte ptr [rbp + 9], dh; add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x00000000001035f0: adc byte ptr [rbp + rcx*2 - 0x7e], cl; adc al, 0x81; cmc; ret; 
0x000000000001b1e4: adc byte ptr [rbp - 0x3ffe7f], cl; jmp qword ptr [rsi - 0x7d]; 
0x00000000000186e7: adc byte ptr [rbp - 0x52], dh; pop rbx; ret; 
0x000000000010d383: adc byte ptr [rbp - 0xa], bl; ret; 
0x00000000000f0d1e: adc byte ptr [rbp], bh; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x00000000000cadb0: adc byte ptr [rbx + 0x35], bh; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x0000000000190a20: adc byte ptr [rbx + 0x38080000], cl; out dx, eax; jmp qword ptr [rax - 0x75]; 
0x000000000007de89: adc byte ptr [rbx + 0x66], bl; movq mm0, mm2; ret; 
0x00000000001966d0: adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000000161e7: adc byte ptr [rbx - 0x22], bl; leave; ret; 
0x000000000004dd74: adc byte ptr [rbx - 0xd], bl; divps xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x000000000002e062: adc byte ptr [rbx - 0xe], bl; mulps xmm0, xmm2; ret; 
0x000000000010ea8d: adc byte ptr [rbx], al; shr ch, 0x7f; mov dl, 0xbc; jb 0x10ea3b; ret 0x576; 
0x000000000010e73a: adc byte ptr [rcx + 0x41], cl; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x00000000000161df: adc byte ptr [rcx + 0x59], al; pop r10; add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000000cd77: adc byte ptr [rcx + 0xe6c7], al; add bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x00000000000c968f: adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000502b3: adc byte ptr [rcx], bh; ror dword ptr [rbp - 0x60f0febf], 1; ret 0xd284; 
0x000000000001b6a4: adc byte ptr [rcx], bl; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000001978a0: adc byte ptr [rcx], ch; add byte ptr [rdx + rbx*2 - 0x12], cl; call qword ptr [rax]; 
0x00000000000151fc: adc byte ptr [rcx], cl; ret; 
0x00000000000f13fa: adc byte ptr [rdi + 0x3d2e9e43], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x000000000010d1c9: adc byte ptr [rdi + rbp*8 - 0x6b], cl; pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x0000000000051982: adc byte ptr [rdi], al; movd eax, xmm0; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x00000000000d4eba: adc byte ptr [rdi], ch; jmp rcx; 
0x000000000001279f: adc byte ptr [rdi], cl; add eax, 0xb932d; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000011bff: adc byte ptr [rdi], cl; add eax, 0xb9ecd; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011b7f: adc byte ptr [rdi], cl; add eax, 0xb9f4d; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x00000000000703ba: adc byte ptr [rdi], cl; mov al, ah; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000007718d: adc byte ptr [rdi], cl; test byte ptr [rax + 0xf660000], bh; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000076b53: adc byte ptr [rdi], cl; test dword ptr [rbp + 0x48000002], ecx; add esp, 0x50; pop rbx; ret; 
0x00000000000758d7: adc byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], ecx; add esp, 0x50; pop rbx; ret; 
0x0000000000079fa4: adc byte ptr [rdi], cl; test dword ptr [rsi + 0x48000003], eax; add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000042400: adc byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x0000000000040fd3: adc byte ptr [rdi], cl; xchg dword ptr [rsi], esp; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000007168a: adc byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x00000000000f08b1: adc byte ptr [rdi], dh; ret; 
0x000000000005b50c: adc byte ptr [rdx + 0x6be8000a], ah; ret; 
0x000000000004a8de: adc byte ptr [rdx + rax*4], al; ret; 
0x0000000000027e82: adc byte ptr [rdx + rax*8], al; ret; 
0x00000000001063fa: adc byte ptr [rdx + rdx*4 - 0x4400957], al; ret 0x6c54; 
0x0000000000100c76: adc byte ptr [rdx], al; add byte ptr [rax], al; mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x000000000009c0d6: adc byte ptr [rip + 0x2e124], cl; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009c8b2: adc byte ptr [rip + 0x2ea08], al; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009b2a2: adc byte ptr [rip + 0x30018], al; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000b01d3: adc byte ptr [rip + 0x33547], dl; vmovapd xmm0, xmm2; ret; 
0x0000000000099be3: adc byte ptr [rip + 0x49b37], dl; vmovapd xmm0, xmm2; ret; 
0x0000000000080283: adc byte ptr [rip + 0x63497], dl; movapd xmm0, xmm2; ret; 
0x000000000005617e: adc byte ptr [rip + 0x762ec], cl; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000004f962: adc byte ptr [rip + 0x7a898], cl; add rsp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004eb02: adc byte ptr [rip + 0x7b6f8], cl; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000004d6ae: adc byte ptr [rip + 0x7cb4c], cl; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fd87: adc byte ptr [rip + 0x7cf8b], al; mulss xmm0, xmm1; ret; 
0x000000000005003c: adc byte ptr [rip + 0x7f98e], dl; ucomiss xmm2, xmm1; jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x000000000004a572: adc byte ptr [rip + 0x7fc88], cl; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x0000000000020c76: adc byte ptr [rip + 0x7fff], ah; cmp eax, 0x3fbe; jge 0x20c88; fld1; faddp st(1); ret; 
0x000000000004a676: adc byte ptr [rip + 0x80b50], cl; add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5ce: adc byte ptr [rip + 0x80bf8], cl; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004953a: adc byte ptr [rip + 0x81d50], al; ret; 
0x0000000000049532: adc byte ptr [rip + 0x82568], cl; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x000000000004951e: adc byte ptr [rip + 0x8257c], al; movapd xmm1, xmm0; ret; 
0x0000000000048abb: adc byte ptr [rip + 0x827cf], al; add rsp, 0x40; pop rbx; ret; 
0x00000000000489b2: adc byte ptr [rip + 0x828d8], al; ret; 
0x0000000000048ec2: adc byte ptr [rip + 0x82bd8], al; movapd xmm1, xmm0; ret; 
0x00000000000489aa: adc byte ptr [rip + 0x830f0], cl; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x0000000000048996: adc byte ptr [rip + 0x83104], al; movapd xmm1, xmm0; ret; 
0x00000000000478f2: adc byte ptr [rip + 0x841a8], al; movapd xmm1, xmm0; ret; 
0x00000000000474df: adc byte ptr [rip + 0x845bb], cl; movapd xmm0, xmm2; ret; 
0x00000000000474ab: adc byte ptr [rip + 0x845ef], al; movapd xmm1, xmm0; ret; 
0x0000000000045b32: adc byte ptr [rip + 0x85f68], al; movapd xmm1, xmm0; ret; 
0x0000000000045aee: adc byte ptr [rip + 0x85fac], cl; ret; 
0x0000000000044fda: adc byte ptr [rip + 0x862b0], al; ret; 
0x0000000000044fa2: adc byte ptr [rip + 0x862e8], al; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000044fd2: adc byte ptr [rip + 0x86ac8], cl; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000042f02: adc byte ptr [rip + 0x920d8], cl; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x0000000000043162: adc byte ptr [rip + 0x9cf10], cl; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043190: adc byte ptr [rip + 0xa0582], cl; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000028f7a: adc byte ptr [rip + 0xa2340], al; ret; 
0x000000000002845a: adc byte ptr [rip + 0xa2e60], al; ret; 
0x000000000003207a: adc byte ptr [rip + 0xa2f60], dl; ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000002709b: adc byte ptr [rip + 0xa421f], cl; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000271cf: adc byte ptr [rip + 0xa48d3], cl; add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002710f: adc byte ptr [rip + 0xa4993], cl; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000009c416: adc byte ptr [rip + 0xa6acc], al; vfmadd213sd xmm0, xmm2, qword ptr [rip + 0xa6e7b]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009b932: adc byte ptr [rip + 0xa78c8], al; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b911: adc byte ptr [rip + 0xa78e9], cl; movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000003d12e: adc byte ptr [rip + 0xaa484], al; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x0000000000031b5f: adc byte ptr [rip + 0xae513], al; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000031ae4: adc byte ptr [rip + 0xae58e], cl; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x0000000000051009: adc byte ptr [rip + 0xaf3a5], cl; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005102e: adc byte ptr [rip + 0xaf3a8], cl; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051912: adc byte ptr [rip + 0xaf804], al; ret; 
0x00000000000501cd: adc byte ptr [rip + 0xb03bd], al; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004fdc1: adc byte ptr [rip + 0xb05ed], al; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004fe22: adc byte ptr [rip + 0xb0768], al; ret; 
0x000000000004fc40: adc byte ptr [rip + 0xb076e], cl; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004fafa: adc byte ptr [rip + 0xb08dc], cl; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004ff1d: adc byte ptr [rip + 0xb0951], al; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecca: adc byte ptr [rip + 0xb16ac], al; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x00000000000320f6: adc byte ptr [rip + 0xb1984], al; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x0000000000031ce2: adc byte ptr [rip + 0xb1d98], al; ret; 
0x000000000004eea2: adc byte ptr [rip + 0xb1e60], al; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000031c48: adc byte ptr [rip + 0xb2282], al; mulsd xmm0, xmm1; ret; 
0x000000000004d34d: adc byte ptr [rip + 0xb3521], al; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x000000000003200e: adc byte ptr [rip + 0xb55a4], al; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x000000000004a5ab: adc byte ptr [rip + 0xb5e03], cl; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004a2a6: adc byte ptr [rip + 0xb6130], dl; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000049ffa: adc byte ptr [rip + 0xb63ac], cl; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x0000000000049ea8: adc byte ptr [rip + 0xb64c2], al; subss xmm0, xmm1; ret; 
0x0000000000049de4: adc byte ptr [rip + 0xb658e], al; subss xmm0, xmm1; ret; 
0x0000000000049d2a: adc byte ptr [rip + 0xb6644], al; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c18: adc byte ptr [rip + 0xb675e], al; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x00000000000270e5: adc byte ptr [rip + 0xb8f8d], cl; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000002922b: adc byte ptr [rip + 0xbab87], ch; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002c4e6: adc byte ptr [rip + 0xbb0cc], al; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x000000000002870b: adc byte ptr [rip + 0xbb30f], ch; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000019e63: adc byte ptr [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x000000000007ce87: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x000000000007c455: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000070156: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000068c77: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000718d3: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x000000000007de49: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc35b; 
0x00000000000653b1: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc5e8; 
0x0000000000069276: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000786fb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xfbe8; 
0x000000000005850c: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000069ae7: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000057df1: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x91e8; 
0x0000000000072f8f: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xf3e8; 
0x0000000000071c0f: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x000000000007799c: adc byte ptr [rsi - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000ef628: adc byte ptr [rsi], 0x51; xchg ebx, eax; call rdx; 
0x00000000000afb3d: adc byte ptr [rsi], al; add ah, al; ret; 
0x0000000000037402: adc byte ptr [rsp + 0x18], al; jne 0x37412; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x0000000000092e12: adc byte ptr [rsp + 0x18], al; jne 0x92e22; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000a9452: adc byte ptr [rsp + 0x18], al; jne 0xa9462; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000bd7f2: adc byte ptr [rsp + 0x18], al; jne 0xbd802; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000526ae: adc byte ptr [rsp + 0x18], cl; movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000052e4b: adc byte ptr [rsp + 0x1c], cl; movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000011cd3: adc byte ptr [rsp + 0xc], ah; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x00000000000570ba: adc byte ptr [rsp + 0xc], al; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000011b17: adc byte ptr [rsp + 0xc], dl; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000012427: adc byte ptr [rsp + 0xc], dl; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000012667: adc byte ptr [rsp + 0xc], dl; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x00000000000126fe: adc byte ptr [rsp + 0xc], dl; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x000000000000e6b3: adc byte ptr [rsp + 8], ah; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000049942: adc byte ptr [rsp + 8], al; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000044e44: adc byte ptr [rsp + 8], al; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x000000000004dde4: adc byte ptr [rsp + 8], dl; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x000000000004d618: adc byte ptr [rsp - 0x10], al; addss xmm0, xmm1; ret; 
0x0000000000043ef7: adc byte ptr [rsp - 0x10], al; ret; 
0x000000000009c048: adc byte ptr [rsp - 0x10], bh; vaddss xmm0, xmm7, xmm1; ret; 
0x00000000000435cc: adc byte ptr [rsp - 0x18], al; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000000323ce: adc byte ptr [rsp - 0x18], al; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000003235d: adc byte ptr [rsp - 0x20], al; ret; 
0x000000000004d232: adc byte ptr [rsp - 0xc], al; ret; 
0x00000000000525c8: adc byte ptr [rsp - 4], al; ret; 
0x00000000000525d8: adc byte ptr [rsp - 8], al; ret; 
0x000000000003221d: adc byte ptr [rsp - 8], cl; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000525a5: adc byte ptr [rsp - 8], cl; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042eed: adc byte ptr [rsp], cl; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002e05c: adc byte ptr [rsp], dl; add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x0000000000113afc: adc ch, al; mov bh, byte ptr [rdi]; out 0x2e, eax; or esi, esp; ret; 
0x00000000000ba81f: adc ch, al; ret; 
0x00000000000c2f4a: adc ch, al; sti; pop rsp; ret 0xfbc5; 
0x0000000000086695: adc ch, byte ptr [rcx + 0x7fffffff]; mov edx, 0x80000000; mov eax, 0xbf800000; cmovne edx, eax; movd xmm0, edx; ret; 
0x00000000000dc150: adc ch, byte ptr [rsi - 0x22ce4b49]; cmp al, 0x11; ret 0xead4; 
0x0000000000196ed0: adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x00000000000e4ccb: adc cl, al; mov ebx, 0xa83abba3; cmpsb byte ptr [rsi], byte ptr [rdi]; add dh, cl; call qword ptr [rbx]; 
0x0000000000049651: adc cl, al; ret; 
0x000000000009cd2b: adc cl, al; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000012927: adc cl, bl; rcr dh, 0xe1; fdiv st(0); add rsp, 0x18; ret; 
0x00000000000bf482: adc cl, byte ptr [rax]; add byte ptr [rbp + 0x59e3c5c0], al; faddp st(5); sti; pop rcx; ret; 
0x00000000000bf494: adc cl, byte ptr [rax]; add ch, al; sti; pop rcx; ret; 
0x000000000010ef33: adc cl, byte ptr [rbp - 0x356d4f95]; ret 0x3290; 
0x000000000010da39: adc cl, byte ptr [rbx + 0xe5d5c9]; ror byte ptr [rax - 0x1c], 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x00000000000b017e: adc cl, byte ptr [rdi]; rol dword ptr [r11 - 0x71f0dd06], 1; add eax, 0xc5000001; stc; sub dl, al; ret; 
0x000000000008022e: adc cl, byte ptr [rdi]; rol dword ptr [r11 - 0x71f0dd06], 1; xchg dword ptr [rcx], eax; add byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x0000000000002502: adc cl, byte ptr [rdi]; xchg ebx, eax; mov dl, dh; mov esp, 0x14843efa; ret; 
0x00000000000775af: adc dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000056dbf: adc dh, bl; movups xmmword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056dff: adc dh, bl; movups xmmword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000013751: adc dh, bl; stc; ret; 
0x000000000004337d: adc dh, byte ptr [rcx]; sar byte ptr [rdx + 1], 0x66; ucomiss xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x00000000000fc7c4: adc dh, cl; ret 0x9f3f; 
0x000000000019a470: adc dh, dh; bnd call qword ptr [rbp + 7]; 
0x000000000010bdf9: adc dh, dh; jmp rax; 
0x0000000000049641: adc dh, dl; movups xmmword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049681: adc dh, dl; movups xmmword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000fd1a5: adc dl, 0x3f; test byte ptr [rax], bh; pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x0000000000105c08: adc dl, byte ptr [rbp + 0x15e605ec]; call 0xffffffffda108a52; ret; 
0x000000000010046c: adc dl, byte ptr [rcx + 0x68]; ret 0xba52; 
0x000000000002e073: adc dl, dh; addps xmm0, xmm0; pop rbx; ret; 
0x000000000004923d: adc dl, dh; mulps xmm1, xmmword ptr [rip + 0x9e38a]; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000010d02e: adc dword ptr [rax + 0x31], eax; shl byte ptr [rdx - 0x51], 1; ret 0x59a6; 
0x00000000000e37f8: adc dword ptr [rax - 0x4d6903c9], 0x9b7e4065; ret; 
0x0000000000192131: adc dword ptr [rax], eax; add byte ptr [rsp + rdx - 0x18], bh; jmp qword ptr [rcx + 2]; 
0x0000000000089614: adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000010b770: adc dword ptr [rbp + 0x3e], edi; xor dword ptr [rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x0000000000113b75: adc dword ptr [rbx - 0x4f], ecx; ret; 
0x000000000004973b: adc dword ptr [rbx], ecx; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000d7856: adc dword ptr [rcx + rax*2], edi; push rbp; adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000a401c: adc dword ptr [rcx + rbp*8 - 0x3c], edx; ret; 
0x00000000000043f0: adc dword ptr [rcx], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 7; 
0x000000000001aff7: adc dword ptr [rcx], esi; ret 0x1b8; 
0x00000000000e76e3: adc dword ptr [rdi + 0x1c], esi; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x00000000001352bc: adc dword ptr [rdi + 5], ebp; jge 0x135337; ret; 
0x00000000001639fc: adc dword ptr [rdi + 5], ebp; jge 0x163a77; ret; 
0x00000000000d4afc: adc dword ptr [rdi + 5], ebp; jge 0xd4b77; ret; 
0x0000000000099318: adc dword ptr [rdi + 8], ebp; ret; 
0x000000000007ea01: adc dword ptr [rdi + 8], ecx; ret; 
0x000000000007f455: adc dword ptr [rdi + 8], edi; ret; 
0x000000000007ff17: adc dword ptr [rdi + 8], esi; ret; 
0x00000000000eb132: adc dword ptr [rdi - 0x11], esi; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x00000000000e9b36: adc dword ptr [rdi - 0x80000000], edi; xlatb; call qword ptr [rcx]; 
0x000000000007e9f9: adc dword ptr [rdi], eax; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000007f44d: adc dword ptr [rdi], eax; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000050f45: adc dword ptr [rdi], eax; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000043063: adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000050f8d: adc dword ptr [rdi], eax; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000044070: adc dword ptr [rdi], eax; ret; 
0x000000000009b6b2: adc dword ptr [rdi], eax; shufps xmm0, xmm0, 1; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b919: adc dword ptr [rdi], eax; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x0000000000098de0: adc dword ptr [rdi], eax; vaddsd xmm1, xmm3, xmm1; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000009cd33: adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000007ff0f: adc dword ptr [rdi], ecx; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x00000000000430e4: adc dword ptr [rdi], ecx; ret; 
0x00000000000430c5: adc dword ptr [rdi], ecx; subsd xmm0, xmm1; ret; 
0x0000000000050f62: adc dword ptr [rdi], ecx; subss xmm0, xmm1; ret; 
0x0000000000099310: adc dword ptr [rdi], ecx; vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x000000000009b93a: adc dword ptr [rdi], edi; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b976: adc dword ptr [rdi], edi; movss dword ptr [rsi], xmm7; ret; 
0x00000000000d785b: adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000640d3: adc dword ptr [rdx], ecx; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000640f8: adc dword ptr [rdx], ecx; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5ce8; 
0x000000000004f891: adc dword ptr [rip + 0xff3000b], 0x59; ret; 
0x000000000007c611: adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x00000000000af7eb: adc dword ptr [rsi + rax], edx; add ah, al; ret; 
0x000000000001c71b: adc dword ptr [rsi], eax; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000009b6ba: adc dword ptr [rsi], eax; ret; 
0x000000000009b6d6: adc dword ptr [rsi], eax; shufps xmm0, xmm0, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000007e416: adc dword ptr [rsi], ecx; jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x000000000009b921: adc dword ptr [rsi], ecx; ret; 
0x000000000009cd5b: adc dword ptr [rsi], ecx; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009b97a: adc dword ptr [rsi], edi; ret; 
0x000000000009cb2b: adc dword ptr [rsi], esi; ret; 
0x0000000000051249: adc dword ptr [rsi], esp; ret; 
0x0000000000056996: adc dword ptr [rsp + 0x10], eax; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b4: adc dword ptr [rsp + 0x10], eax; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000002a5f2: adc dword ptr [rsp + 0x10], ebx; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000055db2: adc dword ptr [rsp + 0x10], ecx; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e51: adc dword ptr [rsp + 0x10], ecx; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000055db8: adc dword ptr [rsp + 0x14], eax; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e57: adc dword ptr [rsp + 0x14], eax; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000005699c: adc dword ptr [rsp + 0x14], ecx; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526ba: adc dword ptr [rsp + 0x14], ecx; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000528db: adc dword ptr [rsp + 0x20], eax; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000528e1: adc dword ptr [rsp + 0x24], ecx; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000056200: adc dword ptr [rsp + 0x40], ecx; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d0e: adc dword ptr [rsp + 0x40], edx; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000056206: adc dword ptr [rsp + 0x44], ebx; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d14: adc dword ptr [rsp + 0x44], ebx; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x00000000000549e5: adc dword ptr [rsp + 0x50], esp; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000549eb: adc dword ptr [rsp + 0x54], ebp; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000525ab: adc dword ptr [rsp - 0x10], ecx; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005333d: adc dword ptr [rsp - 0x24], ebx; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000053337: adc dword ptr [rsp - 0x28], ecx; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x00000000000525b1: adc dword ptr [rsp - 0xc], eax; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000056dc2: adc dword ptr [rsp - 4], eax; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056e02: adc dword ptr [rsp - 4], eax; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056dd9: adc dword ptr [rsp - 4], ecx; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e19: adc dword ptr [rsp - 4], ecx; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x00000000000c453c: adc dword ptr [rsp - 4], esp; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000049644: adc dword ptr [rsp - 8], eax; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049684: adc dword ptr [rsp - 8], eax; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000c4536: adc dword ptr [rsp - 8], ecx; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004965c: adc dword ptr [rsp - 8], ecx; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x000000000004969c: adc dword ptr [rsp - 8], ecx; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x00000000000d8ae6: adc eax, 0x10bc363c; movsx ebx, dl; ret; 
0x000000000004a53d: adc eax, 0x280f0008; ret 0xa8eb; 
0x0000000000109c01: adc eax, 0x2c59642a; or dword ptr [rbx + 0x781fe0e1], eax; mov edx, 0x89bff1fa; call qword ptr [rax + 0x3a]; 
0x00000000000b01d4: adc eax, 0x33547; vmovapd xmm0, xmm2; ret; 
0x000000000005035d: adc eax, 0x34cc56; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x0000000000050b99: adc eax, 0x35f82; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507b9: adc eax, 0x363a2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050429: adc eax, 0x36712; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe49: adc eax, 0x36cb2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f079: adc eax, 0x37a62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x00000000000d4a93: adc eax, 0x402077e5; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000008d3e1: adc eax, 0x41c40000; jnp 0x8d444; ret; 
0x00000000000beaac: adc eax, 0x41c40002; jns 0xbeadb; ret 0xc1c4; 
0x000000000007c932: adc eax, 0x441f0f; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x30; add rsp, 0x48; ret; 
0x00000000000b16e8: adc eax, 0x48000003; add esp, 0x28; ret; 
0x00000000000a1c64: adc eax, 0x4800000d; add esp, 0x48; ret; 
0x000000000001dec7: adc eax, 0x48000b1b; add esp, 0x58; fxch st(1); ret; 
0x000000000003d1f9: adc eax, 0x49912; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x0000000000099be4: adc eax, 0x49b37; vmovapd xmm0, xmm2; ret; 
0x000000000003cd09: adc eax, 0x49e42; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000000e562: adc eax, 0x52e0f66; int 0xb; add byte ptr [rdx + 2], bh; je 0xe578; add rsp, 0x18; ret; 
0x0000000000032439: adc eax, 0x546f2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d09: adc eax, 0x54de2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d69: adc eax, 0x55d62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x0000000000080284: adc eax, 0x63497; movapd xmm0, xmm2; ret; 
0x0000000000050f42: adc eax, 0x7110ff3; and eax, 0x80000000; movd xmm0, eax; ret; 
0x000000000010d1d3: adc eax, 0x721fe096; sbb dword ptr [rcx], edi; ret; 
0x00000000000e5564: adc eax, 0x7b3f61bb; pop rbx; ret; 
0x000000000005003d: adc eax, 0x7f98e; ucomiss xmm2, xmm1; jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x000000000004a8d4: adc eax, 0x809c7; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000004aa52: adc eax, 0x81069; add rsp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm2; ret; 
0x00000000000474d8: adc eax, 0x83e03; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x000000000008046a: adc eax, 0x8548c031; leave; setne al; neg eax; ret; 
0x000000000010fc00: adc eax, 0x94134a4b; sal bl, 1; ret 0x3ffd; 
0x00000000000ac00c: adc eax, 0x9457e; and ch, al; sti; pop rax; ret; 
0x00000000000abaec: adc eax, 0x94ac6; and ch, al; sti; pop rax; ret; 
0x00000000000ab657: adc eax, 0x94f43; and ch, al; sti; pop rax; ret; 
0x00000000000aaf9e: adc eax, 0x9563c; and ch, al; sti; pop rax; ret; 
0x00000000000aaa8b: adc eax, 0x95b7f; and ch, al; sti; pop rax; ret; 
0x00000000000aa45a: adc eax, 0x96170; and ch, al; sti; pop rax; ret; 
0x00000000000a98bb: adc eax, 0x96d77; and ch, al; sti; pop rax; ret; 
0x000000000006c4d9: adc eax, 0x9f936; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006c407: adc eax, 0x9f9e4; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003207b: adc eax, 0xa2f60; ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x0000000000064437: adc eax, 0xa3c44; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009c84b: adc eax, 0xa66d8; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6a57]; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c854: adc eax, 0xa6a57; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c3d3: adc eax, 0xa6ec0; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000010e375: adc eax, 0xa7dfedb0; adc ebp, r15d; cmc; add eax, 0x5f98c940; ret; 
0x00000000000eaa44: adc eax, 0xadbd3b55; ret 0xd64e; 
0x000000000004e877: adc eax, 0xb1b18; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004d332: adc eax, 0xb354d; add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000004c99a: adc eax, 0xb3dcd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c895: adc eax, 0xb3eb6; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004a2af: adc eax, 0xb60f8; pop rbx; movaps xmm0, xmm2; ret; 
0x000000000004a2a7: adc eax, 0xb6130; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000015632: adc eax, 0xb76cd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000153f4: adc eax, 0xb78ef; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000001608a: adc eax, 0xb7fa1; fld qword ptr [rdx + rax]; ret; 
0x000000000002a84e: adc eax, 0xb9669; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000027e77: adc eax, 0xbb8c4; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x00000000000e83bb: adc eax, 0xbd2092e2; out dx, eax; sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x000000000010fbf6: adc eax, 0xbfbcf2; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rip - 0x6becb5b5], dl; sal bl, 1; ret 0x3ffd; 
0x00000000000bd45f: adc eax, 0xc50003f4; ret; 
0x00000000000c6eb7: adc eax, 0xc8528; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x00000000000d0bb9: adc eax, 0xcd1a7264; ret 0xec3f; 
0x00000000000eb95c: adc eax, 0xd0bd392f; ret 0x66e8; 
0x0000000000001be6: adc eax, 0xd16fa95; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000000de259: adc eax, 0xda36ada4; mov cl, 0xbf; ret 0x34bb; 
0x0000000000016f97: adc eax, 0xde000b73; ret 0xc9dc; 
0x00000000000da938: adc eax, 0xe0693e00; leave; in al, 0x3f; wait; cmc; jmp qword ptr [rax - 0x35]; 
0x00000000000ebeae: adc eax, 0xe120003f; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x0000000000015e7e: adc eax, 0xf824448b; mov edx, dword ptr [rsp - 4]; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x000000000004f7e8: adc eax, 0xff3000b; pop rcx; ret; 
0x000000000009a778: adc eax, dword ptr [rbx]; add ch, al; sti; pop rcx; ret; 
0x0000000000113b73: adc eax, edx; adc dword ptr [rbx - 0x4f], ecx; ret; 
0x0000000000100438: adc ebp, dword ptr [rax - 0x7d]; jns 0x100475; lodsd eax, dword ptr [rsi]; ret; 
0x000000000012c421: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c1: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac41: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af01: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece1: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a81: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e1: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8781: adc ebp, dword ptr [rsi]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x00000000000cc0b1: adc ebp, dword ptr [rsp + riz*2]; je 0xcc117; ret 0xfb98; 
0x0000000000015e23: adc ebp, ebx; add eax, 0xb5496; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x000000000018fb8d: adc ebp, ecx; dec dword ptr [rax]; add byte ptr [r8], al; clc; adc ebp, ecx; jmp qword ptr [rax]; 
0x000000000018fb95: adc ebp, ecx; jmp qword ptr [rax]; 
0x000000000010e37b: adc ebp, edi; cmc; add eax, 0x5f98c940; ret; 
0x0000000000195f21: adc ebp, esp; call qword ptr [rsi + 0xa]; 
0x0000000000072b09: adc ebp, esp; or byte ptr [rax], al; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000010e37a: adc ebp, r15d; cmc; add eax, 0x5f98c940; ret; 
0x00000000000b1f4f: adc ebx, dword ptr [r10 + rbp*8 - 0x3c]; jns 0xb1f7f; ret 0x41c4; 
0x000000000009521b: adc ebx, dword ptr [r10 + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab817: adc ebx, dword ptr [r10 + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x0000000000095220: adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab81c: adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x0000000000095221: adc ebx, dword ptr [rax + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab81d: adc ebx, dword ptr [rax + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x00000000000bfbb0: adc ebx, dword ptr [rax + rbp*8 - 0x3b]; sub dword ptr [rbx + rdx*8 - 0x3b], edx; ret; 
0x00000000000b1d8e: adc ebx, dword ptr [rcx + rbp*8 - 0x3b]; ret; 
0x00000000000b3603: adc ebx, dword ptr [rdi + rbp*8 - 0x3b]; ret; 
0x00000000000b1f50: adc ebx, dword ptr [rdx + rbp*8 - 0x3c]; jns 0xb1f7f; ret 0x41c4; 
0x000000000009521c: adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab818: adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x00000000001012b3: adc ebx, dword ptr [rsi - 0x17468c34]; test eax, 0x29cd7378; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000099209: adc ebx, dword ptr [rsp + rdi*8 - 0x3b]; ret; 
0x00000000000cc1b0: adc ebx, ebx; test ah, bh; ret 0x3d6f; 
0x00000000000dc0ab: adc ebx, edx; ret; 
0x0000000000012bd9: adc ecx, dword ptr [rdi - 0x1e21fff5]; jns 0x12b49; fchs; ret; 
0x00000000000670b5: adc ecx, dword ptr [rdx]; add al, ch; ret; 
0x00000000000d5e19: adc edi, dword ptr [rdi + 0x52]; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000fcd4b: adc edi, ebx; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000001be22: adc edi, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000007da98: adc edi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000772ea: adc edi, esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000103b91: adc edx, dword ptr [rax + 0x29]; mov byte ptr [rdx - 0x2014567e], ch; call rax; 
0x00000000000eb6a8: adc edx, edi; ret 0xb2e5; 
0x00000000000d7cb4: adc esi, dword ptr [rbx + rbp + 0x3c]; ret; 
0x00000000000f0c93: adc esi, dword ptr [rbx - 0x64c02cad]; insd dword ptr [rdi], dx; ret 0xafe6; 
0x0000000000190e25: adc esi, edx; call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x00000000000fc66d: adc esp, dword ptr [rdi - 0x40]; and ch, byte ptr [rax]; test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x00000000000edd3d: adc esp, dword ptr [rdi]; mov ebp, 0; add byte ptr [rax + rsi*8 + 0x3f], al; hlt; mov cl, 0xfc; ret 0x5e0f; 
0x0000000000031b61: adc esp, ebp; or al, byte ptr [rax]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000012c420: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c0: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac40: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af00: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece0: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a80: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e0: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8780: adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x00000000000c2f49: adc r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x00000000000cc0b0: adc r13d, dword ptr [r12 + r12*2]; je 0xcc117; ret 0xfb98; 
0x0000000000100437: adc r13d, dword ptr [r8 - 0x7d]; jns 0x100475; lodsd eax, dword ptr [rsi]; ret; 
0x00000000000d9b6c: adc r15b, byte ptr [r10 + 0x45db833f]; ret 0x961a; 
0x000000000010d09d: adc r8b, byte ptr [rax + 7]; sbb eax, 0x9144ab1a; jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x0000000000109c00: adc rax, 0x2c59642a; or dword ptr [rbx + 0x781fe0e1], eax; mov edx, 0x89bff1fa; call qword ptr [rax + 0x3a]; 
0x00000000000775ae: adc sil, r15b; jmp qword ptr [rsi + 0xf]; 
0x00000000000a781e: add ah, 0x63; loope 0xa788e; add eax, 0x54fff; add ch, 0x3b; pop rcx; ret; 
0x00000000000a704a: add ah, 0x63; test eax, 0xc4c0d37b; ret; 
0x00000000000a4849: add ah, 0xc1; jnp 0xa48a6; ret; 
0x0000000000193073: add ah, ah; and byte ptr [rax], al; add al, bl; jl 0x193063; call qword ptr [rbx + 1]; 
0x000000000008ce6d: add ah, al; jnp 0x8cece; ret 0x3bc5; 
0x000000000008cf83: add ah, al; jnp 0x8cfe4; ret; 
0x000000000008d3e3: add ah, al; jnp 0x8d444; ret; 
0x00000000000a3153: add ah, al; jnp 0xa31b4; ret 0x3bc5; 
0x00000000000a3278: add ah, al; jnp 0xa32d9; ret; 
0x00000000000a36b7: add ah, al; jnp 0xa3718; ret; 
0x000000000009fc44: add ah, al; jns 0x9fc71; fadd st(4); ret; 
0x00000000000beaae: add ah, al; jns 0xbeadb; ret 0xc1c4; 
0x000000000009a44e: add ah, al; loope 0x9a44d; sub al, 4; ret 0x894c; 
0x00000000000b0a3e: add ah, al; loope 0xb0a3d; sub al, 4; ret 0x894c; 
0x0000000000199953: add ah, al; mov dword ptr [rax], eax; add byte ptr [rax + 0x67], ch; int1; jmp qword ptr [rbx + 2]; 
0x00000000000a3351: add ah, al; pop r11; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x00000000000948d5: add ah, al; pop r12; ret; 
0x00000000000a4ea7: add ah, al; push r11; pop rsp; ret; 
0x0000000000087bc8: add ah, al; ret 0x99e1; 
0x000000000008f38a: add ah, al; ret 0x9dd9; 
0x00000000000a08b7: add ah, al; ret; 
0x000000000009507f: add ah, al; sal dword ptr [rbx], 0x59; ret 0x94e9; 
0x00000000000ab687: add ah, al; sal dword ptr [rbx], 0x59; ret 0xcce9; 
0x000000000008890c: add ah, al; shl dword ptr [rbx], 0x59; ret 0xf3c5; 
0x0000000000091b15: add ah, al; shr dword ptr [rbx], 0x59; ret 0x2bc5; 
0x0000000000191f53: add ah, al; sldt word ptr [rax]; cwde; or al, ch; call rsp; 
0x0000000000197873: add ah, bl; pop rcx; out dx, al; call qword ptr [rax]; 
0x0000000000199243: add ah, bl; xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x000000000019a46b: add ah, bl; xchg esp, eax; add byte ptr [rax], al; adc dh, dh; bnd call qword ptr [rbp + 7]; 
0x0000000000015e3a: add ah, bl; xor eax, 0xb5c77; ret; 
0x0000000000015e29: add ah, bl; xor eax, 0xb5c88; fchs; ret; 
0x00000000000e905b: add ah, byte ptr [rax + rax + 0x24]; mov edi, 0x46efc0ec; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x00000000000eb135: add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x0000000000020995: add ah, byte ptr [rcx]; add byte ptr [rax], al; add bl, dh; divps xmm0, xmm0; add rsp, 8; ret; 
0x0000000000070d64: add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000019117b: add ah, ch; add dword ptr [rax], eax; add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x000000000019975b: add ah, cl; xchg dword ptr [rax], eax; add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x00000000001037c3: add ah, cl; xlatb; ret 0xffbb; 
0x0000000000195983: add ah, dh; add byte ptr [r8], al; clc; ret; 
0x0000000000195783: add ah, dh; add byte ptr [r8], r8b; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000196863: add ah, dl; pop rax; add byte ptr [rax], al; xchg rcx, rax; in eax, dx; jmp rcx; 
0x00000000000865f3: add al, 0; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x000000000005058b: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x4a3db; cmove rax, rdx; ret; 
0x0000000000050bcb: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x4a9db; cmove rax, rdx; ret; 
0x000000000004f0ab: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x4beeb; cmove rax, rdx; ret; 
0x000000000004d71b: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xfffffc5b; cmove rax, rdx; ret; 
0x000000000004d27b: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xfffffe9b; cmove rax, rdx; ret; 
0x000000000004a7bb: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xfffffecb; cmove rax, rdx; ret; 
0x000000000009a80c: add al, 0; add byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; and al, 0x70; add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x0000000000003a2a: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000003d1e4: add al, 0; add byte ptr [rbp - 0x38], dh; addsd xmm0, xmm0; ret; 
0x0000000000086783: add al, 0; add byte ptr [rbp - 0xc], dh; addsd xmm0, xmm0; ret; 
0x000000000001600f: add al, 0; add byte ptr [rbp - 0xc], dh; fstp st(1); ret; 
0x00000000000830cc: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000c8082: add al, 0; add byte ptr [rcx + 1], cl; fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x000000000004407a: add al, 0; add byte ptr [rcx], ch; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000037454: add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000086a54: add al, 0; add byte ptr [rdi + rax - 0xd], dh; ret; 
0x0000000000050586: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc6: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a6: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b6: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d276: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d716: add al, 0; add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x0000000000048b57: add al, 0; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000087d70: add al, 0; add ch, al; ret; 
0x000000000007c45e: add al, 0; add rsp, 0x28; ret; 
0x000000000007c98f: add al, 0; add rsp, 0x48; ret; 
0x000000000004f0b3: add al, 0; cmove rax, rdx; ret; 
0x000000000003cd17: add al, 0; cmovne rax, rdx; ret; 
0x000000000007de80: add al, 0; movdqa xmm2, xmm0; add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000003d1fc: add al, 0; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd0c: add al, 0; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000007ce81: add al, 0; test rax, rax; je 0x7ce98; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cf61: add al, 0; test rax, rax; je 0x7cf78; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dcc1: add al, 0; test rax, rax; je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cdae: add al, 0; test rax, rax; jg 0x7cdc0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e3: add al, 0; test rax, rax; jg 0x7d0f8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007d80e: add al, 0; test rax, rax; jg 0x7d820; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007db25: add al, 0; test rax, rax; jg 0x7db40; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dbee: add al, 0; test rax, rax; jg 0x7dc00; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007ccab: add al, 0; test rax, rax; jle 0x7ccbc; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007c434: add al, 0; test rax, rax; jne 0x7c468; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c504: add al, 0; test rax, rax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000099be7: add al, 0; vmovapd xmm0, xmm2; ret; 
0x00000000000d77db: add al, 0x12; push rax; ret; 
0x00000000000ed2b8: add al, 0x19; ret; 
0x00000000000d5ada: add al, 0x21; cli; test ebx, edx; mov edi, 0x4487f4b8; ret; 
0x0000000000049949: add al, 0x24; add rsp, 0x18; ret; 
0x00000000000728f6: add al, 0x24; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000072c05: add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x000000000006fa19: add al, 0x24; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb4b: add al, 0x24; add rsp, 0x28; ret; 
0x000000000006991d: add al, 0x24; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c998e: add al, 0x24; add rsp, 0x30; pop rbx; ret; 
0x00000000000c9639: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000007ccb5: add al, 0x24; add rsp, 0x38; ret; 
0x000000000007d0ed: add al, 0x24; add rsp, 0x48; ret; 
0x0000000000057fb1: add al, 0x24; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000007014d: add al, 0x24; and rdx, rax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000c8d70: add al, 0x24; call 0xc4df0; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ff4: add al, 0x24; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8bc2: add al, 0x24; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007c459: add al, 0x24; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000586d9: add al, 0x24; call 0xc4e80; movaps xmmword ptr [rsp + 0x20], xmm0; add rsp, 0x30; pop rbx; ret; 
0x0000000000058ad7: add al, 0x24; call 0xc6150; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000069b83: add al, 0x24; call 0xc6d90; add rsp, 0x40; pop rbx; ret; 
0x0000000000071fa8: add al, 0x24; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x000000000006b87f: add al, 0x24; jle 0x6b988; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000007d987: add al, 0x24; jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007cee7: add al, 0x24; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000006fa3c: add al, 0x24; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000012861: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x128bf; add rsp, 0x28; ret; 
0x00000000000172b6: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017397: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x174a0; add rsp, 0x38; ret; 
0x0000000000018459: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860d: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3bd: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c367: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1c681; leave; ret; 
0x00000000000279c0: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x27cf1; add rsp, 0x28; ret; 
0x0000000000030d2c: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000049b90: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004f042: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000005061c: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b43: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c328: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006c24f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc6f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc7: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6fe3c; add rsp, 0x48; ret; 
0x000000000008689c: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086995: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087206: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x874d9; add rsp, 0x28; ret; 
0x000000000009d788: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b16e0: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000dbc2: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfd8: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e4: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xf34f; add rsp, 0x28; ret; 
0x00000000000217f9: add al, 0x29; ret 0xdb85; 
0x0000000000048998: add al, 0x31; or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x0000000000107d2e: add al, 0x40; ret; 
0x000000000013524e: add al, 0x40; sub eax, 0xe515b023; ja 0x135277; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000016398e: add al, 0x40; sub eax, 0xe515b023; ja 0x1639b7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d4a8e: add al, 0x40; sub eax, 0xe515b023; ja 0xd4ab7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d4986: add al, 0x41; ret; 
0x0000000000195d94: add al, 0x4e; add byte ptr [rax], al; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x00000000000d606c: add al, 0x60; ret 0x403f; 
0x000000000019991c: add al, 0x61; int1; call qword ptr [rbp + 5]; 
0x0000000000197694: add al, 0x67; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x00000000000e4d43: add al, 0x70; jmp qword ptr [rdi]; 
0x00000000000c726a: add al, 0x74; or ecx, dword ptr [rcx - 0x7d]; ret 0x4904; 
0x0000000000105ef7: add al, 0x74; push rcx; xor esi, ecx; add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x0000000000110954: add al, 0x75; add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000017f9f: add al, 0x75; iretd; fstp st(1); fstp st(1); fadd st(0); ret; 
0x000000000010c850: add al, 0x75; push 0x32969b54; add eax, 0x2583811e; ret; 
0x00000000000d6be2: add al, 0x76; ret; 
0x0000000000199b2c: add al, 0x7a; int1; call rsi; 
0x0000000000198d94: add al, 0x7e; add byte ptr [rax], al; cwde; std; out dx, eax; call qword ptr [rbp + 3]; 
0x00000000000dca48: add al, 0x80; mov esi, 0xd01fff7e; mov edi, 0xcf979001; call qword ptr [rbx]; 
0x000000000000f39d: add al, 0x82; add rax, rdx; jmp rax; 
0x000000000004a8df: add al, 0x82; ret; 
0x000000000007e04d: add al, 0x83; ret 0x4805; 
0x00000000001148b5: add al, 0x8f; jp 0x1148f4; cmpsd dword ptr [rsi], dword ptr [rdi]; jae 0x1148d7; ret; 
0x00000000000e8edb: add al, 0x90; add byte ptr [rax], ch; mov edi, 0x6dfeb485; ret 0xb440; 
0x0000000000015d1e: add al, 0x91; ret; 
0x00000000000320a0: add al, 0x9a; or dword ptr [rax], eax; subsd xmm0, xmm1; ret; 
0x00000000000fe699: add al, 0xb5; js 0xfe68f; ret; 
0x000000000010e99b: add al, 0xb8; int1; nop; mov edi, 0x947c13a; ret; 
0x000000000010ee4e: add al, 0xc0; ret; 
0x0000000000027e83: add al, 0xc2; ret; 
0x0000000000015d9a: add al, 0xd1; ret; 
0x000000000012e744: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae4: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf64: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d224: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181004: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda4: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de604: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa4: add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0xfaabc; ret 0x8d3f; 
0x0000000000012fcd: add al, 0xdd; fcomp st(1); out dx, al; ret; 
0x0000000000195d19: add al, 0xec; call qword ptr [rdi]; 
0x0000000000195d31: add al, 0xec; jmp qword ptr [rcx]; 
0x0000000000047780: add al, 0xf2; mulps xmm2, xmm2; add rsp, 0x68; ret; 
0x00000000000471c8: add al, 0xf2; mulps xmm3, xmm3; add rsp, 0x58; ret; 
0x000000000004d87d: add al, 0xf7; fmul dword ptr [rdi]; push rdi; retf 0x570f; ret 0xff3; 
0x0000000000051914: add al, 0xf8; or al, byte ptr [rax]; ret; 
0x0000000000015db6: add al, 1; ret; 
0x00000000001959f0: add al, 2; imul ecx, dword ptr [rsi], 8; ret; 
0x0000000000016090: add al, 2; ret; 
0x00000000000d6068: add al, 5; xchg byte ptr [rsi], dh; add al, 0x60; ret 0x403f; 
0x0000000000191e2f: add al, ah; add ebp, eax; call qword ptr [rdx]; 
0x000000000019122f: add al, ah; mov cl, 0xe7; jmp qword ptr [rcx]; 
0x00000000000ec210: add al, ah; mov ecx, 0xd0af660e; mov edi, 0xf528d80a; ret; 
0x000000000019786f: add al, ah; push 0x59dc0000; out dx, al; call qword ptr [rax]; 
0x00000000001976bf: add al, ah; push rdx; out dx, al; jmp qword ptr [rsi]; 
0x00000000001967cf: add al, ah; xchg ebp, ebp; call qword ptr [rax + 7]; 
0x00000000000cf3a8: add al, al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x00000000000e8309: add al, al; and eax, dword ptr [rcx - 0x1f40c43f]; out dx, eax; ret 0x4b4c; 
0x000000000010da3e: add al, al; in al, 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x000000000011b719: add al, al; jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000149f79: add al, al; jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e7799: add al, al; jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000519fb: add al, al; jg 0x51988; ret 0xf66; 
0x0000000000192ecf: add al, al; jno 0x192ebb; call qword ptr [rax]; 
0x000000000010b4fb: add al, al; mov ebx, 0x414cc009; and eax, dword ptr [rbp - 5]; ret; 
0x00000000000f155d: add al, al; mov edi, 0xebc3a3fc; and al, 0x49; ret 0x4a3f; 
0x00000000000f1384: add al, al; out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x0000000000199a0f: add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x00000000000d015c: add al, al; ret 0x93f; 
0x00000000000d020c: add al, al; ret; 
0x00000000000eae11: add al, al; sahf; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x00000000000e9852: add al, al; stc; jmp rbx; 
0x000000000010218c: add al, al; stc; mov edi, 0xcb784785; ret 0xf9f3; 
0x00000000001109d2: add al, al; sti; jmp qword ptr [rdx + 0x41]; 
0x00000000000ef650: add al, al; sub ebp, ecx; ret 0xc50b; 
0x00000000000ece70: add al, al; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000110b1a: add al, al; xchg esp, eax; ret; 
0x000000000018fb93: add al, bh; adc ebp, ecx; jmp qword ptr [rax]; 
0x00000000001905d3: add al, bh; cmc; in eax, dx; jmp qword ptr [rax]; 
0x000000000019019b: add al, bh; imul bl; jmp qword ptr [rax]; 
0x0000000000198787: add al, bh; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000190aeb: add al, bh; jae 0x190ade; call rax; 
0x0000000000042f56: add al, bh; jg 0x42fa2; cmp eax, edx; seta al; movzx eax, al; ret; 
0x000000000018ffab: add al, bh; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x0000000000197ab7: add al, bh; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x000000000019020b: add al, bh; paddsb mm7, mm7; mov eax, 0x18000060; adc ah, ch; call rax; 
0x0000000000104746: add al, bh; ret; 
0x00000000001902fb: add al, bh; sbb al, 0xec; call rax; 
0x000000000018fe03: add al, bl; fsubr st(2); jmp qword ptr [rax + 0x4f]; 
0x00000000001930d7: add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x0000000000193077: add al, bl; jl 0x193063; call qword ptr [rbx + 1]; 
0x000000000018fdcb: add al, bl; jle 0x18fdb9; jmp qword ptr [rax + 0x4e]; 
0x0000000000190afb: add al, bl; jne 0x190aee; call qword ptr [rax]; 
0x000000000019067b: add al, bl; out dx, al; jmp qword ptr [rax]; 
0x00000000001966a7: add al, bl; pop rcx; in eax, dx; call qword ptr [rcx + 1]; 
0x0000000000190a6b: add al, bl; pop rcx; out dx, eax; call rax; 
0x0000000000197697: add al, bl; push rcx; out dx, al; jmp qword ptr [rsi]; 
0x0000000000018fed: add al, bl; ret 0xacdb; 
0x00000000000138f3: add al, bl; ret 0xcad8; 
0x00000000000152b0: add al, bl; ret; 
0x0000000000016c24: add al, bl; retf 0x2ddb; ret; 
0x00000000001900db: add al, bl; shr bl, 0xff; mov byte ptr [rbx], bl; add byte ptr [rax], bl; ret; 
0x000000000001d4b8: add al, byte ptr [r8]; add dh, bl; ret 0x6ddb; 
0x00000000000e4d03: add al, byte ptr [rax - 0x3c0e001]; or ch, byte ptr [rdi - 0x6ef19988]; cmp esi, dword ptr [rax]; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x000000000019122d: add al, byte ptr [rax]; add al, ah; mov cl, 0xe7; jmp qword ptr [rcx]; 
0x0000000000073c44: add al, byte ptr [rax]; add al, ch; mov bl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000031ab7: add al, byte ptr [rax]; add bl, dh; ret; 
0x00000000000c8879: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000c6eb2: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xc8528; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000001c9b0: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000019597e: add al, byte ptr [rax]; add byte ptr [rax], r8b; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x0000000000063cf2: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fe05], al; ret 2; 
0x00000000000c7232: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0x7407; 
0x00000000000482bb: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; push rax; ret; 
0x0000000000012fc9: add al, byte ptr [rax]; add byte ptr [rsp + rax - 0x23], dh; fcomp st(1); out dx, al; ret; 
0x0000000000087ed2: add al, byte ptr [rax]; add ch, al; ret; 
0x000000000001f25b: add al, byte ptr [rax]; add cl, bl; leave; add rsp, 0x78; ret; 
0x000000000001ed18: add al, byte ptr [rax]; add cl, bl; leave; leave; ret; 
0x000000000001d7d9: add al, byte ptr [rax]; add cl, bl; loope 0x1d7b8; ret 0xe1d9; 
0x000000000001e81e: add al, byte ptr [rax]; add cl, bl; ret 0x7dd9; 
0x000000000001e810: add al, byte ptr [rax]; add cl, bl; ret 0xe1d9; 
0x000000000001df1e: add al, byte ptr [rax]; add cl, bl; ret; 
0x000000000001d4b9: add al, byte ptr [rax]; add dh, bl; ret 0x6ddb; 
0x00000000000424de: add al, byte ptr [rax]; add dh, dh; ret; 
0x0000000000048ab6: add al, byte ptr [rax]; add dl, dh; movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000ddee4: add al, byte ptr [rax]; fidivr dword ptr [rdi]; add byte ptr [rbp + 0x1a], al; ret 0xb24f; 
0x00000000000a7877: add al, byte ptr [rax]; jo 0xa7840; ret; 
0x0000000000057253: add al, byte ptr [rax]; nop dword ptr [rax]; addss xmm0, xmm0; ret; 
0x000000000009c65e: add al, byte ptr [rax]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c0da: add al, byte ptr [rax]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009c8b6: add al, byte ptr [rax]; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000a73be: add al, byte ptr [rbx - 0x1c3bfc40]; mov ecx, 0xc4b0c56b; ret; 
0x000000000009b007: add al, byte ptr [rbx]; add dl, dh; cvtps2pd xmm0, xmm0; ret; 
0x0000000000084eb1: add al, byte ptr [rcx + 0x29]; ret 0xf748; 
0x00000000000e952b: add al, byte ptr [rcx]; ret 0xbd2f; 
0x000000000001a1ca: add al, byte ptr [rdi + 0xb]; add cl, bl; ret; 
0x0000000000014f95: add al, byte ptr [rdx]; add byte ptr [rax], al; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000031ab6: add al, byte ptr es:[rax]; add bl, dh; ret; 
0x000000000007799a: add al, ch; adc byte ptr [rsi - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000cd90f: add al, ch; add byte ptr [r12 + riz*2 - 0x22], dil; add byte ptr [rbx - 0x26ff279c], bl; mov esi, 0x97a40031; ret; 
0x0000000000191df7: add al, ch; add ch, al; jmp qword ptr [rsi]; 
0x000000000007b489: add al, ch; add dword ptr [rcx - 0x2317fffc], edi; out 0xfe, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000006d679: add al, ch; add dword ptr [rdx - 0x4317fffb], esp; mov dh, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000001948d7: add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x0000000000077906: add al, ch; and edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000006e17b: add al, ch; call qword ptr [rsi + 0xf660005]; 
0x000000000007b751: add al, ch; cmp dword ptr [rsi + 0x14e80004], esi; in eax, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000018fe2b: add al, ch; fucomp st(2); call qword ptr [rax]; 
0x000000000006aa08: add al, ch; jb 0x6a9da; add eax, 0x6f0f6600; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000006567b: add al, ch; jmp qword ptr [rcx]; 
0x0000000000191d37: add al, ch; jmp rdi; 
0x0000000000079fc0: add al, ch; jp 0x79fb1; std; jmp qword ptr [rsi + 0xf]; 
0x000000000007127e: add al, ch; lodsb al, byte ptr [rsi]; stosb byte ptr [rdi], al; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000073c46: add al, ch; mov bl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000001934b7: add al, ch; mov dh, 0xe8; call qword ptr [rax]; 
0x000000000007b7cf: add al, ch; mov ebx, 0xe80004b5; xchg esi, eax; in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000e974d: add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x000000000007a0ae: add al, ch; mov esp, gs; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000577d7: add al, ch; movabs dword ptr [0x5b50c483480006d6], eax; ret; 
0x000000000007aae5: add al, ch; movsd dword ptr [rdi], dword ptr [rsi]; ret 4; 
0x0000000000077774: add al, ch; mul byte ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0xf]; 
0x0000000000079cc2: add al, ch; or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000771a0: add al, ch; pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000799e0: add al, ch; pop rdx; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000197667: add al, ch; push rax; out dx, al; call qword ptr [rcx]; 
0x000000000005b527: add al, ch; push rbx; ret; 
0x0000000000077558: add al, ch; push rdx; jp 0x7755c; jmp qword ptr [rsi + 0xf]; 
0x0000000000073014: add al, ch; push rsi; mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000006fe88: add al, ch; ret 0x562; 
0x00000000000669b8: add al, ch; ret 0x5e4; 
0x00000000000658b8: add al, ch; ret 0x5f5; 
0x000000000005d9b8: add al, ch; ret 0x674; 
0x000000000005bfb8: add al, ch; ret 0x68e; 
0x000000000005b1b8: add al, ch; ret 0x69c; 
0x00000000000577b8: add al, ch; ret 0x6d6; 
0x00000000000574b8: add al, ch; ret 0x703; 
0x00000000000794e8: add al, ch; ret 0xff5a; 
0x00000000000c9ec8: add al, ch; ret 0xffce; 
0x0000000000057cb7: add al, ch; ret; 
0x0000000000073d10: add al, ch; retf 0xff84; jmp qword ptr [rsi + 0xf]; 
0x000000000005b4af: add al, ch; retf; ret; 
0x0000000000079a9a: add al, ch; sal al, 1; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000777b1: add al, ch; stc; ja 0x777b5; jmp qword ptr [rsi + 0xf]; 
0x0000000000079ad5: add al, ch; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000bd637: add al, ch; sti; pop rcx; mov ebp, 0xc5cc28f9; ret; 
0x00000000000bccf5: add al, ch; sti; pop rcx; ret; 
0x00000000000915a7: add al, ch; sti; pop rsp; ret; 
0x000000000005b47f: add al, ch; sti; ret; 
0x0000000000075de0: add al, ch; stosb byte ptr [rdi], al; syscall; 
0x00000000001909fb: add al, ch; sub ebp, edi; call rax; 
0x000000000005b4df: add al, ch; wait; ret; 
0x000000000006aaf7: add al, ch; xchg ebx, eax; ret 5; 
0x000000000007b7d4: add al, ch; xchg esi, eax; in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000018f553: add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x00000000001904c3: add al, cl; mov ch, ah; jmp qword ptr [rax + 0x6b]; 
0x00000000001909f3: add al, cl; sub ch, bh; inc dword ptr [rax - 0x17ffff77]; sub ebp, edi; call rax; 
0x000000000018fd73: add al, cl; sub dl, ch; call qword ptr [rax]; 
0x000000000018f7d3: add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x00000000001037c0: add al, dh; add r12b, r9b; xlatb; ret 0xffbb; 
0x000000000002e903: add al, dh; jg 0x2e938; ror byte ptr [rcx], 0xca; setne al; add eax, 0x7fffffff; ret; 
0x0000000000042fc9: add al, dh; jg 0x43015; sub eax, edx; shr rax, 0x3f; ret; 
0x00000000000887eb: add al, dh; jg 0x887fe; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000009ed6b: add al, dh; jg 0x9ed7e; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000019562f: add al, dh; mov ah, 0xeb; jmp qword ptr [rbp]; 
0x00000000001104df: add al, dh; mov dh, 0xd7; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x0000000000004d2f: add al, dh; ret 0; 
0x0000000000104f66: add al, dh; ret 0x8cc; 
0x00000000000e9ac2: add al, dh; ret; 
0x0000000000103360: add al, dh; sub ecx, edi; insd dword ptr [rdi], dx; call qword ptr [rbx]; 
0x0000000000003a27: add al, dh; wait; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019695f: add al, dh; xchg esi, eax; in eax, dx; call qword ptr [rdi]; 
0x00000000000f11f0: add al, dl; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000198dff: add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x000000000001c6b6: add ax, 0; add rsp, 0x20; fchs; add rsp, 8; fxch st(1); ret; 
0x000000000006a691: add bh, bh; dec dword ptr [rax + 0x39]; ret; 
0x0000000000059557: add bh, bh; dec dword ptr [rcx - 0x7f]; ret; 
0x0000000000072803: add bh, bh; jg 0x7284f; sub eax, edx; shr rax, 0x3f; ret; 
0x0000000000072821: add bh, bh; jg 0x7286d; and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000804b2: add bh, bh; ret; 
0x00000000000ddfb9: add bh, byte ptr [rdx + 0x57]; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000e981b: add bh, dh; call rdi; 
0x000000000004d94d: add bh, dh; fmul dword ptr [rdi]; push rdi; retf 0x570f; ret 0xff3; 
0x0000000000079377: add bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000e986b: add bh, dh; jmp rdi; 
0x000000000010224d: add bh, dh; mov edi, 0x8273dbcd; push 0x5a1ac94d; ret 0x5d3a; 
0x000000000019b877: add bl, bh; add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x000000000000cd7d: add bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x0000000000013749: add bl, bl; insb byte ptr [rdi], dx; and al, 0x18; add rsp, 0x10; fdivp st(1); ret; 
0x000000000001bdff: add bl, bl; insb byte ptr [rdi], dx; and al, 0x18; ret; 
0x0000000000017f1f: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fabs; ret; 
0x0000000000015d3f: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x0000000000012c6f: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x000000000001717f: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fld1; fpatan; ret; 
0x0000000000012baf: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fmulp st(1); faddp st(1); ret; 
0x000000000001629f: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fsqrt; ret; 
0x0000000000012a33: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fsub st(0); fdiv st(0); ret; 
0x0000000000017faf: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fxtract; fstp st(0); ret; 
0x00000000000183ef: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fxtract; fstp st(1); ret; 
0x000000000001830c: add bl, bl; sub eax, 0xb38dd; fmulp st(1); ret; 
0x00000000000183ac: add bl, bl; sub eax, 0xb64ad; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x00000000000fd96b: add bl, byte ptr [rcx - 0x40c01d33]; sbb dword ptr [rdx + 0x70], edx; ret 0xfb3a; 
0x0000000000101ad0: add bl, byte ptr [rip + 0x436205b2]; mov edx, esi; ret; 
0x00000000000da02a: add bl, byte ptr [rsi + 0x21]; ret 0x3fe2; 
0x000000000001cdd1: add bl, ch; fcomp st(1); add eax, 0xaff56; fxch st(1); ret; 
0x000000000006c06c: add bl, ch; mov ebx, 0xf9f82ce8; jmp qword ptr [rsi + 0x2e]; 
0x000000000000e056: add bl, ch; rcr ebp, 1; fsubr st(0); fdivr st(7); call qword ptr [rbp + 0x53]; 
0x00000000000273ce: add bl, ch; ret 0x1f0f; 
0x00000000000123c3: add bl, ch; ret 0x2e66; 
0x00000000000b113e: add bl, ch; ret; 
0x0000000000015a5f: add bl, cl; loope 0x15a40; fstpnce st(1), st(0); stc; ret; 
0x0000000000015aaa: add bl, cl; loope 0x15a8b; fstpnce st(1), st(0); stc; ret; 
0x0000000000015af3: add bl, cl; loope 0x15ad4; fstpnce st(1), st(0); stc; ret; 
0x0000000000015b3a: add bl, cl; loope 0x15b1b; fstpnce st(1), st(0); stc; ret; 
0x0000000000018ab3: add bl, cl; loope 0x18a94; fstpnce st(1), st(0); stc; ret; 
0x0000000000018afa: add bl, cl; loope 0x18adb; fstpnce st(1), st(0); stc; ret; 
0x000000000001fa36: add bl, cl; out dx, al; jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x000000000001df25: add bl, cl; ret; 
0x0000000000050356: add bl, dh; addps xmm0, xmm0; mov rdx, qword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000004a77f: add bl, dh; addps xmm0, xmm0; ret; 
0x000000000004faff: add bl, dh; addps xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004a00b: add bl, dh; addps xmm0, xmm1; ret; 
0x000000000005016b: add bl, dh; addps xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000004eccf: add bl, dh; addps xmm0, xmmword ptr [rip + 0xb16a0]; ret; 
0x0000000000049d2f: add bl, dh; addps xmm0, xmmword ptr [rip + 0xb6638]; ret; 
0x0000000000049c1d: add bl, dh; addps xmm0, xmmword ptr [rip + 0xb6752]; ret; 
0x000000000004fc45: add bl, dh; addps xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004a2ab: add bl, dh; addps xmm2, xmmword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000051990: add bl, dh; cvtpi2ps xmm0, mm0; ret; 
0x0000000000020999: add bl, dh; divps xmm0, xmm0; add rsp, 8; ret; 
0x000000000004d359: add bl, dh; divps xmm0, xmm1; ret; 
0x000000000004ff22: add bl, dh; divps xmm0, xmmword ptr [rip + 0x7bba9]; ret; 
0x000000000004ae74: add bl, dh; divps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000570af: add bl, dh; maxps xmm0, xmm1; ret; 
0x000000000005714f: add bl, dh; minps xmm0, xmm1; ret; 
0x0000000000055324: add bl, dh; movd dword ptr [rsp + 0x30], mm0; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000559ca: add bl, dh; movd dword ptr [rsp + 0x30], mm0; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x0000000000052b21: add bl, dh; movd dword ptr [rsp + 0x40], mm0; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x00000000000556a3: add bl, dh; movd dword ptr [rsp + 0x40], mm0; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x0000000000053574: add bl, dh; movd dword ptr [rsp + 0x80], mm0; add rsp, 0xc0; pop rbx; ret; 
0x000000000009b92f: add bl, dh; movups xmm0, xmmword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000005190f: add bl, dh; movups xmm0, xmmword ptr [rip + 0xaf804]; ret; 
0x000000000004fdbe: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004fe1f: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb0768]; ret; 
0x000000000004ff1a: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecc7: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x000000000004ee9f: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb1e60]; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000049d27: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb6644]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c15: add bl, dh; movups xmm0, xmmword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x00000000000570b7: add bl, dh; movups xmm0, xmmword ptr [rsp + 0xc]; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000050abf: add bl, dh; movups xmm0, xmmword ptr [rsp - 0xc]; ret; 
0x000000000005617b: add bl, dh; movups xmm1, xmmword ptr [rip + 0x762ec]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000051006: add bl, dh; movups xmm1, xmmword ptr [rip + 0xaf3a5]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005102b: add bl, dh; movups xmm1, xmmword ptr [rip + 0xaf3a8]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004faf7: add bl, dh; movups xmm1, xmmword ptr [rip + 0xb08dc]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x0000000000049ff7: add bl, dh; movups xmm1, xmmword ptr [rip + 0xb63ac]; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x00000000000525a2: add bl, dh; movups xmm1, xmmword ptr [rsp - 8]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000519c4: add bl, dh; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009b916: add bl, dh; movups xmmword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000009b937: add bl, dh; movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x0000000000056183: add bl, dh; movups xmmword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000053334: add bl, dh; movups xmmword ptr [rsp - 0x28], xmm1; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x000000000004fdc6: add bl, dh; mulps xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000501bf: add bl, dh; mulps xmm0, xmm0; ret; 
0x000000000004fd8c: add bl, dh; mulps xmm0, xmm1; ret; 
0x000000000004dd1c: add bl, dh; mulps xmm0, xmmword ptr [rip + 0xb2f3b]; add rsp, 0x10; pop rbx; ret; 
0x00000000000504b5: add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049fff: add bl, dh; mulps xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x00000000000500ff: add bl, dh; mulps xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x000000000004fcf7: add bl, dh; mulps xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004a1ab: add bl, dh; mulps xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004e87b: add bl, dh; mulps xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000000bd07: add bl, dh; ret; 
0x000000000004de9f: add bl, dh; sqrtps xmm0, xmm0; ret; 
0x0000000000049c2f: add bl, dh; subps xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b2d4: add bl, dh; subps xmm0, xmm0; ret; 
0x000000000004fdd7: add bl, dh; subps xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fd2f: add bl, dh; subps xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x0000000000049de9: add bl, dh; subps xmm0, xmm1; ret; 
0x000000000004a0a0: add bl, dh; subps xmm0, xmm1; test edx, edx; jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x000000000004eea7: add bl, dh; subps xmm0, xmmword ptr [rip + 0xb14cc]; ret; 
0x000000000004dc2f: add bl, dh; subps xmm1, xmm1; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000506ef: add bl, dh; subps xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004eb07: add bl, dh; subps xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000009b96f: add bl, dh; subps xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x0000000000051a47: add bl, dl; call 0xffffffff80051a5b; jg 0x519d9; ret 0xf66; 
0x00000000000519f6: add bl, dl; call 0xffffffffc0051a0a; jg 0x51988; ret 0xf66; 
0x0000000000086a8c: add bl, dl; clc; not eax; and eax, edx; movd xmm0, eax; ret; 
0x000000000004fca6: add bl, sil; addps xmm0, xmm0; ret; 
0x00000000000570ae: add bl, sil; maxps xmm0, xmm1; ret; 
0x000000000005714e: add bl, sil; minps xmm0, xmm1; ret; 
0x0000000000049d26: add bl, sil; movups xmm0, xmmword ptr [rip + 0xb6644]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x000000000004fcf6: add bl, sil; mulps xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000049926: add bl, sil; ret; 
0x000000000004dc2e: add bl, sil; subps xmm1, xmm1; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000bfed6: add bpl, al; jns 0xbff04; inc ebp; ret; 
0x00000000000b4e0e: add bpl, al; ret; 
0x00000000000b91b6: add bpl, al; sti; pop rcx; ret 0xf9c5; 
0x0000000000197695: add byte ptr [eax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x00000000000cd912: add byte ptr [r12 + riz*2 - 0x22], dil; add byte ptr [rbx - 0x26ff279c], bl; mov esi, 0x97a40031; ret; 
0x0000000000070f7d: add byte ptr [r14 + 0xf], r12b; out dx, eax; ret 0x290f; 
0x000000000004e2aa: add byte ptr [r15], r9b; ror dword ptr cs:[rdi], 0x82; ret; 
0x00000000001109cf: add byte ptr [r8], al; add al, al; sti; jmp qword ptr [rdx + 0x41]; 
0x0000000000110b17: add byte ptr [r8], al; add al, al; xchg esp, eax; ret; 
0x0000000000110957: add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x000000000011095f: add byte ptr [r8], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000e75b7: add byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x000000000018fb91: add byte ptr [r8], al; clc; adc ebp, ecx; jmp qword ptr [rax]; 
0x0000000000195985: add byte ptr [r8], al; clc; ret; 
0x000000000019b874: add byte ptr [r8], r8b; add bl, bh; add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x000000000018fc69: add byte ptr [r8], r8b; cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000195d2d: add byte ptr [r8], r8b; jo 0x195d36; in al, dx; jmp qword ptr [rcx]; 
0x0000000000195f1d: add byte ptr [r8], r8b; nop; adc ebp, esp; call qword ptr [rsi + 0xa]; 
0x0000000000195785: add byte ptr [r8], r8b; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000195d15: add byte ptr [r8], r8b; sub byte ptr [rsp + rbp*8], al; call qword ptr [rdi]; 
0x0000000000123410: add byte ptr [rax + 0x16], al; cdq; jbe 0x1233a3; ret; 
0x0000000000151c70: add byte ptr [rax + 0x16], al; cdq; jbe 0x151c03; ret; 
0x00000000000ef490: add byte ptr [rax + 0x16], al; cdq; jbe 0xef423; ret; 
0x00000000001962af: add byte ptr [rax + 0x16], dl; in eax, dx; call qword ptr [rdi + 4]; 
0x00000000000f0d24: add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x000000000001bdee: add byte ptr [rax + 0x18246cdb], dl; fchs; fld xword ptr [rsp + 8]; ret; 
0x00000000000ece90: add byte ptr [rax + 0x188fd980], al; ret 0x1bf; 
0x0000000000190653: add byte ptr [rax + 0x18], bl; out dx, al; call qword ptr [rax]; 
0x00000000001902bb: add byte ptr [rax + 0x1a], cl; in al, dx; call qword ptr [rax]; 
0x00000000000f0f70: add byte ptr [rax + 0x1c], ah; ret 0x618b; 
0x00000000000ef410: add byte ptr [rax + 0x1f693eb1], ah; ret; 
0x0000000000195f8f: add byte ptr [rax + 0x1f], ah; in al, dx; call qword ptr [rax]; 
0x0000000000050eeb: add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000c5476: add byte ptr [rax + 0x21], cl; ret 0x50e9; 
0x00000000000c7f1e: add byte ptr [rax + 0x21], cl; ret 0x8944; 
0x0000000000070179: add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000000c9317: add byte ptr [rax + 0x21], cl; ret 0x8b48; 
0x00000000000c8923: add byte ptr [rax + 0x21], cl; ret 0xe583; 
0x00000000000c7e88: add byte ptr [rax + 0x21], cl; ret 0xffb8; 
0x00000000000c7337: add byte ptr [rax + 0x21], cl; ror dword ptr [rcx + 0x39], 1; fisttp dword ptr [rdi]; xchg esp, eax; ret 0x5422; 
0x00000000000e8159: add byte ptr [rax + 0x23], al; ret 0x3e01; 
0x00000000001909db: add byte ptr [rax + 0x23], bl; out dx, eax; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x00000000000e9041: add byte ptr [rax + 0x24406686], al; mov edi, 0xb0286224; ret; 
0x0000000000103bec: add byte ptr [rax + 0x25b3ff5], cl; or ebp, dword ptr [rax + riz*8 - 0x1b]; lodsb al, byte ptr [rsi]; nop; ret; 
0x00000000001909e3: add byte ptr [rax + 0x27], bh; out dx, eax; jmp rsp; 
0x00000000000e8ed9: add byte ptr [rax + 0x28009004], al; mov edi, 0x6dfeb485; ret 0xb440; 
0x000000000004fdf3: add byte ptr [rax + 0x29f8d33f], al; ret 0xf66; 
0x0000000000049c0d: add byte ptr [rax + 0x2a8f0f32], al; add dword ptr [rax], eax; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000113065: add byte ptr [rax + 0x2b], dl; add byte ptr [rax], al; ret 0x27; 
0x000000000009b40c: add byte ptr [rax + 0x2c0f48f2], al; ret 0x3148; 
0x000000000009ae0c: add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x000000000009ce7c: add byte ptr [rax + 0x2cfbe1c4], al; ret 0x3148; 
0x000000000009c534: add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x0000000000072745: add byte ptr [rax + 0x31480000], al; ret 0x8948; 
0x000000000019037b: add byte ptr [rax + 0x31], cl; in al, dx; call qword ptr [rax + 0x66]; 
0x0000000000072748: add byte ptr [rax + 0x31], cl; ret 0x8948; 
0x000000000000caf4: add byte ptr [rax + 0x31], cl; ret; 
0x0000000000199347: add byte ptr [rax + 0x34000083], bh; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x0000000000190a1b: add byte ptr [rax + 0x37], bl; out dx, eax; call qword ptr [rax]; 
0x00000000000fd1a4: add byte ptr [rax + 0x38843fd2], al; pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x0000000000190d4b: add byte ptr [rax + 0x38], bl; int1; push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x000000000006abc5: add byte ptr [rax + 0x39], cl; ret 0x2d7f; 
0x000000000006988d: add byte ptr [rax + 0x39], cl; ret; 
0x000000000003ce56: add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg dword ptr [rdi + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000000ef3f0: add byte ptr [rax + 0x3d718e4], al; ret; 
0x000000000019745f: add byte ptr [rax + 0x3d], ah; out dx, al; jmp qword ptr [rax + 8]; 
0x00000000000e2242: add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x0000000000199b27: add byte ptr [rax + 0x400008b], bl; jp 0x199b20; call rsi; 
0x0000000000190933: add byte ptr [rax + 0x40ffeee3], bl; test dword ptr [rax], eax; add byte ptr [rax - 0x1c], bl; out dx, al; jmp qword ptr [rax - 0x7b]; 
0x0000000000110952: add byte ptr [rax + 0x41477504], al; add byte ptr [rax], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x000000000011095a: add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000e75b5: add byte ptr [rax + 0x43], dl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x0000000000104bb6: add byte ptr [rax + 0x45], cl; pop rbp; ret; 
0x000000000009c8d2: add byte ptr [rax + 0x480e757f], al; mov eax, dword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c2: add byte ptr [rax + 0x480e757f], al; mov eax, dword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000018f7cb: add byte ptr [rax + 0x48ffe834], ch; sub eax, dword ptr [rax]; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x0000000000018c0c: add byte ptr [rax + 0x4c894466], al; and al, 0xf0; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000ea5ea: add byte ptr [rax + 0x50], 0xbf; xor bh, byte ptr [rdi]; ret; 
0x0000000000190723: add byte ptr [rax + 0x50], bh; out dx, al; call rax; 
0x00000000000ebea4: add byte ptr [rax + 0x5603ff5], al; pop rax; add dword ptr [rsi - 0x80], edx; adc eax, 0xe120003f; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x0000000000103380: add byte ptr [rax + 0x5739c716], dh; ret 0xfac1; 
0x00000000000aad26: add byte ptr [rax + 0x581b41c4], al; ret 0x41c4; 
0x00000000000ab87f: add byte ptr [rax + 0x582341c4], al; ret 0x9c5; 
0x00000000000a4912: add byte ptr [rax + 0x583341c4], ah; ret 0xc1c4; 
0x00000000000ece10: add byte ptr [rax + 0x5f], ah; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x00000000000ff22c: add byte ptr [rax + 0x6000aac7], al; ret; 
0x00000000000153f8: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000804bf: add byte ptr [rax + 0x63], cl; ret 0x1ba; 
0x000000000001a4f8: add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f0c24: add byte ptr [rax + 0x64073fe7], bh; mov sil, 0x9c; ret; 
0x00000000000ecd70: add byte ptr [rax + 0x65fcb015], ah; ret; 
0x00000000000503c1: add byte ptr [rax + 0x6601c983], al; movd mm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x0000000000050274: add byte ptr [rax + 0x6601ca83], al; movd mm1, edx; movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051a4c: add byte ptr [rax + 0x66c2897f], al; movd mm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x00000000000430d8: add byte ptr [rax + 0x66d02148], al; movq mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000199957: add byte ptr [rax + 0x67], ch; int1; jmp qword ptr [rbx + 2]; 
0x00000000000a781d: add byte ptr [rax + 0x6be163c4], al; add eax, 0x54fff; add ch, 0x3b; pop rcx; ret; 
0x000000000019783f: add byte ptr [rax + 0x6c000068], dh; pop rcx; out dx, al; call qword ptr [rax]; 
0x0000000000104cd6: add byte ptr [rax + 0x6d], ah; cld; ret; 
0x000000000004305f: add byte ptr [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret; 
0x00000000000ef470: add byte ptr [rax + 0x71fc201e], al; ret; 
0x00000000001982d7: add byte ptr [rax + 0x73], cl; add byte ptr [rax], al; test ah, bl; out dx, al; jmp qword ptr [rdx]; 
0x00000000001907bb: add byte ptr [rax + 0x76], cl; out dx, al; call qword ptr [rax]; 
0x000000000019212f: add byte ptr [rax + 0x7c000011], ah; adc al, 0xe8; jmp qword ptr [rcx + 2]; 
0x00000000000182d9: add byte ptr [rax + 0x7cdbcf09], al; and al, 0xe8; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000444ae: add byte ptr [rax + 0x7e0f4866], dl; ret 0xfe83; 
0x000000000005064e: add byte ptr [rax + 0x7e0f6653], dl; ret; 
0x000000000001be0e: add byte ptr [rax + 0x8246cdb], dl; ret; 
0x00000000000c7e78: add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x00000000000ef2f0: add byte ptr [rax + 0xa], ah; sbb dword ptr [rdi + 0x26], ebp; ret 0xf63f; 
0x00000000000f1404: add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x00000000000efeb0: add byte ptr [rax + 0xe], al; mov ebx, 0x3fcbf601; mov ch, 0x78; ret; 
0x0000000000190373: add byte ptr [rax + 0xffec2e], ch; add byte ptr [rax], al; xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x000000000001b229: add byte ptr [rax + 1], bh; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000b1bbc: add byte ptr [rax + 1], cl; rol ch, 1; ret; 
0x0000000000195d2f: add byte ptr [rax + 4], dh; in al, dx; jmp qword ptr [rcx]; 
0x00000000000c7aa6: add byte ptr [rax + 9], cl; fmul dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000000071873: add byte ptr [rax + 9], cl; ret 0x8949; 
0x00000000000c7e7b: add byte ptr [rax + 9], cl; ret 0xb848; 
0x00000000000c61d7: add byte ptr [rax + 9], cl; ret; 
0x0000000000196d73: add byte ptr [rax + rax*8 - 0x13], cl; jmp qword ptr [rdi + 3]; 
0x00000000000e1382: add byte ptr [rax + rax*8 - 0x27c00ffc], dh; wait; out dx, eax; ret; 
0x000000000010ee4d: add byte ptr [rax + rax*8], al; ret; 
0x0000000000050585: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc5: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a5: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b5: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d275: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d715: add byte ptr [rax + rax], 0; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x000000000005058a: add byte ptr [rax + rax], 0; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bca: add byte ptr [rax + rax], 0; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0aa: add byte ptr [rax + rax], 0; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7ba: add byte ptr [rax + rax], 0; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d27a: add byte ptr [rax + rax], 0; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d71a: add byte ptr [rax + rax], 0; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x000000000019669f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; adc al, 0x57; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x000000000019768f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; add al, 0x67; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x00000000000048cf: add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000191f07: add byte ptr [rax + rax], ah; add byte ptr [rax], al; jl 0x191f1d; add byte ptr [rax], al; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x000000000019a137: add byte ptr [rax + rax], ah; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x00000000000865f2: add byte ptr [rax + rax], al; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x000000000003d1e3: add byte ptr [rax + rax], al; add byte ptr [rbp - 0x38], dh; addsd xmm0, xmm0; ret; 
0x0000000000086782: add byte ptr [rax + rax], al; add byte ptr [rbp - 0xc], dh; addsd xmm0, xmm0; ret; 
0x000000000001600e: add byte ptr [rax + rax], al; add byte ptr [rbp - 0xc], dh; fstp st(1); ret; 
0x0000000000086a53: add byte ptr [rax + rax], al; add byte ptr [rdi + rax - 0xd], dh; ret; 
0x0000000000196db7: add byte ptr [rax + rax], al; add byte ptr [rsi + rbx*2], ch; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x00000000001966c7: add byte ptr [rax + rax], bl; add byte ptr [rax], al; cmp al, 0x57; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000001979a7: add byte ptr [rax + rax], bl; add byte ptr [rax], al; sbb al, 0x6a; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x0000000000191647: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x0000000000199757: add byte ptr [rax + rax], cl; add ah, cl; xchg dword ptr [rax], eax; add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x000000000019597f: add byte ptr [rax + rax], cl; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x0000000000198eaf: add byte ptr [rax + rax], cl; add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x0000000000199a07: add byte ptr [rax + rax], cl; add byte ptr [rdx + rcx*4], bh; add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x0000000000198bff: add byte ptr [rax + rax], cl; add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000192eaf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; and al, 0x1f; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x00000000001930cf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; and dword ptr [rax], r8d; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x00000000001948cf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x0000000000194c6f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, 0x3c; add byte ptr [rax], al; mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x000000000019a33f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ah, 0x93; add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000192e97: add byte ptr [rax + rax], dl; add byte ptr [rax], al; or al, 0x1f; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000195d0f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbp], cl; add byte ptr [rax], ch; add al, 0xec; call qword ptr [rdi]; 
0x00000000000865f5: add byte ptr [rax + rbp - 0xd], dh; ret; 
0x000000000010839b: add byte ptr [rax + rbx*8 - 0x3d9bc003], dh; popfq; adc al, 0xbc; or al, 0x91; push rbx; ret; 
0x000000000001c70e: add byte ptr [rax + rcx - 0x23], dh; fcomp st(1); add eax, 0xb32db; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000001c15e: add byte ptr [rax + rcx - 0x23], dh; fcomp st(3); sub eax, 0xb3877; add rsp, 0x18; fldz; ret; 
0x0000000000018302: add byte ptr [rax + rcx - 0x23], dh; fcomp st(3); sub eax, 0xb6573; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x00000000000e8eda: add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x00000000000edd44: add byte ptr [rax + rsi*8 + 0x3f], al; hlt; mov cl, 0xfc; ret 0x5e0f; 
0x0000000000198c07: add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x00000000000720f0: add byte ptr [rax - 0x14717], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000f159a: add byte ptr [rax - 0x1c81bc4], cl; pop rcx; clc; ret 0x6e1f; 
0x000000000019093b: add byte ptr [rax - 0x1c], bl; out dx, al; jmp qword ptr [rax - 0x7b]; 
0x0000000000190e93: add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x000000000019923f: add byte ptr [rax - 0x23ffff7e], dh; xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x00000000001908d3: add byte ptr [rax - 0x24], ch; out dx, al; jmp rax; 
0x0000000000190b9b: add byte ptr [rax - 0x27001031], bh; xchg edx, eax; add byte ptr [rax], al; loope 0x190b76; out dx, eax; call qword ptr [rax]; 
0x00000000001907b3: add byte ptr [rax - 0x27001191], ch; jge 0x1907bb; add byte ptr [rax + 0x76], cl; out dx, al; call qword ptr [rax]; 
0x00000000001901cb: add byte ptr [rax - 0x270013ff], bl; pop rdi; add byte ptr [rax], al; mov byte ptr [rsi], al; in al, dx; call qword ptr [rax]; 
0x0000000000196f47: add byte ptr [rax - 0x28], bl; in eax, dx; jmp qword ptr [rbx + 1]; 
0x0000000000196f2f: add byte ptr [rax - 0x29], dl; in eax, dx; call qword ptr [rdi]; 
0x00000000000f0890: add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x00000000000f0c04: add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x00000000000eb291: add byte ptr [rax - 0x2c], ah; ret 0x41ce; 
0x0000000000086a3d: add byte ptr [rax - 0x2d], cl; call 0x48d9618d; and eax, edx; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000ecdf0: add byte ptr [rax - 0x2e9ef37a], al; ret 0xa1bf; 
0x000000000018fb0b: add byte ptr [rax - 0x2e], ch; call 0x57ec12; add byte ptr [rax], bl; shr eax, cl; jmp qword ptr [rax]; 
0x0000000000110b12: add byte ptr [rax - 0x2f], ah; mov gs, word ptr [rax + 0x41]; add byte ptr [rax], al; add al, al; xchg esp, eax; ret; 
0x00000000000866a2: add byte ptr [rax - 0x2fbaf041], al; movd xmm0, edx; ret; 
0x00000000000ec010: add byte ptr [rax - 0x31], al; out 0xf, eax; call rcx; 
0x000000000004a1ea: add byte ptr [rax - 0x327bf0c1], al; add byte ptr [rax], al; add byte ptr [rbx - 0x77], dl; ret; 
0x000000000001a4d9: add byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x00000000000ed870: add byte ptr [rax - 0x348c3223], al; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x0000000000050f73: add byte ptr [rax - 0x3791f09a], al; movss dword ptr [rdi], xmm1; ret; 
0x0000000000059483: add byte ptr [rax - 0x39], cl; ret 0xc002; 
0x00000000000c5650: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000a7878: add byte ptr [rax - 0x3b], dh; ret; 
0x00000000000aa596: add byte ptr [rax - 0x3b], dl; ret; 
0x0000000000196dbf: add byte ptr [rax - 0x3d], dh; in eax, dx; call qword ptr [rsi]; 
0x0000000000086716: add byte ptr [rax - 0x3dbaf0c1], al; movd xmm0, eax; ret; 
0x0000000000019e65: add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x000000000005111e: add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x000000000004e61d: add byte ptr [rax - 0x3f6af081], al; add eax, 0x7fffffff; ret; 
0x0000000000050ede: add byte ptr [rax - 0x3f81f09a], dl; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000050f4a: add byte ptr [rax - 0x3f91f09a], al; ret; 
0x00000000000d4e7c: add byte ptr [rax - 0x3f9ac012], dh; ror dword ptr [rbx + 8], 1; cmp dword ptr [rax + rax*2], ecx; std; lahf; ret; 
0x0000000000027e7b: add byte ptr [rax - 0x3f], cl; call 0x101270c2; add al, 0xc2; ret; 
0x0000000000083e8b: add byte ptr [rax - 0x3f], cl; out dx, al; add eax, dword ptr [rbx - 0x17cfe1a]; add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x00000000000e9522: add byte ptr [rax - 0x40f2ffcc], dl; test byte ptr [rsi], 0x2d; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000190593: add byte ptr [rax - 0x41], ch; in eax, dx; call qword ptr [rax + 0x71]; 
0x0000000000110962: add byte ptr [rax - 0x43], ah; ret; 
0x00000000000ef330: add byte ptr [rax - 0x44], ah; or ch, ch; pop rbp; ret 0x493f; 
0x0000000000190ae3: add byte ptr [rax - 0x4700108d], cl; pop qword ptr [rax]; add al, bh; jae 0x190ade; call rax; 
0x00000000000c7e71: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x00000000000c8c9f: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000000c9967: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x000000000003d037: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; xchg bl, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000001030e0: add byte ptr [rax - 0x4a7a2258], dl; ret; 
0x00000000001003f5: add byte ptr [rax - 0x4e8de8cf], al; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x000000000018f713: add byte ptr [rax - 0x4f0017d9], ch; sub byte ptr [rax], al; add byte ptr [rax], ch; sub al, ch; call rax; 
0x00000000000ef390: add byte ptr [rax - 0x4f030c4f], ah; ret 0xea3f; 
0x000000000019a13f: add byte ptr [rax - 0x53], al; bnd call rax; 
0x00000000000cd47f: add byte ptr [rax - 0x54ff63ee], cl; and byte ptr [rbx], bh; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x000000000019081b: add byte ptr [rax - 0x5700113a], ch; add byte ptr [rax], 0; sbb dh, cl; out dx, al; jmp rax; 
0x00000000000ef4b0: add byte ptr [rax - 0x5714d2cf], ah; ret; 
0x00000000001018c0: add byte ptr [rax - 0x5b], al; popfq; ret; 
0x00000000001907db: add byte ptr [rax - 0x67], bl; out dx, al; call qword ptr [rax]; 
0x0000000000050b6a: add byte ptr [rax - 0x67cc1], al; cmove eax, edx; movd xmm0, eax; ret; 
0x0000000000134874: add byte ptr [rax - 0x6c8c004], al; jge 0x134892; ret 0x7a16; 
0x0000000000162fb4: add byte ptr [rax - 0x6c8c004], al; jge 0x162fd2; ret 0x7a16; 
0x00000000000d40b4: add byte ptr [rax - 0x6c8c004], al; jge 0xd40d2; ret 0x7a16; 
0x00000000001968f7: add byte ptr [rax - 0x6c], ch; in eax, dx; jmp rcx; 
0x0000000000190e23: add byte ptr [rax - 0x6f000ded], cl; movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0x14; bnd jmp rax; 
0x0000000000196867: add byte ptr [rax - 0x6f], cl; in eax, dx; jmp rcx; 
0x0000000000050b96: add byte ptr [rax - 0x73], cl; adc eax, 0x35f82; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507b6: add byte ptr [rax - 0x73], cl; adc eax, 0x363a2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050426: add byte ptr [rax - 0x73], cl; adc eax, 0x36712; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe46: add byte ptr [rax - 0x73], cl; adc eax, 0x36cb2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f076: add byte ptr [rax - 0x73], cl; adc eax, 0x37a62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d1f6: add byte ptr [rax - 0x73], cl; adc eax, 0x49912; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd06: add byte ptr [rax - 0x73], cl; adc eax, 0x49e42; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x0000000000032436: add byte ptr [rax - 0x73], cl; adc eax, 0x546f2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d06: add byte ptr [rax - 0x73], cl; adc eax, 0x54de2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d66: add byte ptr [rax - 0x73], cl; adc eax, 0x55d62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000006c4d6: add byte ptr [rax - 0x73], cl; adc eax, 0x9f936; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006c404: add byte ptr [rax - 0x73], cl; adc eax, 0x9f9e4; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064434: add byte ptr [rax - 0x73], cl; adc eax, 0xa3c44; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c997: add byte ptr [rax - 0x73], cl; adc eax, 0xb3dcd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c892: add byte ptr [rax - 0x73], cl; adc eax, 0xb3eb6; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000153f1: add byte ptr [rax - 0x73], cl; adc eax, 0xb78ef; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000c6eb4: add byte ptr [rax - 0x73], cl; adc eax, 0xc8528; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000005058d: add byte ptr [rax - 0x73], cl; add eax, 0x4a3db; cmove rax, rdx; ret; 
0x0000000000050bcd: add byte ptr [rax - 0x73], cl; add eax, 0x4a9db; cmove rax, rdx; ret; 
0x000000000004f0ad: add byte ptr [rax - 0x73], cl; add eax, 0x4beeb; cmove rax, rdx; ret; 
0x000000000004d71d: add byte ptr [rax - 0x73], cl; add eax, 0xfffffc5b; cmove rax, rdx; ret; 
0x000000000004d27d: add byte ptr [rax - 0x73], cl; add eax, 0xfffffe9b; cmove rax, rdx; ret; 
0x000000000004a7bd: add byte ptr [rax - 0x73], cl; add eax, 0xfffffecb; cmove rax, rdx; ret; 
0x000000000000f699: add byte ptr [rax - 0x73], cl; jl 0xf6c2; adc al, ch; pop rsp; ret 0xffff; 
0x000000000009a80e: add byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; and al, 0x70; add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x00000000000ecd50: add byte ptr [rax - 0x74c161fe], al; ret; 
0x0000000000085edf: add byte ptr [rax - 0x75], cl; add eax, 0x3170d1; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ecf: add byte ptr [rax - 0x75], cl; add eax, 0x3170e1; mov dword ptr fs:[rax], edi; ret; 
0x000000000004fdb7: add byte ptr [rax - 0x75], cl; add eax, 0x34d1f9; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000049b87: add byte ptr [rax - 0x75], cl; and al, 0x48; xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000001c35f: add byte ptr [rax - 0x75], cl; clc; xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x000000000001e95a: add byte ptr [rax - 0x75], cl; pop rbp; clc; fxch st(1); leave; ret; 
0x000000000001c9b2: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000081897: add byte ptr [rax - 0x75], cl; push rsp; ret; 
0x000000000000caec: add byte ptr [rax - 0x75], cl; pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x31], cl; ret; 
0x000000000004d60d: add byte ptr [rax - 0x76d88901], al; push rsp; and al, 0xf0; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000009c03d: add byte ptr [rax - 0x76d88901], al; push rsp; and al, 0xf0; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x00000000000c8ff1: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8bbf: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000002c447: add byte ptr [rax - 0x77], cl; ret 0x1b8; 
0x0000000000072013: add byte ptr [rax - 0x77], cl; ret 0x2148; 
0x00000000000c98e3: add byte ptr [rax - 0x77], cl; ret 0x3775; 
0x000000000009aec7: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000009cfaf: add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x00000000000806ff: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002ae31: add byte ptr [rax - 0x77], cl; ret 0xc089; 
0x0000000000092f67: add byte ptr [rax - 0x77], cl; ret 0xdbc5; 
0x00000000000a95a8: add byte ptr [rax - 0x77], cl; ret 0xfbc5; 
0x0000000000044314: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000092e59: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rbp*2], ah; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x000000000003744e: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rcx*4], ah; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000325e4: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000ece30: add byte ptr [rax - 0x78ac43ef], ah; ret 0xe6bf; 
0x0000000000105a3e: add byte ptr [rax - 0x79], al; cmp bh, byte ptr [rip + 0x1dfbc179]; stc; mov edx, 0xcb7c5b8; ret; 
0x0000000000197b07: add byte ptr [rax - 0x7a], ch; out dx, al; jmp rbx; 
0x00000000000c8ca6: add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000000c996e: add byte ptr [rax - 0x7ab80000], al; ret; 
0x00000000000c9971: add byte ptr [rax - 0x7b], cl; ret; 
0x00000000000448cf: add byte ptr [rax - 0x7b], cl; ror byte ptr [rcx + rcx*4 - 0x40], cl; js 0x448ae; pop rbx; pop rbp; ret; 
0x000000000007a1f5: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; cmp ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000076941: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; xor eax, 0xe9fffffb; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000068233: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x89; ret; 
0x00000000000735bc: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x8f; ret 6; 
0x0000000000071f9b: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x8f; ret; 
0x000000000007b38c: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x8f; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000071772: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000001b7a2: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x95; ret 0xd284; 
0x000000000007c590: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x99; ret 0xdb84; 
0x000000000007c572: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x9e; ret; 
0x000000000007ce82: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdx + 0x66], 0xf; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x000000000007c435: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x2d], 0x66; movq mm0, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000074707: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rax*2 + 0x66], 0xf; out dx, eax; sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x000000000000b7fa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000007262f: add byte ptr [rax - 0x7b], cl; sar byte ptr [rcx + 0x3b], 0x66; movq mm0, qword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x000000000007dab9: add byte ptr [rax - 0x7b], cl; sar byte ptr [rcx - 0x4b], 0xeb; mov ebp, eax; fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000007db26: add byte ptr [rax - 0x7b], cl; sar byte ptr [rdi + 0x14], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cdaf: add byte ptr [rax - 0x7b], cl; sar byte ptr [rdi + 0xb], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e4: add byte ptr [rax - 0x7b], cl; sar byte ptr [rdi + 0xe], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007ccac: add byte ptr [rax - 0x7b], cl; sar byte ptr [rsi + 0xa], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000067a7d: add byte ptr [rax - 0x7b], cl; shl byte ptr [rsi + 0xf], 0xef; ror byte ptr [rdi], 0x84; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000080bef: add byte ptr [rax - 0x7d], cl; call 0x5917fdf8; ret 0x3948; 
0x0000000000027d48: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008190f: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000080ba7: add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000008073d: add byte ptr [rax - 0x7d], cl; ret 0x4d02; 
0x000000000001a1bd: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000190e3b: add byte ptr [rax - 0x7f000de6], cl; cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; cmp byte ptr [rbx], bl; bnd call rax; 
0x0000000000190a63: add byte ptr [rax - 0x7f0010b7], ch; lea eax, [rax]; add al, bl; pop rcx; out dx, eax; call rax; 
0x00000000000e8f52: add byte ptr [rax - 0x7f], ch; shl byte ptr [rsi], 0xbf; mov ch, ah; ret; 
0x00000000000182b0: add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x00000000000182a3: add byte ptr [rax - 0x7f], cl; push qword ptr [rax + 0xfffff3c]; mov edi, gs; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x00000000000739a1: add byte ptr [rax - 0x7f], cl; ret; 
0x000000000003d1df: add byte ptr [rax - 0x7f], cl; stc; add byte ptr [rax + rax], al; add byte ptr [rbp - 0x38], dh; addsd xmm0, xmm0; ret; 
0x000000000008669e: add byte ptr [rax - 0x7fffff48], al; mov edi, 0x66d0450f; movd mm0, edx; ret; 
0x000000000007243f: add byte ptr [rax - 0x8c17], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000001b3e0: add byte ptr [rax - 0xc017], al; jmp qword ptr [rsi + 0xf]; 
0x000000000004a7ff: add byte ptr [rax - 0xcf38181], al; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000019a407: add byte ptr [rax - 0xe], bl; bnd call qword ptr [rdx]; 
0x000000000001be1e: add byte ptr [rax - 0xee8417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000001b410: add byte ptr [rax - 0xf617], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000ef4d0: add byte ptr [rax - 9], ah; ficomp word ptr [rcx - 0x3c]; ret; 
0x0000000000051ba0: add byte ptr [rax - 9], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000442c1: add byte ptr [rax - 9], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000000caf1: add byte ptr [rax], 0; add byte ptr [rax + 0x31], cl; ret; 
0x0000000000071870: add byte ptr [rax], 0; add byte ptr [rax + 9], cl; ret 0x8949; 
0x000000000002e06b: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000002c4fb: add byte ptr [rax], 0; add byte ptr [rax], al; addsd xmm0, xmm0; ret; 
0x000000000005110b: add byte ptr [rax], 0; add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x0000000000050f6b: add byte ptr [rax], 0; add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000031ceb: add byte ptr [rax], 0; add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x000000000004fe2b: add byte ptr [rax], 0; add byte ptr [rax], al; andps xmm0, xmmword ptr [rip + 0x7bc89]; ret; 
0x000000000000c37b: add byte ptr [rax], 0; add byte ptr [rax], al; fnstcw word ptr [rdi]; xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000000d313: add byte ptr [rax], 0; add byte ptr [rax], al; fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x0000000000044ceb: add byte ptr [rax], 0; add byte ptr [rax], al; movapd xmm0, xmm1; ret; 
0x000000000004a223: add byte ptr [rax], 0; add byte ptr [rax], al; movaps xmm2, xmm1; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000045b2b: add byte ptr [rax], 0; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000031cdb: add byte ptr [rax], 0; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0xb1d98]; ret; 
0x000000000004952b: add byte ptr [rax], 0; add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a3: add byte ptr [rax], 0; add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x000000000003210b: add byte ptr [rax], 0; add byte ptr [rax], al; mulsd xmm0, xmm0; ret; 
0x0000000000031b73: add byte ptr [rax], 0; add byte ptr [rax], al; mulsd xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x000000000004e62b: add byte ptr [rax], 0; add byte ptr [rax], al; sar edx, 0x17; lea eax, [rdx - 0x7f]; ret; 
0x0000000000032043: add byte ptr [rax], 0; add byte ptr [rax], al; subsd xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000031bf3: add byte ptr [rax], 0; add byte ptr [rax], al; subsd xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x00000000000724fe: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x95e8; 
0x0000000000059dc8: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000019e7b: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000190821: add byte ptr [rax], 0; sbb dh, cl; out dx, al; jmp rax; 
0x000000000004a977: add byte ptr [rax], 0x41; shl ebx, 0x17; or eax, r10d; or eax, r11d; movd xmm0, eax; ret; 
0x0000000000051a46: add byte ptr [rax], 0xd3; call 0xffffffff80051a5b; jg 0x519d9; ret 0xf66; 
0x00000000000519f5: add byte ptr [rax], 0xd3; call 0xffffffffc0051a0a; jg 0x51988; ret 0xf66; 
0x000000000019789b: add byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rax], dl; imul eax, dword ptr [rax], 0xee5a4c00; call qword ptr [rax]; 
0x00000000000eccf0: add byte ptr [rax], ah; cdq; movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x00000000000ef371: add byte ptr [rax], ah; clc; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x00000000000cbc0f: add byte ptr [rax], ah; cli; out dx, al; ret 0x705f; 
0x0000000000141664: add byte ptr [rax], ah; loope 0x1416a7; ret 0xa67; 
0x000000000016fba4: add byte ptr [rax], ah; loope 0x16fbe7; ret 0xa67; 
0x000000000018e724: add byte ptr [rax], ah; loope 0x18e767; ret 0xa67; 
0x00000000000fd984: add byte ptr [rax], ah; loope 0xfd9c7; ret 0xa67; 
0x00000000000034cf: add byte ptr [rax], ah; ret 0; 
0x00000000000ef450: add byte ptr [rax], ah; ret 0x7bbf; 
0x000000000019164f: add byte ptr [rax], ah; ret; 
0x0000000000003f37: add byte ptr [rax], ah; syscall; 
0x00000000000f06d0: add byte ptr [rax], ah; xchg ecx, eax; ret; 
0x00000000001966a2: add byte ptr [rax], al; adc al, 0x57; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x00000000001985a2: add byte ptr [rax], al; adc al, 0x76; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000194a1f: add byte ptr [rax], al; adc bl, ch; jmp qword ptr [rcx + 1]; 
0x0000000000199912: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rcx + 0x61040000], cl; int1; call qword ptr [rbp + 5]; 
0x0000000000198dba: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rsi], bh; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x00000000001966ce: add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x000000000010ea8b: add byte ptr [rax], al; adc byte ptr [rbx], al; shr ch, 0x7f; mov dl, 0xbc; jb 0x10ea3b; ret 0x576; 
0x000000000019789e: add byte ptr [rax], al; adc byte ptr [rcx], ch; add byte ptr [rdx + rbx*2 - 0x12], cl; call qword ptr [rax]; 
0x0000000000100c74: add byte ptr [rax], al; adc byte ptr [rdx], al; add byte ptr [rax], al; mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x0000000000196ece: add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x000000000019a46e: add byte ptr [rax], al; adc dh, dh; bnd call qword ptr [rbp + 7]; 
0x000000000010b76e: add byte ptr [rax], al; adc dword ptr [rbp + 0x3e], edi; xor dword ptr [rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x00000000000043ee: add byte ptr [rax], al; adc dword ptr [rcx], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 7; 
0x000000000010fbfe: add byte ptr [rax], al; adc eax, 0x94134a4b; sal bl, 1; ret 0x3ffd; 
0x00000000000cc1ae: add byte ptr [rax], al; adc ebx, ebx; test ah, bh; ret 0x3d6f; 
0x00000000000cc0ae: add byte ptr [rax], al; adc r13d, dword ptr [r12 + r12*2]; je 0xcc117; ret 0xfb98; 
0x0000000000193071: add byte ptr [rax], al; add ah, ah; and byte ptr [rax], al; add al, bl; jl 0x193063; call qword ptr [rbx + 1]; 
0x0000000000199951: add byte ptr [rax], al; add ah, al; mov dword ptr [rax], eax; add byte ptr [rax + 0x67], ch; int1; jmp qword ptr [rbx + 2]; 
0x0000000000191f51: add byte ptr [rax], al; add ah, al; sldt word ptr [rax]; cwde; or al, ch; call rsp; 
0x000000000019a469: add byte ptr [rax], al; add ah, bl; xchg esp, eax; add byte ptr [rax], al; adc dh, dh; bnd call qword ptr [rbp + 7]; 
0x0000000000191179: add byte ptr [rax], al; add ah, ch; add dword ptr [rax], eax; add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x0000000000199759: add byte ptr [rax], al; add ah, cl; xchg dword ptr [rax], eax; add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x0000000000195981: add byte ptr [rax], al; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x0000000000195781: add byte ptr [rax], al; add ah, dh; add byte ptr [r8], r8b; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000195d92: add byte ptr [rax], al; add al, 0x4e; add byte ptr [rax], al; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x000000000019991a: add byte ptr [rax], al; add al, 0x61; int1; call qword ptr [rbp + 5]; 
0x0000000000197692: add byte ptr [rax], al; add al, 0x67; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x0000000000199b2a: add byte ptr [rax], al; add al, 0x7a; int1; call rsi; 
0x000000000010ee4c: add byte ptr [rax], al; add al, 0xc0; ret; 
0x000000000019786d: add byte ptr [rax], al; add al, ah; push 0x59dc0000; out dx, al; call qword ptr [rax]; 
0x000000000010b4f9: add byte ptr [rax], al; add al, al; mov ebx, 0x414cc009; and eax, dword ptr [rbp - 5]; ret; 
0x00000000000f1382: add byte ptr [rax], al; add al, al; out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x00000000000d015a: add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000d020a: add byte ptr [rax], al; add al, al; ret; 
0x00000000000e9850: add byte ptr [rax], al; add al, al; stc; jmp rbx; 
0x000000000010218a: add byte ptr [rax], al; add al, al; stc; mov edi, 0xcb784785; ret 0xf9f3; 
0x00000000001109d0: add byte ptr [rax], al; add al, al; sti; jmp qword ptr [rdx + 0x41]; 
0x0000000000110b18: add byte ptr [rax], al; add al, al; xchg esp, eax; ret; 
0x0000000000198785: add byte ptr [rax], al; add al, bh; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000104744: add byte ptr [rax], al; add al, bh; ret; 
0x0000000000018feb: add byte ptr [rax], al; add al, bl; ret 0xacdb; 
0x000000000007127c: add byte ptr [rax], al; add al, ch; lodsb al, byte ptr [rsi]; stosb byte ptr [rdi], al; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000079cc0: add byte ptr [rax], al; add al, ch; or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x000000000007719e: add byte ptr [rax], al; add al, ch; pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000073012: add byte ptr [rax], al; add al, ch; push rsi; mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000079a98: add byte ptr [rax], al; add al, ch; sal al, 1; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000042fc7: add byte ptr [rax], al; add al, dh; jg 0x43015; sub eax, edx; shr rax, 0x3f; ret; 
0x00000000001104dd: add byte ptr [rax], al; add al, dh; mov dh, 0xd7; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x0000000000104f64: add byte ptr [rax], al; add al, dh; ret 0x8cc; 
0x00000000000e9ac0: add byte ptr [rax], al; add al, dh; ret; 
0x000000000006a68f: add byte ptr [rax], al; add bh, bh; dec dword ptr [rax + 0x39]; ret; 
0x0000000000059555: add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx - 0x7f]; ret; 
0x0000000000072801: add byte ptr [rax], al; add bh, bh; jg 0x7284f; sub eax, edx; shr rax, 0x3f; ret; 
0x00000000000e9869: add byte ptr [rax], al; add bh, dh; jmp rdi; 
0x000000000010224b: add byte ptr [rax], al; add bh, dh; mov edi, 0x8273dbcd; push 0x5a1ac94d; ret 0x5d3a; 
0x000000000019b875: add byte ptr [rax], al; add bl, bh; add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x000000000000cd7b: add byte ptr [rax], al; add bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x0000000000017f1d: add byte ptr [rax], al; add bl, bl; insb byte ptr [rdi], dx; and al, 8; fabs; ret; 
0x0000000000015d3d: add byte ptr [rax], al; add bl, bl; insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x000000000000e054: add byte ptr [rax], al; add bl, ch; rcr ebp, 1; fsubr st(0); fdivr st(7); call qword ptr [rbp + 0x53]; 
0x00000000000123c1: add byte ptr [rax], al; add bl, ch; ret 0x2e66; 
0x0000000000050b7d: add byte ptr [rax], al; add bl, dh; addps xmm0, xmm0; ret; 
0x0000000000020997: add byte ptr [rax], al; add bl, dh; divps xmm0, xmm0; add rsp, 8; ret; 
0x0000000000053572: add byte ptr [rax], al; add bl, dh; movd dword ptr [rsp + 0x80], mm0; add rsp, 0xc0; pop rbx; ret; 
0x000000000009b92d: add byte ptr [rax], al; add bl, dh; movups xmm0, xmmword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000004fe1d: add byte ptr [rax], al; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb0768]; ret; 
0x0000000000050abd: add byte ptr [rax], al; add bl, dh; movups xmm0, xmmword ptr [rsp - 0xc]; ret; 
0x00000000000519c2: add byte ptr [rax], al; add bl, dh; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000501bd: add byte ptr [rax], al; add bl, dh; mulps xmm0, xmm0; ret; 
0x000000000004dd1a: add byte ptr [rax], al; add bl, dh; mulps xmm0, xmmword ptr [rip + 0xb2f3b]; add rsp, 0x10; pop rbx; ret; 
0x00000000000500fd: add byte ptr [rax], al; add bl, dh; mulps xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x000000000000bd05: add byte ptr [rax], al; add bl, dh; ret; 
0x000000000004de9d: add byte ptr [rax], al; add bl, dh; sqrtps xmm0, xmm0; ret; 
0x0000000000049c2d: add byte ptr [rax], al; add bl, dh; subps xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b2d2: add byte ptr [rax], al; add bl, dh; subps xmm0, xmm0; ret; 
0x000000000009b96d: add byte ptr [rax], al; add bl, dh; subps xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x00000000000f0d22: add byte ptr [rax], al; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x000000000001bdec: add byte ptr [rax], al; add byte ptr [rax + 0x18246cdb], dl; fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000070177: add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000000c9315: add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8b48; 
0x00000000000c8921: add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0xe583; 
0x0000000000103bea: add byte ptr [rax], al; add byte ptr [rax + 0x25b3ff5], cl; or ebp, dword ptr [rax + riz*8 - 0x1b]; lodsb al, byte ptr [rsi]; nop; ret; 
0x000000000009b40a: add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret 0x3148; 
0x000000000009ae0a: add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x000000000009ce7a: add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret 0x3148; 
0x000000000009c532: add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x0000000000072743: add byte ptr [rax], al; add byte ptr [rax + 0x31480000], al; ret 0x8948; 
0x000000000000caf2: add byte ptr [rax], al; add byte ptr [rax + 0x31], cl; ret; 
0x0000000000199345: add byte ptr [rax], al; add byte ptr [rax + 0x34000083], bh; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x00000000000e2240: add byte ptr [rax], al; add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x0000000000199b25: add byte ptr [rax], al; add byte ptr [rax + 0x400008b], bl; jp 0x199b20; call rsi; 
0x0000000000110958: add byte ptr [rax], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000104bb4: add byte ptr [rax], al; add byte ptr [rax + 0x45], cl; pop rbp; ret; 
0x00000000000ea5e8: add byte ptr [rax], al; add byte ptr [rax + 0x50], 0xbf; xor bh, byte ptr [rdi]; ret; 
0x000000000001a4f6: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f0c22: add byte ptr [rax], al; add byte ptr [rax + 0x64073fe7], bh; mov sil, 0x9c; ret; 
0x00000000000503bf: add byte ptr [rax], al; add byte ptr [rax + 0x6601c983], al; movd mm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x00000000000430d6: add byte ptr [rax], al; add byte ptr [rax + 0x66d02148], al; movq mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000104cd4: add byte ptr [rax], al; add byte ptr [rax + 0x6d], ah; cld; ret; 
0x000000000004305d: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret; 
0x00000000001982d5: add byte ptr [rax], al; add byte ptr [rax + 0x73], cl; add byte ptr [rax], al; test ah, bl; out dx, al; jmp qword ptr [rdx]; 
0x000000000019212d: add byte ptr [rax], al; add byte ptr [rax + 0x7c000011], ah; adc al, 0xe8; jmp qword ptr [rcx + 2]; 
0x00000000000444ac: add byte ptr [rax], al; add byte ptr [rax + 0x7e0f4866], dl; ret 0xfe83; 
0x000000000005064c: add byte ptr [rax], al; add byte ptr [rax + 0x7e0f6653], dl; ret; 
0x000000000001be0c: add byte ptr [rax], al; add byte ptr [rax + 0x8246cdb], dl; ret; 
0x00000000000c7e76: add byte ptr [rax], al; add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x00000000000f1402: add byte ptr [rax], al; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x000000000001b227: add byte ptr [rax], al; add byte ptr [rax + 1], bh; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000071871: add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x00000000000c61d5: add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret; 
0x00000000000e1380: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x27c00ffc], dh; wait; out dx, eax; ret; 
0x000000000010ee4b: add byte ptr [rax], al; add byte ptr [rax + rax*8], al; ret; 
0x00000000000048cd: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019a135: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x0000000000198ead: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x0000000000198bfd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x00000000000e8ed8: add byte ptr [rax], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x00000000000edd42: add byte ptr [rax], al; add byte ptr [rax + rsi*8 + 0x3f], al; hlt; mov cl, 0xfc; ret 0x5e0f; 
0x00000000000720ee: add byte ptr [rax], al; add byte ptr [rax - 0x14717], al; jmp qword ptr [rsi + 0xf]; 
0x000000000019923d: add byte ptr [rax], al; add byte ptr [rax - 0x23ffff7e], dh; xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x00000000000f0c02: add byte ptr [rax], al; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x0000000000050f71: add byte ptr [rax], al; add byte ptr [rax - 0x3791f09a], al; movss dword ptr [rdi], xmm1; ret; 
0x0000000000059481: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xc002; 
0x000000000005111c: add byte ptr [rax], al; add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x0000000000050f48: add byte ptr [rax], al; add byte ptr [rax - 0x3f91f09a], al; ret; 
0x00000000000e9520: add byte ptr [rax], al; add byte ptr [rax - 0x40f2ffcc], dl; test byte ptr [rsi], 0x2d; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000110960: add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000134872: add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0x134892; ret 0x7a16; 
0x0000000000162fb2: add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0x162fd2; ret 0x7a16; 
0x00000000000d40b2: add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0xd40d2; ret 0x7a16; 
0x0000000000085ecd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3170e1; mov dword ptr fs:[rax], edi; ret; 
0x000000000009ca6d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000009cfad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x00000000000806fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000044312: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000c8ca4: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000000c996c: add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x00000000000c9d4b: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000001b7a0: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x95; ret 0xd284; 
0x0000000000080bed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call 0x5917fdf8; ret 0x3948; 
0x000000000008190d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000080ba5: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000001a1bb: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e8f50: add byte ptr [rax], al; add byte ptr [rax - 0x7f], ch; shl byte ptr [rsi], 0xbf; mov ch, ah; ret; 
0x00000000000182ae: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x000000000007399f: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000008669c: add byte ptr [rax], al; add byte ptr [rax - 0x7fffff48], al; mov edi, 0x66d0450f; movd mm0, edx; ret; 
0x000000000007243d: add byte ptr [rax], al; add byte ptr [rax - 0x8c17], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000001b3de: add byte ptr [rax], al; add byte ptr [rax - 0xc017], al; jmp qword ptr [rsi + 0xf]; 
0x000000000001be1c: add byte ptr [rax], al; add byte ptr [rax - 0xee8417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000001b40e: add byte ptr [rax], al; add byte ptr [rax - 0xf617], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000051a44: add byte ptr [rax], al; add byte ptr [rax], 0xd3; call 0xffffffff80051a5b; jg 0x519d9; ret 0xf66; 
0x00000000000519f3: add byte ptr [rax], al; add byte ptr [rax], 0xd3; call 0xffffffffc0051a0a; jg 0x51988; ret 0xf66; 
0x0000000000197899: add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rax], dl; imul eax, dword ptr [rax], 0xee5a4c00; call qword ptr [rax]; 
0x00000000000cbc0d: add byte ptr [rax], al; add byte ptr [rax], ah; cli; out dx, al; ret 0x705f; 
0x000000000010fbfc: add byte ptr [rax], al; add byte ptr [rax], al; adc eax, 0x94134a4b; sal bl, 1; ret 0x3ffd; 
0x00000000000cc1ac: add byte ptr [rax], al; add byte ptr [rax], al; adc ebx, ebx; test ah, bh; ret 0x3d6f; 
0x00000000000cc0ac: add byte ptr [rax], al; add byte ptr [rax], al; adc r13d, dword ptr [r12 + r12*2]; je 0xcc117; ret 0xfb98; 
0x000000000010ee4a: add byte ptr [rax], al; add byte ptr [rax], al; add al, 0xc0; ret; 
0x000000000010b4f7: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; mov ebx, 0x414cc009; and eax, dword ptr [rbp - 5]; ret; 
0x00000000000f1380: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x00000000000d0158: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000d0208: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x0000000000102188: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; stc; mov edi, 0xcb784785; ret 0xf9f3; 
0x0000000000104742: add byte ptr [rax], al; add byte ptr [rax], al; add al, bh; ret; 
0x00000000001104db: add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; mov dh, 0xd7; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x0000000000104f62: add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret 0x8cc; 
0x000000000006a68d: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rax + 0x39]; ret; 
0x0000000000059553: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx - 0x7f]; ret; 
0x0000000000102249: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; mov edi, 0x8273dbcd; push 0x5a1ac94d; ret 0x5d3a; 
0x0000000000050b7b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; addps xmm0, xmm0; ret; 
0x000000000004fe1b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb0768]; ret; 
0x0000000000050abb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movups xmm0, xmmword ptr [rsp - 0xc]; ret; 
0x00000000000501bb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; mulps xmm0, xmm0; ret; 
0x000000000004de9b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; sqrtps xmm0, xmm0; ret; 
0x0000000000049c2b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; subps xmm0, xmm0; divss xmm0, xmm0; ret; 
0x00000000000f0d20: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x000000000009b408: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret 0x3148; 
0x000000000009ae08: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x000000000009ce78: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret 0x3148; 
0x000000000009c530: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x0000000000072741: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x31480000], al; ret 0x8948; 
0x0000000000104bb2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x45], cl; pop rbp; ret; 
0x00000000000f0c20: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x64073fe7], bh; mov sil, 0x9c; ret; 
0x00000000000430d4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66d02148], al; movq mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000104cd2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6d], ah; cld; ret; 
0x00000000000444aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7e0f4866], dl; ret 0xfe83; 
0x000000000005064a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7e0f6653], dl; ret; 
0x000000000001be0a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8246cdb], dl; ret; 
0x00000000000c7e74: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x00000000000f1400: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x000000000010ee49: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8], al; ret; 
0x000000000019a133: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x00000000000edd40: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rsi*8 + 0x3f], al; hlt; mov cl, 0xfc; ret 0x5e0f; 
0x00000000000720ec: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x14717], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000f0c00: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x000000000005111a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x0000000000134870: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0x134892; ret 0x7a16; 
0x0000000000162fb0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0x162fd2; ret 0x7a16; 
0x00000000000d40b0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6c8c004], al; jge 0xd40d2; ret 0x7a16; 
0x0000000000085ecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3170e1; mov dword ptr fs:[rax], edi; ret; 
0x000000000009ca6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000009cfab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x00000000000806fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000c8ca2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000000c996a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x0000000000080beb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call 0x5917fdf8; ret 0x3948; 
0x000000000008190b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000007243b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x8c17], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000001be1a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xee8417], dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cbc0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ah; cli; out dx, al; ret 0x705f; 
0x000000000010fbfa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; adc eax, 0x94134a4b; sal bl, 1; ret 0x3ffd; 
0x00000000000cc1aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; adc ebx, ebx; test ah, bh; ret 0x3d6f; 
0x00000000000cc0aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; adc r13d, dword ptr [r12 + r12*2]; je 0xcc117; ret 0xfb98; 
0x000000000010ee48: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, 0xc0; ret; 
0x0000000000104740: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, bh; ret; 
0x0000000000104f60: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret 0x8cc; 
0x000000000009b406: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret 0x3148; 
0x000000000009ae06: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x000000000009ce76: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret 0x3148; 
0x000000000009c52e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x0000000000104bb0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x45], cl; pop rbp; ret; 
0x0000000000104cd0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6d], ah; cld; ret; 
0x000000000010ee47: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8], al; ret; 
0x000000000019a131: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x00000000000720ea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x14717], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000072439: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x8c17], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000010ee46: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, 0xc0; ret; 
0x000000000010ee45: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8], al; ret; 
0x00000000000cb016: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xdc93; 
0x000000000019b5c2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001047d0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; out 0x11, al; ret 0xe30e; 
0x00000000000cb018: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xdc93; 
0x000000000019b5c4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000104440: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x00000000000fc7d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x0000000000104c20: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; ret; 
0x000000000019a132: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x000000000000b2da: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rax], eax; add dword ptr [rax], eax; ret 0x20; 
0x0000000000104c21: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and al, 0x42; ret; 
0x0000000000104731: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and bl, ah; ret; 
0x0000000000059a5e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and byte ptr [rip + 0x48d48949], 1; ret; 
0x00000000000cbc0a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and dl, bh; out dx, al; ret 0x705f; 
0x000000000011020a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cdq; ret 0xbc29; 
0x0000000000104741: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; clc; ret; 
0x00000000000ce6fa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cmp eax, 0x4a121583; ret; 
0x0000000000102248: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; idiv dword ptr [rdi - 0x7d8c2433]; push 0x5a1ac94d; ret 0x5d3a; 
0x00000000000cbeea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; imul edi, edi, -0x4c; ret 0x8bd5; 
0x00000000000cca7a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; jb 0xcca94; mov ds, word ptr [rdi]; ret; 
0x000000000010fbda: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; jmp rbx; 
0x00000000001108aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; jne 0x110876; cld; ret 0x8d6c; 
0x00000000000cf3aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000011059a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov ebx, edi; cmp ah, ch; ret 0x920c; 
0x000000000010f80a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0xf8ad1eee; and al, 0x83; ret 0xbfbc; 
0x00000000000cc7fa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or dl, byte ptr [rbx + 0x138cb2f6]; ret 0xf2a5; 
0x00000000001047d2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; out 0x11, al; ret 0xe30e; 
0x0000000000104bb1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop r13; ret; 
0x00000000000cc7aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret 0xf20c; 
0x00000000000fc7da: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x00000000000e75b8: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x00000000000069ea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x11; 
0x00000000000cec3a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1ba9; 
0x0000000000004b12: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1e; 
0x00000000000d5d20: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x273f; 
0x00000000000cf91a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x8d1; 
0x0000000000006f2a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xc; 
0x00000000000cb01a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xdc93; 
0x000000000010f93a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfc3b; 
0x0000000000007152: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000000043f2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 7; 
0x000000000000119a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010b4f6: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; sar byte ptr [rbx + 0x414cc009], 0x23; sti; ret; 
0x00000000000ccaaa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rbp + 0x38], cl; pop rsi; ret; 
0x00000000000cd09a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; test cl, bl; or ah, cl; ret 0x1291; 
0x00000000000cb19a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xchg esi, eax; pop rdi; ret 0x65fc; 
0x000000000010fa4a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rcx + 0x33], al; ret; 
0x0000000000104442: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x0000000000114a49: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x0000000000102d48: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x000000000010f7cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rbp - 0x271388e], al; popfq; ret 0xbfba; 
0x00000000001106eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*4 + 0x7e], al; sbb dword ptr [rcx - 0x73], edx; xchg edx, eax; ret 0x3fbd; 
0x00000000000867eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0xf8a7f3e], al; addss xmm0, xmm0; ret; 
0x00000000000cf4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x56c1e3ba], ah; out 0x47, eax; pushfq; ret 0xbf; 
0x000000000010f80b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x752e112], bh; and al, 0x83; ret 0xbfbc; 
0x00000000000592fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000fc7db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x00000000000cbcfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xd], ch; ret; 
0x00000000000ccd4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 5], dh; int1; mov ch, 0x1a; ret; 
0x00000000000cf18b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x000000000006abbf: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret 0x2d7f; 
0x00000000000fca19: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], bh; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x9856; 
0x00000000000cc0ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x13], al; sub al, 0x64; je 0xcc117; ret 0xfb98; 
0x00000000000cbf5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], ah; movsb byte ptr [rdi], byte ptr cs:[rsi]; sal dword ptr [rsi], cl; ret; 
0x00000000000cca7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x12], dh; mov ds, word ptr [rdi]; ret; 
0x0000000000104c22: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; ret; 
0x00000000000ecd40: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x000000000009722b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 0x75], cl; push rsp; ret; 
0x00000000000cd11b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 0x76], al; ret; 
0x00000000000ce6fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rip + 0x4a121583], bh; ret; 
0x000000000010fbfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rip - 0x6becb5b5], dl; sal bl, 1; ret 0x3ffd; 
0x00000000001108ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0x75], ah; ret; 
0x000000000007546b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 8; ret; 
0x00000000000596eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000018269: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; fld xword ptr [rsp + 8]; frndint; ret; 
0x0000000000072c29: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000086ac9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; roundsd xmm0, xmm0, 0xa; ret; 
0x00000000000cf03b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi], dl; ret 0xc006; 
0x000000000019a134: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x000000000009bc6b: add byte ptr [rax], al; add byte ptr [rax], al; add ch, al; cli; adc byte ptr [rsp - 0xc], al; ret; 
0x000000000008823b: add byte ptr [rax], al; add byte ptr [rax], al; add ch, al; ret; 
0x00000000000966fb: add byte ptr [rax], al; add byte ptr [rax], al; add ch, al; sti; pop rcx; ret 0xd089; 
0x00000000000b024b: add byte ptr [rax], al; add byte ptr [rax], al; add ch, al; sti; push rcx; ret 0xfbc5; 
0x0000000000015d2b: add byte ptr [rax], al; add byte ptr [rax], al; add ch, bl; add eax, 0xb558a; ret; 
0x00000000000207eb: add byte ptr [rax], al; add byte ptr [rax], al; add ch, bl; fdiv st(3); ret; 
0x0000000000015ddb: add byte ptr [rax], al; add byte ptr [rax], al; add ch, bl; fdiv st(6); ret 0x7402; 
0x000000000011061b: add byte ptr [rax], al; add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x000000000001ae9b: add byte ptr [rax], al; add byte ptr [rax], al; add cl, bl; out dx, al; ret; 
0x00000000000cf3ab: add byte ptr [rax], al; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000042dfb: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; cvttps2pi mm0, xmm0; ret; 
0x00000000000478eb: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000027e8b: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; mulps xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x000000000002e0db: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; sqrtps xmm0, xmm0; ret; 
0x000000000010f9ab: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dl; add edi, esp; or esi, esp; ret; 
0x000000000000b2dc: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rax], eax; add dword ptr [rax], eax; ret 0x20; 
0x00000000000867ec: add byte ptr [rax], al; add byte ptr [rax], al; add edx, -0x80; jne 0x867e5; addss xmm0, xmm0; ret; 
0x000000000002e06c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000001faec: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000002c4fc: add byte ptr [rax], al; add byte ptr [rax], al; addsd xmm0, xmm0; ret; 
0x0000000000050b7c: add byte ptr [rax], al; add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x0000000000104c23: add byte ptr [rax], al; add byte ptr [rax], al; and al, 0x42; ret; 
0x0000000000104733: add byte ptr [rax], al; add byte ptr [rax], al; and bl, ah; ret; 
0x0000000000059a60: add byte ptr [rax], al; add byte ptr [rax], al; and byte ptr [rip + 0x48d48949], 1; ret; 
0x00000000000cbc0c: add byte ptr [rax], al; add byte ptr [rax], al; and dl, bh; out dx, al; ret 0x705f; 
0x0000000000050f6c: add byte ptr [rax], al; add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000031cec: add byte ptr [rax], al; add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x000000000004fe2c: add byte ptr [rax], al; add byte ptr [rax], al; andps xmm0, xmmword ptr [rip + 0x7bc89]; ret; 
0x000000000011020c: add byte ptr [rax], al; add byte ptr [rax], al; cdq; ret 0xbc29; 
0x0000000000104743: add byte ptr [rax], al; add byte ptr [rax], al; clc; ret; 
0x0000000000072575: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; add rsp, 0x18; ret; 
0x0000000000019b84: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000ce6fc: add byte ptr [rax], al; add byte ptr [rax], al; cmp eax, 0x4a121583; ret; 
0x0000000000042e0c: add byte ptr [rax], al; add byte ptr [rax], al; cmp ecx, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x0000000000019c9c: add byte ptr [rax], al; add byte ptr [rax], al; cmp esi, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x0000000000042dfc: add byte ptr [rax], al; add byte ptr [rax], al; cvttsd2si rax, xmm0; ret; 
0x000000000001b39c: add byte ptr [rax], al; add byte ptr [rax], al; fadd st(0); pop rbx; ret; 
0x00000000000d8322: add byte ptr [rax], al; add byte ptr [rax], al; fdivr qword ptr [rdi]; std; and ecx, esp; ret; 
0x0000000000015d2c: add byte ptr [rax], al; add byte ptr [rax], al; fld qword ptr [rip + 0xb558a]; ret; 
0x0000000000017f1c: add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp + 8]; fabs; ret; 
0x0000000000015d3c: add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x000000000001ae9c: add byte ptr [rax], al; add byte ptr [rax], al; fldz; ret; 
0x000000000000c37c: add byte ptr [rax], al; add byte ptr [rax], al; fnstcw word ptr [rdi]; xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000000d314: add byte ptr [rax], al; add byte ptr [rax], al; fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x000000000000cffc: add byte ptr [rax], al; add byte ptr [rax], al; fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x000000000010224a: add byte ptr [rax], al; add byte ptr [rax], al; idiv dword ptr [rdi - 0x7d8c2433]; push 0x5a1ac94d; ret 0x5d3a; 
0x00000000000cbeec: add byte ptr [rax], al; add byte ptr [rax], al; imul edi, edi, -0x4c; ret 0x8bd5; 
0x00000000000da021: add byte ptr [rax], al; add byte ptr [rax], al; in eax, 0x3f; add r11b, byte ptr [rsi + 0x21]; ret 0x3fe2; 
0x00000000000cca7c: add byte ptr [rax], al; add byte ptr [rax], al; jb 0xcca94; mov ds, word ptr [rdi]; ret; 
0x000000000010fbdc: add byte ptr [rax], al; add byte ptr [rax], al; jmp rbx; 
0x00000000001108ac: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x110876; cld; ret 0x8d6c; 
0x00000000000ccd4c: add byte ptr [rax], al; add byte ptr [rax], al; jno 0xccd4d; int1; mov ch, 0x1a; ret; 
0x00000000000cf3ac: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x00000000000f0c21: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x64073fe7; mov sil, 0x9c; ret; 
0x00000000000f0c01: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd3b23fe7; ret 0xf481; 
0x000000000011059c: add byte ptr [rax], al; add byte ptr [rax], al; mov ebx, edi; cmp ah, ch; ret 0x920c; 
0x000000000010f80c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0xf8ad1eee; and al, 0x83; ret 0xbfbc; 
0x0000000000085ecc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x0000000000019f4f: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019edd: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000044cec: add byte ptr [rax], al; add byte ptr [rax], al; movapd xmm0, xmm1; ret; 
0x000000000004a224: add byte ptr [rax], al; add byte ptr [rax], al; movaps xmm2, xmm1; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000007546c: add byte ptr [rax], al; add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x00000000000478ec: add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000045b2c: add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000031cdc: add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0xb1d98]; ret; 
0x000000000004952c: add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a4: add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x000000000009b92c: add byte ptr [rax], al; add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000004fe1c: add byte ptr [rax], al; add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x0000000000050abc: add byte ptr [rax], al; add byte ptr [rax], al; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000003210c: add byte ptr [rax], al; add byte ptr [rax], al; mulsd xmm0, xmm0; ret; 
0x0000000000027e8c: add byte ptr [rax], al; add byte ptr [rax], al; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000031b74: add byte ptr [rax], al; add byte ptr [rax], al; mulsd xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x00000000000501bc: add byte ptr [rax], al; add byte ptr [rax], al; mulss xmm0, xmm0; ret; 
0x00000000000500fc: add byte ptr [rax], al; add byte ptr [rax], al; mulss xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x0000000000044cd7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000432c8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000421e8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000001826a: add byte ptr [rax], al; add byte ptr [rax], al; nop; fld xword ptr [rsp + 8]; frndint; ret; 
0x000000000001be0b: add byte ptr [rax], al; add byte ptr [rax], al; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000072c2a: add byte ptr [rax], al; add byte ptr [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret; 
0x000000000005111b: add byte ptr [rax], al; add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000086aca: add byte ptr [rax], al; add byte ptr [rax], al; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x00000000000430d5: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000cc7fc: add byte ptr [rax], al; add byte ptr [rax], al; or dl, byte ptr [rbx + 0x138cb2f6]; ret 0xf2a5; 
0x00000000001047d4: add byte ptr [rax], al; add byte ptr [rax], al; out 0x11, al; ret 0xe30e; 
0x0000000000104bb3: add byte ptr [rax], al; add byte ptr [rax], al; pop r13; ret; 
0x000000000000bc6c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000cc7ac: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret 0xf20c; 
0x00000000000fc7dc: add byte ptr [rax], al; add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x0000000000111f74: add byte ptr [rax], al; add byte ptr [rax], al; popfq; stc; ret 0; 
0x00000000000e75ba: add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x0000000000057e4c: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x00000000000d78a1: add byte ptr [rax], al; add byte ptr [rax], al; rcl dh, 0x3f; lea esi, [rsi - 0x42]; sti; ret; 
0x0000000000003aa4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x00000000000069ec: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x11; 
0x00000000000cec3c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1ba9; 
0x0000000000004b14: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1e; 
0x00000000000d5d22: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x273f; 
0x00000000000cf91c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x8d1; 
0x00000000000fca20: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x9856; 
0x0000000000006f2c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0xc; 
0x00000000000cb01c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0xdc93; 
0x000000000010f93c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfc3b; 
0x0000000000007154: add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000000043f4: add byte ptr [rax], al; add byte ptr [rax], al; ret 7; 
0x000000000000119c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010f9ac: add byte ptr [rax], al; add byte ptr [rax], al; rol byte ptr [rcx], cl; out 0x2e, eax; or esi, esp; ret; 
0x0000000000086b4c: add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b0c: add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b2c: add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 4; ret; 
0x0000000000086aec: add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 9; ret; 
0x0000000000086adc: add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b5c: add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b1c: add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b3c: add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 4; ret; 
0x0000000000086afc: add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 9; ret; 
0x000000000010b4f8: add byte ptr [rax], al; add byte ptr [rax], al; sar byte ptr [rbx + 0x414cc009], 0x23; sti; ret; 
0x0000000000102189: add byte ptr [rax], al; add byte ptr [rax], al; sar cl, 0xbf; test dword ptr [rdi + 0x78], eax; retf; ret 0xf9f3; 
0x000000000004e62c: add byte ptr [rax], al; add byte ptr [rax], al; sar edx, 0x17; lea eax, [rdx - 0x7f]; ret; 
0x00000000000f1381: add byte ptr [rax], al; add byte ptr [rax], al; shl dh, 0x3f; add byte ptr [rsi], bh; ret; 
0x000000000002e0dc: add byte ptr [rax], al; add byte ptr [rax], al; sqrtsd xmm0, xmm0; ret; 
0x000000000004de9c: add byte ptr [rax], al; add byte ptr [rax], al; sqrtss xmm0, xmm0; ret; 
0x00000000000eef21: add byte ptr [rax], al; add byte ptr [rax], al; sub ah, 0x3f; ret 0x16b4; 
0x00000000000ccaac: add byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rbp + 0x38], cl; pop rsi; ret; 
0x0000000000032044: add byte ptr [rax], al; add byte ptr [rax], al; subsd xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000031bf4: add byte ptr [rax], al; add byte ptr [rax], al; subsd xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x0000000000049c2c: add byte ptr [rax], al; add byte ptr [rax], al; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b96c: add byte ptr [rax], al; add byte ptr [rax], al; subss xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x00000000000cd09c: add byte ptr [rax], al; add byte ptr [rax], al; test cl, bl; or ah, cl; ret 0x1291; 
0x00000000000421fc: add byte ptr [rax], al; add byte ptr [rax], al; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050bec: add byte ptr [rax], al; add byte ptr [rax], al; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009bc6c: add byte ptr [rax], al; add byte ptr [rax], al; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000003d03a: add byte ptr [rax], al; add byte ptr [rax], al; xchg bl, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000cb19c: add byte ptr [rax], al; add byte ptr [rax], al; xchg esi, eax; pop rdi; ret 0x65fc; 
0x000000000010fa4c: add byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rcx + 0x33], al; ret; 
0x00000000000e28f0: add byte ptr [rax], al; add byte ptr [rax], bh; sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x0000000000192129: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax + 0x7c000011], ah; adc al, 0xe8; jmp qword ptr [rcx + 2]; 
0x0000000000104444: add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x0000000000198dbd: add byte ptr [rax], al; add byte ptr [rax], dh; jle 0x198dc3; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x0000000000114a4b: add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x000000000019789d: add byte ptr [rax], al; add byte ptr [rax], dl; imul eax, dword ptr [rax], 0xee5a4c00; call qword ptr [rax]; 
0x000000000019aefa: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx], ah; add byte ptr [rax], al; ret 1; 
0x0000000000198eae: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x0000000000198bfe: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x000000000000bfd9: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x18; ret; 
0x000000000000c3e0: add byte ptr [rax], al; add byte ptr [rbp + 0x17], dh; add rsp, 0x18; ret; 
0x000000000005061f: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x18; ret; 
0x000000000004f045: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x28; ret; 
0x0000000000030d2f: add byte ptr [rax], al; add byte ptr [rbp + 0x26], dh; add rsp, 0x28; ret; 
0x0000000000018610: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x38; ret; 
0x00000000000c814d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 9]; fadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x00000000000c56ed: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rcx + 9]; fiadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x00000000000172b9: add byte ptr [rax], al; add byte ptr [rbp + 0x3e], dh; add rsp, 0x38; ret; 
0x0000000000049b93: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x00000000000c9912: add byte ptr [rax], al; add byte ptr [rbp + 0x486a75ff], al; add esp, 0x30; pop rbx; ret; 
0x0000000000086998: add byte ptr [rax], al; add byte ptr [rbp + 0x50], dh; add rsp, 0x48; ret; 
0x000000000001a3c0: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x58; ret; 
0x0000000000050cb0: add byte ptr [rax], al; add byte ptr [rbp + 0x52], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000012864: add byte ptr [rax], al; add byte ptr [rbp + 0x56], dh; add rsp, 0x28; ret; 
0x000000000000f2e7: add byte ptr [rax], al; add byte ptr [rbp + 0x63], dh; add rsp, 0x28; ret; 
0x000000000008689f: add byte ptr [rax], al; add byte ptr [rbp + 0x69], dh; add rsp, 0x48; ret; 
0x000000000006fdca: add byte ptr [rax], al; add byte ptr [rbp + 0x6d], dh; add rsp, 0x48; ret; 
0x000000000000dfdb: add byte ptr [rax], al; add byte ptr [rbp + 0x79], dh; add rsp, 0x18; ret; 
0x0000000000005d9d: add byte ptr [rax], al; add byte ptr [rbp + 3], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000bf23: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000000be5d: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000000c04d: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000bd74: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; xor eax, eax; add rsp, 0x48; ret; 
0x000000000001b006: add byte ptr [rax], al; add byte ptr [rbp + rax - 0xd], dh; ret; 
0x0000000000196d21: add byte ptr [rax], al; add byte ptr [rbp + rbx*2 - 0x40e80000], dl; in eax, dx; call qword ptr [rax]; 
0x0000000000195d11: add byte ptr [rax], al; add byte ptr [rbp + rcx*2 + 0x4280000], al; in al, dx; call qword ptr [rdi]; 
0x0000000000195d29: add byte ptr [rax], al; add byte ptr [rbp + rcx*2 + 0x4700000], bl; in al, dx; jmp qword ptr [rcx]; 
0x0000000000102d4a: add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x000000000006ef0d: add byte ptr [rax], al; add byte ptr [rbp - 0x38b72fb8], cl; ret 0xffff; 
0x0000000000052058: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0xe981; 
0x0000000000110959: add byte ptr [rax], al; add byte ptr [rbx + 0x32], 0x6a; add byte ptr [r8], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000032660: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000001498b: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000044bbb: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000001bc6a: add byte ptr [rax], al; add byte ptr [rbx + 0x94801e1], al; ror dword ptr [rdi], 1; xchg ebp, eax; ret 0xb60f; 
0x000000000010f7cd: add byte ptr [rax], al; add byte ptr [rbx + rbp - 0x271388e], al; popfq; ret 0xbfba; 
0x0000000000197b01: add byte ptr [rax], al; add byte ptr [rbx + rbp*2], dh; add byte ptr [rax - 0x7a], ch; out dx, al; jmp rbx; 
0x00000000001106ed: add byte ptr [rax], al; add byte ptr [rbx + rbx*4 + 0x7e], al; sbb dword ptr [rcx - 0x73], edx; xchg edx, eax; ret 0x3fbd; 
0x000000000001b070: add byte ptr [rax], al; add byte ptr [rbx + rcx - 0xd], dh; ret; 
0x000000000019a341: add byte ptr [rax], al; add byte ptr [rbx + rdx*4 - 0x14580000], dh; bnd jmp qword ptr [rsi]; 
0x000000000004a1f0: add byte ptr [rax], al; add byte ptr [rbx - 0x77], dl; ret; 
0x00000000000867ed: add byte ptr [rax], al; add byte ptr [rbx - 0xf8a7f3e], al; addss xmm0, xmm0; ret; 
0x0000000000019ae4: add byte ptr [rax], al; add byte ptr [rcx + 0x1f], bh; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019c03: add byte ptr [rax], al; add byte ptr [rcx + 0x1f], bh; sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x00000000000c6800: add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000c796b: add byte ptr [rax], al; add byte ptr [rcx + 0x29], cl; fmul dword ptr [rax + 0x19]; ret 0x1f0f; 
0x0000000000012e45: add byte ptr [rax], al; add byte ptr [rcx + 0x5e], bl; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x00000000000c8d6c: add byte ptr [rax], al; add byte ptr [rcx + 0x79e82404], cl; sar bh, 0xff; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001bcc7: add byte ptr [rax], al; add byte ptr [rcx + 0xc], bh; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000019185: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; wait; ret 0xf41; 
0x000000000001b7c4: add byte ptr [rax], al; add byte ptr [rcx + 7], bh; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001968f1: add byte ptr [rax], al; add byte ptr [rcx + rbx*2], ah; add byte ptr [rax - 0x6c], ch; in eax, dx; jmp rcx; 
0x00000000001948d1: add byte ptr [rax], al; add byte ptr [rcx + rdi], al; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x000000000019a139: add byte ptr [rax], al; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x00000000001970c9: add byte ptr [rax], al; add byte ptr [rcx + riz*2], bh; add byte ptr [rax], al; mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x00000000001930d1: add byte ptr [rax], al; add byte ptr [rcx + riz], al; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x00000000000cf4cd: add byte ptr [rax], al; add byte ptr [rcx - 0x56c1e3ba], ah; out 0x47, eax; pushfq; ret 0xbf; 
0x000000000010f80d: add byte ptr [rax], al; add byte ptr [rcx - 0x752e112], bh; and al, 0x83; ret 0xbfbc; 
0x00000000000c4fe2: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000000592fd: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000fc7dd: add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x00000000000cbcfd: add byte ptr [rax], al; add byte ptr [rcx - 0xd], ch; ret; 
0x00000000000ccd4d: add byte ptr [rax], al; add byte ptr [rcx - 5], dh; int1; mov ch, 0x1a; ret; 
0x000000000019aefd: add byte ptr [rax], al; add byte ptr [rcx], ah; add byte ptr [rax], al; ret 1; 
0x000000000009b60e: add byte ptr [rax], al; add byte ptr [rcx], ah; ret 0x41f2; 
0x00000000000cf18d: add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x000000000006abc1: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret 0x2d7f; 
0x00000000000fca1b: add byte ptr [rax], al; add byte ptr [rcx], bh; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x9856; 
0x0000000000019c08: add byte ptr [rax], al; add byte ptr [rcx], ch; int1; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019ae9: add byte ptr [rax], al; add byte ptr [rcx], ch; stc; shr edx, cl; imul rax, rdx; ret; 
0x00000000000e9749: add byte ptr [rax], al; add byte ptr [rcx], cl; add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x0000000000074975: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000325ea: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000cc0ad: add byte ptr [rax], al; add byte ptr [rdi + 0x13], al; sub al, 0x64; je 0xcc117; ret 0xfb98; 
0x0000000000056e54: add byte ptr [rax], al; add byte ptr [rdi + rax - 0xd], dh; ret; 
0x0000000000196f41: add byte ptr [rax], al; add byte ptr [rdi + rbx*2 - 0x27a80000], dh; in eax, dx; jmp qword ptr [rbx + 1]; 
0x0000000000196ec9: add byte ptr [rax], al; add byte ptr [rdi + rbx*2], bh; add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x0000000000192eb1: add byte ptr [rax], al; add byte ptr [rdi + rbx], ah; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x0000000000192e99: add byte ptr [rax], al; add byte ptr [rdi + rbx], cl; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000195f19: add byte ptr [rax], al; add byte ptr [rdi + rcx*2 + 0x13900000], cl; in al, dx; call qword ptr [rsi + 0xa]; 
0x0000000000198eb1: add byte ptr [rax], al; add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x0000000000196749: add byte ptr [rax], al; add byte ptr [rdi + rdx*2 - 0x7d300000], bh; in eax, dx; call qword ptr [rdi]; 
0x00000000001966c9: add byte ptr [rax], al; add byte ptr [rdi + rdx*2], bh; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000001966a1: add byte ptr [rax], al; add byte ptr [rdi + rdx*2], dl; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x0000000000051a8c: add byte ptr [rax], al; add byte ptr [rdi + riz*2 - 0xd], dh; ret; 
0x0000000000197691: add byte ptr [rax], al; add byte ptr [rdi + riz*2], al; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x00000000000e29b0: add byte ptr [rax], al; add byte ptr [rdi + rsi*4 - 0x74c011e2], dl; call rcx; 
0x00000000000cbf5d: add byte ptr [rax], al; add byte ptr [rdi], ah; movsb byte ptr [rdi], byte ptr cs:[rsi]; sal dword ptr [rsi], cl; ret; 
0x00000000000510fe: add byte ptr [rax], al; add byte ptr [rdi], bh; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000075e4c: add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x290f; 
0x00000000000769ec: add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x8a8; 
0x000000000007a74d: add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret; 
0x000000000005288e: add byte ptr [rax], al; add byte ptr [rdi], cl; push rdi; ret 0xff3; 
0x000000000004fe2d: add byte ptr [rax], al; add byte ptr [rdi], cl; push rsp; add eax, 0x7bc89; ret; 
0x0000000000052641: add byte ptr [rax], al; add byte ptr [rdi], cl; push rsp; ret 0x2e0f; 
0x00000000000119d6: add byte ptr [rax], al; add byte ptr [rdi], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000122e8: add byte ptr [rax], al; add byte ptr [rdi], cl; ror dword ptr cs:[rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000004a216: add byte ptr [rax], al; add byte ptr [rdi], cl; sub al, dl; movaps xmm0, xmm2; pop rbx; ret; 
0x000000000004a57b: add byte ptr [rax], al; add byte ptr [rdi], cl; sub cl, al; add rsp, 0x18; ret; 
0x00000000000124fd: add byte ptr [rax], al; add byte ptr [rdi], cl; sub cl, al; jne 0x12638; add rsp, 0x28; ret; 
0x000000000004a225: add byte ptr [rax], al; add byte ptr [rdi], cl; sub cl, dl; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000745d2: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rdi], eax; ret; 
0x000000000000c111: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edx; add esp, 0x38; ret; 
0x000000000004b36b: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000001], eax; add esp, 0x20; pop rbx; ret; 
0x000000000000dbc5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], ebx; add esp, 0x38; ret; 
0x00000000000164fa: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], esp; add esp, 0xa0; pop rbx; ret; 
0x00000000000c5647: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdi], ebx; or al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000001ed12: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + rax - 0x36270000], ecx; leave; ret; 
0x000000000004affe: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000002], eax; add esp, 0x20; pop rbx; ret; 
0x000000000002889f: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000002], esp; add esp, 0x40; pop rbx; ret; 
0x00000000000b16e3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000003], edx; add esp, 0x28; ret; 
0x00000000000279c3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000003], esp; add esp, 0x28; ret; 
0x000000000005c32b: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000023], esp; add esp, 0xb8; ret; 
0x00000000000800cb: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ecx; add esp, 0x20; pop rbx; ret; 
0x0000000000014673: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x60; pop rbx; ret; 
0x0000000000069d04: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi - 0x9fffffe], esi; ret; 
0x000000000001c36a: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi], ecx; add eax, dword ptr [rax]; add cl, cl; ret; 
0x00000000000734e7: add byte ptr [rax], al; add byte ptr [rdi], cl; test edx, edx; or byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000193f1: add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ret 0x450f; 
0x00000000000195c4: add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x0000000000044852: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x00000000000cca7d: add byte ptr [rax], al; add byte ptr [rdx + 0x12], dh; mov ds, word ptr [rdi]; ret; 
0x0000000000104c24: add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; ret; 
0x00000000001979a9: add byte ptr [rax], al; add byte ptr [rdx + rbp*2], bl; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x0000000000199a09: add byte ptr [rax], al; add byte ptr [rdx + rcx*4], bh; add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x00000000000ece02: add byte ptr [rax], al; add byte ptr [rdx + rsi*8 + 0x2065d23f], al; push rax; fisttp word ptr [rbp + riz + 0x5f6000bf]; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x00000000000ecd42: add byte ptr [rax], al; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x000000000009722d: add byte ptr [rax], al; add byte ptr [rdx - 0x75], cl; push rsp; ret; 
0x00000000000cd11d: add byte ptr [rax], al; add byte ptr [rdx - 0x76], al; ret; 
0x00000000000e9f58: add byte ptr [rax], al; add byte ptr [rdx], 0x9c; jmp qword ptr [rbx]; 
0x00000000000e9e98: add byte ptr [rax], al; add byte ptr [rdx], al; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000fe249: add byte ptr [rax], al; add byte ptr [rdx], bh; ret; 
0x00000000000e8908: add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x0000000000050581: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc1: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a1: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b1: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d271: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d711: add byte ptr [rax], al; add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000ce6fd: add byte ptr [rax], al; add byte ptr [rip + 0x4a121583], bh; ret; 
0x0000000000050e75: add byte ptr [rax], al; add byte ptr [rip + 0x7fffffff], spl; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x000000000010fbfd: add byte ptr [rax], al; add byte ptr [rip - 0x6becb5b5], dl; sal bl, 1; ret 0x3ffd; 
0x0000000000050f6d: add byte ptr [rax], al; add byte ptr [rip - 0x80000000], ah; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000001108ad: add byte ptr [rax], al; add byte ptr [rsi + 0x75], ah; ret; 
0x000000000007d56e: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x48; ret; 
0x000000000007c360: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x20; add rsp, 0x48; ret; 
0x000000000007546d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 8; ret; 
0x0000000000058e2b: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x850f; 
0x00000000000724ff: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x95e8; 
0x00000000000704b9: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbc41; 
0x00000000000596ed: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000060e0f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000070362: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000484d5: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rax; ret; 
0x000000000002e84d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rdi; sal edx, 0xf; pop rcx; ret 0xf66; 
0x0000000000031ced: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; add eax, 0x995b8; ret; 
0x0000000000045a61: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x85874; ret; 
0x000000000003d625: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x000000000000e3a6: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000000ed29: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000004271b: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], cl; wait; ret 0x450f; 
0x0000000000021f4b: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; sub bh, al; jne 0x22e73; add rsp, 0x48; ret; 
0x00000000000270a4: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; sub cl, al; add rsp, 0x18; ret; 
0x000000000000ef53: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; sub cl, al; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000044ced: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; sub cl, al; ret; 
0x0000000000191609: add byte ptr [rax], al; add byte ptr [rsi + rax], bh; add byte ptr [rax], dl; ret 0xffe7; 
0x0000000000193df9: add byte ptr [rax], al; add byte ptr [rsi + rbp], ch; add byte ptr [rax], al; xchg cl, ch; call qword ptr [rcx]; 
0x0000000000196db9: add byte ptr [rax], al; add byte ptr [rsi + rbx*2], ch; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x0000000000195d91: add byte ptr [rax], al; add byte ptr [rsi + rcx*2], al; add byte ptr [rax], al; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x0000000000191df1: add byte ptr [rax], al; add byte ptr [rsi + rcx], ah; add al, ch; add ch, al; jmp qword ptr [rsi]; 
0x0000000000191dc1: add byte ptr [rax], al; add byte ptr [rsi + rcx], dh; add byte ptr [rax], al; pop rax; add ch, al; call qword ptr [rcx]; 
0x0000000000198df9: add byte ptr [rax], al; add byte ptr [rsi + rdi*2], ch; add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x00000000001985a1: add byte ptr [rax], al; add byte ptr [rsi + rsi*2], dl; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x000000000001826b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; fld xword ptr [rsp + 8]; frndint; ret; 
0x0000000000072c2b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000086acb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; roundsd xmm0, xmm0, 0xa; ret; 
0x000000000001b22c: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000019f50: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019ede: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000110951: add byte ptr [rax], al; add byte ptr [rsi*2 + 0x4147], 0; add byte ptr [rbx + 0x32], 0x6a; add byte ptr [r8], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000cf03d: add byte ptr [rax], al; add byte ptr [rsi], dl; ret 0xc006; 
0x000000000007c59f: add byte ptr [rax], al; add byte ptr [rsp + rcx + 0x48], dh; add esp, 0x20; pop rbx; ret; 
0x0000000000198c01: add byte ptr [rax], al; add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x000000000019a401: add byte ptr [rax], al; add byte ptr [rsp + rdx*4], dh; add byte ptr [rax - 0xe], bl; bnd call qword ptr [rdx]; 
0x0000000000197429: add byte ptr [rax], al; add byte ptr [rsp + riz*2 + 0x3cb00000], bl; out dx, al; call rsi; 
0x0000000000198419: add byte ptr [rax], al; add byte ptr [rsp + rsi*2 - 0x1b000000], cl; out dx, al; call rdx; 
0x000000000019a136: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x000000000019841e: add byte ptr [rax], al; add ch, ah; out dx, al; call rdx; 
0x000000000009bc6d: add byte ptr [rax], al; add ch, al; cli; adc byte ptr [rsp - 0xc], al; ret; 
0x000000000008823d: add byte ptr [rax], al; add ch, al; ret; 
0x00000000000966fd: add byte ptr [rax], al; add ch, al; sti; pop rcx; ret 0xd089; 
0x00000000000bfe7d: add byte ptr [rax], al; add ch, al; sti; pop rsp; ret 0xfbc5; 
0x0000000000098dc3: add byte ptr [rax], al; add ch, al; sti; pop rsp; ret; 
0x0000000000099c5d: add byte ptr [rax], al; add ch, al; sti; push rcx; ret 0xfbc5; 
0x0000000000015d2d: add byte ptr [rax], al; add ch, bl; add eax, 0xb558a; ret; 
0x00000000000207ed: add byte ptr [rax], al; add ch, bl; fdiv st(3); ret; 
0x0000000000015ddd: add byte ptr [rax], al; add ch, bl; fdiv st(6); ret 0x7402; 
0x000000000011061d: add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x00000000000e9e38: add byte ptr [rax], al; add cl, 0xb7; jmp qword ptr [rax]; 
0x000000000001ae9d: add byte ptr [rax], al; add cl, bl; out dx, al; ret; 
0x00000000000c4b47: add byte ptr [rax], al; add cl, bl; ret; 
0x000000000003086f: add byte ptr [rax], al; add cl, ch; pop rsp; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000029e80: add byte ptr [rax], al; add cl, ch; ret 0xfffb; 
0x000000000000ea96: add byte ptr [rax], al; add cl, ch; ret 8; 
0x00000000000c8cee: add byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cf3ad: add byte ptr [rax], al; add cl, cl; ret; 
0x000000000001900d: add byte ptr [rax], al; add dh, bl; loope 0x18ff1; ret 0xc9d9; 
0x00000000000e9ef8: add byte ptr [rax], al; add dl, al; movsd dword ptr [rdi], dword ptr [rsi]; jmp qword ptr [rdx]; 
0x00000000000e77f8: add byte ptr [rax], al; add dl, al; ret; 
0x000000000002c4fd: add byte ptr [rax], al; add dl, dh; addps xmm0, xmm0; ret; 
0x000000000003cb9d: add byte ptr [rax], al; add dl, dh; addps xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x0000000000042dfd: add byte ptr [rax], al; add dl, dh; cvttps2pi mm0, xmm0; ret; 
0x00000000000478ed: add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000045b2d: add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000031cdd: add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rip + 0xb1d98]; ret; 
0x000000000004952d: add byte ptr [rax], al; add dl, dh; movups xmm1, xmmword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a5: add byte ptr [rax], al; add dl, dh; movups xmm1, xmmword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x000000000004406b: add byte ptr [rax], al; add dl, dh; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000003210d: add byte ptr [rax], al; add dl, dh; mulps xmm0, xmm0; ret; 
0x0000000000027e8d: add byte ptr [rax], al; add dl, dh; mulps xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000031b75: add byte ptr [rax], al; add dl, dh; mulps xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x000000000002e0dd: add byte ptr [rax], al; add dl, dh; sqrtps xmm0, xmm0; ret; 
0x0000000000032045: add byte ptr [rax], al; add dl, dh; subps xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000031bf5: add byte ptr [rax], al; add dl, dh; subps xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000010f9ad: add byte ptr [rax], al; add dl, dl; add edi, esp; or esi, esp; ret; 
0x0000000000080828: add byte ptr [rax], al; add dword ptr [rax + 0x29], ecx; ret 0xc748; 
0x000000000000b2de: add byte ptr [rax], al; add dword ptr [rax], eax; add dword ptr [rax], eax; ret 0x20; 
0x0000000000006f26: add byte ptr [rax], al; add dword ptr [rbx], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xc; 
0x0000000000004d26: add byte ptr [rax], al; add dword ptr cs:[rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add al, dh; ret 0; 
0x00000000000867ee: add byte ptr [rax], al; add edx, -0x80; jne 0x867e5; addss xmm0, xmm0; ret; 
0x00000000000e9b99: add byte ptr [rax], al; add esi, ecx; call qword ptr [rbx]; 
0x000000000002e06e: add byte ptr [rax], al; add rsp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000004ddf6: add byte ptr [rax], al; add rsp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x000000000001aaca: add byte ptr [rax], al; add rsp, 0x158; pop rbx; pop rbp; ret; 
0x0000000000089c37: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000ed03: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000d33d: add byte ptr [rax], al; add rsp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000001bf7b: add byte ptr [rax], al; add rsp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x000000000000d128: add byte ptr [rax], al; add rsp, 0x20; add rsp, 8; ret; 
0x000000000001c6b8: add byte ptr [rax], al; add rsp, 0x20; fchs; add rsp, 8; fxch st(1); ret; 
0x000000000004c4e2: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004b005: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000007c5ae: add byte ptr [rax], al; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000273b2: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000000cb91: add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000006e501: add byte ptr [rax], al; add rsp, 0x30; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000002e5f6: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000001faee: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000000c9521: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002fa53: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000000c118: add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000000131a6: add byte ptr [rax], al; add rsp, 0x40; pop rbx; faddp st(1); ret; 
0x000000000006a6c7: add byte ptr [rax], al; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000000f462: add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000083251: add byte ptr [rax], al; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x0000000000018cf1: add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000021f56: add byte ptr [rax], al; add rsp, 0x48; ret; 
0x0000000000075621: add byte ptr [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000002e30b: add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x0000000000015efd: add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000013bf9: add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x0000000000029435: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000043be6: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000013944: add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x000000000000e0fa: add byte ptr [rax], al; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000069598: add byte ptr [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000764ea: add byte ptr [rax], al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000075cc2: add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000016501: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; ret; 
0x000000000006a442: add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000014985: add byte ptr [rax], al; add rsp, 0xb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000060e1a: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000059b4d: add byte ptr [rax], al; add rsp, 0xb8; ret; 
0x0000000000076f3c: add byte ptr [rax], al; add rsp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000000c9cc: add byte ptr [rax], al; add rsp, 0xc0; pop rbx; ret; 
0x000000000005e6f1: add byte ptr [rax], al; add rsp, 0xc8; ret; 
0x000000000001a106: add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000002c4fe: add byte ptr [rax], al; addsd xmm0, xmm0; ret; 
0x000000000003cb9e: add byte ptr [rax], al; addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x0000000000050355: add byte ptr [rax], al; addss xmm0, xmm0; mov rdx, qword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x0000000000050b7e: add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x00000000000048ce: add byte ptr [rax], al; and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000192eb2: add byte ptr [rax], al; and al, 0x1f; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x0000000000104c25: add byte ptr [rax], al; and al, 0x42; ret; 
0x0000000000198eb2: add byte ptr [rax], al; and al, 0x7f; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x00000000000ef370: add byte ptr [rax], al; and al, bh; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x0000000000104735: add byte ptr [rax], al; and bl, ah; ret; 
0x0000000000192a5e: add byte ptr [rax], al; and byte ptr [rax - 0x18], bl; jmp qword ptr [rdx + 1]; 
0x000000000019789a: add byte ptr [rax], al; and byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rcx], ch; add byte ptr [rdx + rbx*2 - 0x12], cl; call qword ptr [rax]; 
0x00000000000ff224: add byte ptr [rax], al; and byte ptr [rdx + 0x2b179000], ch; add byte ptr [rax + 0x6000aac7], al; ret; 
0x0000000000059a62: add byte ptr [rax], al; and byte ptr [rip + 0x48d48949], 1; ret; 
0x000000000019836e: add byte ptr [rax], al; and cl, 0xee; jmp qword ptr [rdx]; 
0x00000000000cbc0e: add byte ptr [rax], al; and dl, bh; out dx, al; ret 0x705f; 
0x00000000001930d2: add byte ptr [rax], al; and dword ptr [rax], r8d; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x0000000000050582: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc2: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a2: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b2: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d272: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d712: add byte ptr [rax], al; and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x0000000000019e7c: add byte ptr [rax], al; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000050e76: add byte ptr [rax], al; and eax, 0x7fffffff; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x0000000000050f6e: add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000070178: add byte ptr [rax], al; and rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000045ada: add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x857fc]; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000042ffe: add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000031cee: add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x0000000000045a62: add byte ptr [rax], al; andpd xmm1, xmmword ptr [rip + 0x85874]; ret; 
0x0000000000045c45: add byte ptr [rax], al; andpd xmm5, xmm7; pop rbx; orpd xmm1, xmm5; ret; 
0x000000000004fe2e: add byte ptr [rax], al; andps xmm0, xmmword ptr [rip + 0x7bc89]; ret; 
0x000000000006f75f: add byte ptr [rax], al; call 0xc9110; add rsp, 0x18; ret; 
0x000000000018ff1a: add byte ptr [rax], al; call 0xffffffff9118ea6e; push rbx; add byte ptr [rax], al; mov byte ptr [rax - 0x15], dl; call rax; 
0x000000000011020e: add byte ptr [rax], al; cdq; ret 0xbc29; 
0x000000000018fb92: add byte ptr [rax], al; clc; adc ebp, ecx; jmp qword ptr [rax]; 
0x00000000001905d2: add byte ptr [rax], al; clc; cmc; in eax, dx; jmp qword ptr [rax]; 
0x000000000019019a: add byte ptr [rax], al; clc; imul bl; jmp qword ptr [rax]; 
0x0000000000198786: add byte ptr [rax], al; clc; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000190aea: add byte ptr [rax], al; clc; jae 0x190ade; call rax; 
0x000000000018ffaa: add byte ptr [rax], al; clc; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x0000000000197ab6: add byte ptr [rax], al; clc; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x000000000019020a: add byte ptr [rax], al; clc; paddsb mm7, mm7; mov eax, 0x18000060; adc ah, ch; call rax; 
0x0000000000104745: add byte ptr [rax], al; clc; ret; 
0x00000000001902fa: add byte ptr [rax], al; clc; sbb al, 0xec; call rax; 
0x000000000007df1c: add byte ptr [rax], al; cmove eax, edx; ret; 
0x0000000000072577: add byte ptr [rax], al; cmovne rax, rdx; add rsp, 0x18; ret; 
0x0000000000019b86: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000001966ca: add byte ptr [rax], al; cmp al, 0x57; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x0000000000196eca: add byte ptr [rax], al; cmp al, 0x5f; add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x00000000001970ca: add byte ptr [rax], al; cmp al, 0x61; add byte ptr [rax], al; mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x000000000019095a: add byte ptr [rax], al; cmp al, ch; out dx, al; jmp rax; 
0x000000000007276e: add byte ptr [rax], al; cmp bh, 0x7f; cmp rax, rdx; seta al; movzx eax, al; ret; 
0x00000000001985a6: add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x000000000008669d: add byte ptr [rax], al; cmp byte ptr [rax - 0x40800000], 0xf; shl byte ptr [r14 + 0xf], 1; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x00000000000e0b01: add byte ptr [rax], al; cmp byte ptr [rax - 0x73c00ffe], ah; ret 0xaf2; 
0x0000000000190e42: add byte ptr [rax], al; cmp byte ptr [rbx], bl; bnd call rax; 
0x0000000000192eb6: add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x0000000000050ee5: add byte ptr [rax], al; cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000866a1: add byte ptr [rax], al; cmp byte ptr [rdi + 0x66d0450f], 0xf; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x000000000009c8d1: add byte ptr [rax], al; cmp byte ptr [rdi + 0x75], 0xe; mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c1: add byte ptr [rax], al; cmp byte ptr [rdi + 0x75], 0xe; mov rax, qword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000004a7fe: add byte ptr [rax], al; cmp byte ptr [rdi + 0x7e], 0xc; mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x0000000000051a4b: add byte ptr [rax], al; cmp byte ptr [rdi - 0x77], 0xc2; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x0000000000190d52: add byte ptr [rax], al; cmp byte ptr [rdi - 0xf], bl; jmp rax; 
0x000000000004a1e9: add byte ptr [rax], al; cmp byte ptr [rdi], 0xf; test ch, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x77], dl; ret; 
0x00000000001906ca: add byte ptr [rax], al; cmp byte ptr [rdi], dh; out dx, al; push qword ptr [rax + 0x8000078]; cmp dh, ch; jmp rax; 
0x00000000000fc741: add byte ptr [rax], al; cmp dl, 0xd4; ret; 
0x00000000001948d2: add byte ptr [rax], al; cmp dword ptr [rax], r8d; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x0000000000020c7a: add byte ptr [rax], al; cmp eax, 0x3fbe; jge 0x20c88; fld1; faddp st(1); ret; 
0x0000000000050587: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc7: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a7: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b7: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d277: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d717: add byte ptr [rax], al; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000ce6fe: add byte ptr [rax], al; cmp eax, 0x4a121583; ret; 
0x0000000000042e0e: add byte ptr [rax], al; cmp ecx, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x000000000004749e: add byte ptr [rax], al; cmp edx, 1; jbe 0x471d8; movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x0000000000019c9e: add byte ptr [rax], al; cmp esi, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x000000000018fe72: add byte ptr [rax], al; cmp rbp, rbx; call qword ptr [rax + 0x51]; 
0x000000000003d1de: add byte ptr [rax], al; cmp rcx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x00000000000320e2: add byte ptr [rax], al; cvtsi2sd xmm0, rdx; ret; 
0x0000000000042dfe: add byte ptr [rax], al; cvttsd2si rax, xmm0; ret; 
0x000000000018f4a2: add byte ptr [rax], al; cwde; int 0xe7; call qword ptr [rax]; 
0x0000000000199b26: add byte ptr [rax], al; cwde; mov eax, dword ptr [rax]; add byte ptr [rdx + rdi*2], al; int1; call rsi; 
0x00000000001931d6: add byte ptr [rax], al; cwde; mov eax, ebp; jmp qword ptr [rax + 2]; 
0x000000000018fc6a: add byte ptr [rax], al; cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000191f56: add byte ptr [rax], al; cwde; or al, ch; call rsp; 
0x0000000000190142: add byte ptr [rax], al; cwde; out 0xeb, al; call ptr [rax - 0x57ffffa3]; out 0xeb, eax; call rax; 
0x0000000000191b46: add byte ptr [rax], al; cwde; shl edi, cl; call rax; 
0x0000000000198d96: add byte ptr [rax], al; cwde; std; out dx, eax; call qword ptr [rbp + 3]; 
0x000000000018ffba: add byte ptr [rax], al; cwde; xchg bl, ch; call rax; 
0x0000000000020998: add byte ptr [rax], al; divss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000193b26: add byte ptr [rax], al; fadd dword ptr [rcx - 0x17]; jmp qword ptr [rdx]; 
0x000000000001b39e: add byte ptr [rax], al; fadd st(0); pop rbx; ret; 
0x0000000000018c26: add byte ptr [rax], al; fadd st(0); ret; 
0x000000000001c11c: add byte ptr [rax], al; fchs; add rsp, 0x18; ret; 
0x0000000000197696: add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x000000000019a46a: add byte ptr [rax], al; fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x0000000000190a6a: add byte ptr [rax], al; fcomp dword ptr [rcx - 0x11]; call rax; 
0x00000000001966a6: add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x0000000000197872: add byte ptr [rax], al; fcomp qword ptr [rcx - 0x12]; call qword ptr [rax]; 
0x0000000000190afa: add byte ptr [rax], al; fdiv dword ptr [rbp - 0x11]; call qword ptr [rax]; 
0x00000000001930d6: add byte ptr [rax], al; fdivr dword ptr [rdi - 0x18]; call qword ptr [rdi]; 
0x000000000018fdca: add byte ptr [rax], al; fdivr dword ptr [rsi - 0x16]; jmp qword ptr [rax + 0x4e]; 
0x00000000000d8324: add byte ptr [rax], al; fdivr qword ptr [rdi]; std; and ecx, esp; ret; 
0x000000000001fade: add byte ptr [rax], al; fld dword ptr [rip + 0xac98a]; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000015d2e: add byte ptr [rax], al; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001bdfe: add byte ptr [rax], al; fld xword ptr [rsp + 0x18]; ret; 
0x0000000000017f1e: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fabs; ret; 
0x0000000000015d3e: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000012c6e: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x000000000001717e: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fld1; fpatan; ret; 
0x0000000000012a32: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fsub st(0); fdiv st(0); ret; 
0x0000000000017fae: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fxtract; fstp st(0); ret; 
0x000000000001ae9e: add byte ptr [rax], al; fldz; ret; 
0x000000000000c37e: add byte ptr [rax], al; fnstcw word ptr [rdi]; xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000000d316: add byte ptr [rax], al; fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x000000000000ccd6: add byte ptr [rax], al; fstp st(0); add rsp, 0x28; ret; 
0x0000000000016f1f: add byte ptr [rax], al; fstp st(0); fld1; fdivrp st(1); ret; 
0x0000000000016b5e: add byte ptr [rax], al; fstp st(0); fld1; ret; 
0x0000000000032366: add byte ptr [rax], al; fstp st(0); fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000000cffe: add byte ptr [rax], al; fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x0000000000020c1e: add byte ptr [rax], al; fstp st(0); fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x0000000000020b6e: add byte ptr [rax], al; fstp st(0); fstp st(0); fstp st(1); add rsp, 0x28; ret; 
0x0000000000020c2e: add byte ptr [rax], al; fstp st(1); add rsp, 0x28; ret; 
0x000000000001611e: add byte ptr [rax], al; fstp st(1); fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x000000000000cd7c: add byte ptr [rax], al; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x0000000000190792: add byte ptr [rax], al; fsub dword ptr [rdx - 0x12]; call qword ptr [rax]; 
0x000000000019067a: add byte ptr [rax], al; fsubr dword ptr [rsi]; out dx, al; jmp qword ptr [rax]; 
0x0000000000020c3e: add byte ptr [rax], al; fucomi st(1); fcmovnbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000001a121: add byte ptr [rax], al; fucompi st(1); fstp st(0); setp al; cmovne eax, edx; ret; 
0x000000000001e3be: add byte ptr [rax], al; fxch st(1); add rsp, 0x58; ret; 
0x000000000001f25c: add byte ptr [rax], al; fxch st(1); add rsp, 0x78; ret; 
0x0000000000020c4e: add byte ptr [rax], al; fxch st(1); faddp st(1); add rsp, 0x28; ret; 
0x000000000001ed19: add byte ptr [rax], al; fxch st(1); leave; ret; 
0x000000000001cc7e: add byte ptr [rax], al; fxch st(1); ret; 
0x0000000000195982: add byte ptr [rax], al; hlt; add byte ptr [r8], al; clc; ret; 
0x0000000000195782: add byte ptr [rax], al; hlt; add byte ptr [r8], r8b; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x000000000010224c: add byte ptr [rax], al; idiv dword ptr [rdi - 0x7d8c2433]; push 0x5a1ac94d; ret 0x5d3a; 
0x000000000018f42e: add byte ptr [rax], al; imul eax, dword ptr [rbx], 0; add al, ch; ret; 
0x00000000000cbeee: add byte ptr [rax], al; imul edi, edi, -0x4c; ret 0x8bd5; 
0x0000000000194c72: add byte ptr [rax], al; in al, 0x3c; add byte ptr [rax], al; mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x000000000019117a: add byte ptr [rax], al; in al, dx; add dword ptr [rax], eax; add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x00000000000da023: add byte ptr [rax], al; in eax, 0x3f; add r11b, byte ptr [rsi + 0x21]; ret 0x3fe2; 
0x000000000018f59a: add byte ptr [rax], al; in eax, 0xe7; jmp qword ptr [rax]; 
0x000000000019841f: add byte ptr [rax], al; in eax, 0xee; call rdx; 
0x00000000001990fa: add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [rax], 0xf0496000; jmp qword ptr [rdx + 0xd]; 
0x0000000000198dfa: add byte ptr [rax], al; insb byte ptr [rdi], dx; jle 0x198dff; add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x0000000000197842: add byte ptr [rax], al; insb byte ptr [rdi], dx; pop rcx; out dx, al; call qword ptr [rax]; 
0x00000000000e24b1: add byte ptr [rax], al; insb byte ptr [rdi], dx; push rbx; ret; 
0x000000000019b87a: add byte ptr [rax], al; ja 0x19b87f; add byte ptr [rax], al; ret; 
0x0000000000017f8d: add byte ptr [rax], al; jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x00000000000cca7e: add byte ptr [rax], al; jb 0xcca94; mov ds, word ptr [rdi]; ret; 
0x00000000001907ba: add byte ptr [rax], al; jbe 0x1907ad; call qword ptr [rax]; 
0x00000000000747c9: add byte ptr [rax], al; jbe 0x747e0; cmp rdx, 0x7fff; je 0x74898; add rsp, 0x18; ret; 
0x0000000000012fca: add byte ptr [rax], al; je 0x12fd2; fstp st(0); fldz; ret; 
0x0000000000198c02: add byte ptr [rax], al; je 0x198c82; add byte ptr [rax], al; out dx, eax; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000019d7a: add byte ptr [rax], al; je 0x19d82; fstp st(0); fldz; ret; 
0x0000000000020cb2: add byte ptr [rax], al; je 0x20cba; fstp st(0); fldz; ret; 
0x00000000000747d2: add byte ptr [rax], al; je 0x74898; add rsp, 0x18; ret; 
0x000000000007c5a0: add byte ptr [rax], al; je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x0000000000020c7f: add byte ptr [rax], al; jge 0x20c88; fld1; faddp st(1); ret; 
0x0000000000191f0a: add byte ptr [rax], al; jl 0x191f1d; add byte ptr [rax], al; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x000000000010fbde: add byte ptr [rax], al; jmp rbx; 
0x00000000001108ae: add byte ptr [rax], al; jne 0x110876; cld; ret 0x8d6c; 
0x000000000000f45c: add byte ptr [rax], al; jne 0x118be; add rsp, 0x40; pop rbx; ret; 
0x0000000000012865: add byte ptr [rax], al; jne 0x128bf; add rsp, 0x28; ret; 
0x0000000000012994: add byte ptr [rax], al; jne 0x129b0; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x000000000001393e: add byte ptr [rax], al; jne 0x13ac4; add rsp, 0x70; pop rbx; ret; 
0x0000000000013bf3: add byte ptr [rax], al; jne 0x13d7a; add rsp, 0x60; pop rbx; ret; 
0x0000000000014674: add byte ptr [rax], al; jne 0x14802; add rsp, 0x60; pop rbx; ret; 
0x0000000000015ef7: add byte ptr [rax], al; jne 0x15fec; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000016010: add byte ptr [rax], al; jne 0x16008; fstp st(1); ret; 
0x00000000000164fb: add byte ptr [rax], al; jne 0x166aa; add rsp, 0xa0; pop rbx; ret; 
0x0000000000016892: add byte ptr [rax], al; jne 0x16ab9; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000172ba: add byte ptr [rax], al; jne 0x172fc; add rsp, 0x38; ret; 
0x000000000001739b: add byte ptr [rax], al; jne 0x174a0; add rsp, 0x38; ret; 
0x000000000001845d: add byte ptr [rax], al; jne 0x1855d; add rsp, 0x38; ret; 
0x0000000000018611: add byte ptr [rax], al; jne 0x1863c; add rsp, 0x38; ret; 
0x0000000000018ceb: add byte ptr [rax], al; jne 0x18e85; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000001a3c1: add byte ptr [rax], al; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c36b: add byte ptr [rax], al; jne 0x1c681; leave; ret; 
0x000000000001ed13: add byte ptr [rax], al; jne 0x1efa7; fxch st(1); leave; ret; 
0x000000000001f256: add byte ptr [rax], al; jne 0x1f4ba; fxch st(1); add rsp, 0x78; ret; 
0x00000000000230c4: add byte ptr [rax], al; jne 0x26ed9; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000279c4: add byte ptr [rax], al; jne 0x27cf1; add rsp, 0x28; ret; 
0x00000000000288a0: add byte ptr [rax], al; jne 0x28acd; add rsp, 0x40; pop rbx; ret; 
0x0000000000028c54: add byte ptr [rax], al; jne 0x28dda; add rsp, 0x40; pop rbx; ret; 
0x000000000002942f: add byte ptr [rax], al; jne 0x29645; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000000297b9: add byte ptr [rax], al; jne 0x2999d; add rsp, 0x40; pop rbx; ret; 
0x000000000002d9c0: add byte ptr [rax], al; jne 0x2ddd2; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000002e305: add byte ptr [rax], al; jne 0x2e454; add rsp, 0x50; pop rbx; ret; 
0x000000000002fa4d: add byte ptr [rax], al; jne 0x30b7d; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000030d30: add byte ptr [rax], al; jne 0x30d5a; add rsp, 0x28; ret; 
0x000000000003d1e5: add byte ptr [rax], al; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x000000000004519c: add byte ptr [rax], al; jne 0x454e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000046bec: add byte ptr [rax], al; jne 0x46f1a; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000047c09: add byte ptr [rax], al; jne 0x47e29; add rsp, 0x50; pop rbx; ret; 
0x0000000000048271: add byte ptr [rax], al; jne 0x48599; add rsp, 0x60; pop rbx; ret; 
0x0000000000049b94: add byte ptr [rax], al; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004afff: add byte ptr [rax], al; jne 0x4b20c; add rsp, 0x20; pop rbx; ret; 
0x000000000004b36c: add byte ptr [rax], al; jne 0x4b4f5; add rsp, 0x20; pop rbx; ret; 
0x000000000004b9ac: add byte ptr [rax], al; jne 0x4bbbc; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000004d8af: add byte ptr [rax], al; jne 0x4daba; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004e0b4: add byte ptr [rax], al; jne 0x4e1ba; add rsp, 0x30; pop rbx; ret; 
0x000000000004f046: add byte ptr [rax], al; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000004ff13: add byte ptr [rax], al; jne 0x50058; movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x0000000000050620: add byte ptr [rax], al; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000050cb1: add byte ptr [rax], al; jne 0x50d07; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000516d8: add byte ptr [rax], al; jne 0x518c4; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000059b47: add byte ptr [rax], al; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c32c: add byte ptr [rax], al; jne 0x5e659; add rsp, 0xb8; ret; 
0x0000000000067961: add byte ptr [rax], al; jne 0x67d52; sub rsp, -0x80; pop rbx; ret; 
0x000000000006a43c: add byte ptr [rax], al; jne 0x6a61d; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000006bfbc: add byte ptr [rax], al; jne 0x6c06f; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000006c253: add byte ptr [rax], al; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006f074: add byte ptr [rax], al; jne 0x6f6fb; add rsp, 0x50; pop rbx; ret; 
0x000000000006fb5c: add byte ptr [rax], al; jne 0x6fb05; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000006fc73: add byte ptr [rax], al; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdcb: add byte ptr [rax], al; jne 0x6fe3c; add rsp, 0x48; ret; 
0x0000000000070d1d: add byte ptr [rax], al; jne 0x70dbf; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000070e90: add byte ptr [rax], al; jne 0x70f8c; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000072abc: add byte ptr [rax], al; jne 0x72a63; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000800cc: add byte ptr [rax], al; jne 0x80162; add rsp, 0x20; pop rbx; ret; 
0x00000000000809cd: add byte ptr [rax], al; jne 0x80d30; add rsp, 0x30; pop rbx; ret; 
0x0000000000086784: add byte ptr [rax], al; jne 0x8677c; addsd xmm0, xmm0; ret; 
0x00000000000868a0: add byte ptr [rax], al; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086999: add byte ptr [rax], al; jne 0x869ed; add rsp, 0x48; ret; 
0x000000000008720a: add byte ptr [rax], al; jne 0x874d9; add rsp, 0x28; ret; 
0x000000000008c764: add byte ptr [rax], al; jne 0x8eda1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000099a2d: add byte ptr [rax], al; jne 0x99ac3; add rsp, 0x20; pop rbx; ret; 
0x000000000009d78c: add byte ptr [rax], al; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b001d: add byte ptr [rax], al; jne 0xb00b3; add rsp, 0x20; pop rbx; ret; 
0x00000000000b16e4: add byte ptr [rax], al; jne 0xb1a01; add rsp, 0x28; ret; 
0x00000000000b51c4: add byte ptr [rax], al; jne 0xb8cea; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000000bd75: add byte ptr [rax], al; jne 0xbd80; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000be5e: add byte ptr [rax], al; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bed6: add byte ptr [rax], al; jne 0xbee1; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000bf24: add byte ptr [rax], al; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf6d: add byte ptr [rax], al; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000bfda: add byte ptr [rax], al; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c04e: add byte ptr [rax], al; jne 0xc059; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c112: add byte ptr [rax], al; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c209: add byte ptr [rax], al; jne 0xc214; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c270: add byte ptr [rax], al; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2d4: add byte ptr [rax], al; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000c31f: add byte ptr [rax], al; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c361: add byte ptr [rax], al; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000000c3e1: add byte ptr [rax], al; jne 0xc3fc; add rsp, 0x18; ret; 
0x000000000000c9c6: add byte ptr [rax], al; jne 0xcb2a; add rsp, 0xc0; pop rbx; ret; 
0x000000000000dbc6: add byte ptr [rax], al; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfdc: add byte ptr [rax], al; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000e0f4: add byte ptr [rax], al; jne 0xe2b3; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000000f2e8: add byte ptr [rax], al; jne 0xf34f; add rsp, 0x28; ret; 
0x00000000000ccd4e: add byte ptr [rax], al; jno 0xccd4d; int1; mov ch, 0x1a; ret; 
0x000000000001b7c5: add byte ptr [rax], al; jns 0x1b7d0; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000001bcc8: add byte ptr [rax], al; jns 0x1bcd8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000195d2e: add byte ptr [rax], al; jo 0x195d36; in al, dx; jmp qword ptr [rcx]; 
0x0000000000196dbe: add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x0000000000190722: add byte ptr [rax], al; js 0x190776; out dx, al; call rax; 
0x00000000001909e2: add byte ptr [rax], al; js 0x190a0d; out dx, eax; jmp rsp; 
0x0000000000007196: add byte ptr [rax], al; lea eax, [rcx]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000005058c: add byte ptr [rax], al; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bcc: add byte ptr [rax], al; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0ac: add byte ptr [rax], al; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7bc: add byte ptr [rax], al; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d27c: add byte ptr [rax], al; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d71c: add byte ptr [rax], al; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x000000000006c4d5: add byte ptr [rax], al; lea rdx, [rip + 0x9f936]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006c403: add byte ptr [rax], al; lea rdx, [rip + 0x9f9e4]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064433: add byte ptr [rax], al; lea rdx, [rip + 0xa3c44]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c996: add byte ptr [rax], al; lea rdx, [rip + 0xb3dcd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c891: add byte ptr [rax], al; lea rdx, [rip + 0xb3eb6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000153f0: add byte ptr [rax], al; lea rdx, [rip + 0xb78ef]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000c6eb3: add byte ptr [rax], al; lea rdx, [rip + 0xc8528]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000001c371: add byte ptr [rax], al; leave; ret; 
0x000000000019a13a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; xchg ecx, eax; add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; bnd call rax; 
0x000000000019a13e: add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; bnd call rax; 
0x000000000011dae9: add byte ptr [rax], al; loope 0x11dabf; call qword ptr [rdx]; 
0x000000000011dba9: add byte ptr [rax], al; loope 0x11db6a; call qword ptr [rsi]; 
0x000000000014c349: add byte ptr [rax], al; loope 0x14c31f; call qword ptr [rdx]; 
0x000000000014c409: add byte ptr [rax], al; loope 0x14c3ca; call qword ptr [rsi]; 
0x0000000000190ba2: add byte ptr [rax], al; loope 0x190b76; out dx, eax; call qword ptr [rax]; 
0x00000000000e9b69: add byte ptr [rax], al; loope 0xe9b3f; call qword ptr [rdx]; 
0x00000000000e9c29: add byte ptr [rax], al; loope 0xe9bea; call qword ptr [rsi]; 
0x0000000000196f42: add byte ptr [rax], al; mov ah, 0x5f; add byte ptr [rax], al; pop rax; fsubr st(5); jmp qword ptr [rbx + 1]; 
0x000000000019a342: add byte ptr [rax], al; mov ah, 0x93; add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000191b42: add byte ptr [rax], al; mov ah, 0xb; add byte ptr [rax], al; cwde; shl edi, cl; call rax; 
0x000000000019742e: add byte ptr [rax], al; mov al, 0x3c; out dx, al; call rsi; 
0x000000000019706e: add byte ptr [rax], al; mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x00000000000edc10: add byte ptr [rax], al; mov bh, 0x58; ret 0x9b5c; 
0x0000000000100c79: add byte ptr [rax], al; mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x000000000018ff22: add byte ptr [rax], al; mov byte ptr [rax - 0x15], dl; call rax; 
0x00000000000e3301: add byte ptr [rax], al; mov byte ptr [rbp + riz - 0x3e45c00c], ah; in al, 0xf9; ret; 
0x000000000018f86a: add byte ptr [rax], al; mov byte ptr [rbp - 0x18], bl; call rax; 
0x0000000000190e22: add byte ptr [rax], al; mov byte ptr [rbx], dl; bnd call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x0000000000199916: add byte ptr [rax], al; mov byte ptr [rcx + 0x61040000], cl; int1; call qword ptr [rbp + 5]; 
0x0000000000194c76: add byte ptr [rax], al; mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x0000000000195d96: add byte ptr [rax], al; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x0000000000190e3a: add byte ptr [rax], al; mov byte ptr [rdx], bl; inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x000000000018f8c2: add byte ptr [rax], al; mov byte ptr [rsi - 0x18], ch; call qword ptr [rax + 0x32]; 
0x00000000001901d2: add byte ptr [rax], al; mov byte ptr [rsi], al; in al, dx; call qword ptr [rax]; 
0x000000000019117f: add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x000000000001a038: add byte ptr [rax], al; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000c8d6d: add byte ptr [rax], al; mov dword ptr [rsp], eax; call 0xc4df0; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000199346: add byte ptr [rax], al; mov eax, 0x34000083; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x00000000000e2241: add byte ptr [rax], al; mov eax, 0x3fe7df9a; pop rbx; ret; 
0x00000000000f0c23: add byte ptr [rax], al; mov eax, 0x64073fe7; mov sil, 0x9c; ret; 
0x00000000000f0c03: add byte ptr [rax], al; mov eax, 0xd3b23fe7; ret 0xf481; 
0x000000000001b228: add byte ptr [rax], al; mov eax, 1; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000011059e: add byte ptr [rax], al; mov ebx, edi; cmp ah, ch; ret 0x920c; 
0x0000000000019ae5: add byte ptr [rax], al; mov ecx, 0x1f; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019c04: add byte ptr [rax], al; mov ecx, 0x1f; sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x000000000010f80e: add byte ptr [rax], al; mov ecx, 0xf8ad1eee; and al, 0x83; ret 0xbfbc; 
0x000000000004459a: add byte ptr [rax], al; mov ecx, esi; mov eax, 1; shl rax, cl; sub rax, 1; ret; 
0x000000000019164a: add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x0000000000080fd6: add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; ret; 
0x00000000000c8ff0: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8bbe: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000004472e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000000085ede: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3170d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ece: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x000000000004fdb6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001e959: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; fxch st(1); leave; ret; 
0x000000000001c9b1: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000000bdc7: add byte ptr [rax], al; mov word ptr [rdi], si; jne 0xbdd5; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000019f93: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000019f51: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019edf: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b22d: add byte ptr [rax], al; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000001b175: add byte ptr [rax], al; mov word ptr [rsp - 0x10], dx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000eb0b0: add byte ptr [rax], al; movabs al, byte ptr [0xcd2c33f408eedc6]; mov edx, 0x3d2e19bc; clc; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x00000000000270a5: add byte ptr [rax], al; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000000ef54: add byte ptr [rax], al; movapd xmm0, xmm1; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000044cee: add byte ptr [rax], al; movapd xmm0, xmm1; ret; 
0x0000000000080239: add byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x0000000000020e1a: add byte ptr [rax], al; movapd xmm0, xmm4; jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x0000000000047f7f: add byte ptr [rax], al; movapd xmm0, xmm5; jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000021f4c: add byte ptr [rax], al; movapd xmm0, xmm7; jne 0x22e73; add rsp, 0x48; ret; 
0x000000000002715e: add byte ptr [rax], al; movapd xmm1, xmm0; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f86: add byte ptr [rax], al; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003d126: add byte ptr [rax], al; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320ee: add byte ptr [rax], al; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000004558e: add byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x0000000000044da8: add byte ptr [rax], al; movapd xmm2, xmm0; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x000000000004a57c: add byte ptr [rax], al; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000124fe: add byte ptr [rax], al; movaps xmm0, xmm1; jne 0x12638; add rsp, 0x28; ret; 
0x00000000000570a6: add byte ptr [rax], al; movaps xmm0, xmm1; ret; 
0x000000000004a60e: add byte ptr [rax], al; movaps xmm1, xmm0; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a217: add byte ptr [rax], al; movaps xmm2, xmm0; movaps xmm0, xmm2; pop rbx; ret; 
0x000000000004a226: add byte ptr [rax], al; movaps xmm2, xmm1; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000745d3: add byte ptr [rax], al; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000050367: add byte ptr [rax], al; movd xmm0, eax; ret; 
0x0000000000050254: add byte ptr [rax], al; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000072500: add byte ptr [rax], al; movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000643f6: add byte ptr [rax], al; movdqa xmm0, xmm2; jne 0x678fa; add rsp, 0x50; pop rbx; ret; 
0x000000000006eb3e: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x000000000007c361: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000007c936: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000007546e: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x000000000007d56f: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007d982: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp]; jne 0x7dac1; add rsp, 0x48; ret; 
0x0000000000057d90: add byte ptr [rax], al; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x38; ret; 
0x000000000006f76e: add byte ptr [rax], al; movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000055323: add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x30]; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000559c9: add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x30]; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x0000000000052b20: add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x40]; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x00000000000556a2: add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x40]; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x0000000000053573: add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x80]; add rsp, 0xc0; pop rbx; ret; 
0x000000000004406c: add byte ptr [rax], al; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000048ab7: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x0000000000048ebe: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x00000000000478ee: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000045b2e: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000028f76: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0xa2340]; ret; 
0x0000000000028456: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0xa2e60]; ret; 
0x0000000000031cde: add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0xb1d98]; ret; 
0x000000000004952e: add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a6: add byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x0000000000029226: add byte ptr [rax], al; movsd xmm13, qword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028706: add byte ptr [rax], al; movsd xmm13, qword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000519c3: add byte ptr [rax], al; movss dword ptr [rdi], xmm0; ret; 
0x000000000009b92e: add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000004fe1e: add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x000000000004ff19: add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecc6: add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x0000000000049c14: add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000050abe: add byte ptr [rax], al; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000004faf6: add byte ptr [rax], al; movss xmm1, dword ptr [rip + 0xb08dc]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x0000000000049ff6: add byte ptr [rax], al; movss xmm1, dword ptr [rip + 0xb63ac]; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x000000000003210e: add byte ptr [rax], al; mulsd xmm0, xmm0; ret; 
0x0000000000027e8e: add byte ptr [rax], al; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000032096: add byte ptr [rax], al; mulsd xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x0000000000031b76: add byte ptr [rax], al; mulsd xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x000000000004dd1b: add byte ptr [rax], al; mulss xmm0, dword ptr [rip + 0xb2f3b]; add rsp, 0x10; pop rbx; ret; 
0x00000000000501be: add byte ptr [rax], al; mulss xmm0, xmm0; ret; 
0x00000000000500fe: add byte ptr [rax], al; mulss xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x0000000000051b9f: add byte ptr [rax], al; neg rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000442c0: add byte ptr [rax], al; neg rax; pop rbx; pop rbp; ret; 
0x0000000000044cd9: add byte ptr [rax], al; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000183ea: add byte ptr [rax], al; nop dword ptr [rax]; fld xword ptr [rsp + 8]; fxtract; fstp st(1); ret; 
0x00000000000432ca: add byte ptr [rax], al; nop dword ptr [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000049f13: add byte ptr [rax], al; nop dword ptr [rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x00000000000421ea: add byte ptr [rax], al; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000006eb38: add byte ptr [rax], al; nop word ptr [rax + rax]; movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x0000000000015d24: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x0000000000195f1e: add byte ptr [rax], al; nop; adc ebp, esp; call qword ptr [rsi + 0xa]; 
0x000000000001bded: add byte ptr [rax], al; nop; fld xword ptr [rsp + 0x18]; fchs; fld xword ptr [rsp + 8]; ret; 
0x000000000001826c: add byte ptr [rax], al; nop; fld xword ptr [rsp + 8]; frndint; ret; 
0x000000000001be0d: add byte ptr [rax], al; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000072c2c: add byte ptr [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret; 
0x000000000005111d: add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000086acc: add byte ptr [rax], al; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x00000000000e9521: add byte ptr [rax], al; nop; xor al, 0; or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000192e9a: add byte ptr [rax], al; or al, 0x1f; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000198a82: add byte ptr [rax], al; or al, 0xe5; out dx, eax; call qword ptr [rdx + 4]; 
0x00000000000430d7: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000ea6f0: add byte ptr [rax], al; or byte ptr [rax + 0x3f341f35], 0x2f; cld; ret; 
0x000000000007016f: add byte ptr [rax], al; or byte ptr [rax - 0x39], 4; and al, 0; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000001906d2: add byte ptr [rax], al; or byte ptr [rax], bh; out dx, al; jmp rax; 
0x0000000000190a22: add byte ptr [rax], al; or byte ptr [rax], bh; out dx, eax; jmp qword ptr [rax - 0x75]; 
0x0000000000190b3a: add byte ptr [rax], al; or byte ptr [rdi - 0x11], dh; call rax; 
0x000000000019045a: add byte ptr [rax], al; or byte ptr [rdx - 0x14], bh; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x00000000000e8ba8: add byte ptr [rax], al; or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x00000000000cc7fe: add byte ptr [rax], al; or dl, byte ptr [rbx + 0x138cb2f6]; ret 0xf2a5; 
0x0000000000019e81: add byte ptr [rax], al; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000001047d6: add byte ptr [rax], al; out 0x11, al; ret 0xe30e; 
0x0000000000198c06: add byte ptr [rax], al; out dx, eax; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000190e72: add byte ptr [rax], al; pop r11; bnd jmp qword ptr [rax]; 
0x0000000000104bb5: add byte ptr [rax], al; pop r13; ret; 
0x0000000000191dc6: add byte ptr [rax], al; pop rax; add ch, al; call qword ptr [rcx]; 
0x00000000001909da: add byte ptr [rax], al; pop rax; and ebp, edi; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x00000000001907da: add byte ptr [rax], al; pop rax; cdq; out dx, al; call qword ptr [rax]; 
0x000000000018f7f2: add byte ptr [rax], al; pop rax; cmp al, ch; jmp rax; 
0x0000000000190d4a: add byte ptr [rax], al; pop rax; cmp cl, dh; push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x0000000000196f46: add byte ptr [rax], al; pop rax; fsubr st(5); jmp qword ptr [rbx + 1]; 
0x000000000019093a: add byte ptr [rax], al; pop rax; in al, 0xee; jmp qword ptr [rax - 0x7b]; 
0x000000000018f8fa: add byte ptr [rax], al; pop rax; jge 0x18f8e7; call qword ptr [rax]; 
0x0000000000195786: add byte ptr [rax], al; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000190652: add byte ptr [rax], al; pop rax; sbb dh, ch; call qword ptr [rax]; 
0x000000000000bc6e: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000032661: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001498c: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000001aad1: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000cc7ae: add byte ptr [rax], al; pop rbx; ret 0xf20c; 
0x000000000000c9d3: add byte ptr [rax], al; pop rbx; ret; 
0x00000000000fc7de: add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x0000000000012e46: add byte ptr [rax], al; pop rcx; pop rsi; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x00000000001978a2: add byte ptr [rax], al; pop rdx; out dx, al; call qword ptr [rax]; 
0x00000000000e0e21: add byte ptr [rax], al; pop rsp; push -0x46c00ffd; mov bh, 3; ret; 
0x0000000000111f76: add byte ptr [rax], al; popfq; stc; ret 0; 
0x00000000000e8f51: add byte ptr [rax], al; push -0x40d93f7f; mov ch, ah; ret; 
0x000000000018f54a: add byte ptr [rax], al; push 0x30ffe7dd; and byte ptr [rax], al; add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x0000000000190592: add byte ptr [rax], al; push 0x50ffedbf; jno 0x19059b; add al, bl; ret; 
0x000000000019223e: add byte ptr [rax], al; push rax; and al, ch; jmp qword ptr [rsi + 2]; 
0x0000000000191cfe: add byte ptr [rax], al; push rax; jmp rdi; 
0x00000000000e75bc: add byte ptr [rax], al; push rax; ret; 
0x0000000000196f2e: add byte ptr [rax], al; push rax; xlatb; in eax, dx; call qword ptr [rdi]; 
0x000000000019122a: add byte ptr [rax], al; pushfq; add al, byte ptr [rax]; add al, ah; mov cl, 0xe7; jmp qword ptr [rcx]; 
0x0000000000195d2a: add byte ptr [rax], al; pushfq; add byte ptr [r8], r8b; jo 0x195d36; in al, dx; jmp qword ptr [rcx]; 
0x000000000019742a: add byte ptr [rax], al; pushfq; add byte ptr fs:[rax], al; mov al, 0x3c; out dx, al; call rsi; 
0x0000000000057e4e: add byte ptr [rax], al; pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x000000000004d1e6: add byte ptr [rax], al; pxor xmm0, xmm0; ret; 
0x0000000000191b8e: add byte ptr [rax], al; rcl ch, 0xe7; call qword ptr [rdi]; 
0x00000000000d78a3: add byte ptr [rax], al; rcl dh, 0x3f; lea esi, [rsi - 0x42]; sti; ret; 
0x0000000000003aa6: add byte ptr [rax], al; ret 0; 
0x00000000000069ee: add byte ptr [rax], al; ret 0x11; 
0x00000000000cec3e: add byte ptr [rax], al; ret 0x1ba9; 
0x0000000000004b16: add byte ptr [rax], al; ret 0x1e; 
0x00000000000d5d24: add byte ptr [rax], al; ret 0x273f; 
0x0000000000113068: add byte ptr [rax], al; ret 0x27; 
0x00000000000ea1b1: add byte ptr [rax], al; ret 0x3f53; 
0x00000000000e77f9: add byte ptr [rax], al; ret 0x41c3; 
0x00000000000cf91e: add byte ptr [rax], al; ret 0x8d1; 
0x00000000000fca22: add byte ptr [rax], al; ret 0x9856; 
0x0000000000006f2e: add byte ptr [rax], al; ret 0xc; 
0x00000000000cb01e: add byte ptr [rax], al; ret 0xdc93; 
0x0000000000103aa0: add byte ptr [rax], al; ret 0xf8f6; 
0x000000000010f93e: add byte ptr [rax], al; ret 0xfc3b; 
0x00000000000e9ef9: add byte ptr [rax], al; ret 0xffa5; 
0x0000000000007156: add byte ptr [rax], al; ret 1; 
0x000000000019b2ea: add byte ptr [rax], al; ret 2; 
0x000000000019bfd6: add byte ptr [rax], al; ret 3; 
0x00000000000043f6: add byte ptr [rax], al; ret 7; 
0x0000000000000d0a: add byte ptr [rax], al; ret; 
0x000000000010f9ae: add byte ptr [rax], al; rol byte ptr [rcx], cl; out 0x2e, eax; or esi, esp; ret; 
0x0000000000191f0e: add byte ptr [rax], al; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x0000000000198dfe: add byte ptr [rax], al; ror byte ptr [rax + rsi*8], 1; jmp qword ptr [rbx + 2]; 
0x00000000000eae10: add byte ptr [rax], al; ror byte ptr [rdi + 0x49], 0x9e; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x0000000000086b4e: add byte ptr [rax], al; roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b0e: add byte ptr [rax], al; roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b2e: add byte ptr [rax], al; roundsd xmm0, xmm0, 4; ret; 
0x0000000000086aee: add byte ptr [rax], al; roundsd xmm0, xmm0, 9; ret; 
0x0000000000086ade: add byte ptr [rax], al; roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b5e: add byte ptr [rax], al; roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b1e: add byte ptr [rax], al; roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b3e: add byte ptr [rax], al; roundss xmm0, xmm0, 4; ret; 
0x0000000000086afe: add byte ptr [rax], al; roundss xmm0, xmm0, 9; ret; 
0x00000000000e7798: add byte ptr [rax], al; sal byte ptr [rbx - 0x32], 0x81; mov r15d, 0x76830985; ret 0x3361; 
0x000000000019475e: add byte ptr [rax], al; sar al, 0xea; jmp qword ptr [rax]; 
0x000000000010b4fa: add byte ptr [rax], al; sar byte ptr [rbx + 0x414cc009], 0x23; sti; ret; 
0x00000000000519fa: add byte ptr [rax], al; sar byte ptr [rdi - 0x77], 0xc2; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x000000000010218b: add byte ptr [rax], al; sar cl, 0xbf; test dword ptr [rdi + 0x78], eax; retf; ret 0xf9f3; 
0x0000000000019e06: add byte ptr [rax], al; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x000000000002e916: add byte ptr [rax], al; sar edx, 0x14; lea eax, [rdx - 0x3ff]; ret; 
0x000000000004e62e: add byte ptr [rax], al; sar edx, 0x17; lea eax, [rdx - 0x7f]; ret; 
0x000000000006ac26: add byte ptr [rax], al; sar rdx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x00000000001979aa: add byte ptr [rax], al; sbb al, 0x6a; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x0000000000190dba: add byte ptr [rax], al; sbb bl, ch; int1; jmp rax; 
0x00000000001902ba: add byte ptr [rax], al; sbb bpl, spl; call qword ptr [rax]; 
0x0000000000190212: add byte ptr [rax], al; sbb byte ptr [rax], dl; in al, dx; call rax; 
0x0000000000190e8a: add byte ptr [rax], al; sbb byte ptr [rdx + rsi*8 + 0xa8d4ff], bh; add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x0000000000190462: add byte ptr [rax], al; sbb byte ptr [rdx - 0x14], bh; jmp rax; 
0x0000000000196fee: add byte ptr [rax], al; sbb dh, 0xed; jmp rax; 
0x0000000000190822: add byte ptr [rax], al; sbb dh, cl; out dx, al; jmp rax; 
0x00000000001905da: add byte ptr [rax], al; sbb dl, bh; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x00000000000034c6: add byte ptr [rax], al; sgdt [rax]; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x00000000000f1383: add byte ptr [rax], al; shl dh, 0x3f; add byte ptr [rsi], bh; ret; 
0x0000000000015dbe: add byte ptr [rax], al; shl edx, 0x1e; shr edx, 0x1f; lea rcx, [rip + 0xb5ce3]; fld qword ptr [rcx + rdx*8]; ret; 
0x00000000000445a1: add byte ptr [rax], al; shl rax, cl; sub rax, 1; ret; 
0x00000000000cada8: add byte ptr [rax], al; shld dword ptr [rax - 0x7f], edx, cl; sub r10d, dword ptr [rax]; jnp 0xcade8; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x0000000000192dde: add byte ptr [rax], al; shr byte ptr [rbp - 0x18], 1; call qword ptr [rax]; 
0x000000000002e0de: add byte ptr [rax], al; sqrtsd xmm0, xmm0; ret; 
0x000000000004de9e: add byte ptr [rax], al; sqrtss xmm0, xmm0; ret; 
0x000000000019b876: add byte ptr [rax], al; sti; add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x00000000000eef23: add byte ptr [rax], al; sub ah, 0x3f; ret 0x16b4; 
0x0000000000196dba: add byte ptr [rax], al; sub al, 0x5e; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x00000000000ef443: add byte ptr [rax], al; sub bl, 0x3f; stosb byte ptr [rdi], al; ror dword ptr [rip + 0x3aa73a40], 0x3f; add byte ptr [rax], ah; ret 0x7bbf; 
0x0000000000198eb6: add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x00000000000ccaae: add byte ptr [rax], al; sub byte ptr [rbp + 0x38], cl; pop rsi; ret; 
0x0000000000190522: add byte ptr [rax], al; sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x0000000000190702: add byte ptr [rax], al; sub byte ptr [rdx - 0x12], cl; jmp qword ptr [rax]; 
0x0000000000195d16: add byte ptr [rax], al; sub byte ptr [rsp + rbp*8], al; call qword ptr [rdi]; 
0x0000000000019e54: add byte ptr [rax], al; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000019aea: add byte ptr [rax], al; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019c09: add byte ptr [rax], al; sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000042de8: add byte ptr [rax], al; sub esi, ecx; mov ecx, esi; sar rdx, cl; imul rax, rdx; ret; 
0x0000000000050d91: add byte ptr [rax], al; sub esi, ecx; mov ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000067967: add byte ptr [rax], al; sub rsp, -0x80; pop rbx; ret; 
0x00000000000ca1d6: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000032046: add byte ptr [rax], al; subsd xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000031bf6: add byte ptr [rax], al; subsd xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000003cc26: add byte ptr [rax], al; subsd xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000049c2e: add byte ptr [rax], al; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b2d3: add byte ptr [rax], al; subss xmm0, xmm0; ret; 
0x000000000004fdd6: add byte ptr [rax], al; subss xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fd2e: add byte ptr [rax], al; subss xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x00000000000506ee: add byte ptr [rax], al; subss xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000009b96e: add byte ptr [rax], al; subss xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x00000000000060c7: add byte ptr [rax], al; syscall; 
0x00000000001982da: add byte ptr [rax], al; test ah, bl; out dx, al; jmp qword ptr [rdx]; 
0x0000000000190e2a: add byte ptr [rax], al; test al, 0x14; bnd jmp rax; 
0x00000000001902aa: add byte ptr [rax], al; test al, 0x19; in al, dx; jmp rax; 
0x0000000000190322: add byte ptr [rax], al; test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x000000000018f712: add byte ptr [rax], al; test al, 0x27; call 0x41a81a; add byte ptr [rax], ch; sub al, ch; call rax; 
0x00000000001906a2: add byte ptr [rax], al; test al, 0x33; out dx, al; call rax; 
0x000000000018f7ca: add byte ptr [rax], al; test al, 0x34; call 0x4440d2; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x000000000019070a: add byte ptr [rax], al; test al, 0x4e; out dx, al; call qword ptr [rax + 0x7a]; 
0x0000000000190a72: add byte ptr [rax], al; test al, 0x6a; out dx, eax; jmp qword ptr [rax]; 
0x000000000019a346: add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000195d12: add byte ptr [rax], al; test byte ptr [rbp], cl; add byte ptr [rax], ch; add al, 0xec; call qword ptr [rdi]; 
0x00000000000cd09e: add byte ptr [rax], al; test cl, bl; or ah, cl; ret 0x1291; 
0x00000000000c9913: add byte ptr [rax], al; test edi, edi; jne 0xc9983; add rsp, 0x30; pop rbx; ret; 
0x0000000000103780: add byte ptr [rax], al; test esi, ebp; ret; 
0x0000000000043383: add byte ptr [rax], al; ucomisd xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x0000000000050bde: add byte ptr [rax], al; vfmadd213ss xmm0, xmm1, xmm2; ret; 
0x00000000000421fe: add byte ptr [rax], al; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050bee: add byte ptr [rax], al; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000099b99: add byte ptr [rax], al; vmovapd xmm0, xmm2; ret; 
0x000000000009bc6e: add byte ptr [rax], al; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000009c8e3: add byte ptr [rax], al; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009cd53: add byte ptr [rax], al; vsubss xmm1, xmm0, xmm0; vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009bc1e: add byte ptr [rax], al; vxorps xmm0, xmm0, xmm0; ret; 
0x000000000009c17c: add byte ptr [rax], al; vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000003d03c: add byte ptr [rax], al; xchg bl, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000193dff: add byte ptr [rax], al; xchg cl, ch; call qword ptr [rcx]; 
0x00000000000cb19e: add byte ptr [rax], al; xchg esi, eax; pop rdi; ret 0x65fc; 
0x0000000000196866: add byte ptr [rax], al; xchg rcx, rax; in eax, dx; jmp rcx; 
0x0000000000191dc2: add byte ptr [rax], al; xor al, 0xe; add byte ptr [rax], al; pop rax; add ch, al; call qword ptr [rcx]; 
0x000000000019a466: add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax], al; fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x0000000000193c7e: add byte ptr [rax], al; xor byte ptr [rbp - 0x17], bl; call qword ptr [rsi + 6]; 
0x0000000000194d7e: add byte ptr [rax], al; xor byte ptr [rbx - 0x15], cl; jmp qword ptr [rax]; 
0x0000000000114a44: add byte ptr [rax], al; xor byte ptr [rbx], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x000000000010fa4e: add byte ptr [rax], al; xor byte ptr [rcx + 0x33], al; ret; 
0x0000000000192e9e: add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x00000000001003f4: add byte ptr [rax], al; xor byte ptr [rcx], 0x17; jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x00000000001979ae: add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x000000000019975e: add byte ptr [rax], al; xor byte ptr [rdx - 0xf], cl; jmp qword ptr [rcx + 3]; 
0x0000000000198dbe: add byte ptr [rax], al; xor byte ptr [rsi], bh; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x000000000004305e: add byte ptr [rax], al; xor dl, 0xf; adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000074976: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000000bd1e: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000019037a: add byte ptr [rax], al; xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x0000000000044cde: add byte ptr [rax], al; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000001925c7: add byte ptr [rax], bh; cmp ch, al; call qword ptr [rdi]; 
0x000000000018fe1b: add byte ptr [rax], bh; fucomp st(2); jmp rax; 
0x000000000018f6d3: add byte ptr [rax], bh; jmp rdi; 
0x0000000000192eb7: add byte ptr [rax], bh; jno 0x192ea3; call qword ptr [rbx]; 
0x0000000000195757: add byte ptr [rax], bh; mov bh, 0xeb; jmp qword ptr [rcx]; 
0x0000000000190d0b: add byte ptr [rax], bh; out 0xf0, al; call rax; 
0x00000000001985a7: add byte ptr [rax], bh; out dx, eax; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000190d53: add byte ptr [rax], bh; pop rdi; int1; jmp rax; 
0x00000000000e28f2: add byte ptr [rax], bh; sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x0000000000190e43: add byte ptr [rax], bh; sbb esi, edx; call rax; 
0x0000000000190213: add byte ptr [rax], bl; adc ah, ch; call rax; 
0x000000000019786b: add byte ptr [rax], bl; add byte ptr [rax], al; add al, ah; push 0x59dc0000; out dx, al; call qword ptr [rax]; 
0x000000000019212b: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax + 0x7c000011], ah; adc al, 0xe8; jmp qword ptr [rcx + 2]; 
0x000000000019923b: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax - 0x23ffff7e], dh; xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x00000000001905db: add byte ptr [rax], bl; cli; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x0000000000190463: add byte ptr [rax], bl; jp 0x190453; jmp rax; 
0x00000000001900e3: add byte ptr [rax], bl; ret; 
0x000000000018fb13: add byte ptr [rax], bl; shr eax, cl; jmp qword ptr [rax]; 
0x0000000000198eb7: add byte ptr [rax], ch; adc al, 0xf0; jmp qword ptr [rdi + 3]; 
0x0000000000195d17: add byte ptr [rax], ch; add al, 0xec; call qword ptr [rdi]; 
0x0000000000198783: add byte ptr [rax], ch; add byte ptr [rax], al; add al, bh; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x000000000018fe4b: add byte ptr [rax], ch; cmp ebx, ebp; call rax; 
0x0000000000190523: add byte ptr [rax], ch; in eax, dx; call qword ptr [rax]; 
0x000000000018f92b: add byte ptr [rax], ch; mov ch, al; jmp qword ptr [rax + 0x35]; 
0x00000000000e8edd: add byte ptr [rax], ch; mov edi, 0x6dfeb485; ret 0xb440; 
0x0000000000190703: add byte ptr [rax], ch; out dx, al; jmp qword ptr [rax]; 
0x0000000000100c7d: add byte ptr [rax], ch; ret 0; 
0x0000000000104446: add byte ptr [rax], ch; ret; 
0x000000000018f71b: add byte ptr [rax], ch; sub al, ch; call rax; 
0x00000000001931a7: add byte ptr [rax], ch; xchg eax, ebp; call qword ptr [rbx + 2]; 
0x000000000002301b: add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000190a23: add byte ptr [rax], cl; cmp bh, ch; jmp qword ptr [rax - 0x75]; 
0x00000000001906d3: add byte ptr [rax], cl; cmp dh, ch; jmp rax; 
0x0000000000192597: add byte ptr [rax], cl; cmp eax, ebp; call qword ptr [rcx + 1]; 
0x0000000000190b3b: add byte ptr [rax], cl; ja 0x190b2e; call rax; 
0x000000000019045b: add byte ptr [rax], cl; jp 0x19044b; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x00000000001955c7: add byte ptr [rax], cl; mov dl, 0xeb; call rbx; 
0x0000000000190573: add byte ptr [rax], cl; mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x000000000018fc63: add byte ptr [rax], cl; mov ebp, ecx; call qword ptr [rax]; 
0x00000000000df998: add byte ptr [rax], dh; cli; xlatb; ret; 
0x000000000019975f: add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x0000000000198dbf: add byte ptr [rax], dh; jle 0x198dc3; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x0000000000192e9f: add byte ptr [rax], dh; jno 0x192e8b; call qword ptr [rcx]; 
0x00000000001979af: add byte ptr [rax], dh; pop rdi; out dx, al; jmp rsi; 
0x0000000000102e00: add byte ptr [rax], dh; ret 0xd490; 
0x0000000000003b8f: add byte ptr [rax], dh; ret; 
0x00000000000ebd70: add byte ptr [rax], dh; xor esi, dword ptr [rdi + 0x52]; ret 0xbfd3; 
0x0000000000198dbb: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], dh; jle 0x198dc3; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x0000000000191daf: add byte ptr [rax], dl; add ch, al; call qword ptr [rcx]; 
0x000000000019a46f: add byte ptr [rax], dl; div dl; call qword ptr [rbp + 7]; 
0x000000000019789f: add byte ptr [rax], dl; imul eax, dword ptr [rax], 0xee5a4c00; call qword ptr [rax]; 
0x00000000001966cf: add byte ptr [rax], dl; pop rbx; in eax, dx; jmp qword ptr [rbx + 1]; 
0x000000000019160f: add byte ptr [rax], dl; ret 0xffe7; 
0x0000000000199758: add byte ptr [rax], r8b; add ah, cl; xchg dword ptr [rax], eax; add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x0000000000195980: add byte ptr [rax], r8b; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x000000000019aefc: add byte ptr [rax], r8b; add byte ptr [rcx], ah; add byte ptr [rax], al; ret 1; 
0x0000000000198eb0: add byte ptr [rax], r8b; add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x0000000000199a08: add byte ptr [rax], r8b; add byte ptr [rdx + rcx*4], bh; add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x0000000000196db8: add byte ptr [rax], r8b; add byte ptr [rsi + rbx*2], ch; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x00000000001985a0: add byte ptr [rax], r8b; add byte ptr [rsi + rsi*2], dl; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000198c00: add byte ptr [rax], r8b; add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x000000000004ddf5: add byte ptr [rax], r8b; add rsp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x000000000007c5ad: add byte ptr [rax], r8b; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000131a5: add byte ptr [rax], r8b; add rsp, 0x40; pop rbx; faddp st(1); ret; 
0x0000000000086a5d: add byte ptr [rax], r8b; addsd xmm0, xmm0; ret; 
0x0000000000051af5: add byte ptr [rax], r8b; addss xmm0, xmm0; ret; 
0x0000000000042ffd: add byte ptr [rax], r8b; andpd xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000004749d: add byte ptr [rax], r8b; cmp edx, 1; jbe 0x471d8; movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x000000000003d1dd: add byte ptr [rax], r8b; cmp rcx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000018c25: add byte ptr [rax], r8b; fadd st(0); ret; 
0x000000000018fdc9: add byte ptr [rax], r8b; fdivr dword ptr [rsi - 0x16]; jmp qword ptr [rax + 0x4e]; 
0x000000000001bdfd: add byte ptr [rax], r8b; fld xword ptr [rsp + 0x18]; ret; 
0x000000000001a04d: add byte ptr [rax], r8b; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x000000000000ccd5: add byte ptr [rax], r8b; fstp st(0); add rsp, 0x28; ret; 
0x0000000000032365: add byte ptr [rax], r8b; fstp st(0); fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000020b6d: add byte ptr [rax], r8b; fstp st(0); fstp st(0); fstp st(1); add rsp, 0x28; ret; 
0x0000000000020c2d: add byte ptr [rax], r8b; fstp st(1); add rsp, 0x28; ret; 
0x000000000001611d: add byte ptr [rax], r8b; fstp st(1); fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x000000000001e3bd: add byte ptr [rax], r8b; fxch st(1); add rsp, 0x58; ret; 
0x0000000000020c4d: add byte ptr [rax], r8b; fxch st(1); faddp st(1); add rsp, 0x28; ret; 
0x000000000001cc7d: add byte ptr [rax], r8b; fxch st(1); ret; 
0x0000000000195d95: add byte ptr [rax], r8b; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x0000000000080fd5: add byte ptr [rax], r8b; mov qword ptr [rdi + 8], 0; ret; 
0x000000000004472d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffff; ret; 
0x0000000000085edd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3170d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004fdb5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004992d: add byte ptr [rax], r8b; movapd xmm0, xmm1; ret; 
0x0000000000043f85: add byte ptr [rax], r8b; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003d125: add byte ptr [rax], r8b; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320ed: add byte ptr [rax], r8b; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000004558d: add byte ptr [rax], r8b; movapd xmm1, xmm0; ret; 
0x00000000000570a5: add byte ptr [rax], r8b; movaps xmm0, xmm1; ret; 
0x000000000004a60d: add byte ptr [rax], r8b; movaps xmm1, xmm0; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000006eb3d: add byte ptr [rax], r8b; movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x000000000007c945: add byte ptr [rax], r8b; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000007c935: add byte ptr [rax], r8b; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000006f76d: add byte ptr [rax], r8b; movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000048ebd: add byte ptr [rax], r8b; movsd xmm0, qword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x0000000000028f75: add byte ptr [rax], r8b; movsd xmm0, qword ptr [rip + 0xa2340]; ret; 
0x0000000000028455: add byte ptr [rax], r8b; movsd xmm0, qword ptr [rip + 0xa2e60]; ret; 
0x0000000000029225: add byte ptr [rax], r8b; movsd xmm13, qword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028705: add byte ptr [rax], r8b; movsd xmm13, qword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000032095: add byte ptr [rax], r8b; mulsd xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x0000000000015d23: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000004d1e5: add byte ptr [rax], r8b; pxor xmm0, xmm0; ret; 
0x000000000002e915: add byte ptr [rax], r8b; sar edx, 0x14; lea eax, [rdx - 0x3ff]; ret; 
0x000000000006ac25: add byte ptr [rax], r8b; sar rdx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x000000000003cc25: add byte ptr [rax], r8b; subsd xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000049fe5: add byte ptr [rax], r8b; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000004fdd5: add byte ptr [rax], r8b; subss xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fd2d: add byte ptr [rax], r8b; subss xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x00000000000506ed: add byte ptr [rax], r8b; subss xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000050bdd: add byte ptr [rax], r8b; vfmadd213ss xmm0, xmm1, xmm2; ret; 
0x000000000009bc1d: add byte ptr [rax], r8b; vxorps xmm0, xmm0, xmm0; ret; 
0x000000000000bd1d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000044cdd: add byte ptr [rax], r8b; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x000000000000bfdb: add byte ptr [rbp + 0x11], dh; add rsp, 0x18; ret; 
0x000000000000c3e2: add byte ptr [rbp + 0x17], dh; add rsp, 0x18; ret; 
0x0000000000012995: add byte ptr [rbp + 0x18], dh; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x00000000000ddee8: add byte ptr [rbp + 0x1a], al; ret 0xb24f; 
0x0000000000050621: add byte ptr [rbp + 0x1c], dh; add rsp, 0x18; ret; 
0x000000000004f047: add byte ptr [rbp + 0x1f], dh; add rsp, 0x28; ret; 
0x00000000000183b2: add byte ptr [rbp + 0x23], dh; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000031ab1: add byte ptr [rbp + 0x26880fd2], al; add al, byte ptr [rax]; add bl, dh; ret; 
0x0000000000030d31: add byte ptr [rbp + 0x26], dh; add rsp, 0x28; ret; 
0x0000000000018612: add byte ptr [rbp + 0x27], dh; add rsp, 0x38; ret; 
0x00000000000c4fce: add byte ptr [rbp + 0x29], al; ret; 
0x000000000001a297: add byte ptr [rbp + 0x2c], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c814f: add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 9]; fadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x00000000000c56ef: add byte ptr [rbp + 0x31], al; fisttp dword ptr [rcx + 9]; fiadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x00000000000684ad: add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000502af: add byte ptr [rbp + 0x391079d2], al; ror dword ptr [rbp - 0x60f0febf], 1; ret 0xd284; 
0x000000000001b584: add byte ptr [rbp + 0x39], al; sal dword ptr [rsi + rax + 0x48], 0xf7; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000000172bb: add byte ptr [rbp + 0x3e], dh; add rsp, 0x38; ret; 
0x0000000000049b95: add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x00000000000c9914: add byte ptr [rbp + 0x486a75ff], al; add esp, 0x30; pop rbx; ret; 
0x000000000008699a: add byte ptr [rbp + 0x50], dh; add rsp, 0x48; ret; 
0x000000000001a3c2: add byte ptr [rbp + 0x51], dh; add rsp, 0x58; ret; 
0x0000000000050cb2: add byte ptr [rbp + 0x52], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000012866: add byte ptr [rbp + 0x56], dh; add rsp, 0x28; ret; 
0x00000000000bf484: add byte ptr [rbp + 0x59e3c5c0], al; faddp st(5); sti; pop rcx; ret; 
0x000000000000f2e9: add byte ptr [rbp + 0x63], dh; add rsp, 0x28; ret; 
0x000000000003cbc6: add byte ptr [rbp + 0x66d979db], al; xorps xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x00000000000868a1: add byte ptr [rbp + 0x69], dh; add rsp, 0x48; ret; 
0x000000000006fdcc: add byte ptr [rbp + 0x6d], dh; add rsp, 0x48; ret; 
0x000000000000dfdd: add byte ptr [rbp + 0x79], dh; add rsp, 0x18; ret; 
0x000000000004f6c5: add byte ptr [rbp + 0xd540fdb], al; int1; ret; 
0x0000000000031980: add byte ptr [rbp + 0xf44f2c9], al; pop rcx; ret 0xff2; 
0x0000000000050696: add byte ptr [rbp + 0xfdf79db], al; push rdi; or eax, 0x7b43e; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000005d9f: add byte ptr [rbp + 3], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000020c80: add byte ptr [rbp + 5], bh; fld1; faddp st(1); ret; 
0x000000000000bf25: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000000be5f: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000000c04f: add byte ptr [rbp + 7], dh; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000bd76: add byte ptr [rbp + 7], dh; xor eax, eax; add rsp, 0x48; ret; 
0x000000000001b008: add byte ptr [rbp + rax - 0xd], dh; ret; 
0x0000000000196d23: add byte ptr [rbp + rbx*2 - 0x40e80000], dl; in eax, dx; call qword ptr [rax]; 
0x0000000000195d13: add byte ptr [rbp + rcx*2 + 0x4280000], al; in al, dx; call qword ptr [rdi]; 
0x0000000000195d2b: add byte ptr [rbp + rcx*2 + 0x4700000], bl; in al, dx; jmp qword ptr [rcx]; 
0x000000000001b407: add byte ptr [rbp + rcx*4 + 0x4f], al; add dword ptr [rcx - 0x46], eax; add byte ptr [rax], al; add byte ptr [rax - 0xf617], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000102d4c: add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x000000000001dec0: add byte ptr [rbp + riz*4 - 0x23], dh; fcomp st(3); sub eax, 0xb1b15; add rsp, 0x58; fxch st(1); ret; 
0x000000000003d1e6: add byte ptr [rbp - 0x38], dh; addsd xmm0, xmm0; ret; 
0x000000000006ef0f: add byte ptr [rbp - 0x38b72fb8], cl; ret 0xffff; 
0x00000000000d52ec: add byte ptr [rbp - 0x49], 0xbf; cmp ebx, dword ptr [rdx + 0x71c6e512]; mov esp, 0x3f76033f; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x000000000006fb5d: add byte ptr [rbp - 0x5b], dh; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000072abd: add byte ptr [rbp - 0x5d], dh; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000c8837: add byte ptr [rbp - 0x77], al; fimul dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000005205a: add byte ptr [rbp - 0x77], al; ret 0xe981; 
0x0000000000085bf5: add byte ptr [rbp - 0x7b], al; sal bl, 0xf; pop rsp; ret; 
0x0000000000084b21: add byte ptr [rbp - 0x7b], al; sal dl, 0xf; pop rsp; ret; 
0x000000000004d6a7: add byte ptr [rbp - 0xc72860a], al; movups xmm1, xmmword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000086785: add byte ptr [rbp - 0xc], dh; addsd xmm0, xmm0; ret; 
0x0000000000016011: add byte ptr [rbp - 0xc], dh; fstp st(1); ret; 
0x000000000004fe0f: add byte ptr [rbp - 0xcf3872e], al; ret; 
0x00000000000cd483: add byte ptr [rbx + 0x2e007b20], ch; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x000000000011095b: add byte ptr [rbx + 0x32], 0x6a; add byte ptr [r8], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000f11ea: add byte ptr [rbx + 0x3f3300b7], dl; add al, dl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000009395a: add byte ptr [rbx + 0x41c401e0], al; jns 0x93990; ret 0x820f; 
0x00000000000a9f81: add byte ptr [rbx + 0x41c401e0], al; jns 0xa9fb7; ret 0x820f; 
0x00000000001028d6: add byte ptr [rbx + 0x4ae58e10], dh; ret; 
0x00000000000730d7: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000032662: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000001498d: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001aad2: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000003cbd2: add byte ptr [rbx + 0x66], bl; movaps xmm0, xmm1; ret; 
0x000000000001bc6c: add byte ptr [rbx + 0x94801e1], al; ror dword ptr [rdi], 1; xchg ebp, eax; ret 0xb60f; 
0x0000000000019e5f: add byte ptr [rbx + 0xd102444], cl; add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x00000000000506a1: add byte ptr [rbx + 0xf], bl; sub cl, al; ret; 
0x000000000004a2b3: add byte ptr [rbx + 0xf], bl; sub dl, al; ret; 
0x000000000008042f: add byte ptr [rbx + 0xff201c0], al; pop rcx; sar byte ptr [rcx], 1; ret 0xf575; 
0x0000000000050f87: add byte ptr [rbx + 0xff380c1], al; adc dword ptr [rdi], eax; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000017f8e: add byte ptr [rbx + 6], dh; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x000000000010f7cf: add byte ptr [rbx + rbp - 0x271388e], al; popfq; ret 0xbfba; 
0x0000000000197ab3: add byte ptr [rbx + rbp*2], ah; add byte ptr [rax], al; clc; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x0000000000197b03: add byte ptr [rbx + rbp*2], dh; add byte ptr [rax - 0x7a], ch; out dx, al; jmp rbx; 
0x00000000001106ef: add byte ptr [rbx + rbx*4 + 0x7e], al; sbb dword ptr [rcx - 0x73], edx; xchg edx, eax; ret 0x3fbd; 
0x000000000001b072: add byte ptr [rbx + rcx - 0xd], dh; ret; 
0x000000000019a343: add byte ptr [rbx + rdx*4 - 0x14580000], dh; bnd jmp qword ptr [rsi]; 
0x000000000009ca47: add byte ptr [rbx - 0x143afc40], al; pop rsp; rol ebp, cl; ret; 
0x0000000000099d0f: add byte ptr [rbx - 0x143afe40], al; pop rcx; sar byte ptr [rcx], 1; ret 0xf575; 
0x000000000009c58f: add byte ptr [rbx - 0x143afe40], al; pop rsp; rol ebp, cl; ret; 
0x00000000000cd917: add byte ptr [rbx - 0x26ff279c], bl; mov esi, 0x97a40031; ret; 
0x00000000000cdf4b: add byte ptr [rbx - 0x69], ch; xchg esi, eax; add byte ptr [rdi], bl; leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x000000000000d2e3: add byte ptr [rbx - 0x6bf00008], al; ret 0xf883; 
0x000000000004a1f2: add byte ptr [rbx - 0x77], dl; ret; 
0x0000000000063ceb: add byte ptr [rbx - 0x7bf0fc05], al; stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fe05], al; ret 2; 
0x0000000000063cf4: add byte ptr [rbx - 0x7bf0fe05], al; ret 2; 
0x0000000000091ea4: add byte ptr [rbx - 0x7bf0fe06], al; ret; 
0x00000000000867ef: add byte ptr [rbx - 0xf8a7f3e], al; addss xmm0, xmm0; ret; 
0x000000000009b295: add byte ptr [rbx], al; add dl, dh; cvtps2pd xmm0, xmm0; ret; 
0x000000000009b2a5: add byte ptr [rbx], al; add dl, dh; subps xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000cd47b: add byte ptr [rbx], cl; add byte ptr [rax - 0x54ff63ee], cl; and byte ptr [rbx], bh; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x000000000002a5ed: add byte ptr [rcx + 0x110ff2c0], cl; pop rsp; and al, 0x10; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004459b: add byte ptr [rcx + 0x1b8f1], cl; add byte ptr [rax], al; shl rax, cl; sub rax, 1; ret; 
0x0000000000019ae6: add byte ptr [rcx + 0x1f], bh; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019c05: add byte ptr [rcx + 0x1f], bh; sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000018b7b: add byte ptr [rcx + 0x21], al; ret 0xc031; 
0x00000000000c6803: add byte ptr [rcx + 0x21], cl; ret; 
0x0000000000086ab7: add byte ptr [rcx + 0x25d0], cl; add byte ptr [rax - 0x3f91f09a], al; ret; 
0x000000000000f394: add byte ptr [rcx + 0x280f66f8], cl; ror byte ptr [rax + 0x63], 1; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000c796d: add byte ptr [rcx + 0x29], cl; fmul dword ptr [rax + 0x19]; ret 0x1f0f; 
0x000000000004e2a8: add byte ptr [rcx + 0x2e0f0045], cl; ror dword ptr [rdi], 0x82; ret; 
0x000000000001b938: add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x0000000000190e73: add byte ptr [rcx + 0x5b], al; bnd jmp qword ptr [rax]; 
0x0000000000012e47: add byte ptr [rcx + 0x5e], bl; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x00000000000c8d6e: add byte ptr [rcx + 0x79e82404], cl; sar bh, 0xff; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8b94: add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000001298f: add byte ptr [rcx + 0x7ffffa], al; add byte ptr [rbp + 0x18], dh; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x000000000001bcc9: add byte ptr [rcx + 0xc], bh; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000752c8: add byte ptr [rcx + 0xd], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000074d1f: add byte ptr [rcx + 0xe], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000019187: add byte ptr [rcx + 0xf], al; wait; ret 0xf41; 
0x00000000000c8af0: add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0xd231; 
0x00000000000c8465: add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0xff31; 
0x000000000004315c: add byte ptr [rcx + 0xff20008], 0x10; or eax, 0x9cf10; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000c8084: add byte ptr [rcx + 1], cl; fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x000000000001b7c6: add byte ptr [rcx + 7], bh; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000c5116: add byte ptr [rcx + 9], cl; fimul dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000000c6e1f: add byte ptr [rcx + 9], cl; ret; 
0x0000000000197843: add byte ptr [rcx + rbx*2 - 0x12], ch; call qword ptr [rax]; 
0x00000000001968f3: add byte ptr [rcx + rbx*2], ah; add byte ptr [rax - 0x6c], ch; in eax, dx; jmp rcx; 
0x0000000000085ed6: add byte ptr [rcx + rcx*4 + 0x38], ah; ret; 
0x0000000000027e6f: add byte ptr [rcx + rdi + 0x4c], bh; mov eax, ecx; lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x00000000001948d3: add byte ptr [rcx + rdi], al; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x000000000019a13b: add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x000000000019991b: add byte ptr [rcx + riz*2], al; int1; call qword ptr [rbp + 5]; 
0x00000000001970cb: add byte ptr [rcx + riz*2], bh; add byte ptr [rax], al; mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x00000000001930d3: add byte ptr [rcx + riz], al; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x000000000003234c: add byte ptr [rcx - 0x183eb72e], cl; and byte ptr [rax + 9], cl; xlatb; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x00000000000c4fde: add byte ptr [rcx - 0x48], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000000cdc7f: add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x00000000000cf4cf: add byte ptr [rcx - 0x56c1e3ba], ah; out 0x47, eax; pushfq; ret 0xbf; 
0x000000000010f80f: add byte ptr [rcx - 0x752e112], bh; and al, 0x83; ret 0xbfbc; 
0x00000000000c4fe4: add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000000c6ec7: add byte ptr [rcx - 0x77], cl; ret 0x94d; 
0x00000000000592ff: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000c8b9a: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000000c8ca9: add byte ptr [rcx - 0x7b], cl; ret 0x840f; 
0x000000000004a96f: add byte ptr [rcx - 0x7d], al; ret; 
0x000000000006b753: add byte ptr [rcx - 0x7d], al; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000c74ac: add byte ptr [rcx - 0xa], al; ret 0x4c07; 
0x00000000000c7234: add byte ptr [rcx - 0xa], al; ret 0x7407; 
0x00000000000fc7df: add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x00000000000cbcff: add byte ptr [rcx - 0xd], ch; ret; 
0x00000000000887e7: add byte ptr [rcx - 0xfffff01], al; jg 0x887fe; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000009ed67: add byte ptr [rcx - 0xfffff01], al; jg 0x9ed7e; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x00000000000ccd4f: add byte ptr [rcx - 5], dh; int1; mov ch, 0x1a; ret; 
0x000000000009b2d0: add byte ptr [rcx], ah; add byte ptr [rax], al; add bl, dh; subps xmm0, xmm0; ret; 
0x000000000019aeff: add byte ptr [rcx], ah; add byte ptr [rax], al; ret 1; 
0x000000000009b610: add byte ptr [rcx], ah; ret 0x41f2; 
0x000000000009b7e8: add byte ptr [rcx], ah; ret 0x8d4c; 
0x00000000000cf18f: add byte ptr [rcx], ah; ret; 
0x000000000006abc3: add byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret 0x2d7f; 
0x0000000000016b5c: add byte ptr [rcx], al; add byte ptr [rax], al; fstp st(0); fld1; ret; 
0x000000000000bcfd: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000002e8e7: add byte ptr [rcx], al; test byte ptr [rbx - 0x97afe18], 0x7f; div ebx; ret; 
0x00000000000fca1d: add byte ptr [rcx], bh; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x9856; 
0x0000000000013028: add byte ptr [rcx], bh; ret; 
0x0000000000019c0a: add byte ptr [rcx], ch; int1; shr edx, cl; imul rax, rdx; ret; 
0x000000000004407c: add byte ptr [rcx], ch; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000019aeb: add byte ptr [rcx], ch; stc; shr edx, cl; imul rax, rdx; ret; 
0x00000000000e974b: add byte ptr [rcx], cl; add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x00000000000186df: add byte ptr [rcx], cl; retf 0xf209; fld xword ptr [rsp + 0x10]; jne 0x18698; pop rbx; ret; 
0x0000000000019e82: add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000000c8642: add byte ptr [rcx], dh; dec dword ptr [rax + 9]; ret; 
0x000000000004ce09: add byte ptr [rcx], dh; jmp qword ptr [rsi + 0xf]; 
0x000000000004328f: add byte ptr [rcx], dh; leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x0000000000074977: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000005904d: add byte ptr [rcx], dh; ret; 
0x0000000000044659: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb2: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jns 0x44c68; pop rbx; pop rbp; ret; 
0x00000000000325ec: add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000044137: add byte ptr [rcx], dh; shl byte ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; sar byte ptr [rax + 1], 0xf2; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000051a5f: add byte ptr [rcx], dh; shl byte ptr [rsi + 0xf], 0x6e; sar byte ptr [rax + 1], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000cd9d7: add byte ptr [rcx], dh; test al, 0x27; add cl, dh; outsb dx, byte ptr [rsi]; ret; 
0x000000000010b76f: add byte ptr [rcx], dl; jge 0x10b7b1; xor dword ptr [rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x0000000000051a5e: add byte ptr [rcx], sil; shl byte ptr [rsi + 0xf], 0x6e; sar byte ptr [rax + 1], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000cc0af: add byte ptr [rdi + 0x13], al; sub al, 0x64; je 0xcc117; ret 0xfb98; 
0x0000000000049519: add byte ptr [rdi + 0x14], dh; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000048991: add byte ptr [rdi + 0x14], dh; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x0000000000056d58: add byte ptr [rdi + 0x19], dh; mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000518fd: add byte ptr [rdi + 0x28], dh; movd xmm0, eax; ret; 
0x00000000000cdcc7: add byte ptr [rdi + 0x350039b5], bh; ret 0xb; 
0x00000000000cd633: add byte ptr [rdi + 0x5c00aeed], ch; adc al, byte ptr es:[rax]; insd dword ptr [rdi], dx; ret 0x4d; 
0x000000000019b87b: add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x000000000006b33c: add byte ptr [rdi + rax - 0x3b7cb800], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056e56: add byte ptr [rdi + rax - 0xd], dh; ret; 
0x0000000000050361: add byte ptr [rdi + rax*8 + 2], ah; and al, byte ptr [rax]; add byte ptr [rax], al; movd xmm0, eax; ret; 
0x000000000005024e: add byte ptr [rdi + rax*8 + 2], ah; and al, byte ptr [rax]; add byte ptr [rax], al; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x000000000000ecfd: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000004334a: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000001a100: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000207c0: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000009b2cd: add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; subss xmm0, xmm0; ret; 
0x000000000009c8dd: add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000001b467: add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000196f43: add byte ptr [rdi + rbx*2 - 0x27a80000], dh; in eax, dx; jmp qword ptr [rbx + 1]; 
0x0000000000196ecb: add byte ptr [rdi + rbx*2], bh; add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x0000000000192eb3: add byte ptr [rdi + rbx], ah; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x0000000000192e9b: add byte ptr [rdi + rbx], cl; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000195f1b: add byte ptr [rdi + rcx*2 + 0x13900000], cl; in al, dx; call qword ptr [rsi + 0xa]; 
0x000000000019878b: add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000198eb3: add byte ptr [rdi + rdi*2], ah; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x00000000000e905d: add byte ptr [rdi + rdi*4], ah; in al, dx; shr bh, 0x46; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x000000000019674b: add byte ptr [rdi + rdx*2 - 0x7d300000], bh; in eax, dx; call qword ptr [rdi]; 
0x00000000001966cb: add byte ptr [rdi + rdx*2], bh; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000001966a3: add byte ptr [rdi + rdx*2], dl; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x0000000000051a8e: add byte ptr [rdi + riz*2 - 0xd], dh; ret; 
0x0000000000197693: add byte ptr [rdi + riz*2], al; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x00000000000e29b2: add byte ptr [rdi + rsi*4 - 0x74c011e2], dl; call rcx; 
0x00000000000cd48b: add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000000cbf5f: add byte ptr [rdi], ah; movsb byte ptr [rdi], byte ptr cs:[rsi]; sal dword ptr [rsi], cl; ret; 
0x0000000000051100: add byte ptr [rdi], bh; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000cdf4f: add byte ptr [rdi], bl; leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x00000000000034c7: add byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x0000000000042276: add byte ptr [rdi], cl; lahf; ret 0xd109; 
0x0000000000018efb: add byte ptr [rdi], cl; lahf; ret 0xf209; 
0x000000000006a82b: add byte ptr [rdi], cl; mov byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000518f6: add byte ptr [rdi], cl; or eax, 0x7a1d2; ja 0x51928; movd xmm0, eax; ret; 
0x0000000000075e4e: add byte ptr [rdi], cl; push rax; ret 0x290f; 
0x00000000000769ee: add byte ptr [rdi], cl; push rax; ret 0x8a8; 
0x000000000007a74f: add byte ptr [rdi], cl; push rax; ret; 
0x0000000000052890: add byte ptr [rdi], cl; push rdi; ret 0xff3; 
0x0000000000051033: add byte ptr [rdi], cl; push rsi; add eax, 0xafe65; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005100e: add byte ptr [rdi], cl; push rsi; add eax, 0xafe9a; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504d3: add byte ptr [rdi], cl; push rsi; add eax, 0xb09c5; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504ae: add byte ptr [rdi], cl; push rsi; add eax, 0xb09fa; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fe2f: add byte ptr [rdi], cl; push rsp; add eax, 0x7bc89; ret; 
0x00000000000501d2: add byte ptr [rdi], cl; push rsp; or eax, 0x7b8e6; divss xmm0, xmm1; ret; 
0x000000000004d352: add byte ptr [rdi], cl; push rsp; or eax, 0x7e766; divss xmm0, xmm1; ret; 
0x0000000000052643: add byte ptr [rdi], cl; push rsp; ret 0x2e0f; 
0x0000000000050f07: add byte ptr [rdi], cl; push rsp; ret; 
0x000000000004c613: add byte ptr [rdi], cl; push rsp; retf 0x280f; ret; 
0x00000000000119d8: add byte ptr [rdi], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000004a50b: add byte ptr [rdi], cl; ror dword ptr cs:[rdi], 0x28; ret 0xd976; 
0x000000000004e2ab: add byte ptr [rdi], cl; ror dword ptr cs:[rdi], 0x82; ret; 
0x00000000000122ea: add byte ptr [rdi], cl; ror dword ptr cs:[rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x0000000000050041: add byte ptr [rdi], cl; ror dword ptr cs:[rdi], 1; xchg byte ptr [rbp + 0xffffffe], ah; sub al, cl; mulss xmm1, xmm0; ret; 
0x000000000007dfbc: add byte ptr [rdi], cl; ror qword ptr [rbp - 0x76b2adfc], cl; ret; 
0x000000000004a60f: add byte ptr [rdi], cl; sub al, cl; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000501c7: add byte ptr [rdi], cl; sub al, cl; movss xmm0, dword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d347: add byte ptr [rdi], cl; sub al, cl; movss xmm0, dword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x000000000004a218: add byte ptr [rdi], cl; sub al, dl; movaps xmm0, xmm2; pop rbx; ret; 
0x000000000004a57d: add byte ptr [rdi], cl; sub cl, al; add rsp, 0x18; ret; 
0x00000000000124ff: add byte ptr [rdi], cl; sub cl, al; jne 0x12638; add rsp, 0x28; ret; 
0x00000000000570a7: add byte ptr [rdi], cl; sub cl, al; ret; 
0x000000000004a227: add byte ptr [rdi], cl; sub cl, dl; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000007b1a8: add byte ptr [rdi], cl; sub dword ptr [rbx], ecx; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x0000000000075459: add byte ptr [rdi], cl; sub dword ptr [rdi + 0x10], eax; ret; 
0x00000000000745d4: add byte ptr [rdi], cl; sub dword ptr [rdi], eax; ret; 
0x00000000000586df: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000002d325: add byte ptr [rdi], cl; test ah, dh; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000044178: add byte ptr [rdi], cl; test byte ptr [rcx - 0xd000000], cl; ret; 
0x00000000000747d3: add byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bh; add esp, 0x18; ret; 
0x000000000004519d: add byte ptr [rdi], cl; test dword ptr [rbp + 3], eax; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x000000000006bfbd: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000000c113: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edx; add esp, 0x38; ret; 
0x00000000000809ce: add byte ptr [rdi], cl; test dword ptr [rbx + 3], ebx; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000004b36d: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000001], eax; add esp, 0x20; pop rbx; ret; 
0x000000000000dbc7: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], ebx; add esp, 0x38; ret; 
0x000000000000e0f5: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], esi; add esp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000164fc: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000001], esp; add esp, 0xa0; pop rbx; ret; 
0x000000000002e306: add byte ptr [rdi], cl; test dword ptr [rdi + 1], eax; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x0000000000013bf4: add byte ptr [rdi], cl; test dword ptr [rdi + 1], edi; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x000000000006f075: add byte ptr [rdi], cl; test dword ptr [rdi + 6], edi; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x00000000000c564a: add byte ptr [rdi], cl; test dword ptr [rdi], ebx; or al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000000f45d: add byte ptr [rdi], cl; test dword ptr [rdx + 0x24], ebx; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000070d1e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], ebx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000018cec: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000001], edx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000001ed14: add byte ptr [rdi], cl; test dword ptr [rdx + rax - 0x36270000], ecx; leave; ret; 
0x000000000001f257: add byte ptr [rdi], cl; test dword ptr [rdx + rax], ebx; add cl, bl; leave; add rsp, 0x78; ret; 
0x000000000004b000: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000002], eax; add esp, 0x20; pop rbx; ret; 
0x00000000000288a1: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000002], esp; add esp, 0x40; pop rbx; ret; 
0x00000000000b16e5: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000003], edx; add esp, 0x28; ret; 
0x00000000000279c5: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000003], esp; add esp, 0x28; ret; 
0x000000000005c32d: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000023], esp; add esp, 0xb8; ret; 
0x000000000008c765: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000026], esi; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000230c5: add byte ptr [rdi], cl; test dword ptr [rip + 0x4800003e], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000004ff14: add byte ptr [rdi], cl; test dword ptr [rip - 0xcffffff], edi; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x00000000000800cd: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ecx; add esp, 0x20; pop rbx; ret; 
0x0000000000014675: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x60; pop rbx; ret; 
0x0000000000028c55: add byte ptr [rdi], cl; test dword ptr [rsi + 1], edi; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x000000000001393f: add byte ptr [rdi], cl; test dword ptr [rsi + 1], edi; add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x0000000000069d06: add byte ptr [rdi], cl; test dword ptr [rsi - 0x9fffffe], esi; ret; 
0x000000000001c36c: add byte ptr [rdi], cl; test dword ptr [rsi], ecx; add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000004069f: add byte ptr [rdi], cl; test edx, ebp; or dword ptr [rax], eax; add dh, dh; ret; 
0x00000000000734e9: add byte ptr [rdi], cl; test edx, edx; or byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000193f3: add byte ptr [rdi], cl; wait; ret 0x450f; 
0x00000000000195c6: add byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x0000000000042b2d: add byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; shl dword ptr [rsi + 0xf], 0x2e; int 0x89; ret 0x9b0f; 
0x0000000000087555: add byte ptr [rdi], cl; xchg ah, cl; add eax, 0x89480000; ret 0xc089; 
0x00000000000bf93e: add byte ptr [rdi], cl; xchg al, al; sub dword ptr [rax], eax; add ch, al; ret; 
0x00000000000c0d37: add byte ptr [rdi], cl; xchg byte ptr [rbx + rbx], dh; add ch, al; ret; 
0x000000000002ae2b: add byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc089; 
0x00000000000bfa19: add byte ptr [rdi], cl; xchg dl, cl; sub byte ptr [rax], al; add ch, al; ret; 
0x000000000002cb3b: add byte ptr [rdi], cl; xchg dword ptr [rsi - 0x76ffffff], edx; ret 0xe281; 
0x0000000000044854: add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x000000000000e643: add byte ptr [rdi], cl; xchg edi, eax; ret 0x1777; 
0x0000000000011c60: add byte ptr [rdi], cl; xchg edi, eax; ret 0x1a77; 
0x00000000000cca7f: add byte ptr [rdx + 0x12], dh; mov ds, word ptr [rdi]; ret; 
0x00000000000cdc73: add byte ptr [rdx + 0x3600eb7e], cl; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x0000000000032007: add byte ptr [rdx + 0x3e], bh; jne 0x32048; movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000011b86: add byte ptr [rdx + 2], bh; je 0x11b90; add rsp, 0x18; ret; 
0x0000000000011c06: add byte ptr [rdx + 2], bh; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000012383: add byte ptr [rdx + 2], bh; je 0x12390; add rsp, 0x18; ret; 
0x00000000000127a6: add byte ptr [rdx + 2], bh; je 0x127b0; add rsp, 0x18; ret; 
0x000000000000e56a: add byte ptr [rdx + 2], bh; je 0xe578; add rsp, 0x18; ret; 
0x000000000000e5ea: add byte ptr [rdx + 2], bh; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000edc5: add byte ptr [rdx + 2], bh; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000f22a: add byte ptr [rdx + 2], bh; je 0xf238; add rsp, 0x18; ret; 
0x00000000000478d8: add byte ptr [rdx + 6], bh; je 0x47a70; movapd xmm1, xmm0; ret; 
0x000000000009c175: add byte ptr [rdx + 6], bh; je 0x9c409; vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x0000000000104c26: add byte ptr [rdx + rax*2], ah; ret; 
0x00000000001979ab: add byte ptr [rdx + rbp*2], bl; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x0000000000050fa4: add byte ptr [rdx + rbp*8 - 0xd], dh; ret; 
0x00000000001978a3: add byte ptr [rdx + rbx*2 - 0x12], cl; call qword ptr [rax]; 
0x0000000000199a0b: add byte ptr [rdx + rcx*4], bh; add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x0000000000199b2b: add byte ptr [rdx + rdi*2], al; int1; call rsi; 
0x00000000000ece04: add byte ptr [rdx + rsi*8 + 0x2065d23f], al; push rax; fisttp word ptr [rbp + riz + 0x5f6000bf]; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x00000000000ecd44: add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x0000000000080278: add byte ptr [rdx - 0x40], bh; pxor xmm2, xmm2; je 0x8023b; movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000009722f: add byte ptr [rdx - 0x75], cl; push rsp; ret; 
0x00000000000cd11f: add byte ptr [rdx - 0x76], al; ret; 
0x0000000000058f26: add byte ptr [rdx - 0x77000000], dh; ret; 
0x00000000000e9f5a: add byte ptr [rdx], 0x9c; jmp qword ptr [rbx]; 
0x00000000000123bf: add byte ptr [rdx], ah; add byte ptr [rax], al; add bl, ch; ret 0x2e66; 
0x0000000000003f33: add byte ptr [rdx], ah; add byte ptr [rsi], cl; add byte ptr [rax], ah; syscall; 
0x00000000000060c3: add byte ptr [rdx], ah; add byte ptr [rsi], cl; add byte ptr [rax], al; syscall; 
0x0000000000012fc8: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x12fd2; fstp st(0); fldz; ret; 
0x0000000000019d78: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x19d82; fstp st(0); fldz; ret; 
0x0000000000020cb0: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x20cba; fstp st(0); fldz; ret; 
0x000000000001a09b: add byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x00000000000e9e9a: add byte ptr [rdx], al; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x0000000000003b87: add byte ptr [rdx], bh; add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], dh; ret; 
0x00000000000fe24b: add byte ptr [rdx], bh; ret; 
0x0000000000004d2b: add byte ptr [rdx], dl; add byte ptr [rsi], cl; add al, dh; ret 0; 
0x00000000000034cb: add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x0000000000003b8b: add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], dh; ret; 
0x00000000000e890a: add byte ptr [rdx], dl; ret; 
0x00000000000e9525: add byte ptr [rip + 0x2d0ef6bf], cl; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000027093: add byte ptr [rip + 0x3c7fffff], bh; movsd xmm1, qword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000e951d: add byte ptr [rip + 0x3f], cl; nop; xor al, 0; or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000020c7b: add byte ptr [rip + 0x3fbe], bh; jge 0x20c88; fld1; faddp st(1); ret; 
0x00000000000dfca2: add byte ptr [rip + 0x3fedfffe], dh; push rbx; retf; ret 0x19cf; 
0x0000000000050583: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc3: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a3: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b3: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d273: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d713: add byte ptr [rip + 0x480], ah; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x0000000000050588: add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc8: add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a8: add byte ptr [rip + 0x480], bh; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b8: add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d278: add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d718: add byte ptr [rip + 0x480], bh; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000ce6ff: add byte ptr [rip + 0x4a121583], bh; ret; 
0x0000000000019e7d: add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000050e78: add byte ptr [rip + 0x7fffffff], ah; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x0000000000050e77: add byte ptr [rip + 0x7fffffff], spl; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x000000000010fbff: add byte ptr [rip - 0x6becb5b5], dl; sal bl, 1; ret 0x3ffd; 
0x0000000000050f6f: add byte ptr [rip - 0x80000000], ah; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000000747ca: add byte ptr [rsi + 0x13], dh; cmp rdx, 0x7fff; je 0x74898; add rsp, 0x18; ret; 
0x000000000000c167: add byte ptr [rsi + 0x25], ah; ret 0x66f3; 
0x000000000000c166: add byte ptr [rsi + 0x25], spl; ret 0x66f3; 
0x000000000001fae5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000015d25: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x00000000000c54f6: add byte ptr [rsi + 0x41], ah; and eax, 0x21487fff; ret 0xcae9; 
0x00000000000c6de2: add byte ptr [rsi + 0x41], ah; cmp eax, 0x89497fff; ret; 
0x000000000004402d: add byte ptr [rsi + 0x48], ah; movd eax, mm0; pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x0000000000086a67: add byte ptr [rsi + 0x48], ah; movd mm0, eax; ret; 
0x0000000000044fcd: add byte ptr [rsi + 0x48], dh; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000c6ebb: add byte ptr [rsi + 0x63], cl; and al, 0xa2; add rdx, r12; jmp rdx; 
0x00000000001108af: add byte ptr [rsi + 0x75], ah; ret; 
0x000000000006f787: add byte ptr [rsi + 0xf], ah; fcmovne st(0), st(0); movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x0000000000040fcd: add byte ptr [rsi + 0xf], ah; je 0x40ff7; adc byte ptr [rdi], cl; xchg dword ptr [rsi], esp; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000003d527: add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x41]; 
0x0000000000039e45: add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x44]; 
0x0000000000070f7e: add byte ptr [rsi + 0xf], ah; out dx, eax; ret 0x290f; 
0x00000000000756be: add byte ptr [rsi + 0xf], ah; out dx, eax; ret 0x3de9; 
0x0000000000063db3: add byte ptr [rsi + 0xf], ah; out dx, eax; ret 0xf66; 
0x0000000000083eb6: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rbx + riz*2 - 0x2e], 0x83; ret 0x8301; 
0x000000000001132f: add byte ptr [rsi + 0xf], ah; out dx, eax; shl byte ptr [rsi + 0xf], 0x2e; ret 0x870f; 
0x0000000000045007: add byte ptr [rsi + 0xf], ah; out dx, eax; shl byte ptr [rsi + 0xf], 0x56; or eax, 0xb9a5c; ret; 
0x000000000007c467: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000007d570: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x48; ret; 
0x000000000007d983: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007cee3: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000006eb3f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add eax, 0x97d58; add rsp, 0x30; pop rbx; ret; 
0x000000000007c362: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x20; add rsp, 0x48; ret; 
0x000000000007c937: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x30; add rsp, 0x48; ret; 
0x000000000007546f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 8; ret; 
0x00000000000680d2: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000007c346: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x10e8; 
0x000000000007d93b: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x0000000000058c5a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x1ce8; 
0x000000000007dc36: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x20e8; 
0x0000000000076330: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x26e8; 
0x000000000007d12e: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x28e8; 
0x0000000000058dd9: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d022: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x34e8; 
0x000000000007db1d: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x39e8; 
0x000000000007b11c: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x3ae8; 
0x000000000007c81a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x3ce8; 
0x0000000000073d47: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x3fe8; 
0x000000000007550e: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x48e8; 
0x000000000007cb0c: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4ae8; 
0x0000000000072d09: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4de8; 
0x000000000007d752: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4e8; 
0x000000000007d806: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x50e8; 
0x000000000007c303: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x53e8; 
0x000000000006eb02: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x54e8; 
0x000000000007d5fb: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5be8; 
0x00000000000640fa: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5ce8; 
0x0000000000058df8: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5ee8; 
0x000000000007cdf6: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x60e8; 
0x00000000000754ef: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x67e8; 
0x00000000000757ed: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x69e8; 
0x0000000000069b0c: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ae8; 
0x00000000000724ea: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ce8; 
0x000000000007dbe6: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x70e8; 
0x000000000007d6df: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x77e8; 
0x000000000007d0db: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x7be8; 
0x0000000000063777: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8341; 
0x0000000000058e2d: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x850f; 
0x0000000000076ad0: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x86e8; 
0x000000000007cece: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x88e8; 
0x000000000007dec3: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x93e8; 
0x0000000000072501: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x95e8; 
0x000000000007c2bd: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x99e8; 
0x000000000007d5b6: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa0e8; 
0x000000000007cfae: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa8e8; 
0x0000000000060da9: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xade8; 
0x000000000007cda6: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xb0e8; 
0x000000000007239c: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbae8; 
0x00000000000704bb: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbc41; 
0x000000000007d54b: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbe8; 
0x0000000000075592: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x000000000007c790: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc6e8; 
0x000000000006bd82: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xd4e8; 
0x0000000000072c7f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xd7e8; 
0x000000000007d67a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x000000000007db76: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe0e8; 
0x0000000000075573: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe3e8; 
0x000000000007d856: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe8; 
0x0000000000076b6d: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe9e8; 
0x000000000007a268: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xeee8; 
0x0000000000070e67: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xefe8; 
0x000000000007ce66: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf0e8; 
0x00000000000596ef: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000075760: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf6e8; 
0x000000000007b15f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf7e8; 
0x0000000000074358: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xfee8; 
0x0000000000060e11: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000006f357: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x0000000000070364: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000006455a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000006a9b3: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; shr eax, 0xd3; ret; 
0x000000000007186a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x000000000000ebf9: add byte ptr [rsi + 0xf], ah; push rax; ret 0x1a8; 
0x00000000000482bd: add byte ptr [rsi + 0xf], ah; push rax; ret; 
0x0000000000044cdf: add byte ptr [rsi + 0xf], ah; push rdi; or eax, 0x865f8; ret; 
0x0000000000080049: add byte ptr [rsi + 0xf], ah; push rdi; ret 0xf66; 
0x000000000002e84f: add byte ptr [rsi + 0xf], ah; push rdi; sal edx, 0xf; pop rcx; ret 0xf66; 
0x0000000000045ae3: add byte ptr [rsi + 0xf], ah; push rsi; add eax, 0x85fc4; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000043195: add byte ptr [rsi + 0xf], ah; push rsi; add eax, 0xb9642; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043167: add byte ptr [rsi + 0xf], ah; push rsi; add eax, 0xb9680; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324f5: add byte ptr [rsi + 0xf], ah; push rsi; add eax, 0xca2e2; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324c7: add byte ptr [rsi + 0xf], ah; push rsi; add eax, 0xca320; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002fa33: add byte ptr [rsi + 0xf], ah; push rsi; ret; 
0x0000000000044faf: add byte ptr [rsi + 0xf], ah; push rsi; xlatb; movapd xmm1, xmm2; ret; 
0x0000000000045adb: add byte ptr [rsi + 0xf], ah; push rsp; add eax, 0x857fc; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000042fff: add byte ptr [rsi + 0xf], ah; push rsp; add eax, 0x882a8; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000031cef: add byte ptr [rsi + 0xf], ah; push rsp; add eax, 0x995b8; ret; 
0x0000000000044fa7: add byte ptr [rsi + 0xf], ah; push rsp; cmp eax, 0x86330; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045a63: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x85874; ret; 
0x0000000000043007: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x882d0; orpd xmm0, xmm1; ret; 
0x000000000003d133: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x8e174; divsd xmm0, xmm1; ret; 
0x00000000000320fb: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x991ac; divsd xmm0, xmm1; ret; 
0x000000000002c4eb: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x9edbc; divsd xmm0, xmm1; ret; 
0x0000000000045c46: add byte ptr [rsi + 0xf], ah; push rsp; out dx, eax; pop rbx; orpd xmm1, xmm5; ret; 
0x000000000000ef67: add byte ptr [rsi + 0xf], ah; push rsp; ret 0xf66; 
0x0000000000033639: add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x000000000000e3a8: add byte ptr [rsi + 0xf], ah; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000000ed2b: add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000004271d: add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], cl; wait; ret 0x450f; 
0x0000000000027023: add byte ptr [rsi + 0xf], ah; shl dword ptr cs:[rsi + 0xf], 0x28; ret 0xd676; 
0x0000000000020e1b: add byte ptr [rsi + 0xf], ah; sub ah, al; jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x000000000002715f: add byte ptr [rsi + 0xf], ah; sub al, cl; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f87: add byte ptr [rsi + 0xf], ah; sub al, cl; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f97: add byte ptr [rsi + 0xf], ah; sub al, cl; movapd xmm0, xmm1; ret; 
0x000000000003d127: add byte ptr [rsi + 0xf], ah; sub al, cl; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320ef: add byte ptr [rsi + 0xf], ah; sub al, cl; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000004558f: add byte ptr [rsi + 0xf], ah; sub al, cl; ret; 
0x0000000000044da9: add byte ptr [rsi + 0xf], ah; sub al, dl; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000021f4d: add byte ptr [rsi + 0xf], ah; sub bh, al; jne 0x22e73; add rsp, 0x48; ret; 
0x0000000000047544: add byte ptr [rsi + 0xf], ah; sub bh, dl; movapd xmm1, xmm2; ret; 
0x0000000000047f80: add byte ptr [rsi + 0xf], ah; sub ch, al; jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x00000000000270a6: add byte ptr [rsi + 0xf], ah; sub cl, al; add rsp, 0x18; ret; 
0x000000000000ef55: add byte ptr [rsi + 0xf], ah; sub cl, al; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000044cef: add byte ptr [rsi + 0xf], ah; sub cl, al; ret; 
0x00000000000471f1: add byte ptr [rsi + 0xf], ah; sub dl, al; movapd xmm1, xmm9; ret; 
0x0000000000048823: add byte ptr [rsi + 0xf], ah; sub dl, al; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000474e4: add byte ptr [rsi + 0xf], ah; sub dl, al; ret; 
0x0000000000048b4f: add byte ptr [rsi + 0xf], ah; test byte ptr cs:[rdi], -0x76; inc byte ptr [rax + rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000048d49: add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xfffd6587; jmp qword ptr [rsi + 0xf]; 
0x0000000000048b59: add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x000000000001132e: add byte ptr [rsi + 0xf], spl; out dx, eax; shl byte ptr [rsi + 0xf], 0x2e; ret 0x870f; 
0x0000000000048566: add byte ptr [rsi + 0xf], spl; push rax; ret; 
0x0000000000198dc3: add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x000000000019160b: add byte ptr [rsi + rax], bh; add byte ptr [rax], dl; ret 0xffe7; 
0x0000000000113061: add byte ptr [rsi + rbp + 0x2b500000], al; add byte ptr [rax], al; ret 0x27; 
0x0000000000193dfb: add byte ptr [rsi + rbp], ch; add byte ptr [rax], al; xchg cl, ch; call qword ptr [rcx]; 
0x0000000000196dbb: add byte ptr [rsi + rbx*2], ch; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x0000000000195d93: add byte ptr [rsi + rcx*2], al; add byte ptr [rax], al; mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x0000000000191df3: add byte ptr [rsi + rcx], ah; add al, ch; add ch, al; jmp qword ptr [rsi]; 
0x0000000000191dc3: add byte ptr [rsi + rcx], dh; add byte ptr [rax], al; pop rax; add ch, al; call qword ptr [rcx]; 
0x0000000000198d93: add byte ptr [rsi + rdi*2], al; add byte ptr [rax], al; cwde; std; out dx, eax; call qword ptr [rbp + 3]; 
0x0000000000198dfb: add byte ptr [rsi + rdi*2], ch; add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x00000000001914eb: add byte ptr [rsi + rdi*4 - 0x19], ah; jmp rdi; 
0x00000000001985a3: add byte ptr [rsi + rsi*2], dl; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x000000000001826d: add byte ptr [rsi - 0x70], ah; fld xword ptr [rsp + 8]; frndint; ret; 
0x000000000000bffd: add byte ptr [rsi - 0x70], ah; fnstenv [rdi]; fldenv [rdi]; stmxcsr dword ptr [rdi + 0x1c]; xor eax, eax; ret; 
0x0000000000072c2d: add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000086acd: add byte ptr [rsi - 0x70], ah; roundsd xmm0, xmm0, 0xa; ret; 
0x0000000000019f94: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000001b22e: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000019f52: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019ee0: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b176: add byte ptr [rsi - 0x77], ah; push rsp; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000110953: add byte ptr [rsi*2 + 0x4147], 0; add byte ptr [rbx + 0x32], 0x6a; add byte ptr [r8], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000190378: add byte ptr [rsi], ah; add byte ptr [rax + 0x31], cl; in al, dx; call qword ptr [rax + 0x66]; 
0x00000000000da939: add byte ptr [rsi], bh; imul esp, eax, 0x9b3fe4c9; cmc; jmp qword ptr [rax - 0x35]; 
0x00000000000f1388: add byte ptr [rsi], bh; ret; 
0x0000000000004d27: add byte ptr [rsi], ch; add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add al, dh; ret 0; 
0x00000000000cd487: add byte ptr [rsi], ch; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x0000000000004d2d: add byte ptr [rsi], cl; add al, dh; ret 0; 
0x00000000000034cd: add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x0000000000003f35: add byte ptr [rsi], cl; add byte ptr [rax], ah; syscall; 
0x00000000000060c5: add byte ptr [rsi], cl; add byte ptr [rax], al; syscall; 
0x0000000000003b8d: add byte ptr [rsi], cl; add byte ptr [rax], dh; ret; 
0x00000000000cdc77: add byte ptr [rsi], dh; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x00000000000cf03f: add byte ptr [rsi], dl; ret 0xc006; 
0x00000000001011ad: add byte ptr [rsi], dl; ret; 
0x0000000000012fcb: add byte ptr [rsp + rax - 0x23], dh; fcomp st(1); out dx, al; ret; 
0x000000000007c5a1: add byte ptr [rsp + rcx + 0x48], dh; add esp, 0x20; pop rbx; ret; 
0x00000000000db255: add byte ptr [rsp + rdi + 0x1b], dl; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000198c03: add byte ptr [rsp + rdi*2], dh; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000192133: add byte ptr [rsp + rdx - 0x18], bh; jmp qword ptr [rcx + 2]; 
0x000000000019a403: add byte ptr [rsp + rdx*4], dh; add byte ptr [rax - 0xe], bl; bnd call qword ptr [rdx]; 
0x000000000019742b: add byte ptr [rsp + riz*2 + 0x3cb00000], bl; out dx, al; call rsi; 
0x00000000000cd913: add byte ptr [rsp + riz*2 - 0x22], bh; add byte ptr [rbx - 0x26ff279c], bl; mov esi, 0x97a40031; ret; 
0x000000000019841b: add byte ptr [rsp + rsi*2 - 0x1b000000], cl; out dx, al; call rdx; 
0x00000000000f088f: add byte ptr ds:[rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x00000000000eccef: add byte ptr ds:[rax], ah; cdq; movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x00000000000e223f: add byte ptr ds:[rax], al; add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x00000000000230c9: add byte ptr ds:[rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000008c769: add byte ptr es:[rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000064432: add byte ptr es:[rax], al; lea rdx, [rip + 0xa3c44]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000019a138: add byte ptr fs:[rax], al; add byte ptr [rcx + rdx*4 - 0x52c00000], ch; bnd call rax; 
0x000000000019742d: add byte ptr fs:[rax], al; mov al, 0x3c; out dx, al; call rsi; 
0x0000000000190321: add byte ptr fs:[rax], al; test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x00000000000e905c: add byte ptr fs:[rdi + rdi*4], ah; in al, dx; shr bh, 0x46; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x000000000003cd05: add byte ptr ss:[rax - 0x73], cl; adc eax, 0x49e42; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x0000000000032435: add byte ptr ss:[rax - 0x73], cl; adc eax, 0x546f2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d05: add byte ptr ss:[rax - 0x73], cl; adc eax, 0x54de2; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d65: add byte ptr ss:[rax - 0x73], cl; adc eax, 0x55d62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x00000000000a7828: add ch, 0x3b; pop rcx; ret; 
0x0000000000198420: add ch, ah; out dx, al; call rdx; 
0x00000000000b74bb: add ch, al; and ebx, dword ptr [rax + rbx*8 - 0x3c]; jns 0xb74ec; ret; 
0x0000000000191db1: add ch, al; call qword ptr [rcx]; 
0x000000000009bc6f: add ch, al; cli; adc byte ptr [rsp - 0xc], al; ret; 
0x000000000008effc: add ch, al; cli; jle 0x8f01e; stosd dword ptr [rdi], eax; ret 3; 
0x00000000000bd185: add ch, al; cmp dword ptr [rbp + rax + 0x22], edx; loope 0xbd18d; add ch, al; jns 0xbd1ba; ret; 
0x000000000009c424: add ch, al; fistp dword ptr [rcx - 0x2e]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000091708: add ch, al; fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x0000000000191df9: add ch, al; jmp qword ptr [rsi]; 
0x0000000000087bd5: add ch, al; jns 0x87c02; ret; 
0x0000000000087d5b: add ch, al; jns 0x87d87; ffreep st(5); ret; 
0x0000000000087dd1: add ch, al; jns 0x87dfd; ffreep st(5); ret; 
0x0000000000087e47: add ch, al; jns 0x87e73; ffreep st(5); ret; 
0x0000000000087ebd: add ch, al; jns 0x87ee9; ffreep st(5); ret; 
0x0000000000087f33: add ch, al; jns 0x87f5f; ffreep st(5); ret; 
0x0000000000087fa9: add ch, al; jns 0x87fd5; ffreep st(5); ret; 
0x00000000000895ff: add ch, al; jns 0x8962b; ffreep st(5); ret; 
0x0000000000089676: add ch, al; jns 0x896a2; ffreep st(5); ret; 
0x00000000000898fb: add ch, al; jns 0x89927; ret; 
0x000000000008f004: add ch, al; jns 0x8f030; ret 0xfbc5; 
0x0000000000090a99: add ch, al; jns 0x90ac5; ret; 
0x00000000000934a6: add ch, al; jns 0x934d2; ffreep st(5); ret; 
0x000000000009351d: add ch, al; jns 0x93549; ffreep st(5); ret; 
0x0000000000093608: add ch, al; jns 0x93634; ffreep st(5); ret; 
0x00000000000956c0: add ch, al; jns 0x956ec; int 0xc4; ret 0x99b9; 
0x000000000009e24e: add ch, al; jns 0x9e27a; ffreep st(4); ret; 
0x000000000009e2e9: add ch, al; jns 0x9e315; ffreep st(5); ret; 
0x000000000009e35d: add ch, al; jns 0x9e389; ffreep st(5); ret; 
0x000000000009e3d1: add ch, al; jns 0x9e3fd; ffreep st(5); ret; 
0x000000000009e445: add ch, al; jns 0x9e471; ffreep st(5); ret; 
0x000000000009e4b9: add ch, al; jns 0x9e4e5; ffreep st(5); ret; 
0x000000000009e52d: add ch, al; jns 0x9e559; ffreep st(5); ret; 
0x000000000009fb81: add ch, al; jns 0x9fbad; ffreep st(5); ret; 
0x000000000009fbf6: add ch, al; jns 0x9fc22; ffreep st(5); ret; 
0x000000000009fe70: add ch, al; jns 0x9fe9c; ret; 
0x00000000000a55bc: add ch, al; jns 0xa55e8; ret 0xfbc5; 
0x00000000000a7079: add ch, al; jns 0xa70a5; ret; 
0x00000000000a9ae5: add ch, al; jns 0xa9b11; ffreep st(5); ret; 
0x00000000000a9b5a: add ch, al; jns 0xa9b86; ffreep st(5); ret; 
0x00000000000a9ba5: add ch, al; jns 0xa9bd1; ffreep st(4); ret; 
0x00000000000a9c41: add ch, al; jns 0xa9c6d; ffreep st(5); ret; 
0x00000000000b3483: add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x00000000000b526e: add ch, al; jns 0xb52a0; ret; 
0x00000000000b5280: add ch, al; jns 0xb52b2; ret 0xf9c5; 
0x00000000000b8f99: add ch, al; jns 0xb8fc5; ret 0xfbc5; 
0x00000000000bb6ba: add ch, al; jns 0xbb6e6; ret; 
0x00000000000bc644: add ch, al; jns 0xbc670; ret; 
0x00000000000bd18d: add ch, al; jns 0xbd1ba; ret; 
0x00000000000bfed7: add ch, al; jns 0xbff04; inc ebp; ret; 
0x00000000000c20db: add ch, al; jns 0xc2108; ret; 
0x00000000000bd922: add ch, al; leave; out dx, eax; test ch, 0xfb; pop rcx; ret 0xfbc5; 
0x000000000009ce4f: add ch, al; loope 0x9ce67; rol ch, 0xf9; pop rcx; ret 0xf9c5; 
0x000000000009beb6: add ch, al; pop rax; ret 0xe1c4; 
0x00000000000b1b5d: add ch, al; rcr dword ptr [rcx + 0x2c], cl; ret 0x8d48; 
0x0000000000091030: add ch, al; rcr dword ptr [rdi + riz*8 - 0x3c], cl; ret 0xb9c9; 
0x00000000000c1fa4: add ch, al; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x000000000008726f: add ch, al; ret; 
0x000000000008712c: add ch, al; retf; pop rax; fisttp dword ptr [rax - 0x77]; ret 0xfbc5; 
0x000000000009c296: add ch, al; retf; pop rax; ret 0xd3c5; 
0x00000000000999b9: add ch, al; stc; push rdi; ret 0xf1c5; 
0x00000000000b3d9b: add ch, al; stc; push rsi; ret; 
0x000000000008fb52: add ch, al; stc; push rsp; ret; 
0x0000000000099b9a: add ch, al; stc; sub dl, al; ret; 
0x000000000009bd37: add ch, al; sti; pop rax; ret 0xe2c4; 
0x00000000000b9a90: add ch, al; sti; pop rcx; mov ah, 0xc1; jnp 0xb9af1; ret; 
0x00000000000bea5b: add ch, al; sti; pop rcx; mov ebp, 0xc5f828f9; ret; 
0x00000000000b952e: add ch, al; sti; pop rcx; ret 0x7bc5; 
0x00000000000966ff: add ch, al; sti; pop rcx; ret 0xd089; 
0x0000000000089065: add ch, al; sti; pop rcx; ret 0xe9c5; 
0x00000000000b91b7: add ch, al; sti; pop rcx; ret 0xf9c5; 
0x0000000000089059: add ch, al; sti; pop rcx; ret 0xfbc5; 
0x000000000009a77a: add ch, al; sti; pop rcx; ret; 
0x00000000000b40d1: add ch, al; sti; pop rsp; mov ah, 0xc1; jnp 0xb4132; ret 0x23c5; 
0x000000000009c8b7: add ch, al; sti; pop rsp; ret 0xfbc5; 
0x0000000000098dc5: add ch, al; sti; pop rsp; ret; 
0x0000000000099c5f: add ch, al; sti; push rcx; ret 0xfbc5; 
0x000000000009d483: add ch, al; sti; ret 0x4305; 
0x0000000000086f13: add ch, al; sti; ret 0xb305; 
0x0000000000087634: add ch, al; xor ebx, dword ptr [rcx + 0xc]; ret 0x8d48; 
0x0000000000015d1c: add ch, bl; add al, 0x91; ret; 
0x0000000000015d98: add ch, bl; add al, 0xd1; ret; 
0x0000000000015db4: add ch, bl; add al, 1; ret; 
0x000000000001608e: add ch, bl; add al, 2; ret; 
0x0000000000015d2f: add ch, bl; add eax, 0xb558a; ret; 
0x00000000000503a7: add ch, bl; fcomp st(1); pop rsp; and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000032367: add ch, bl; fcomp st(5); pop rsp; and al, 0xe0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000001a560: add ch, bl; fdecstp; ret; 
0x00000000000207ef: add ch, bl; fdiv st(3); ret; 
0x0000000000015ddf: add ch, bl; fdiv st(6); ret 0x7402; 
0x0000000000016d20: add ch, bl; fpatan; ret; 
0x000000000011061f: add ch, bl; jmp rsp; 
0x0000000000076b6a: add ch, byte ptr [rbx + 0xf660008]; outsd dx, dword ptr [rsi]; ret 0xe9e8; 
0x0000000000106bc9: add ch, byte ptr [rbx - 0x24]; xchg edi, eax; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x00000000000d785c: add ch, ch; ret 0xa3bf; 
0x00000000000e9e3a: add cl, 0xb7; jmp qword ptr [rax]; 
0x0000000000190ba3: add cl, ah; shr bh, 1; call qword ptr [rax]; 
0x000000000004a8d8: add cl, al; call 0x10149bfe; add al, 0x82; ret; 
0x000000000008b07a: add cl, al; clc; or eax, 0x897fe083; ret 0xe2c1; 
0x000000000001fadf: add cl, bl; add eax, 0xac98a; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x000000000001c718: add cl, bl; add eax, 0xb0611; add rsp, 8; ret; 
0x000000000001c19d: add cl, bl; add eax, 0xb0b8c; add rsp, 0x18; fxch st(1); ret; 
0x0000000000017c7f: add cl, bl; call 0x7025e961; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000017f96: add cl, bl; int1; ret; 
0x000000000001e3bf: add cl, bl; leave; add rsp, 0x58; ret; 
0x000000000001f25d: add cl, bl; leave; add rsp, 0x78; ret; 
0x0000000000020b8f: add cl, bl; leave; faddp st(1); add rsp, 0x28; ret; 
0x000000000001ed1a: add cl, bl; leave; leave; ret; 
0x000000000001cc7f: add cl, bl; leave; ret; 
0x000000000001d7db: add cl, bl; loope 0x1d7b8; ret 0xe1d9; 
0x00000000000cd91b: add cl, bl; mov esi, 0x97a40031; ret; 
0x000000000001ae9f: add cl, bl; out dx, al; ret; 
0x000000000001e820: add cl, bl; ret 0x7dd9; 
0x000000000000c6ce: add cl, bl; ret 0xc1d8; 
0x000000000001d009: add cl, bl; ret 0xc2d8; 
0x0000000000012f8a: add cl, bl; ret 0xc9d8; 
0x000000000001dcc3: add cl, bl; ret 0xcbd8; 
0x0000000000014b3c: add cl, bl; ret 0xdf75; 
0x000000000001c54d: add cl, bl; ret 0xe1d9; 
0x0000000000014b15: add cl, bl; ret 0xe8d9; 
0x0000000000016f7a: add cl, bl; ret; 
0x0000000000058692: add cl, byte ptr [rax + 9]; ret; 
0x0000000000015d15: add cl, byte ptr [rax - 0x73]; or eax, 0xb5d93; fld qword ptr [rcx + rdx*4]; ret; 
0x000000000009716f: add cl, byte ptr [rax - 0x7d]; ret 0x4c20; 
0x000000000001c19b: add cl, byte ptr [rbx]; add cl, bl; add eax, 0xb0b8c; add rsp, 0x18; fxch st(1); ret; 
0x000000000000c2a0: add cl, byte ptr [rcx + 0x21d2f7fa]; ret 0x8966; 
0x0000000000041078: add cl, byte ptr [rdi]; test byte ptr [rcx + rcx*8 - 1], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000003fbb3: add cl, byte ptr [rdi]; test byte ptr [rcx], ch; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000de959: add cl, byte ptr [rsi]; pop rdi; sbb eax, 0xedbfb590; retfq; cmp edi, edi; jmp rdx; 
0x000000000009186c: add cl, ch; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000a4bde: add cl, ch; mov ebx, 0xc4ffffee; push r11; pop rax; ret 0x41c4; 
0x00000000000335e0: add cl, ch; pop rsp; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000030871: add cl, ch; pop rsp; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000029e82: add cl, ch; ret 0xfffb; 
0x000000000000ea98: add cl, ch; ret 8; 
0x00000000000560e7: add cl, ch; ret; 
0x0000000000057d40: add cl, ch; retf 0xfff5; jmp qword ptr [rsi + 0x2e]; 
0x000000000006f698: add cl, ch; retf 0xfff9; jmp qword ptr [rsi - 0x70]; 
0x0000000000071581: add cl, ch; retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x00000000000c8cf0: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000042f17: add cl, ch; xor ecx, dword ptr [rbx + 0x1f0ffffc]; add dl, dh; mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000001c372: add cl, cl; ret; 
0x00000000000cd9db: add cl, dh; outsb dx, byte ptr [rsi]; ret; 
0x0000000000016cad: add dh, bl; leave; fld1; faddp st(1); ret; 
0x0000000000018312: add dh, bl; leave; ret; 
0x000000000001873f: add dh, bl; loope 0x1879e; ret; 
0x000000000001900f: add dh, bl; loope 0x18ff1; ret 0xc9d9; 
0x0000000000012bd4: add dh, bl; rcr ebx, 0x2d; adc ecx, dword ptr [rdi - 0x1e21fff5]; jns 0x12b49; fchs; ret; 
0x000000000001768d: add dh, bl; rcr ebx, 0x2d; mov ch, byte ptr [rbp + 0xb]; add al, bl; ret 0xcad8; 
0x00000000000179c7: add dh, bl; rcr ebx, 0x2d; push rax; push 0xb; add al, bl; ret 0xcad8; 
0x0000000000018723: add dh, bl; rcr ebx, 0x6c; and al, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000001d4bb: add dh, bl; ret 0x6ddb; 
0x00000000000152e4: add dh, bl; ret 0xc1de; 
0x00000000000158fe: add dh, bl; ret 0xc9d9; 
0x0000000000015970: add dh, bl; ret 0xc9dc; 
0x0000000000013ba7: add dh, bl; ret 0xf1de; 
0x00000000000158f4: add dh, bl; ret; 
0x0000000000012385: add dh, byte ptr [rax + rcx + 0x48]; add esp, 0x18; ret; 
0x0000000000011b88: add dh, byte ptr [rbp + rax + 0x48]; add esp, 0x18; ret; 
0x000000000004859a: add dh, byte ptr [rbx]; cld; jmp qword ptr [rsi - 0x70]; 
0x00000000000e3d3a: add dh, byte ptr [rbx]; ret 0x1270; 
0x0000000000012124: add dh, byte ptr [rcx + rbx*2 + 0x48]; add esp, 0x18; ret; 
0x000000000000e56c: add dh, byte ptr [rcx + rcx + 0x48]; add esp, 0x18; ret; 
0x000000000000ce2c: add dh, byte ptr [rcx + rcx + 0x48]; add esp, 8; ret; 
0x00000000000abbcb: add dh, byte ptr [rdi + rax*2 - 0x3b]; stc; fcmovb st(0), st(5); jns 0xabbfd; ret 0x876; 
0x000000000000eb46: add dh, byte ptr [rdi + riz*2 + 0x48]; add esp, 0x18; ret; 
0x00000000000e9e8d: add dh, byte ptr [rdi]; mov ebp, 0x5b1ccc0; pop rsi; jmp qword ptr [rcx]; 
0x000000000000edc7: add dh, byte ptr [rsi + rax + 0x48]; add esp, 0x18; ret; 
0x00000000000955b7: add dh, byte ptr [rsi + rax*2 - 0x3b]; stc; fcmovb st(0), st(5); jns 0x955e9; ret 0x876; 
0x00000000000e9863: add dh, ch; jmp rdi; 
0x00000000000e4cd3: add dh, cl; call qword ptr [rbx]; 
0x0000000000030d6d: add dh, dh; jp 0x30d7a; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x0000000000031d0d: add dh, dh; jp 0x31d1a; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x000000000003243d: add dh, dh; jp 0x3244a; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x000000000003cd0d: add dh, dh; jp 0x3cd1a; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000003d1fd: add dh, dh; jp 0x3d20a; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000004f07d: add dh, dh; jp 0x4f08a; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000004fe4d: add dh, dh; jp 0x4fe5a; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000005042d: add dh, dh; jp 0x5043a; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x00000000000507bd: add dh, dh; jp 0x507ca; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050b9d: add dh, dh; jp 0x50baa; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x0000000000015c97: add dh, dh; ret 0x7402; 
0x0000000000015bdf: add dh, dh; ret 0xf02; 
0x00000000000406a5: add dh, dh; ret; 
0x00000000000804b1: add dil, r15b; ret; 
0x00000000000e9efa: add dl, al; movsd dword ptr [rdi], dword ptr [rsi]; jmp qword ptr [rdx]; 
0x00000000000e77fa: add dl, al; ret; 
0x0000000000105c11: add dl, bl; ret; 
0x00000000000dcc8a: add dl, byte ptr [rdi]; popfq; cmc; mov bl, 0x3f; ret 0x71ac; 
0x000000000002c4ff: add dl, dh; addps xmm0, xmm0; ret; 
0x0000000000031936: add dl, dh; addps xmm0, xmm1; movapd xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000004d1cf: add dl, dh; addps xmm0, xmmword ptr [rdx + 8]; addsd xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031ae9: add dl, dh; addps xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000003cb9f: add dl, dh; addps xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x00000000000320e3: add dl, dh; cvtpi2ps xmm0, mm2; ret; 
0x000000000009b009: add dl, dh; cvtps2pd xmm0, xmm0; ret; 
0x0000000000042dff: add dl, dh; cvttps2pi mm0, xmm0; ret; 
0x000000000002c4f3: add dl, dh; divps xmm0, xmm1; ret; 
0x0000000000032013: add dl, dh; divps xmm0, xmmword ptr [rip + 0x992b4]; ret; 
0x000000000002866a: add dl, dh; divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000049937: add dl, dh; maxps xmm0, xmm1; ret; 
0x00000000000499cf: add dl, dh; minps xmm0, xmm1; ret; 
0x000000000009b29f: add dl, dh; movups xmm0, xmmword ptr [rip + 0x30018]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049537: add dl, dh; movups xmm0, xmmword ptr [rip + 0x81d50]; ret; 
0x0000000000048ab8: add dl, dh; movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000489af: add dl, dh; movups xmm0, xmmword ptr [rip + 0x828d8]; ret; 
0x0000000000048ebf: add dl, dh; movups xmm0, xmmword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x00000000000478ef: add dl, dh; movups xmm0, xmmword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000045b2f: add dl, dh; movups xmm0, xmmword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000044fd7: add dl, dh; movups xmm0, xmmword ptr [rip + 0x862b0]; ret; 
0x0000000000028f77: add dl, dh; movups xmm0, xmmword ptr [rip + 0xa2340]; ret; 
0x0000000000028457: add dl, dh; movups xmm0, xmmword ptr [rip + 0xa2e60]; ret; 
0x0000000000031b5c: add dl, dh; movups xmm0, xmmword ptr [rip + 0xae513]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000031cdf: add dl, dh; movups xmm0, xmmword ptr [rip + 0xb1d98]; ret; 
0x000000000004993f: add dl, dh; movups xmm0, xmmword ptr [rsp + 8]; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004952f: add dl, dh; movups xmm1, xmmword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a7: add dl, dh; movups xmm1, xmmword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x00000000000474dc: add dl, dh; movups xmm1, xmmword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000045aeb: add dl, dh; movups xmm1, xmmword ptr [rip + 0x85fac]; ret; 
0x0000000000042eff: add dl, dh; movups xmm1, xmmword ptr [rip + 0x920d8]; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004315f: add dl, dh; movups xmm1, xmmword ptr [rip + 0x9cf10]; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004318d: add dl, dh; movups xmm1, xmmword ptr [rip + 0xa0582]; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000029227: add dl, dh; movups xmm13, xmmword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028707: add dl, dh; movups xmm13, xmmword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004406d: add dl, dh; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000031b64: add dl, dh; mulps xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000003210f: add dl, dh; mulps xmm0, xmm0; ret; 
0x000000000009affd: add dl, dh; mulps xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000027e8f: add dl, dh; mulps xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000031c4d: add dl, dh; mulps xmm0, xmm1; ret; 
0x000000000009b28b: add dl, dh; mulps xmm0, xmm2; addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002dff7: add dl, dh; mulps xmm0, xmmword ptr [rip + 0xc35d0]; add rsp, 0x10; pop rbx; ret; 
0x00000000000324cf: add dl, dh; mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000032097: add dl, dh; mulps xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x0000000000031b77: add dl, dh; mulps xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x0000000000042f07: add dl, dh; mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000009ab74: add dl, dh; mulps xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23b: add dl, dh; mulps xmm1, xmm3; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad7a: add dl, dh; mulps xmm1, xmm3; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b378: add dl, dh; mulps xmm2, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1b: add dl, dh; mulps xmm2, xmm3; addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002e0df: add dl, dh; sqrtps xmm0, xmm0; ret; 
0x000000000002c507: add dl, dh; subps xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x000000000009b2a7: add dl, dh; subps xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031bf7: add dl, dh; subps xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x00000000000320a3: add dl, dh; subps xmm0, xmm1; ret; 
0x000000000002de3f: add dl, dh; subps xmm1, xmm1; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000003cc27: add dl, dh; subps xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000003201f: add dl, dh; subps xmm6, xmm4; subsd xmm0, xmm6; ret; 
0x000000000010f9af: add dl, dl; add edi, esp; or esi, esp; ret; 
0x0000000000044206: add dl, sil; addps xmm0, xmm0; ret; 
0x000000000002de3e: add dl, sil; subps xmm1, xmm1; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000502b7: add dword ptr [r15], ecx; lahf; ret 0xd284; 
0x000000000008073a: add dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d02; 
0x000000000004ff11: add dword ptr [r8], eax; add byte ptr [rdi], cl; test dword ptr [rip - 0xcffffff], edi; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000008b077: add dword ptr [r8], eax; add cl, al; clc; or eax, 0x897fe083; ret 0xe2c1; 
0x0000000000027d45: add dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000a15e7: add dword ptr [r8], r8d; add cl, al; clc; or eax, 0x897fe083; ret 0xe2c1; 
0x000000000001b527: add dword ptr [rax + 0x21], ecx; ret 0x950f; 
0x000000000001b9b3: add dword ptr [rax + 0x21], ecx; ror dword ptr [rdi], 1; xchg ebp, eax; ret; 
0x000000000008082a: add dword ptr [rax + 0x29], ecx; ret 0xc748; 
0x00000000000804cf: add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x000000000003cd69: add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000805d5: add dword ptr [rax + 0x39], ecx; sal dword ptr [rbp - 0x13], 0xf3; ret; 
0x00000000000805ad: add dword ptr [rax + 0x39], ecx; sar byte ptr [rdi + 0xa], 1; mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x000000000003680b: add dword ptr [rax + 0x590ff202], ebp; ret; 
0x00000000000bccf3: add dword ptr [rax + 0x59fbc502], ebp; ret; 
0x00000000000de0c0: add dword ptr [rax + 0xe], eax; ret 0x7c06; 
0x00000000000c8212: add dword ptr [rax + 9], ecx; ret 0xb941; 
0x000000000001b56e: add dword ptr [rax + 9], ecx; ror dword ptr [rdi], 1; xchg ebp, eax; ret 0xb60f; 
0x000000000007cabe: add dword ptr [rax + rax], 0x48; add esp, 0x48; ret; 
0x000000000010be6e: add dword ptr [rax - 0x40], eax; ret; 
0x00000000000c86f4: add dword ptr [rax - 0x77], ecx; ret 0x8949; 
0x00000000000819f0: add dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000081808: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rax - 0x75], 0x54; ret; 
0x00000000000804cb: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000001990fd: add dword ptr [rax], 0xf0496000; jmp qword ptr [rdx + 0xd]; 
0x000000000004ff18: add dword ptr [rax], eax; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecc5: add dword ptr [rax], eax; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x0000000000049c13: add dword ptr [rax], eax; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x000000000001a4d7: add dword ptr [rax], eax; add byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x000000000004c995: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0xb3dcd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000027d46: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008073b: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d02; 
0x0000000000051b9e: add dword ptr [rax], eax; add byte ptr [rax - 9], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000442bf: add dword ptr [rax], eax; add byte ptr [rax - 9], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000007c59e: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x000000000019117d: add dword ptr [rax], eax; add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x000000000001b22b: add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000745d1: add dword ptr [rax], eax; add byte ptr [rax], al; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000004406a: add dword ptr [rax], eax; add byte ptr [rax], al; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000519c1: add dword ptr [rax], eax; add byte ptr [rax], al; movss dword ptr [rdi], xmm0; ret; 
0x000000000004459f: add dword ptr [rax], eax; add byte ptr [rax], al; shl rax, cl; sub rax, 1; ret; 
0x0000000000043381: add dword ptr [rax], eax; add byte ptr [rax], al; ucomisd xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x0000000000031aaf: add dword ptr [rax], eax; add byte ptr [rbp + 0x26880fd2], al; add al, byte ptr [rax]; add bl, dh; ret; 
0x00000000000c8835: add dword ptr [rax], eax; add byte ptr [rbp - 0x77], al; fimul dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000085bf3: add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal bl, 0xf; pop rsp; ret; 
0x0000000000084b1f: add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal dl, 0xf; pop rsp; ret; 
0x000000000001aad0: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000044599: add dword ptr [rax], eax; add byte ptr [rcx + 0x1b8f1], cl; add byte ptr [rax], al; shl rax, cl; sub rax, 1; ret; 
0x00000000000c74aa: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0x4c07; 
0x000000000019b879: add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x000000000004ff12: add dword ptr [rax], eax; add byte ptr [rdi], cl; test dword ptr [rip - 0xcffffff], edi; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x0000000000004d29: add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add al, dh; ret 0; 
0x00000000000034c9: add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x0000000000003b89: add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], dh; ret; 
0x00000000000c6de0: add dword ptr [rax], eax; add byte ptr [rsi + 0x41], ah; cmp eax, 0x89497fff; ret; 
0x000000000003d525: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x41]; 
0x000000000006aa34: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000478de: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; sub al, cl; ret; 
0x0000000000080238: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; sub dl, al; ret; 
0x0000000000087fbe: add dword ptr [rax], eax; add ch, al; ret; 
0x0000000000099b98: add dword ptr [rax], eax; add ch, al; stc; sub dl, al; ret; 
0x0000000000016d1e: add dword ptr [rax], eax; add ch, bl; fpatan; ret; 
0x000000000008b078: add dword ptr [rax], eax; add cl, al; clc; or eax, 0x897fe083; ret 0xe2c1; 
0x0000000000014b13: add dword ptr [rax], eax; add cl, bl; ret 0xe8d9; 
0x0000000000041264: add dword ptr [rax], eax; add dh, dh; ret; 
0x000000000000b2e0: add dword ptr [rax], eax; add dword ptr [rax], eax; ret 0x20; 
0x00000000000d9502: add dword ptr [rax], eax; movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x000000000000b2e2: add dword ptr [rax], eax; ret 0x20; 
0x00000000000f088c: add dword ptr [rax], edi; test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x0000000000083e95: add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x000000000011b715: add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000149f75: add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e7795: add dword ptr [rbp + 0x3f], 0; add al, al; jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000ff8da: add dword ptr [rbp + 0x3fecfd1f], edx; cld; xchg dword ptr [rdi], eax; sub rax, -0x49c012f9; ret 0x7ba2; 
0x00000000000e49d5: add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e779d: add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000052131: add dword ptr [rbp - 0x77], eax; ret 0x840f; 
0x000000000002e8ec: add dword ptr [rbp - 0xc08800a], eax; ret; 
0x000000000002e944: add dword ptr [rbp - 0xc08802e], eax; ret; 
0x0000000000083e92: add dword ptr [rbx + 0x194501fe], eax; fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x0000000000017052: add dword ptr [rbx + rcx - 0x23], esi; fstpnce st(1), st(0); call 0xfffffffff1e05136; ret; 
0x0000000000006f28: add dword ptr [rbx], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xc; 
0x0000000000191253: add dword ptr [rbx], eax; ret; 
0x0000000000015e88: add dword ptr [rcx + rcx - 0x23], esi; add eax, 0xb72d7; ret; 
0x0000000000015ccf: add dword ptr [rcx + rcx - 0x23], esi; fcomp st(5); add eax, 0xb55e6; ret; 
0x000000000010043a: add dword ptr [rcx + rdi*2 + 0x37], -0x53; ret; 
0x00000000000a07d2: add dword ptr [rcx + rdi*8 - 0x3c], edx; ret; 
0x0000000000015e21: add dword ptr [rcx + rdx - 0x23], esi; add eax, 0xb5496; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x000000000007b48b: add dword ptr [rcx - 0x2317fffc], edi; out 0xfe, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000001b3db: add dword ptr [rcx - 0x46], eax; add byte ptr [rax], al; add byte ptr [rax - 0xc017], al; jmp qword ptr [rsi + 0xf]; 
0x000000000001b40b: add dword ptr [rcx - 0x46], eax; add byte ptr [rax], al; add byte ptr [rax - 0xf617], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000f088b: add dword ptr [rcx], 0x38; test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x000000000006b883: add dword ptr [rcx], eax; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000009854c: add dword ptr [rcx], ebp; ret 0x3941; 
0x0000000000017335: add dword ptr [rcx], ecx; and al, 0xe8; fldenv [rsp - 0x1c]; ret; 
0x0000000000050ce0: add dword ptr [rcx], ecx; fisttp qword ptr [rax + 0x21]; ret; 
0x000000000006b3e4: add dword ptr [rcx], ecx; ret; 
0x00000000000e49f5: add dword ptr [rdi + rdi*4 - 0x67], 0x2f9c25c9; push rcx; in eax, 0xbb; lea r13d, [r15 + 0x44019029]; mov edi, 0xa4df0dfd; ret 0x7f48; 
0x00000000000a334f: add dword ptr [rdi], 0x5b41c400; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x00000000000fe3b2: add dword ptr [rdi], ebp; xor al, 0x62; movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000502b8: add dword ptr [rdi], ecx; lahf; ret 0xd284; 
0x000000000001df1a: add dword ptr [rdi], ecx; mov ds, word ptr [rdi]; add al, byte ptr [rax]; add cl, bl; ret; 
0x00000000000c807e: add dword ptr [rdi], ecx; mov gs, word ptr [rbx]; add al, 0; add byte ptr [rcx + 1], cl; fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x000000000004276b: add dword ptr [rdi], ecx; test eax, eax; add al, byte ptr [rax]; add dh, dh; ret; 
0x00000000000de003: add dword ptr [rdi], edx; ret; 
0x000000000001954d: add dword ptr [rdx + 0x66000000], 0x897fff25; ret 0xb70f; 
0x000000000006d67b: add dword ptr [rdx - 0x4317fffb], esp; mov dh, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000001094c5: add dword ptr [rdx - 7], eax; jae 0x1094f5; xor ch, byte ptr [rsi - 0x3c]; ret 0x402d; 
0x000000000010d2b9: add dword ptr [rdx], 0x1a508451; adc byte ptr [rbp + 0x77], al; mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x00000000001060e1: add dword ptr [rdx], ecx; cmp dh, byte ptr [rbp - 0x590a6eea]; ret; 
0x0000000000100c70: add dword ptr [rip + 0x3a50], ecx; adc byte ptr [rdx], al; add byte ptr [rax], al; mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x000000000010cc15: add dword ptr [rsi + 0xdfd01d4], ecx; fild word ptr [rsi]; js 0x10cc2b; push 0x7d; and r15d, edx; ret 0x6adc; 
0x0000000000017009: add dword ptr [rsi + rsi - 0x27], esi; call 0xfffffffff1e050eb; ret; 
0x00000000000e76dd: add dword ptr [rsi - 0x41], eax; mov dword ptr [rsi + 0x1c7711a0], edx; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x00000000000e240e: add dword ptr [rsi - 0x44000000], edi; ret 0xe943; 
0x00000000000ebeab: add dword ptr [rsi - 0x80], edx; adc eax, 0xe120003f; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x000000000007abfb: add dword ptr [rsi - 1], edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000e7401: add dword ptr [rsi], ebp; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000004d28: add dword ptr cs:[rax], eax; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add al, dh; ret 0; 
0x000000000000bf27: add eax, 0x18c48348; ret; 
0x000000000009f5bd: add eax, 0x2341c400; pop rax; in al, 0xc5; sti; pop rcx; ret 0x41c4; 
0x000000000009ee8b: add eax, 0x23c1c400; pop rcx; ret 0xf3c5; 
0x000000000010c857: add eax, 0x2583811e; ret; 
0x0000000000037648: add eax, 0x280f4466; ret 0xff2; 
0x0000000000095736: add eax, 0x287941c4; ret; 
0x0000000000087d5a: add eax, 0x2879c500; ffreep st(5); ret; 
0x00000000000a7078: add eax, 0x2879c500; ret; 
0x0000000000093396: add eax, 0x28f9c500; ret 0xf3c5; 
0x000000000009c8b3: add eax, 0x2ea08; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c8a4: add eax, 0x2ea17; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c65b: add eax, 0x2ec60; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000a5d05: add eax, 0x2ef9c500; ret; 
0x000000000009b2a3: add eax, 0x30018; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b293: add eax, 0x30028; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009c8d9: add eax, 0x3006da; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c9: add eax, 0x301cea; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009b005: add eax, 0x302b6; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009a814: add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x0000000000085ee2: add eax, 0x3170d1; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ed2: add eax, 0x3170e1; mov dword ptr fs:[rax], edi; ret; 
0x000000000007dd1f: add eax, 0x31f294; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000008e333: add eax, 0x3341c400; pop rax; ret 0x1c5; 
0x0000000000057012: add eax, 0x345fa1; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000056e76: add eax, 0x34613d; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000056d5d: add eax, 0x346256; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000005236e: add eax, 0x34ac45; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000520ce: add eax, 0x34aee5; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000051192: add eax, 0x34be21; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004fdba: add eax, 0x34d1f9; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000049896: add eax, 0x35371d; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x00000000000496f6: add eax, 0x3538bd; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000495e2: add eax, 0x3539d1; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000044aae: add eax, 0x358505; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000447fe: add eax, 0x3587b5; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000004455e: add eax, 0x358a55; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000442de: add eax, 0x358cd5; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000050ba4: add eax, 0x35d77; cmovne rax, rdx; ret; 
0x00000000000507c4: add eax, 0x362a7; cmovne rax, rdx; ret; 
0x0000000000050434: add eax, 0x36377; cmovne rax, rdx; ret; 
0x000000000004fe54: add eax, 0x367e7; cmovne rax, rdx; ret; 
0x0000000000030d62: add eax, 0x36c269; lea rdx, [rip + 0x55d62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000004f084: add eax, 0x37637; cmovne rax, rdx; ret; 
0x0000000000020acc: add eax, 0x37c4e7; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000208ee: add eax, 0x37c6c5; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000207bc: add eax, 0x37c7f7; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001bb83: add eax, 0x381430; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b8e3: add eax, 0x3816d0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b6a3: add eax, 0x381910; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001a0fc: add eax, 0x382eb7; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000122ba: add eax, 0x38acf9; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000be61: add eax, 0x38c48348; ret; 
0x000000000000ecf9: add eax, 0x38e2ba; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000bcaa: add eax, 0x391339; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000000bc59: add eax, 0x391352; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000b7f6: add eax, 0x3917cd; test rax, rax; je 0xb802; call rax; 
0x000000000010e734: add eax, 0x39698e23; cli; adc byte ptr [rcx + 0x41], cl; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x00000000000c2a39: add eax, 0x3b41c400; pop rax; ret 0x7bc5; 
0x0000000000087c87: add eax, 0x3bc50000; pop rsp; ret; 
0x00000000000a7826: add eax, 0x3bc58000; pop rcx; ret; 
0x00000000001298e9: add eax, 0x3cfbfb1b; loope 0x12992f; cmp ch, ch; ret; 
0x0000000000139c89: add eax, 0x3cfbfb1b; loope 0x139ccf; cmp ch, ch; ret; 
0x0000000000158109: add eax, 0x3cfbfb1b; loope 0x15814f; cmp ch, ch; ret; 
0x00000000001683c9: add eax, 0x3cfbfb1b; loope 0x16840f; cmp ch, ch; ret; 
0x000000000017c1a9: add eax, 0x3cfbfb1b; loope 0x17c1ef; cmp ch, ch; ret; 
0x0000000000186f49: add eax, 0x3cfbfb1b; loope 0x186f8f; cmp ch, ch; ret; 
0x00000000000d97a9: add eax, 0x3cfbfb1b; loope 0xd97ef; cmp ch, ch; ret; 
0x00000000000f5c49: add eax, 0x3cfbfb1b; loope 0xf5c8f; cmp ch, ch; ret; 
0x00000000000eb65b: add eax, 0x3d053c47; stosd dword ptr [rdi], eax; out dx, eax; adc al, 0x3c; ret 0x445c; 
0x0000000000110616: add eax, 0x3fbdda; add byte ptr [rax], al; add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x00000000000fd1a3: add eax, 0x3fd28000; test byte ptr [rax], bh; pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x00000000000d1d9b: add eax, 0x3fd598b6; add eax, 0xca1e1d9c; fdivr qword ptr [r15]; sti; ret 0xa7e9; 
0x0000000000105c0b: add eax, 0x3fe815e6; add dl, bl; ret; 
0x0000000000104c1b: add eax, 0x3ffeffb4; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; ret; 
0x0000000000030d77: add eax, 0x450f4800; ret 0x66c3; 
0x000000000004b003: add eax, 0x48000002; add esp, 0x20; pop rbx; ret; 
0x000000000006af77: add eax, 0x4800059f; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c4cf: add eax, 0x48000bb1; add esp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x0000000000015daa: add eax, 0x4808e083; lea ecx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x000000000003d204: add eax, 0x49617; cmovne rax, rdx; ret; 
0x000000000003cd14: add eax, 0x49ce7; cmovne rax, rdx; ret; 
0x0000000000050590: add eax, 0x4a3db; cmove rax, rdx; ret; 
0x0000000000050bd0: add eax, 0x4a9db; cmove rax, rdx; ret; 
0x000000000004f0b0: add eax, 0x4beeb; cmove rax, rdx; ret; 
0x00000000000aa661: add eax, 0x52289; add ch, al; ret; 
0x0000000000032444: add eax, 0x542f7; cmovne rax, rdx; ret; 
0x00000000000b8fab: add eax, 0x5439c500; ret; 
0x0000000000031d14: add eax, 0x547d7; cmovne rax, rdx; ret; 
0x00000000000b9cf6: add eax, 0x54f9c500; ret; 
0x00000000000a7823: add eax, 0x54fff; add ch, 0x3b; pop rcx; ret; 
0x0000000000030d74: add eax, 0x55827; cmovne rax, rdx; ret; 
0x00000000000a79ca: add eax, 0x5639c500; ret; 
0x00000000000a69eb: add eax, 0x5883c500; ret; 
0x0000000000089064: add eax, 0x59fbc500; ret 0xe9c5; 
0x000000000009f5d3: add eax, 0x59fbc500; ret 0xfbc5; 
0x0000000000074393: add eax, 0x5a518; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000083741: add eax, 0x5d5b0000; pop r12; pop r13; ret; 
0x000000000010e37e: add eax, 0x5f98c940; ret; 
0x00000000000d6069: add eax, 0x60043686; ret 0x403f; 
0x0000000000044aaf: add eax, 0x64003585; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x0000000000069b3c: add eax, 0x6609eb00; movq mm1, mm0; call 0xc4e80; add rsp, 0x40; pop rbx; ret; 
0x000000000007c3a4: add eax, 0x67397; add rsp, 8; ret; 
0x000000000007c397: add eax, 0x673a4; call 0x742d0; pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x0000000000075455: add eax, 0x6e2e6; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x00000000000680d1: add eax, 0x6f0f6600; fsub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000006aa0c: add eax, 0x6f0f6600; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000d09c1: add eax, 0x7290ec08; ret 0xa93f; 
0x00000000000d4afe: add eax, 0x747df340; ret; 
0x0000000000056177: add eax, 0x75964; movss xmm1, dword ptr [rip + 0x762ec]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000006b925: add eax, 0x77e16; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006b33b: add eax, 0x78400; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000005259e: add eax, 0x7953d; movss xmm1, dword ptr [rsp - 8]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000003243c: add eax, 0x7a40f600; or byte ptr [rax - 0x73], cl; add eax, 0x542f7; cmovne rax, rdx; ret; 
0x0000000000031d0c: add eax, 0x7a40f600; or byte ptr [rax - 0x73], cl; add eax, 0x547d7; cmovne rax, rdx; ret; 
0x0000000000030d6c: add eax, 0x7a40f600; or byte ptr [rax - 0x73], cl; add eax, 0x55827; cmovne rax, rdx; ret; 
0x000000000004fb0a: add eax, 0x7a6f1; ret; 
0x0000000000051027: add eax, 0x7aab4; movss xmm1, dword ptr [rip + 0xaf3a8]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051002: add eax, 0x7aad9; movss xmm1, dword ptr [rip + 0xaf3a5]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004ff26: add eax, 0x7bba9; ret; 
0x000000000004fe32: add eax, 0x7bc89; ret; 
0x000000000004ee55: add eax, 0x7cc86; ret; 
0x000000000004fd88: add eax, 0x7cf8b; mulss xmm0, xmm1; ret; 
0x000000000002e90d: add eax, 0x7fffffff; ret; 
0x00000000000ebea9: add eax, 0x80560158; adc eax, 0xe120003f; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x000000000004a0af: add eax, 0x81a2c; ret; 
0x000000000004953b: add eax, 0x81d50; ret; 
0x000000000004951f: add eax, 0x8257c; movapd xmm1, xmm0; ret; 
0x0000000000048abc: add eax, 0x827cf; add rsp, 0x40; pop rbx; ret; 
0x00000000000489b3: add eax, 0x828d8; ret; 
0x0000000000048ec3: add eax, 0x82bd8; movapd xmm1, xmm0; ret; 
0x0000000000048997: add eax, 0x83104; movapd xmm1, xmm0; ret; 
0x0000000000085072: add eax, 0x83c96348; ret 0x3905; 
0x000000000006ae1d: add eax, 0x83d88900; ret; 
0x00000000000478f3: add eax, 0x841a8; movapd xmm1, xmm0; ret; 
0x00000000000474ac: add eax, 0x845ef; movapd xmm1, xmm0; ret; 
0x0000000000045adf: add eax, 0x857fc; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000045b33: add eax, 0x85f68; movapd xmm1, xmm0; ret; 
0x0000000000045ae7: add eax, 0x85fc4; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000044fdb: add eax, 0x862b0; ret; 
0x0000000000044fa3: add eax, 0x862e8; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004315b: add eax, 0x88180; movsd xmm1, qword ptr [rip + 0x9cf10]; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043003: add eax, 0x882a8; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000073493: add eax, 0x8901a800; ret; 
0x00000000000c8356: add eax, 0x89480000; ret 0x8949; 
0x0000000000087559: add eax, 0x89480000; ret 0xc089; 
0x0000000000058ac4: add eax, 0x8ac77; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000207b7: add eax, 0x8b483874; add eax, 0x37c7f7; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000153ef: add eax, 0x8d480000; adc eax, 0xb78ef; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000072638: add eax, 0x8eff3; add rsp, 0x28; ret; 
0x000000000006ba3b: add eax, 0x95ca0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000d743d: add eax, 0x96e53fed; call 0xffffffff8fd6957a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000f38dd: add eax, 0x96e53fed; call 0xffffffff8fd85a1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000012757d: add eax, 0x96e53fed; call 0xffffffff8fdb96ba; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000013791d: add eax, 0x96e53fed; call 0xffffffff8fdc9a5a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000155d9d: add eax, 0x96e53fed; call 0xffffffff8fde7eda; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000016605d: add eax, 0x96e53fed; call 0xffffffff8fdf819a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000179e3d: add eax, 0x96e53fed; call 0xffffffff8fe0bf7a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000184bdd: add eax, 0x96e53fed; call 0xffffffff8fe16d1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000006f78f: add eax, 0x9710c; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006eb43: add eax, 0x97d58; add rsp, 0x30; pop rbx; ret; 
0x0000000000032017: add eax, 0x992b4; ret; 
0x0000000000031cf3: add eax, 0x995b8; ret; 
0x0000000000031942: add eax, 0x99979; ret; 
0x00000000000a2fba: add eax, 0x9d590; add ch, al; ret; 
0x0000000000028f7b: add eax, 0xa2340; ret; 
0x000000000002845b: add eax, 0xa2e60; ret; 
0x000000000009c892: add eax, 0xa6691; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c652: add eax, 0xa6979; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c89b: add eax, 0xa6a10; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c889: add eax, 0xa6a1a; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6691]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c417: add eax, 0xa6acc; vfmadd213sd xmm0, xmm2, qword ptr [rip + 0xa6e7b]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c420: add eax, 0xa6e7b; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009b933: add eax, 0xa78c8; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x00000000000e6615: add eax, 0xa7c13ff0; push rsp; sbb eax, 0x3ff005d2; imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x000000000009aff9: add eax, 0xa7fda; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000058bbc: add eax, 0xa8a6f; add rsp, 0x28; ret; 
0x00000000000577d3: add eax, 0xa9a18; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x000000000003d12f: add eax, 0xaa484; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000206e9: add eax, 0xac642; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001fae1: add eax, 0xac98a; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x000000000001fa3c: add eax, 0xaca2f; ret; 
0x000000000001f959: add eax, 0xad3d2; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x0000000000050e5b: add eax, 0xad470; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000031b60: add eax, 0xae513; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001e523: add eax, 0xae808; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x0000000000051913: add eax, 0xaf804; ret; 
0x0000000000051036: add eax, 0xafe65; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051011: add eax, 0xafe9a; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000001cdd5: add eax, 0xaff56; fxch st(1); ret; 
0x000000000001c199: add eax, 0xb02d2; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x00000000000501ce: add eax, 0xb03bd; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x00000000000d9d39: add eax, 0xb0479c62; out 0x3f, al; ret 0xd7f0; 
0x000000000004fdc2: add eax, 0xb05ed; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001c71a: add eax, 0xb0611; add rsp, 8; ret; 
0x000000000004fe23: add eax, 0xb0768; ret; 
0x000000000004ff1e: add eax, 0xb0951; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x00000000000504d6: add eax, 0xb09c5; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504b1: add eax, 0xb09fa; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000001c19f: add eax, 0xb0b8c; add rsp, 0x18; fxch st(1); ret; 
0x000000000004eeab: add eax, 0xb14cc; ret; 
0x000000000004ecd3: add eax, 0xb16a0; ret; 
0x000000000004eccb: add eax, 0xb16ac; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x00000000000320f7: add eax, 0xb1984; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x0000000000031ce3: add eax, 0xb1d98; ret; 
0x000000000004eea3: add eax, 0xb1e60; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000031c49: add eax, 0xb2282; mulsd xmm0, xmm1; ret; 
0x000000000004dd20: add eax, 0xb2f3b; add rsp, 0x10; pop rbx; ret; 
0x000000000001c714: add eax, 0xb32db; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000004d34e: add eax, 0xb3521; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000015e36: add eax, 0xb5485; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015e25: add eax, 0xb5496; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x0000000000015d31: add eax, 0xb558a; ret; 
0x000000000003200f: add eax, 0xb55a4; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000015cd5: add eax, 0xb55e6; ret; 
0x0000000000015e95: add eax, 0xb5c1e; ret; 
0x000000000004a007: add eax, 0xb63a4; addss xmm0, xmm1; ret; 
0x0000000000049f34: add eax, 0xb646f; add rsp, 8; ret; 
0x0000000000049ea9: add eax, 0xb64c2; subss xmm0, xmm1; ret; 
0x0000000000049de5: add eax, 0xb658e; subss xmm0, xmm1; ret; 
0x0000000000049d33: add eax, 0xb6638; ret; 
0x0000000000049d2b: add eax, 0xb6644; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c21: add eax, 0xb6752; ret; 
0x0000000000049c19: add eax, 0xb675e; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000017f92: add eax, 0xb68b3; fyl2x; ret; 
0x0000000000015e8c: add eax, 0xb72d7; ret; 
0x0000000000047540: add eax, 0xb752b; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000127a2: add eax, 0xb932d; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000043199: add eax, 0xb9642; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004316b: add eax, 0xb9680; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000011c02: add eax, 0xb9ecd; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011b82: add eax, 0xb9f4d; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x000000000002c4e7: add eax, 0xbb0cc; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x000000000000f226: add eax, 0xbc0a5; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x000000000000edc1: add eax, 0xbc50a; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000e5e6: add eax, 0xbcce5; jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000e566: add eax, 0xbcd65; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x000000000007262e: add eax, 0xc0854800; jns 0x72670; movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000072d9d: add eax, 0xc0854800; setne al; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000020c82: add eax, 0xc1dee8d9; ret; 
0x000000000002dffb: add eax, 0xc35d0; add rsp, 0x10; pop rbx; ret; 
0x000000000010143e: add eax, 0xc3bd9a40; scasd eax, dword ptr [rdi]; ret 0x4712; 
0x00000000000742b6: add eax, 0xc4814800; clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000007297e: add eax, 0xc4834800; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000006b118: add eax, 0xc4834800; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bc6f: add eax, 0xc4834800; pop rbx; pop rbp; ret; 
0x0000000000069b47: add eax, 0xc4834800; pop rbx; ret; 
0x000000000006b93f: add eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000069952: add eax, 0xc4834800; xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000b0187: add eax, 0xc5000001; stc; sub dl, al; ret; 
0x00000000000d1da0: add eax, 0xca1e1d9c; fdivr qword ptr [r15]; sti; ret 0xa7e9; 
0x00000000000324f9: add eax, 0xca2e2; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324cb: add eax, 0xca320; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000016f77: add eax, 0xd9000b73; ret; 
0x000000000002082b: add eax, 0xd9ddc1da; ret; 
0x000000000002086b: add eax, 0xd9ddc1db; ret; 
0x000000000009d7dd: add eax, 0xdbc56000; pop rsp; test ah, 0xe3; jnp 0x9d806; shr byte ptr [rax - 0x3acffff9], cl; ret; 
0x000000000001703c: add eax, 0xdd001f0f; fpatan; ret; 
0x00000000000b4691: add eax, 0xe3c50000; pop rsp; ffreep st(5); sti; pop rax; ret; 
0x000000000006c06b: add eax, 0xe8bbeb00; sub al, 0xf8; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e8f54: add eax, 0xec8abf26; ret; 
0x0000000000101ad3: add eax, 0xf2894362; ret; 
0x0000000000077191: add eax, 0xf660000; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000043193: add eax, 0xf66000a; push rsi; add eax, 0xb9642; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002a462: add eax, 0xfb810000; ret 0xfbb4; 
0x000000000006b752: add eax, 0xfd834100; jmp qword ptr [rsi + 0xf]; 
0x000000000004d720: add eax, 0xfffffc5b; cmove rax, rdx; ret; 
0x000000000004d280: add eax, 0xfffffe9b; cmove rax, rdx; ret; 
0x000000000004a7c0: add eax, 0xfffffecb; cmove rax, rdx; ret; 
0x000000000004fe56: add eax, dword ptr [eax]; cmovne rax, rdx; ret; 
0x000000000005042b: add eax, dword ptr [eax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x0000000000105fbe: add eax, dword ptr [rax + 0x16]; ret; 
0x000000000010dbbe: add eax, dword ptr [rax + 0x3d]; ret 0xa57; 
0x000000000018f431: add eax, dword ptr [rax]; add al, ch; ret; 
0x000000000001d8a8: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000000cca78: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x12], dh; mov ds, word ptr [rdi]; ret; 
0x0000000000063ce9: add eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc05], al; stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fe05], al; ret 2; 
0x00000000000887e5: add eax, dword ptr [rax]; add byte ptr [rcx - 0xfffff01], al; jg 0x887fe; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000009ed65: add eax, dword ptr [rax]; add byte ptr [rcx - 0xfffff01], al; jg 0x9ed7e; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x00000000000c8640: add eax, dword ptr [rax]; add byte ptr [rcx], dh; dec dword ptr [rax + 9]; ret; 
0x000000000006a82f: add eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000048d47: add eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xfffd6587; jmp qword ptr [rsi + 0xf]; 
0x0000000000087de6: add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000001dcc1: add eax, dword ptr [rax]; add cl, bl; ret 0xcbd8; 
0x000000000001c370: add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000001fccb: add eax, dword ptr [rax]; add dh, bl; ret; 
0x00000000000320e1: add eax, dword ptr [rax]; add dl, dh; cvtpi2ps xmm0, mm2; ret; 
0x000000000004f087: add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x000000000009b008: add eax, dword ptr [rax]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a77b: add eax, dword ptr [rax]; nop dword ptr [rax]; addss xmm0, xmm0; ret; 
0x000000000009b2a6: add eax, dword ptr [rax]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000050b9c: add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507bc: add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x000000000005042c: add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe4c: add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f07c: add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x00000000000b01d7: add eax, dword ptr [rax]; vmovapd xmm0, xmm2; ret; 
0x00000000000babce: add eax, dword ptr [rbx + 0x3bc501c0]; pop rax; ret; 
0x0000000000083e8f: add eax, dword ptr [rbx - 0x17cfe1a]; add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x00000000000915a4: add eax, dword ptr [rbx - 0x43afd08]; pop rsp; ret; 
0x000000000004d8b3: add eax, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000010dbbd: add eax, dword ptr cs:[rax + 0x3d]; ret 0xa57; 
0x000000000000f3a0: add eax, edx; jmp rax; 
0x0000000000016086: add eax, edx; lea rdx, [rip + 0xb7fa1]; fld qword ptr [rdx + rax]; ret; 
0x0000000000027e58: add eax, edx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x000000000004fc17: add eax, esi; movd xmm0, eax; ret; 
0x000000000004fda7: add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x0000000000191e31: add ebp, eax; call qword ptr [rdx]; 
0x000000000009ccd4: add ebp, eax; cli; adc dword ptr [rsi], eax; ret; 
0x000000000009159d: add ebp, eax; pop rax; ret; 
0x0000000000098ec1: add ebp, eax; sti; pop rsp; ret 0x6348; 
0x00000000001948d9: add ebp, ebx; call qword ptr [rcx]; 
0x0000000000105efd: add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x000000000010cc18: add ebp, edi; or eax, 0xc7806df; push 0x7d; and r15d, edx; ret 0x6adc; 
0x000000000010d31b: add ebp, esi; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x00000000000fd609: add ebp, esp; ret; 
0x00000000000c0201: add ebx, dword ptr [r9 + rdi*8 - 0x3b]; ret; 
0x00000000000c0202: add ebx, dword ptr [rcx + rdi*8 - 0x3b]; ret; 
0x000000000009b6db: add ebx, esi; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009b6b7: add ebx, esi; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000050f88: add ecx, -0x80; movss dword ptr [rdi], xmm0; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000e830c: add ecx, 0xefe0bf3b; ret 0x4b4c; 
0x0000000000069f89: add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004ae72: add ecx, dword ptr [rax]; add bl, dh; divps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000010377d: add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000000501d0: add ecx, dword ptr [rbx]; add byte ptr [rdi], cl; push rsp; or eax, 0x7b8e6; divss xmm0, xmm1; ret; 
0x00000000000d0b01: add ecx, dword ptr [rbx]; stosd dword ptr [rdi], eax; or byte ptr [rbp - 0x1117c010], cl; xor al, 0x4f; sbb dword ptr [rax], esp; ret 0xde3f; 
0x00000000000962e3: add ecx, dword ptr [rcx - 0x77]; ret 0x2948; 
0x000000000005325a: add ecx, dword ptr [rdi]; push rdi; ret; 
0x0000000000091e9e: add ecx, dword ptr [rdi]; test ah, cl; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe06], al; ret; 
0x000000000019597c: add ecx, dword ptr [rdx + rax + 0x4c00]; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x00000000001142ba: add ecx, ebp; push rsp; xchg byte ptr [rdi + rdi*4 - 0x2087e7cb], cl; ret; 
0x0000000000018a5c: add ecx, ebp; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000011a248: add ecx, ecx; pop rdx; jno 0x11a27e; cdq; jb 0x11a20c; ret 0x1c5e; 
0x0000000000148be8: add ecx, ecx; pop rdx; jno 0x148c1e; cdq; jb 0x148bac; ret 0x1c5e; 
0x0000000000176b28: add ecx, ecx; pop rdx; jno 0x176b5e; cdq; jb 0x176aec; ret 0x1c5e; 
0x00000000000e6288: add ecx, ecx; pop rdx; jno 0xe62be; cdq; jb 0xe624c; ret 0x1c5e; 
0x000000000000cd78: add edi, 0xe6; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x00000000000e09e8: add edi, dword ptr [rcx + 0x23]; ret; 
0x00000000000474d9: add edi, dword ptr [rsi]; or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x000000000004b4f7: add edi, esp; jmp qword ptr [rsi + 0xf]; 
0x000000000010f9b1: add edi, esp; or esi, esp; ret; 
0x00000000000867f0: add edx, -0x80; jne 0x867e5; addss xmm0, xmm0; ret; 
0x0000000000031a80: add edx, ecx; shl rdx, 0x20; or rax, rdx; mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000724c3: add edx, edi; sub ecx, esi; shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x0000000000105a3c: add edx, esp; add byte ptr [rax - 0x79], al; cmp bh, byte ptr [rip + 0x1dfbc179]; stc; mov edx, 0xcb7c5b8; ret; 
0x00000000000c6ec1: add edx, esp; jmp rdx; 
0x00000000000d52f8: add esi, dword ptr [rsi + 0x3f]; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x00000000000e9b9b: add esi, ecx; call qword ptr [rbx]; 
0x0000000000070be2: add esi, edi; and rsi, rax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000072379: add esi, edi; sub ecx, edx; shr rsi, cl; imul rax, rsi; add rsp, 0x18; ret; 
0x000000000002e071: add esp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000004ddf9: add esp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x0000000000012d15: add esp, 0x10; fchs; pop rbx; ret; 
0x000000000001374f: add esp, 0x10; fdivp st(1); ret; 
0x0000000000020946: add esp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000007de47: add esp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000004dde9: add esp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x000000000004dd72: add esp, 0x10; pop rbx; divss xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x00000000000161f5: add esp, 0x10; pop rbx; fadd st(0); ret; 
0x00000000000161e5: add esp, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000007de87: add esp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000002e060: add esp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x000000000000d31b: add esp, 0x10; pop rbx; ret; 
0x000000000004973e: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000001aacd: add esp, 0x158; pop rbx; pop rbp; ret; 
0x0000000000037409: add esp, 0x178; pop rbx; pop rbp; ret; 
0x000000000002c4d4: add esp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d338: add esp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000002de45: add esp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc35: add esp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000001299c: add esp, 0x18; fadd st(0); ret; 
0x000000000001bebb: add esp, 0x18; fchs; fxch st(1); ret; 
0x0000000000020813: add esp, 0x18; fchs; ret; 
0x0000000000012e7a: add esp, 0x18; fdivp st(1); faddp st(1); ret; 
0x000000000001c16a: add esp, 0x18; fldz; ret; 
0x000000000001bf82: add esp, 0x18; fxch st(1); ret; 
0x0000000000044daf: add esp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000074834: add esp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000027116: add esp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000271d6: add esp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000270ec: add esp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004a5d5: add esp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a67d: add esp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5b2: add esp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004aa98: add esp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm1; ret; 
0x000000000004aa58: add esp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm2; ret; 
0x000000000003ce0f: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004db69: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000bdd1: add esp, 0x18; ret; 
0x000000000004961f: add esp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000045527: add esp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000056d9d: add esp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000000d340: add esp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000001bf7e: add esp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x000000000001f5ed: add esp, 0x20; add rsp, 0x28; ret; 
0x000000000000d12b: add esp, 0x20; add rsp, 8; ret; 
0x000000000001c6bb: add esp, 0x20; fchs; add rsp, 8; fxch st(1); ret; 
0x000000000002037d: add esp, 0x20; fld xword ptr [rip + 0xaf6ea]; fmulp st(2); add rsp, 0x28; ret; 
0x0000000000049247: add esp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x00000000000486ab: add esp, 0x20; movapd xmm1, xmm0; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000004c7ea: add esp, 0x20; movaps xmm0, xmm1; pop rbx; pop rbp; pop r12; ret; 
0x000000000004f2f4: add esp, 0x20; pop rbx; divss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004cb03: add esp, 0x20; pop rbx; pop rbp; pop r12; movaps xmm0, xmm1; ret; 
0x000000000004c4e5: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004b008: add esp, 0x20; pop rbx; ret; 
0x000000000004f699: add esp, 0x20; pop rbx; subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004f969: add esp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000007c5b1: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000001f7b3: add esp, 0x28; fchs; fdivrp st(2); fxch st(1); ret; 
0x000000000001f95f: add esp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000006c1af: add esp, 0x28; movdqa xmm0, xmm2; ret; 
0x00000000000273b5: add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000000cb94: add esp, 0x28; ret; 
0x0000000000075ae6: add esp, 0x30; mov rax, rbx; pop rbx; ret; 
0x000000000006e504: add esp, 0x30; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000001fdc9: add esp, 0x30; pop rbx; fxch st(1); ret; 
0x000000000006e75c: add esp, 0x30; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000002e5f9: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000001faf1: add esp, 0x30; pop rbx; ret; 
0x0000000000031779: add esp, 0x30; pop rbx; subsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003142b: add esp, 0x30; pop rbx; subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000007baba: add esp, 0x38; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000c9524: add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000002a1da: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002fa56: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000000be63: add esp, 0x38; ret; 
0x00000000000131a9: add esp, 0x40; pop rbx; faddp st(1); ret; 
0x0000000000048cee: add esp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000006a6ca: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000000f465: add esp, 0x40; pop rbx; ret; 
0x00000000000830c9: add esp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x0000000000015301: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000018cf4: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000bd7c: add esp, 0x48; ret; 
0x000000000006c3be: add esp, 0x50; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006c456: add esp, 0x50; pop rbx; movdqa xmm0, xmm2; ret; 
0x0000000000075624: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000002e30e: add esp, 0x50; pop rbx; ret; 
0x000000000008373e: add esp, 0x568; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001e529: add esp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000001decc: add esp, 0x58; fxch st(1); ret; 
0x0000000000015f00: add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000001a3c6: add esp, 0x58; ret; 
0x0000000000017c87: add esp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000057f57: add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000013bfc: add esp, 0x60; pop rbx; ret; 
0x000000000004bfb2: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000029438: add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000047786: add esp, 0x68; ret; 
0x0000000000043be9: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000013947: add esp, 0x70; pop rbx; ret; 
0x000000000000e0fd: add esp, 0x78; pop rbx; pop rbp; ret; 
0x000000000001f261: add esp, 0x78; ret; 
0x0000000000023019: add esp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x000000000006959b: add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000764ed: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000003265d: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000075cc5: add esp, 0x98; pop rbx; pop rbp; ret; 
0x000000000001a29b: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016504: add esp, 0xa0; pop rbx; ret; 
0x000000000006a445: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000014988: add esp, 0xb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000060e1d: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000059b50: add esp, 0xb8; ret; 
0x0000000000076f3f: add esp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000000c9cf: add esp, 0xc0; pop rbx; ret; 
0x000000000005e6f4: add esp, 0xc8; ret; 
0x00000000000742b9: add esp, 0xf8; pop rbx; pop rbp; ret; 
0x0000000000020daa: add esp, 8; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000001c6c1: add esp, 8; fxch st(1); ret; 
0x0000000000081096: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000000b803: add esp, 8; ret; 
0x000000000010926a: add esp, dword ptr [rax + 0x5f]; xor esp, dword ptr [rsi]; jb 0x1092af; ret 0xe192; 
0x0000000000016761: add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x00000000000c52b3: add esp, dword ptr [rsi + 0x41]; and eax, 0x21487fff; ret 0x8949; 
0x0000000000070e40: add esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000006a19d: add esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000009395d: add esp, eax; jns 0x93990; ret 0x820f; 
0x00000000000a9f84: add esp, eax; jns 0xa9fb7; ret 0x820f; 
0x00000000000d9fe9: add esp, eax; ret; 
0x00000000000d5ec4: add esp, ebx; cmp dword ptr [rbp*2 + 0x1bf7edfa], -0x60; ret 0x9abf; 
0x000000000001b3da: add qword ptr [r9 - 0x46], r8; add byte ptr [rax], al; add byte ptr [rax - 0xc017], al; jmp qword ptr [rsi + 0xf]; 
0x000000000001b40a: add qword ptr [r9 - 0x46], r8; add byte ptr [rax], al; add byte ptr [rax - 0xf617], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000a334e: add qword ptr [rdi], 0x5b41c400; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x00000000000da029: add r11b, byte ptr [rsi + 0x21]; ret 0x3fe2; 
0x00000000001037c2: add r12b, r9b; xlatb; ret 0xffbb; 
0x0000000000048ab5: add r8b, byte ptr [r8]; add dl, dh; movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x000000000008e868: add r8b, byte ptr [rax]; add ch, al; ret; 
0x0000000000069f88: add r9d, dword ptr [r8 - 0x77]; ret; 
0x000000000007297d: add rax, -0x3b7cb800; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000002a461: add rax, -0x47f0000; ret 0xfbb4; 
0x00000000000a7c2e: add rax, 0x2ef9c500; ret; 
0x00000000000a7825: add rax, 0x3bc58000; pop rcx; ret; 
0x00000000000a79c9: add rax, 0x5639c500; ret; 
0x0000000000031d0b: add rax, 0x7a40f600; or byte ptr [rax - 0x73], cl; add eax, 0x547d7; cmovne rax, rdx; ret; 
0x00000000000babcd: add rax, qword ptr [rbx + 0x3bc501c0]; pop rax; ret; 
0x000000000000f39f: add rax, rdx; jmp rax; 
0x0000000000027e57: add rax, rdx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x0000000000098ec0: add rbp, rax; sti; pop rsp; ret 0x6348; 
0x00000000000c6ec0: add rdx, r12; jmp rdx; 
0x00000000000724c2: add rdx, rdi; sub ecx, esi; shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x0000000000070be1: add rsi, rdi; and rsi, rax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000072378: add rsi, rdi; sub ecx, edx; shr rsi, cl; imul rax, rsi; add rsp, 0x18; ret; 
0x000000000002e070: add rsp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000004ddf8: add rsp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x0000000000012d14: add rsp, 0x10; fchs; pop rbx; ret; 
0x000000000001374e: add rsp, 0x10; fdivp st(1); ret; 
0x0000000000020945: add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000007de46: add rsp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000004dde8: add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x000000000004dd71: add rsp, 0x10; pop rbx; divss xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x00000000000161f4: add rsp, 0x10; pop rbx; fadd st(0); ret; 
0x00000000000161e4: add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000007de86: add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000002e05f: add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x000000000000d31a: add rsp, 0x10; pop rbx; ret; 
0x000000000004973d: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000001aacc: add rsp, 0x158; pop rbx; pop rbp; ret; 
0x0000000000037408: add rsp, 0x178; pop rbx; pop rbp; ret; 
0x000000000002c4d3: add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d337: add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000002de44: add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc34: add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000001299b: add rsp, 0x18; fadd st(0); ret; 
0x000000000001beba: add rsp, 0x18; fchs; fxch st(1); ret; 
0x0000000000020812: add rsp, 0x18; fchs; ret; 
0x0000000000012e79: add rsp, 0x18; fdivp st(1); faddp st(1); ret; 
0x000000000001c169: add rsp, 0x18; fldz; ret; 
0x000000000001bf81: add rsp, 0x18; fxch st(1); ret; 
0x0000000000044dae: add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000074833: add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000027115: add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000271d5: add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000270eb: add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004a5d4: add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a67c: add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5b1: add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004aa97: add rsp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm1; ret; 
0x000000000004aa57: add rsp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm2; ret; 
0x000000000003ce0e: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004db68: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000bdd0: add rsp, 0x18; ret; 
0x000000000004961e: add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000045526: add rsp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000056d9c: add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000000d33f: add rsp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000001bf7d: add rsp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x000000000001f5ec: add rsp, 0x20; add rsp, 0x28; ret; 
0x000000000000d12a: add rsp, 0x20; add rsp, 8; ret; 
0x000000000001c6ba: add rsp, 0x20; fchs; add rsp, 8; fxch st(1); ret; 
0x000000000002037c: add rsp, 0x20; fld xword ptr [rip + 0xaf6ea]; fmulp st(2); add rsp, 0x28; ret; 
0x0000000000049246: add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x00000000000486aa: add rsp, 0x20; movapd xmm1, xmm0; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000004c7e9: add rsp, 0x20; movaps xmm0, xmm1; pop rbx; pop rbp; pop r12; ret; 
0x000000000004f2f3: add rsp, 0x20; pop rbx; divss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004cb02: add rsp, 0x20; pop rbx; pop rbp; pop r12; movaps xmm0, xmm1; ret; 
0x000000000004c4e4: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004b007: add rsp, 0x20; pop rbx; ret; 
0x000000000004f698: add rsp, 0x20; pop rbx; subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004f968: add rsp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000007c5b0: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000001f7b2: add rsp, 0x28; fchs; fdivrp st(2); fxch st(1); ret; 
0x000000000001f95e: add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000006c1ae: add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x00000000000273b4: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000000cb93: add rsp, 0x28; ret; 
0x0000000000075ae5: add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x000000000006e503: add rsp, 0x30; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000001fdc8: add rsp, 0x30; pop rbx; fxch st(1); ret; 
0x000000000006e75b: add rsp, 0x30; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000002e5f8: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000001faf0: add rsp, 0x30; pop rbx; ret; 
0x0000000000031778: add rsp, 0x30; pop rbx; subsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003142a: add rsp, 0x30; pop rbx; subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000007bab9: add rsp, 0x38; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000c9523: add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002a1d9: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002fa55: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000000be62: add rsp, 0x38; ret; 
0x00000000000131a8: add rsp, 0x40; pop rbx; faddp st(1); ret; 
0x0000000000048ced: add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000006a6c9: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000000f464: add rsp, 0x40; pop rbx; ret; 
0x00000000000830c8: add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x0000000000015300: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000018cf3: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000bd7b: add rsp, 0x48; ret; 
0x000000000006c3bd: add rsp, 0x50; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006c455: add rsp, 0x50; pop rbx; movdqa xmm0, xmm2; ret; 
0x0000000000075623: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000002e30d: add rsp, 0x50; pop rbx; ret; 
0x000000000008373d: add rsp, 0x568; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001e528: add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000001decb: add rsp, 0x58; fxch st(1); ret; 
0x0000000000015eff: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000001a3c5: add rsp, 0x58; ret; 
0x0000000000017c86: add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000057f56: add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000013bfb: add rsp, 0x60; pop rbx; ret; 
0x000000000004bfb1: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000029437: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000047785: add rsp, 0x68; ret; 
0x0000000000043be8: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000013946: add rsp, 0x70; pop rbx; ret; 
0x000000000000e0fc: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000001f260: add rsp, 0x78; ret; 
0x0000000000023018: add rsp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x000000000006959a: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000764ec: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000003265c: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000075cc4: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000001a29a: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000016503: add rsp, 0xa0; pop rbx; ret; 
0x000000000006a444: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000014987: add rsp, 0xb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000060e1c: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000059b4f: add rsp, 0xb8; ret; 
0x0000000000076f3e: add rsp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000000c9ce: add rsp, 0xc0; pop rbx; ret; 
0x000000000005e6f3: add rsp, 0xc8; ret; 
0x00000000000742b8: add rsp, 0xf8; pop rbx; pop rbp; ret; 
0x0000000000020da9: add rsp, 8; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000001c6c0: add rsp, 8; fxch st(1); ret; 
0x0000000000081095: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000000b802: add rsp, 8; ret; 
0x000000000001873e: add sil, bl; loope 0x1879e; ret; 
0x000000000004fddd: addps xmm0, xmm0; addss xmm0, xmm5; ret; 
0x0000000000043293: addps xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x0000000000050358: addps xmm0, xmm0; mov rdx, qword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000002e075: addps xmm0, xmm0; pop rbx; ret; 
0x000000000002c501: addps xmm0, xmm0; ret; 
0x000000000004f23c: addps xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000030f35: addps xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004d1d6: addps xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049d18: addps xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000004d33c: addps xmm0, xmm1; addss xmm0, xmm2; ret; 
0x00000000000511d9: addps xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031938: addps xmm0, xmm1; movapd xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000004fb01: addps xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004ea44: addps xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000002c4dc: addps xmm0, xmm1; ret; 
0x000000000007f444: addps xmm0, xmm1; subsd xmm1, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x000000000002c4d8: addps xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x0000000000049d1c: addps xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000005016d: addps xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000004d1da: addps xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049e9c: addps xmm0, xmm2; movaps xmm1, xmm0; addss xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x000000000004d340: addps xmm0, xmm2; ret; 
0x0000000000031c3f: addps xmm0, xmm2; subsd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000007e9f0: addps xmm0, xmm2; subsd xmm2, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000004ea40: addps xmm0, xmm4; addss xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000004ac0f: addps xmm0, xmm4; ret; 
0x000000000004fd7e: addps xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x000000000004fc10: addps xmm0, xmm5; movd eax, xmm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000002df76: addps xmm0, xmm5; mulsd xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x000000000004dd7b: addps xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x00000000000283ce: addps xmm0, xmm5; ret; 
0x000000000004d1d1: addps xmm0, xmmword ptr [rdx + 8]; addsd xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b291: addps xmm0, xmmword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b003: addps xmm0, xmmword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004ecd1: addps xmm0, xmmword ptr [rip + 0xb16a0]; ret; 
0x0000000000049f32: addps xmm0, xmmword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x0000000000049d31: addps xmm0, xmmword ptr [rip + 0xb6638]; ret; 
0x0000000000049c1f: addps xmm0, xmmword ptr [rip + 0xb6752]; ret; 
0x00000000000570bf: addps xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000049947: addps xmm0, xmmword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000002a843: addps xmm1, xmm0; ja 0x2a530; lea rdx, [rip + 0xb9669]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000020d74: addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000050261: addps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049ea3: addps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x000000000004d4dc: addps xmm1, xmm0; pxor xmm0, xmm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x000000000007ff06: addps xmm1, xmm0; subsd xmm0, xmm1; movsd qword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000031aeb: addps xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000004fc47: addps xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000003cba1: addps xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x000000000002714e: addps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x0000000000050677: addps xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x000000000004a604: addps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000007e9fc: addps xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000009ab7a: addps xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b241: addps xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000007e411: addps xmm1, xmm6; movsd qword ptr [rsi], xmm1; jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x000000000004b842: addps xmm1, xmmword ptr [rip + 0x81447]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a1a5: addps xmm1, xmmword ptr [rip + 0xb621c]; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000029183: addps xmm13, xmmword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004f695: addps xmm2, xmm0; add rsp, 0x20; pop rbx; subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x0000000000031427: addps xmm2, xmm0; add rsp, 0x30; pop rbx; subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000004a22c: addps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000009ad80: addps xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a9f8: addps xmm2, xmm1; sqrtsd xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x00000000000283c2: addps xmm2, xmm3; divsd xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000003100a: addps xmm2, xmm3; divsd xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000004ac04: addps xmm2, xmm4; movaps xmm0, xmm1; divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x000000000009ac21: addps xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a2ad: addps xmm2, xmmword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x000000000004ea8a: addps xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x0000000000029184: addps xmm5, xmmword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000007ff12: addps xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x000000000007f450: addps xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x000000000004d1d0: addsd xmm0, qword ptr [rdx + 8]; addsd xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b290: addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b002: addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049946: addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000043292: addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x000000000002e074: addsd xmm0, xmm0; pop rbx; ret; 
0x000000000002c500: addsd xmm0, xmm0; ret; 
0x0000000000030f34: addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004d1d5: addsd xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000511d8: addsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031937: addsd xmm0, xmm1; movapd xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000002c4db: addsd xmm0, xmm1; ret; 
0x000000000007f443: addsd xmm0, xmm1; subsd xmm1, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x000000000002c4d7: addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d1d9: addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031c3e: addsd xmm0, xmm2; subsd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000007e9ef: addsd xmm0, xmm2; subsd xmm2, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000002df75: addsd xmm0, xmm5; mulsd xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x00000000000283cd: addsd xmm0, xmm5; ret; 
0x000000000002a842: addsd xmm1, xmm0; ja 0x2a530; lea rdx, [rip + 0xb9669]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000020d73: addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004d4db: addsd xmm1, xmm0; pxor xmm0, xmm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x000000000007ff05: addsd xmm1, xmm0; subsd xmm0, xmm1; movsd qword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000031aea: addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000003cba0: addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x000000000002714d: addsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000007e9fb: addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000009ab79: addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b240: addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000007e410: addsd xmm1, xmm6; movsd qword ptr [rsi], xmm1; jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x0000000000029182: addsd xmm13, qword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000031426: addsd xmm2, xmm0; add rsp, 0x30; pop rbx; subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000009ad7f: addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a9f7: addsd xmm2, xmm1; sqrtsd xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x00000000000283c1: addsd xmm2, xmm3; divsd xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x0000000000031009: addsd xmm2, xmm3; divsd xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000009ac20: addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000007ff11: addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x000000000007f44f: addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x000000000004ecd0: addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x0000000000049f31: addss xmm0, dword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x0000000000049d30: addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c1e: addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x00000000000570be: addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000004fddc: addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x0000000000050357: addss xmm0, xmm0; mov rdx, qword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000004ddfc: addss xmm0, xmm0; pop rbx; ret; 
0x0000000000049d1f: addss xmm0, xmm0; ret; 
0x000000000004f23b: addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000049d17: addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000004d33b: addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000004fb00: addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004ea43: addss xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000004a00c: addss xmm0, xmm1; ret; 
0x0000000000049d1b: addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000005016c: addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x0000000000049e9b: addss xmm0, xmm2; movaps xmm1, xmm0; addss xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x000000000004d33f: addss xmm0, xmm2; ret; 
0x000000000004ea3f: addss xmm0, xmm4; addss xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000004ac0e: addss xmm0, xmm4; ret; 
0x000000000004fd7d: addss xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x000000000004fc0f: addss xmm0, xmm5; movd eax, xmm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000004dd7a: addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x000000000004fde0: addss xmm0, xmm5; ret; 
0x000000000004b841: addss xmm1, dword ptr [rip + 0x81447]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a1a4: addss xmm1, dword ptr [rip + 0xb621c]; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000050260: addss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049ea2: addss xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x000000000004fc46: addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x0000000000050676: addss xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x000000000004a603: addss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004a2ac: addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x000000000004f694: addss xmm2, xmm0; add rsp, 0x20; pop rbx; subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004a22b: addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004ac03: addss xmm2, xmm4; movaps xmm0, xmm1; divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x000000000004ea89: addss xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x0000000000015cca: and ah, 0x45; cmp ah, 1; je 0x15cdb; fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x00000000000207b2: and ah, 0x45; cmp ah, 5; je 0x207f2; mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000012fed: and ah, 4; jne 0x12fe8; fstp st(1); ret; 
0x0000000000090461: and ah, al; ret 0x99d1; 
0x000000000008fe7f: and ah, al; ret 0x9da1; 
0x0000000000091d5b: and ah, al; ret 0xb9c9; 
0x0000000000091b24: and ah, al; ret 0xb9f9; 
0x00000000000a79db: and ah, al; ret; 
0x00000000000d410c: and ah, byte ptr [rcx - 0x53]; mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x00000000000deb60: and ah, ch; ret; 
0x000000000010d0a8: and ah, dh; cmp al, 0x64; ret 0x1353; 
0x00000000001966a0: and al, 0; add byte ptr [rax], al; adc al, 0x57; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x0000000000197690: and al, 0; add byte ptr [rax], al; add al, 0x67; add byte ptr [rax], al; fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x0000000000070175: and al, 0; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000000c61d3: and al, 0; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret; 
0x00000000000048d0: and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000191f08: and al, 0; add byte ptr [rax], al; jl 0x191f1d; add byte ptr [rax], al; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x0000000000085bf1: and al, 0; add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal bl, 0xf; pop rsp; ret; 
0x000000000000cd76: and al, 0x10; add edi, 0xe6; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x00000000000486a8: and al, 0x10; add rsp, 0x20; movapd xmm1, xmm0; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000055dc0: and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x000000000007015b: and al, 0x10; add rsp, 0x28; ret; 
0x000000000006feac: and al, 0x10; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000052e5f: and al, 0x10; add rsp, 0x38; ret; 
0x00000000000526c2: and al, 0x10; add rsp, 0x48; ret; 
0x00000000000186f7: and al, 0x10; fdivr st(1); js 0x18740; faddp st(1); pop rbx; ret; 
0x0000000000019e87: and al, 0x10; fld xword ptr [rsp + 8]; ret; 
0x0000000000015ca6: and al, 0x10; fstp xword ptr [rsp]; call 0xc410; add rsp, 0x28; ret; 
0x000000000000d120: and al, 0x10; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000cb89: and al, 0x10; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x000000000001b2bb: and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x00000000000186e6: and al, 0x10; jne 0x18698; pop rbx; ret; 
0x0000000000070155: and al, 0x10; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c454: and al, 0x10; movdqa xmm0, xmmword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000055db4: and al, 0x10; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e53: and al, 0x10; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000056998: and al, 0x10; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b6: and al, 0x10; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000002a5f4: and al, 0x10; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004923c: and al, 0x10; mulsd xmm1, qword ptr [rip + 0x9e38a]; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000019e62: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000018728: and al, 0x10; pop rbx; fmulp st(1); ret; 
0x0000000000055dba: and al, 0x14; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e59: and al, 0x14; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000526bc: and al, 0x14; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000001374c: and al, 0x18; add rsp, 0x10; fdivp st(1); ret; 
0x000000000006c1ac: and al, 0x18; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000001bdf2: and al, 0x18; fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000012c76: and al, 0x18; fpatan; ret; 
0x0000000000020826: and al, 0x18; fucomi st(1); jp 0x20831; fcmovb st(0), st(1); fstp st(1); ret; 
0x0000000000020866: and al, 0x18; fucomi st(1); jp 0x20871; fcmovnb st(0), st(1); fstp st(1); ret; 
0x0000000000037404: and al, 0x18; jne 0x37412; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x0000000000092e14: and al, 0x18; jne 0x92e22; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000a9454: and al, 0x18; jne 0xa9462; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000bd7f4: and al, 0x18; jne 0xbd802; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x000000000006c0fe: and al, 0x18; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x000000000006c0f9: and al, 0x18; movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x000000000006c1a2: and al, 0x18; movq xmm2, qword ptr [rsp]; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x00000000000526b0: and al, 0x18; movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000075450: and al, 0x18; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x000000000001be02: and al, 0x18; ret; 
0x0000000000052e4d: and al, 0x1c; movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000192eb4: and al, 0x1f; add byte ptr [rax], al; cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x0000000000015c78: and al, 0x1f; je 0x15c71; fstp st(1); ret; 
0x0000000000020847: and al, 0x1f; je 0x2084f; fstp st(1); ret; 
0x0000000000020887: and al, 0x1f; je 0x2088f; fstp st(1); ret; 
0x000000000001a4d5: and al, 0x20; add dword ptr [rax], eax; add byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x00000000000161f2: and al, 0x20; add rsp, 0x10; pop rbx; fadd st(0); ret; 
0x000000000001f5ea: and al, 0x20; add rsp, 0x20; add rsp, 0x28; ret; 
0x000000000002037a: and al, 0x20; add rsp, 0x20; fld xword ptr [rip + 0xaf6ea]; fmulp st(2); add rsp, 0x28; ret; 
0x00000000000586e3: and al, 0x20; add rsp, 0x30; pop rbx; ret; 
0x00000000000528e9: and al, 0x20; add rsp, 0x48; ret; 
0x000000000007c98a: and al, 0x20; call 0xc4e80; add rsp, 0x48; ret; 
0x0000000000012d62: and al, 0x20; fdiv dword ptr [rip + 0xb8d6a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000012d22: and al, 0x20; fsub st(0); fdiv st(0); add rsp, 0x10; pop rbx; ret; 
0x00000000000a6460: and al, 0x20; mov al, 0xc4; ret; 
0x000000000007c377: and al, 0x20; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000528dd: and al, 0x20; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000528e3: and al, 0x24; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000018116: and al, 0x28; faddp st(1); pop rbx; pop rbp; ret; 
0x00000000000d7d31: and al, 0x2b; pop rsp; mov byte ptr [rsi + rsi*2 - 0x138572c4], bl; out 0x7b, eax; ret; 
0x000000000010beda: and al, 0x2c; ret; 
0x000000000007c93c: and al, 0x30; add rsp, 0x48; ret; 
0x00000000000544a6: and al, 0x30; jne 0x54772; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000055329: and al, 0x30; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000559cf: and al, 0x30; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x000000000007b17b: and al, 0x30; movaps xmmword ptr [rbx], xmm3; movaps xmmword ptr [rbx + 0x10], xmm4; add rsp, 0x10; pop rbx; ret; 
0x000000000007c984: and al, 0x30; movdqa xmm0, xmmword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x000000000005620e: and al, 0x40; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d1c: and al, 0x40; add rsp, 0x58; ret; 
0x0000000000052b26: and al, 0x40; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x0000000000053139: and al, 0x40; jne 0x532c7; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000000556a8: and al, 0x40; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x0000000000056202: and al, 0x40; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d10: and al, 0x40; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000104c27: and al, 0x42; ret; 
0x0000000000056208: and al, 0x44; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d16: and al, 0x44; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x000000000007de45: and al, 0x48; add esp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000002e05e: and al, 0x48; add esp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x000000000001299a: and al, 0x48; add esp, 0x18; fadd st(0); ret; 
0x0000000000074832: and al, 0x48; add esp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000042eef: and al, 0x48; add esp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004994a: and al, 0x48; add esp, 0x18; ret; 
0x000000000004961d: and al, 0x48; add esp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000045525: and al, 0x48; add esp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000056d9b: and al, 0x48; add esp, 0x18; xorps xmm0, xmm1; ret; 
0x00000000000728f7: and al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000072c06: and al, 0x48; add esp, 0x20; pop rbx; ret; 
0x000000000006fa1a: and al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb4c: and al, 0x48; add esp, 0x28; ret; 
0x000000000006991e: and al, 0x48; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c998f: and al, 0x48; add esp, 0x30; pop rbx; ret; 
0x00000000000c963a: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000007ccb6: and al, 0x48; add esp, 0x38; ret; 
0x000000000007d0ee: and al, 0x48; add esp, 0x48; ret; 
0x0000000000057fb2: and al, 0x48; add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000007014e: and al, 0x48; and edx, eax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006c0f5: and al, 0x48; mov dword ptr [rsp + 0x18], edi; movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x000000000007482a: and al, 0x48; mov dword ptr [rsp], esi; movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000059a5b: and al, 0x48; mov eax, 0; add byte ptr [rax], al; and byte ptr [rip + 0x48d48949], 1; ret; 
0x000000000001a3b8: and al, 0x48; xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x0000000000049b8b: and al, 0x48; xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000011b49c: and al, 0x49; ret 0x1c3f; 
0x00000000000e74dc: and al, 0x49; ret 0x3f; 
0x00000000000f1564: and al, 0x49; ret 0x4a3f; 
0x0000000000130234: and al, 0x49; ret 0x55bf; 
0x00000000000d52c4: and al, 0x49; ret 0x9abf; 
0x00000000000e7584: and al, 0x49; ret 0xfc3f; 
0x00000000000d52fc: and al, 0x49; ret 0xfdbf; 
0x000000000011b499: and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x1c3f; 
0x00000000000e74d9: and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x3f; 
0x0000000000130231: and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x55bf; 
0x00000000000d52c1: and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x9abf; 
0x000000000018fdc8: and al, 0x4e; add byte ptr [rax], al; fdivr dword ptr [rsi - 0x16]; jmp qword ptr [rax + 0x4e]; 
0x00000000000549f3: and al, 0x50; add rsp, 0x68; ret; 
0x00000000000549e7: and al, 0x50; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000549ed: and al, 0x54; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000dbf39: and al, 0x54; ret; 
0x000000000001f5e1: and al, 0x58; call 0x12c70; fld xword ptr [rsp + 0x20]; add rsp, 0x20; add rsp, 0x28; ret; 
0x0000000000084b1d: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal dl, 0xf; pop rsp; ret; 
0x00000000000e4e98: and al, 0x60; jmp qword ptr [rbx - 0x75]; 
0x000000000007cee8: and al, 0x64; mov dword ptr [rax], 0x22; add rsp, 0x38; ret; 
0x0000000000072c14: and al, 0x66; movq mm0, mm1; call 0xc4e80; add rsp, 0x20; pop rbx; ret; 
0x000000000006fa3d: and al, 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000092e5d: and al, 0x68; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000197ab4: and al, 0x6b; add byte ptr [rax], al; clc; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x000000000009a812: and al, 0x70; add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x0000000000017c84: and al, 0x70; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000017617: and al, 0x70; fdivp st(1); faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x000000000007c60f: and al, 0x74; adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x00000000000efea9: and al, 0x74; mov ecx, dword ptr [rcx - 0x43]; or eax, 0xe40003f; mov ebx, 0x3fcbf601; mov ch, 0x78; ret; 
0x000000000007de31: and al, 0x79; adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x4fe8; 
0x000000000005e778: and al, 0x79; adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x8e8; 
0x000000000001504b: and al, 0x7c; ret 0xd8dd; 
0x00000000000723ad: and al, 0x7e; jg 0x72417; movq mm0, mm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x0000000000198eb4: and al, 0x7f; add byte ptr [rax], al; sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x000000000000caf0: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x31], cl; ret; 
0x000000000007186f: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x0000000000059dc7: and al, 0x80; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000058f31: and al, 0x81; ret; 
0x00000000000d4cd0: and al, 0x82; ret; 
0x000000000010f815: and al, 0x83; ret 0xbfbc; 
0x000000000008640d: and al, 0x83; ret; 
0x0000000000037452: and al, 0x88; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000325e8: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000069a06: and al, 0x89; ret; 
0x00000000000c9d49: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x0000000000040db4: and al, 0x90; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x00000000000134c4: and al, 0x98; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x0000000000079cbe: and al, 0xa0; add byte ptr [rax], al; add al, ch; or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000073010: and al, 0xa0; add byte ptr [rax], al; add al, ch; push rsi; mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000003d623: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x00000000000c6ebe: and al, 0xa2; add rdx, r12; jmp rdx; 
0x000000000001ae91: and al, 0xa8; faddp st(1); ret; 
0x0000000000079a96: and al, 0xb0; add byte ptr [rax], al; add al, ch; sal al, 1; std; jmp qword ptr [rsi + 0xf]; 
0x000000000007399d: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000075e4a: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x290f; 
0x000000000007a74b: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret; 
0x00000000000ff9fa: and al, 0xbc; ret; 
0x00000000000e905e: and al, 0xbf; in al, dx; shr bh, 0x46; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x00000000000769ea: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x8a8; 
0x00000000000a8b1c: and al, 0xc4; mov r9d, 0xc4a0c97b; ret; 
0x000000000008f322: and al, 0xc4; pop r8; fadd st(4); ret 0xb9c1; 
0x0000000000095975: and al, 0xc4; ret 0x99b1; 
0x000000000008fc04: and al, 0xc4; ret 0x9d89; 
0x00000000000926eb: and al, 0xc4; ret 0x9db1; 
0x000000000009047b: and al, 0xc4; ret 0x9db9; 
0x0000000000092567: and al, 0xc4; ret 0xb9b9; 
0x000000000008fef0: and al, 0xc4; ret 0xb9f9; 
0x000000000008f2c9: and al, 0xc4; ret 0xbdb1; 
0x00000000000a57ec: and al, 0xc4; ret; 
0x00000000000ba9e5: and al, 0xc5; ret; 
0x00000000000ba7ef: and al, 0xc5; sti; pop rax; ret; 
0x00000000000570bc: and al, 0xc; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000011cd5: and al, 0xc; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x0000000000011b19: and al, 0xc; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000012429: and al, 0xc; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000012669: and al, 0xc; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x0000000000012700: and al, 0xc; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x0000000000053339: and al, 0xd8; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000053345: and al, 0xd8; ret; 
0x0000000000103072: and al, 0xd9; call qword ptr [rsi]; 
0x000000000005333f: and al, 0xdc; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000019183: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; wait; ret 0xf41; 
0x00000000000193ef: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ret 0x450f; 
0x000000000003239a: and al, 0xe0; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000007286e: and al, 0xe0; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x00000000000323ca: and al, 0xe0; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000032359: and al, 0xe0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000003235f: and al, 0xe0; ret; 
0x000000000009c0d8: and al, 0xe1; add al, byte ptr [rax]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000001733c: and al, 0xe4; ret; 
0x0000000000079374: and al, 0xe8; add bh, dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000019f4d: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000768f4: and al, 0xe8; and al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000001ab5b: and al, 0xe8; call rbx; 
0x0000000000077c00: and al, 0xe8; cli; or esi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000c8ff5: and al, 0xe8; cmc; mov ebp, 0x8b48ffff; add al, 0x24; add rsp, 0x28; ret; 
0x00000000000787c0: and al, 0xe8; cmp bh, dh; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000056d92: and al, 0xe8; cmp byte ptr [rbx + 0x280fffff], ch; or al, 0x24; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000000d0b4: and al, 0xe8; cmpsb byte ptr [rsi], byte ptr [rdi]; sldt word ptr [rax]; add rsp, 0x28; ret; 
0x00000000000464b3: and al, 0xe8; cmpsd dword ptr [rsi], dword ptr [rdi]; push rbx; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000000cd80: and al, 0xe8; ficom dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000019f1e: and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x00000000000180f5: and al, 0xe8; fld xword ptr [rsp - 0x18]; pop rbx; pop rbp; ret; 
0x0000000000018c1b: and al, 0xe8; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019b73: and al, 0xe8; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000017338: and al, 0xe8; fldenv [rsp - 0x1c]; ret; 
0x0000000000019f9c: and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000001b17e: and al, 0xe8; fstp xword ptr [rdi]; ret; 
0x00000000000435ce: and al, 0xe8; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x0000000000049613: and al, 0xe8; imul dword ptr [rax + 0xf66ffff]; sub byte ptr [rsp], cl; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x000000000007bc8f: and al, 0xe8; imul ecx, ecx, -3; jmp qword ptr [rsi + 0xf]; 
0x0000000000046d65: and al, 0xe8; in eax, 0x4c; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000007b43d: and al, 0xe8; insd dword ptr [rdi], dx; loope 0x7b43f; jmp qword ptr [rsi + 0xf]; 
0x000000000000cb8d: and al, 0xe8; int 0x14; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000077a09: and al, 0xe8; int1; or edi, esi; jmp qword ptr [rsi + 0xf]; 
0x000000000000d1e4: and al, 0xe8; jbe 0xd1f6; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000cbdd: and al, 0xe8; jge 0xcbf5; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000006c68b: and al, 0xe8; jmp qword ptr [rsi + 0xf660005]; 
0x000000000000d5df: and al, 0xe8; jnp 0xd5ed; add byte ptr [rax], al; add rsp, 0x20; add rsp, 8; ret; 
0x000000000007c89e: and al, 0xe8; lodsb al, byte ptr [rsi]; ret 4; 
0x0000000000045eaa: and al, 0xe8; mov al, 0x59; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000000d49f: and al, 0xe8; mov ebx, 0x4800000b; add esp, 0x20; add rsp, 8; ret; 
0x000000000007473d: and al, 0xe8; mov qword ptr [rsp - 0x18], rdx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000074668: and al, 0xe8; mov qword ptr [rsp - 0x18], rsi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000323c5: and al, 0xe8; mov qword ptr [rsp - 0x20], rax; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000001a03e: and al, 0xe8; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b1c9: and al, 0xe8; mov word ptr [rsp - 0x10], ax; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000182df: and al, 0xe8; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000586da: and al, 0xe8; movabs al, byte ptr [0x202444290f0006c7]; add rsp, 0x30; pop rbx; ret; 
0x0000000000074672: and al, 0xe8; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007466d: and al, 0xe8; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000782c6: and al, 0xe8; movsb byte ptr [rdi], byte ptr [rsi]; or dh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000435c8: and al, 0xe8; movsd xmm0, qword ptr [rsp - 0x18]; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000000323d0: and al, 0xe8; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000078b61: and al, 0xe8; or dil, r14b; jmp qword ptr [rsi + 0xf]; 
0x00000000000180f9: and al, 0xe8; pop rbx; pop rbp; ret; 
0x000000000007c52a: and al, 0xe8; push rax; mov dword ptr [rax + rax], eax; add rsp, 0x28; ret; 
0x00000000000452f3: and al, 0xe8; push rdi; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000070d06: and al, 0xe8; push rsp; mov bl, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000076ea8: and al, 0xe8; ret 0x3a; 
0x000000000007d298: and al, 0xe8; ret 0x4c3; 
0x00000000000694c8: and al, 0xe8; ret 0x5d8; 
0x0000000000067fc8: and al, 0xe8; ret 0x5ed; 
0x0000000000066ec8: and al, 0xe8; ret 0x5fe; 
0x0000000000065cc8: and al, 0xe8; ret 0x610; 
0x0000000000063a88: and al, 0xe8; ret 0x626; 
0x0000000000064198: and al, 0xe8; ret 0x652; 
0x00000000000613c8: and al, 0xe8; ret 0x659; 
0x0000000000059bc8: and al, 0xe8; ret 0x6d1; 
0x000000000001ea48: and al, 0xe8; ret 0xff44; 
0x0000000000014397: and al, 0xe8; ret; 
0x000000000000cc3d: and al, 0xe8; sbb eax, 0x48000014; add esp, 0x28; ret; 
0x000000000000d53f: and al, 0xe8; sbb ecx, dword ptr [rbx]; add byte ptr [rax], al; add rsp, 0x20; add rsp, 8; ret; 
0x000000000007b66f: and al, 0xe8; sbb esi, dword ptr [rdi - 0x917fffc]; in eax, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000007a68c: and al, 0xe8; scasb al, byte ptr [rdi]; out 0xfd, al; jmp qword ptr [rsi + 0xf]; 
0x000000000000d124: and al, 0xe8; sldt word ptr ss:[rax]; add rsp, 0x20; add rsp, 8; ret; 
0x0000000000048351: and al, 0xe8; stc; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000078ae3: and al, 0xe8; xchg edi, eax; ret; 
0x000000000007a962: and al, 0xe9; ret; 
0x0000000000190325: and al, 0xec; jmp qword ptr [rax + 0x64]; 
0x00000000000180f1: and al, 0xec; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; pop rbx; pop rbp; ret; 
0x0000000000018c17: and al, 0xec; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af67: and al, 0xec; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b26e: and al, 0xec; mov word ptr [rsp - 0x10], dx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000dfdaa: and al, 0xee; ret; 
0x0000000000018fe9: and al, 0xf0; add byte ptr [rax], al; add al, bl; ret 0xacdb; 
0x000000000007719c: and al, 0xf0; add byte ptr [rax], al; add al, ch; pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000195c2: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x000000000001900b: and al, 0xf0; add byte ptr [rax], al; add dh, bl; loope 0x18ff1; ret 0xc9d9; 
0x000000000004d61a: and al, 0xf0; addss xmm0, xmm1; ret; 
0x0000000000072863: and al, 0xf0; and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x000000000004a732: and al, 0xf0; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004d4e7: and al, 0xf0; cvtsd2ss xmm0, xmm1; ret; 
0x000000000001b0c0: and al, 0xf0; fild qword ptr [rsp - 0x10]; ret; 
0x0000000000050392: and al, 0xf0; fld xword ptr [rsp + 8]; faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000001b333: and al, 0xf0; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x0000000000019f98: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000001b17a: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000182e4: and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019ee4: and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000018c12: and al, 0xf0; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af62: and al, 0xf0; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000006ee64: and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000043ef3: and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000525ad: and al, 0xf0; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000004d614: and al, 0xf0; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000001b337: and al, 0xf0; pop rbx; ret; 
0x000000000001b0c4: and al, 0xf0; ret; 
0x0000000000016b56: and al, 0xf0; test eax, eax; jne 0x16c60; fstp st(0); fld1; ret; 
0x000000000009c04a: and al, 0xf0; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000009ba01: and al, 0xf0; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009baf8: and al, 0xf0; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c044: and al, 0xf0; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000001b1ce: and al, 0xf0; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000528e4: and al, 0xf3; movd dword ptr [rsp + 0x20], mm0; add rsp, 0x48; ret; 
0x0000000000019b6f: and al, 0xf4; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019b6b: and al, 0xf4; fldcw word ptr [rsp - 0xc]; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x000000000001b32f: and al, 0xf4; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x00000000000525b3: and al, 0xf4; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005039c: and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000004d234: and al, 0xf4; ret; 
0x00000000000a9464: and al, 0xf6; jmp qword ptr [rsi + 0xf]; 
0x0000000000019b77: and al, 0xf6; mov rax, qword ptr [rsp - 0x18]; ret; 
0x000000000001b32a: and al, 0xf8; mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x0000000000015e81: and al, 0xf8; mov edx, dword ptr [rsp - 4]; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x000000000003221f: and al, 0xf8; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000321e2: and al, 0xf8; movapd xmm0, xmm1; ret; 
0x0000000000031a8c: and al, 0xf8; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000321dc: and al, 0xf8; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000032219: and al, 0xf8; movsd xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000525a7: and al, 0xf8; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000c4538: and al, 0xf8; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000525c4: and al, 0xf8; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000525d4: and al, 0xf8; movss xmm0, dword ptr [rsp - 8]; ret; 
0x0000000000019a8c: and al, 0xf8; ret; 
0x0000000000049646: and al, 0xf8; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x000000000004965e: and al, 0xf8; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049686: and al, 0xf8; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x000000000004969e: and al, 0xf8; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000019a86: and al, 0xf8; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000020837: and al, 0xf; je 0x2084f; fstp st(1); ret; 
0x0000000000020877: and al, 0xf; je 0x2088f; fstp st(1); ret; 
0x0000000000015cdd: and al, 0xf; jne 0x15cd2; fadd st(0); ret; 
0x00000000000724fb: and al, 0xf; mov es, word ptr [rax + 0x66000000]; movq mm0, mm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x0000000000052e1d: and al, 0xf; push rdi; ret 0x290f; 
0x0000000000078e5e: and al, 0xf; sub dword ptr [rbx], esi; movaps xmmword ptr [rbx + 0x10], xmm7; add rsp, 0x70; pop rbx; ret; 
0x00000000000c6ddc: and al, 0xf; test byte ptr [rbp + 0x66000001], ch; cmp r8d, 0x89497fff; ret; 
0x0000000000014b0f: and al, 0xf; xchg dl, dh; add dword ptr [rax], eax; add cl, bl; ret 0xe8d9; 
0x0000000000071072: and al, 0xf; xchg esp, eax; ret; 
0x0000000000015e85: and al, 0xfc; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x0000000000019fd2: and al, 0xfc; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000019fd6: and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000c453e: and al, 0xfc; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000016ae2: and al, 0xfc; ret; 
0x0000000000056dc4: and al, 0xfc; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056ddb: and al, 0xfc; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e04: and al, 0xfc; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e1b: and al, 0xfc; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000016add: and al, 0xfc; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x0000000000056dc8: and al, 0xfe; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056ddf: and al, 0xfe; je 0x56de5; ret; 
0x0000000000056e08: and al, 0xfe; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e1f: and al, 0xfe; je 0x56e25; ret; 
0x00000000000768f7: and al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000004964a: and al, 0xfe; or byte ptr [rcx + rbx - 0xe], dh; movups xmm0, xmm1; ret; 
0x0000000000077777: and al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000015d8b: and al, 1; je 0x15dc3; shr edx, 0x1f; lea rcx, [rip + 0xb73c7]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015e20: and al, 1; je 0x15e35; fld qword ptr [rip + 0xb5496]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x0000000000015e87: and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x0000000000098dfe: and al, 3; add ch, al; ret; 
0x000000000004dde6: and al, 8; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x00000000000570c2: and al, 8; add rsp, 0x18; ret; 
0x0000000000049944: and al, 8; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000017f22: and al, 8; fabs; ret; 
0x0000000000032396: and al, 8; fadd qword ptr [rsp - 0x20]; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000015d42: and al, 8; fadd st(0); ret; 
0x0000000000050396: and al, 8; faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000019a82: and al, 8; fistp qword ptr [rsp - 8]; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000012c72: and al, 8; fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x0000000000017182: and al, 8; fld1; fpatan; ret; 
0x0000000000012bb2: and al, 8; fmulp st(1); faddp st(1); ret; 
0x0000000000018272: and al, 8; frndint; ret; 
0x0000000000019fda: and al, 8; fscale; fstp st(1); ret; 
0x00000000000162a2: and al, 8; fsqrt; ret; 
0x0000000000012a36: and al, 8; fsub st(0); fdiv st(0); ret; 
0x0000000000019f26: and al, 8; fsubrp st(1); ret; 
0x000000000001a092: and al, 8; fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x0000000000017fb2: and al, 8; fxtract; fstp st(0); ret; 
0x00000000000183f2: and al, 8; fxtract; fstp st(1); ret; 
0x0000000000072c00: and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb46: and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000044e40: and al, 8; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000011ccf: and al, 8; movss xmm4, dword ptr [rsp + 0xc]; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x0000000000019e8b: and al, 8; ret; 
0x000000000000e6b5: and al, 8; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000044e46: and al, 8; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x00000000000ef372: and al, bh; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x0000000000012d63: and al, bl; xor eax, 0xb8d6a; add rsp, 0x10; pop rbx; ret; 
0x000000000010d37e: and al, byte ptr [rax - 0x39]; in al, 0xcf; adc byte ptr [rbp - 0xa], bl; ret; 
0x0000000000108afe: and al, byte ptr [rax - 0x71]; ret; 
0x000000000000ed01: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000072d46: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000004334e: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000007ceec: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000001a104: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000050365: and al, byte ptr [rax]; add byte ptr [rax], al; movd xmm0, eax; ret; 
0x0000000000050252: and al, byte ptr [rax]; add byte ptr [rax], al; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x000000000007c35f: and al, byte ptr [rax]; add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000207c4: and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001931a5: and al, byte ptr [rax]; add byte ptr [rax], ch; xchg eax, ebp; call qword ptr [rbx + 2]; 
0x00000000000dd920: and al, byte ptr [rax]; and ebp, eax; wait; ret; 
0x00000000000d0d83: and al, byte ptr [rcx + 0x30]; ret; 
0x00000000000775ac: and al, ch; adc sil, r15b; jmp qword ptr [rsi + 0xf]; 
0x000000000007da32: and al, ch; cmp byte ptr [rdi + rdi*8], dl; jmp qword ptr [rsi + 0xf]; 
0x0000000000060b8b: and al, ch; jmp qword ptr [rcx + 6]; 
0x0000000000192241: and al, ch; jmp qword ptr [rsi + 2]; 
0x000000000006517b: and al, ch; jmp qword ptr [rsi]; 
0x000000000006ae19: and al, ch; jno 0x6addc; add eax, 0x83d88900; ret; 
0x00000000000680cd: and al, ch; lodsd eax, dword ptr [rsi]; test dword ptr [rip + 0x6f0f6600], 0x6f0f66d8; ret; 
0x000000000007cabb: and al, ch; mov edi, 0x48000483; add esp, 0x48; ret; 
0x000000000007c98b: and al, ch; out dx, eax; test byte ptr [rax + rax], al; add rsp, 0x48; ret; 
0x000000000001c9c7: and al, ch; ret; 
0x000000000005d25d: and al, ch; std; ret; 
0x000000000006b74e: and al, ch; sub al, 0xc1; add eax, 0xfd834100; jmp qword ptr [rsi + 0xf]; 
0x00000000000461d6: and al, ch; test byte ptr [rsi - 4], dl; jmp qword ptr [rsi + 0xf]; 
0x000000000007264c: and al, dh; or byte ptr [rax], al; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x00000000000c452f: and al, dl; jne 0xc4547; movss dword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000c47d6: and al, dl; jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x00000000000e9ef6: and bh, byte ptr [rdi - 0x3e000000]; movsd dword ptr [rdi], dword ptr [rsi]; jmp qword ptr [rdx]; 
0x0000000000029647: and bh, dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000104737: and bl, ah; ret; 
0x00000000000ce5c2: and bl, bh; ret; 
0x000000000002037f: and bl, bl; sub eax, 0xaf6ea; fmulp st(2); add rsp, 0x28; ret; 
0x000000000008a472: and bl, byte ptr [rbp + 0xa]; add ch, al; ret; 
0x0000000000105c00: and bl, byte ptr [rsi]; and eax, 0xa36cbf7e; int1; adc dl, byte ptr [rbp + 0x15e605ec]; call 0xffffffffda108a52; ret; 
0x00000000000528de: and bl, dh; movups xmmword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000004f96b: and bl, dh; subps xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x00000000000d4a96: and byte ptr [rax + 0x66], al; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000067d37: and byte ptr [rax + 9], cl; ret 0xb848; 
0x0000000000031a85: and byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; and al, 0xf8; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000032352: and byte ptr [rax + 9], cl; xlatb; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000009a80b: and byte ptr [rax + rax], al; add byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; and al, 0x70; add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x0000000000192a60: and byte ptr [rax - 0x18], bl; jmp qword ptr [rdx + 1]; 
0x00000000000ece0a: and byte ptr [rax - 0x21], dl; mov word ptr [rip + 0x5f6000bf], fs; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x000000000001675b: and byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x00000000000a8d24: and byte ptr [rax - 0x3c], ah; ret; 
0x0000000000012d9c: and byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000193075: and byte ptr [rax], al; add al, bl; jl 0x193063; call qword ptr [rbx + 1]; 
0x000000000018f551: and byte ptr [rax], al; add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x000000000019789c: and byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rcx], ch; add byte ptr [rdx + rbx*2 - 0x12], cl; call qword ptr [rax]; 
0x00000000000c8aee: and byte ptr [rax], al; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0xd231; 
0x00000000000c8463: and byte ptr [rax], al; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0xff31; 
0x00000000000e8ba3: and byte ptr [rax], cl; xor byte ptr [r15], dil; add byte ptr [rax], al; or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x00000000000e83be: and byte ptr [rbp - 0x2532e311], bh; retf; ret 0x3f3a; 
0x00000000000ecd39: and byte ptr [rbx + 0x3aade8f2], dl; cmp eax, 0; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x000000000004cb05: and byte ptr [rbx + 0x5d], bl; pop r12; movaps xmm0, xmm1; ret; 
0x000000000004cb17: and byte ptr [rbx + 0x5d], bl; pop r12; movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x000000000004c4e7: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000042eb4: and byte ptr [rbx + rcx + 0x590ff200], dh; ret 0xff2; 
0x000000000004f2f6: and byte ptr [rbx - 0xd], bl; divps xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004f69b: and byte ptr [rbx - 0xd], bl; subps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x0000000000048275: and byte ptr [rbx], al; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x00000000000bf4bc: and byte ptr [rbx], al; add ch, al; sti; pop rcx; ret; 
0x00000000000cd485: and byte ptr [rbx], bh; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000001905d8: and byte ptr [rbx], dh; add byte ptr [rax], bl; cli; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x00000000000321d5: and byte ptr [rcx + 9], cl; ror dword ptr [rcx + rcx*4 + 0x4c], 0x24; clc; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000e8ed4: and byte ptr [rcx], al; sub byte ptr [rdi], bh; add byte ptr [rax], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x00000000000281ed: and byte ptr [rcx], bh; ret 0xd589; 
0x0000000000042f05: and byte ptr [rcx], cl; add dl, dh; mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000001b6cc: and byte ptr [rcx], cl; ret; 
0x000000000006b3db: and byte ptr [rcx], cl; ror dword ptr [rcx], cl; ret; 
0x00000000000e88c5: and byte ptr [rdi + rdi*4], dh; ret 0x1de7; 
0x000000000004c7ec: and byte ptr [rdi], cl; sub cl, al; pop rbx; pop rbp; pop r12; ret; 
0x00000000001011a9: and byte ptr [rdx + 0x1600003e], bl; ret; 
0x00000000000ff226: and byte ptr [rdx + 0x2b179000], ch; add byte ptr [rax + 0x6000aac7], al; ret; 
0x000000000009accc: and byte ptr [rdx + 0xff2000a], al; pop rcx; ret 0xff2; 
0x000000000005b4dc: and byte ptr [rdx - 0x6417fff6], ah; ret; 
0x0000000000059a64: and byte ptr [rip + 0x48d48949], 1; ret; 
0x0000000000190e40: and byte ptr [rsi + 0x1b380000], 0xf2; call rax; 
0x0000000000018c0d: and byte ptr [rsi + 0x44], 0x89; and al, 0xf0; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000007c378: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x20; add rsp, 0x48; ret; 
0x000000000006bb71: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x15e8; 
0x00000000000599a1: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000006f8c9: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5d5b; 
0x000000000006b70a: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ce8; 
0x000000000006ae07: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6fe8; 
0x000000000007033d: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8945; 
0x00000000000690ac: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xcae8; 
0x000000000006aa7b: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xebe8; 
0x00000000000638a4: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000005e806: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x7ce8; 
0x0000000000033915: and byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x00000000000486ad: and byte ptr [rsi + 0xf], ah; sub al, cl; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000049249: and byte ptr [rsi + 0xf], ah; sub dl, al; pop rbx; ret; 
0x00000000000e5561: and byte ptr [rsi - 0x6f], al; adc eax, 0x7b3f61bb; pop rbx; ret; 
0x000000000010652b: and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x00000000000ece09: and byte ptr gs:[rax - 0x21], dl; mov word ptr [rip + 0x5f6000bf], fs; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x000000000008e7d2: and ch, al; ret; 
0x000000000008fd73: and ch, al; stc; push rsp; ret; 
0x00000000000a98c0: and ch, al; sti; pop rax; ret; 
0x00000000000c2f92: and ch, al; sti; pop rsp; ret 0xfbc5; 
0x00000000000fc671: and ch, byte ptr [rax]; test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x0000000000198370: and cl, 0xee; jmp qword ptr [rdx]; 
0x00000000000ebeb1: and cl, ah; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x000000000005450a: and cl, byte ptr [rax + 0x280f0007]; ret 0x72e9; 
0x00000000000d554a: and cl, byte ptr [rbp + 0x11]; ret 0xbfb3; 
0x0000000000031c4b: and cl, byte ptr [rbx]; add dl, dh; mulps xmm0, xmm1; ret; 
0x00000000000dd038: and cl, byte ptr [rcx + 0x7ff7d9c7]; ret 0x403f; 
0x0000000000080234: and cl, byte ptr [rdi]; mov es, word ptr [rdi + 0x66000001]; movaps xmm0, xmm2; ret; 
0x00000000000b0184: and cl, byte ptr [rdi]; mov es, word ptr [rip - 0x3affffff]; stc; sub dl, al; ret; 
0x0000000000067eb5: and cl, byte ptr [rdx]; add al, ch; ret; 
0x000000000003ff2b: and cl, byte ptr [rip + 0x580ff200]; ret; 
0x0000000000049014: and cl, ch; cmp esp, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000005886e: and cl, ch; ret 0xfffe; 
0x000000000001d338: and cl, ch; ret; 
0x00000000000182d6: and cx, 0x8000; or edi, ecx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001d70d: and dh, bl; ret 0xc9d9; 
0x00000000000cbc10: and dl, bh; out dx, al; ret 0x705f; 
0x0000000000086522: and dword ptr [rax - 0x7b], ecx; sar byte ptr [rax + 0x58], 0x48; not edx; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000001930d5: and dword ptr [rax], eax; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x000000000007c5d6: and dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000020996: and dword ptr [rax], eax; add byte ptr [rax], al; divss xmm0, xmm0; add rsp, 8; ret; 
0x000000000009b2d1: and dword ptr [rax], eax; add byte ptr [rax], al; subss xmm0, xmm0; ret; 
0x000000000009c8e1: and dword ptr [rax], eax; add byte ptr [rax], al; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009cd51: and dword ptr [rax], eax; add byte ptr [rax], al; vsubss xmm1, xmm0, xmm0; vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000001b46b: and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001930d4: and dword ptr [rax], r8d; add al, bl; jg 0x1930c3; call qword ptr [rdi]; 
0x000000000007d12b: and dword ptr [rcx + 0xf660008], eax; outsd dx, dword ptr [rsi]; ret 0x28e8; 
0x000000000008e7cb: and dword ptr [rcx + rbx*8 - 0x3b], edx; jnp 0x8e7e1; push rcx; and ch, al; ret; 
0x00000000000a4dbb: and dword ptr [rcx + rbx*8 - 0x3b], edx; jnp 0xa4dd1; push rcx; and ch, al; ret; 
0x0000000000089680: and dword ptr [rcx + rbx*8 - 0x3c], edx; jns 0x896b5; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x000000000009fc00: and dword ptr [rcx + rbx*8 - 0x3c], edx; jns 0x9fc35; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x00000000000df5e8: and dword ptr [rcx], 0xffffffde; sahf; movabs eax, dword ptr [0x35b00437793fe333]; rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x00000000000d99fa: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e9a: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b3a: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139eda: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x000000000015835a: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x000000000016861a: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3fa: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x000000000018719a: and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000e9e96: and dword ptr [rdi + 0x2000000], edi; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000e78ab: and dword ptr [rdi - 0x13c2d7b2], esp; push rsp; scasd eax, dword ptr [rdi]; stosd dword ptr [rdi], eax; pop rbp; ret; 
0x00000000000e64aa: and dword ptr [rdx + 0x3ff008b4], edi; sbb bh, cl; ret 0xa4a8; 
0x0000000000093161: and dword ptr [rdx + rbx*8 - 0x3b], edx; ret; 
0x00000000000939b8: and dword ptr [rdx + rbx*8 - 0x3b], edx; stc; push rsp; ret 0x79c5; 
0x00000000000e6b50: and dword ptr [rdx + rdi*4 - 0x55], ebx; ret 0xeff6; 
0x0000000000140ff2: and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x000000000016f532: and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x000000000018e0b2: and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x00000000000fd312: and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x000000000004d34f: and dword ptr [rip + 0x540f000b], esi; or eax, 0x7e766; divss xmm0, xmm1; ret; 
0x0000000000100da1: and dword ptr [rsi - 0x7ad59cc5], 0xcbbbce3d; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x000000000000179c: and dword ptr [rsi - 2], ebp; jnp 0x17b5; cmp bh, byte ptr [rip - 0x402100f1]; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x0000000000019dbc: and dx, 0x7fff; cmp dx, 0x7fff; sete al; and eax, ecx; ret; 
0x00000000000d3d24: and eax, 0x183ffa5f; ret 0x1460; 
0x000000000007c59a: and eax, 0x1b8d284; add byte ptr [rax], al; add byte ptr [rsp + rcx + 0x48], dh; add esp, 0x20; pop rbx; ret; 
0x00000000000edc08: and eax, 0x1fd6eab0; xor al, 0x31; mov edi, 0x58b70000; ret 0x9b5c; 
0x000000000001a09a: and eax, 0x200; ret; 
0x00000000000c52b6: and eax, 0x21487fff; ret 0x8949; 
0x00000000000c54f9: and eax, 0x21487fff; ret 0xcae9; 
0x0000000000012862: and eax, 0x28; jne 0x128bf; add rsp, 0x28; ret; 
0x0000000000014671: and eax, 0x28; jne 0x14802; add rsp, 0x60; pop rbx; ret; 
0x00000000000164f8: and eax, 0x28; jne 0x166aa; add rsp, 0xa0; pop rbx; ret; 
0x00000000000172b7: and eax, 0x28; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017398: and eax, 0x28; jne 0x174a0; add rsp, 0x38; ret; 
0x000000000001845a: and eax, 0x28; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860e: and eax, 0x28; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3be: and eax, 0x28; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c368: and eax, 0x28; jne 0x1c681; leave; ret; 
0x000000000001ed10: and eax, 0x28; jne 0x1efa7; fxch st(1); leave; ret; 
0x00000000000279c1: and eax, 0x28; jne 0x27cf1; add rsp, 0x28; ret; 
0x000000000002889d: and eax, 0x28; jne 0x28acd; add rsp, 0x40; pop rbx; ret; 
0x00000000000297b6: and eax, 0x28; jne 0x2999d; add rsp, 0x40; pop rbx; ret; 
0x0000000000030d2d: and eax, 0x28; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000047c06: and eax, 0x28; jne 0x47e29; add rsp, 0x50; pop rbx; ret; 
0x000000000004826e: and eax, 0x28; jne 0x48599; add rsp, 0x60; pop rbx; ret; 
0x0000000000049b91: and eax, 0x28; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004affc: and eax, 0x28; jne 0x4b20c; add rsp, 0x20; pop rbx; ret; 
0x000000000004b369: and eax, 0x28; jne 0x4b4f5; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0b1: and eax, 0x28; jne 0x4e1ba; add rsp, 0x30; pop rbx; ret; 
0x000000000004f043: and eax, 0x28; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000005061d: and eax, 0x28; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b44: and eax, 0x28; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c329: and eax, 0x28; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006795e: and eax, 0x28; jne 0x67d52; sub rsp, -0x80; pop rbx; ret; 
0x000000000006c250: and eax, 0x28; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc70: and eax, 0x28; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc8: and eax, 0x28; jne 0x6fe3c; add rsp, 0x48; ret; 
0x00000000000800c9: and eax, 0x28; jne 0x80162; add rsp, 0x20; pop rbx; ret; 
0x000000000008689d: and eax, 0x28; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086996: and eax, 0x28; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087207: and eax, 0x28; jne 0x874d9; add rsp, 0x28; ret; 
0x0000000000099a2a: and eax, 0x28; jne 0x99ac3; add rsp, 0x20; pop rbx; ret; 
0x000000000009d789: and eax, 0x28; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b001a: and eax, 0x28; jne 0xb00b3; add rsp, 0x20; pop rbx; ret; 
0x00000000000b16e1: and eax, 0x28; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000bd72: and eax, 0x28; jne 0xbd80; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000be5b: and eax, 0x28; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bed3: and eax, 0x28; jne 0xbee1; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000bf21: and eax, 0x28; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf6a: and eax, 0x28; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000bfd7: and eax, 0x28; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c04b: and eax, 0x28; jne 0xc059; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c10f: and eax, 0x28; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c206: and eax, 0x28; jne 0xc214; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c26d: and eax, 0x28; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2d1: and eax, 0x28; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000c31c: and eax, 0x28; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35e: and eax, 0x28; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000000c3de: and eax, 0x28; jne 0xc3fc; add rsp, 0x18; ret; 
0x000000000000c9c3: and eax, 0x28; jne 0xcb2a; add rsp, 0xc0; pop rbx; ret; 
0x000000000000dbc3: and eax, 0x28; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfd9: and eax, 0x28; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e5: and eax, 0x28; jne 0xf34f; add rsp, 0x28; ret; 
0x000000000000ef51: and eax, 0x28; movapd xmm0, xmm1; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000021f49: and eax, 0x28; movapd xmm0, xmm7; jne 0x22e73; add rsp, 0x48; ret; 
0x00000000000124fb: and eax, 0x28; movaps xmm0, xmm1; jne 0x12638; add rsp, 0x28; ret; 
0x00000000000d4d05: and eax, 0x33e63c7d; pop rbp; ret; 
0x000000000012e0f3: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000013e493: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000015c913: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000016cbd3: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001809b3: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018b753: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000ddfb3: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fa453: and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000005198c: and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x00000000000288a4: and eax, 0x48000002; add esp, 0x40; pop rbx; ret; 
0x00000000000279c8: and eax, 0x48000003; add esp, 0x28; ret; 
0x000000000005c330: and eax, 0x48000023; add esp, 0xb8; ret; 
0x0000000000050584: and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc4: and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a4: and eax, 0x480; cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b4: and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d274: and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d714: and eax, 0x480; cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000ece6e: and eax, 0x49c000bf; sub dh, byte ptr [rcx + 0x3d]; ret 0x5cbf; 
0x00000000000ece0e: and eax, 0x5f6000bf; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x000000000009d6ae: and eax, 0x7aa04; adc byte ptr [rax - 0x77], cl; ret 0xebc5; 
0x0000000000050ee4: and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000020c77: and eax, 0x7fff; cmp eax, 0x3fbe; jge 0x20c88; fld1; faddp st(1); ret; 
0x0000000000019e7e: and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000051968: and eax, 0x7fffffff; and edx, 0x7fffffff; cmp eax, edx; setbe al; movzx eax, al; ret; 
0x0000000000050e79: and eax, 0x7fffffff; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x0000000000086807: and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x0000000000050f47: and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000050f70: and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000000510f4: and eax, 0x807fffff; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000432d4: and eax, 0x80; ret; 
0x00000000000e4991: and eax, 0x822883a1; mov r15d, 0x8152093a; ret; 
0x0000000000105c02: and eax, 0xa36cbf7e; int1; adc dl, byte ptr [rbp + 0x15e605ec]; call 0xffffffffda108a52; ret; 
0x000000000009c186: and eax, 0xa6d6d; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x0000000000016ca9: and eax, 0xb451e; fmulp st(1); fld1; faddp st(1); ret; 
0x00000000000e3305: and eax, 0xc1ba3ff4; in al, 0xf9; ret; 
0x00000000000bb6b7: and eax, 0xc50000fc; jns 0xbb6e6; ret; 
0x0000000000089657: and eax, 0xc500091e; ret; 
0x0000000000093487: and eax, 0xc5000ad2; ret; 
0x00000000000e4d36: and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x00000000000874d5: and eax, 0xe8fffffd; ret 0xf843; 
0x00000000000756bb: and eax, 0xf660006; out dx, eax; ret 0x3de9; 
0x0000000000049521: and eax, 0xf660008; sub al, cl; ret; 
0x0000000000072d07: and eax, 0xf660009; outsd dx, dword ptr [rsi]; ret 0x4de8; 
0x0000000000072c7d: and eax, 0xf660009; outsd dx, dword ptr [rsi]; ret 0xd7e8; 
0x000000000010eab5: and eax, 0xf908397; ret; 
0x00000000000d2014: and eax, 0xfe3fe25e; ret; 
0x0000000000049535: and eax, 0xff20008; adc byte ptr [rip + 0x81d50], al; ret; 
0x0000000000022b15: and eax, 0xff2000b; pop rcx; ret 0xf66; 
0x0000000000022b3d: and eax, 0xff2000b; pop rcx; ret 0xff2; 
0x0000000000017333: and eax, 1; or dword ptr [rsp - 0x18], eax; fldenv [rsp - 0x1c]; ret; 
0x0000000000015dab: and eax, 8; lea rcx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x0000000000051124: and eax, 8; ret; 
0x0000000000016080: and eax, 8; shr edx, 0xb; add eax, edx; lea rdx, [rip + 0xb7fa1]; fld qword ptr [rdx + rax]; ret; 
0x000000000010b501: and eax, dword ptr [r13 - 5]; ret; 
0x000000000010b502: and eax, dword ptr [rbp - 5]; ret; 
0x00000000000865ef: and eax, dword ptr [rcx + 0x400f9]; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x00000000000e830b: and eax, dword ptr [rcx - 0x1f40c43f]; out dx, eax; ret 0x4b4c; 
0x00000000000b8f97: and eax, dword ptr [rcx]; add ch, al; jns 0xb8fc5; ret 0xfbc5; 
0x000000000001b0bb: and eax, dword ptr [rdi]; mov qword ptr [rsp - 0x10], rax; fild qword ptr [rsp - 0x10]; ret; 
0x0000000000044005: and eax, ecx; and rdx, rcx; cmp rax, rdx; setbe al; movzx eax, al; ret; 
0x00000000000c91ce: and eax, ecx; or rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000072866: and eax, ecx; or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000019dc9: and eax, ecx; ret; 
0x0000000000044038: and eax, edx; cvtsi2sd xmm0, rax; ret; 
0x00000000000700f5: and eax, edx; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8f7d: and eax, edx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000086a91: and eax, edx; movd xmm0, eax; ret; 
0x0000000000050f5a: and eax, edx; movd xmm1, eax; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000043066: and eax, edx; movq xmm0, rax; ret; 
0x00000000000430db: and eax, edx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430bc: and eax, edx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000867a4: and eax, edx; or rax, rcx; movq xmm0, rax; ret; 
0x00000000000c92b9: and eax, edx; or rax, rsi; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ec5: and eax, edx; or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000086a45: and eax, edx; or rax, rsi; movq xmm0, rax; ret; 
0x000000000001b049: and eax, edx; ret; 
0x0000000000042ff0: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000051ac4: and eax, esi; movd xmm0, eax; ret; 
0x000000000000c376: and eax, esi; ret; 
0x00000000000e77eb: and eax, esp; imul edi, dword ptr [rdi - 0x49f847b8], 0x3f454387; add byte ptr [rax], al; add dl, al; ret; 
0x00000000000dd922: and ebp, eax; wait; ret; 
0x00000000001909dd: and ebp, edi; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x00000000000b7551: and ebx, dword ptr [r10 + rbx*8 - 0x3c]; jns 0xb7581; ret 0x41c4; 
0x000000000008f33c: and ebx, dword ptr [r8 + rax*8 - 0x3c]; ret 0xb9f1; 
0x00000000000bac58: and ebx, dword ptr [r8 + rbx*8 - 0x3b]; and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000bf7b4: and ebx, dword ptr [r9 + rbx*8 - 0x3b]; ret; 
0x00000000000bac5d: and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x000000000008f33d: and ebx, dword ptr [rax + rax*8 - 0x3c]; ret 0xb9f1; 
0x00000000000bac59: and ebx, dword ptr [rax + rbx*8 - 0x3b]; and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000b74bd: and ebx, dword ptr [rax + rbx*8 - 0x3c]; jns 0xb74ec; ret; 
0x0000000000095960: and ebx, dword ptr [rbp + rbx*8 - 0x3b]; movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x0000000000092b55: and ebx, dword ptr [rbp + riz*8 - 0x3b]; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000a918a: and ebx, dword ptr [rbp + riz*8 - 0x3b]; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x00000000000aba5c: and ebx, dword ptr [rcx + 0x1c]; and al, 0xc4; ret; 
0x00000000000bf7b5: and ebx, dword ptr [rcx + rbx*8 - 0x3b]; ret; 
0x00000000000b7552: and ebx, dword ptr [rdx + rbx*8 - 0x3c]; jns 0xb7581; ret 0x41c4; 
0x00000000000a97e2: and ebx, dword ptr [rdx + riz*8 - 0x3c]; push r11; pop rax; ret 0xdbc5; 
0x00000000001067e2: and ebx, ebx; jge 0x1067df; ret; 
0x00000000000183b4: and ebx, ebx; sub eax, 0xb64a5; fmulp st(1); ret; 
0x00000000000503bd: and ecx, 0x80000000; or ecx, 1; movd xmm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x0000000000050486: and ecx, 0x807fffff; shl eax, 0x17; or eax, ecx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x00000000000182d7: and ecx, 0xcf098000; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x000000000000bbeb: and ecx, dword ptr [rax - 1]; ret; 
0x000000000007cb09: and ecx, dword ptr [rbx + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4ae8; 
0x000000000001bf79: and ecx, dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x0000000000076b4f: and ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], ebp; jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x000000000010e735: and ecx, dword ptr [rsi + 0x10fa3969]; xchg byte ptr [r14 + 0x786045bf], cl; ret; 
0x00000000000d8329: and ecx, esp; ret; 
0x0000000000069b09: and edi, dword ptr [rbx + 9]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ae8; 
0x00000000000e9f56: and edi, dword ptr [rdi + 0x2800000]; pushfq; jmp qword ptr [rbx]; 
0x00000000000eb136: and edi, dword ptr [rip - 0x761dfec8]; ret 0x40ed; 
0x00000000000778ca: and edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000010cc23: and edi, edx; ret 0x6adc; 
0x0000000000076843: and edi, esi; jmp qword ptr [rsi + 0xf]; 
0x000000000005196d: and edx, 0x7fffffff; cmp eax, edx; setbe al; movzx eax, al; ret; 
0x0000000000050ec9: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000050fed: and edx, 0x807fffff; shl edi, 0x17; or edi, edx; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x0000000000015d13: and edx, 2; lea rcx, [rip + 0xb5d93]; fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000070150: and edx, eax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007017b: and edx, eax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000006ee5f: and edx, eax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000008652c: and edx, eax; movq xmm0, rdx; ret; 
0x00000000000324a5: and edx, eax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000d7bc0: and edx, ebp; ret 0x459a; 
0x0000000000044008: and edx, ecx; cmp rax, rdx; setbe al; movzx eax, al; ret; 
0x000000000006fb3e: and edx, ecx; or rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000d5adb: and edx, edi; test ebx, edx; mov edi, 0x4487f4b8; ret; 
0x0000000000133c84: and edx, edx; pushfq; cmp al, 0xac; jae 0x133c89; pop rdx; ret; 
0x00000000001623c4: and edx, edx; pushfq; cmp al, 0xac; jae 0x1623c9; pop rdx; ret; 
0x00000000000d34c4: and edx, edx; pushfq; cmp al, 0xac; jae 0xd34c9; pop rdx; ret; 
0x000000000006eede: and edx, esi; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000c373: and esi, 0x3d; and eax, esi; ret; 
0x00000000000c78d1: and esi, 0x9487fff; ret 0x8b48; 
0x00000000000d4a91: and esi, dword ptr [rax + 0x2077e515]; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000110bc0: and esi, dword ptr [rdx]; ret 0xec4e; 
0x00000000000d6c14: and esi, eax; mov dh, 0x3f; pop rdi; ret; 
0x0000000000070be5: and esi, eax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004a56f: and esi, ebx; movups xmm1, xmmword ptr [rip + 0x7fc88]; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000499bf: and esi, ebx; ret; 
0x00000000000df5e9: and esi, ebx; sahf; movabs eax, dword ptr [0x35b00437793fe333]; rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x00000000000c2f91: and r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x000000000010cc22: and r15d, edx; ret 0x6adc; 
0x00000000000d0d82: and r8b, byte ptr [r9 + 0x30]; ret; 
0x00000000000c52b5: and r8d, 0x21487fff; ret 0x8949; 
0x00000000000c54f8: and r8d, 0x21487fff; ret 0xcae9; 
0x000000000001b0ba: and rax, qword ptr [rdi]; mov qword ptr [rsp - 0x10], rax; fild qword ptr [rsp - 0x10]; ret; 
0x0000000000044004: and rax, rcx; and rdx, rcx; cmp rax, rdx; setbe al; movzx eax, al; ret; 
0x00000000000c91cd: and rax, rcx; or rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000072865: and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000044037: and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x00000000000700f4: and rax, rdx; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8f7c: and rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000043065: and rax, rdx; movq xmm0, rax; ret; 
0x00000000000430da: and rax, rdx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430bb: and rax, rdx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000867a3: and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x00000000000c92b8: and rax, rdx; or rax, rsi; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ec4: and rax, rdx; or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000086a44: and rax, rdx; or rax, rsi; movq xmm0, rax; ret; 
0x0000000000042fef: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000007014f: and rdx, rax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007017a: and rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000006ee5e: and rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000008652b: and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000324a4: and rdx, rax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000044007: and rdx, rcx; cmp rax, rdx; setbe al; movzx eax, al; ret; 
0x000000000006fb3d: and rdx, rcx; or rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000006eedd: and rdx, rsi; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000070be4: and rsi, rax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000045b1c: andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045b1d: andnps xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000002e9e5: andpd xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045adc: andpd xmm0, xmmword ptr [rip + 0x857fc]; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000043000: andpd xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000031cf0: andpd xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x00000000000495d6: andpd xmm1, xmm4; ucomisd xmm1, xmm3; ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000045a64: andpd xmm1, xmmword ptr [rip + 0x85874]; ret; 
0x0000000000045000: andpd xmm1, xmmword ptr [rip + 0x862d8]; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000043008: andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000003d134: andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320fc: andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4ec: andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x00000000000471e5: andpd xmm2, xmm1; orpd xmm9, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000044f9c: andpd xmm2, xmm4; movsd xmm0, qword ptr [rip + 0x862e8]; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000474d5: andpd xmm2, xmmword ptr [rip + 0x83e03]; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000047777: andpd xmm3, xmm2; ucomisd xmm4, xmm3; jbe 0x47785; mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x000000000000e4e9: andpd xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x000000000000ee69: andpd xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0d9: andpd xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f180: andpd xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x000000000000e6ad: andpd xmm5, xmm1; movsd xmm4, qword ptr [rsp + 8]; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000045c47: andpd xmm5, xmm7; pop rbx; orpd xmm1, xmm5; ret; 
0x0000000000026ff8: andpd xmm6, xmmword ptr [rip + 0xa42e0]; orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x0000000000047539: andpd xmm7, xmm1; orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045b18: andpd xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000493ac: andpd xmm7, xmmword ptr [rip + 0x81f2c]; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000048ce5: andpd xmm7, xmmword ptr [rip + 0x825f3]; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000004881c: andpd xmm7, xmmword ptr [rip + 0x82abc]; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000044fa8: andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000002e9e9: andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x000000000004aa18: andps xmm0, xmm1; pop rbp; mulss xmm0, xmm2; ret; 
0x000000000002e9e6: andps xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x000000000004eba8: andps xmm0, xmm5; andps xmm7, xmmword ptr [rip + 0x7cf2e]; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x000000000004fe30: andps xmm0, xmmword ptr [rip + 0x7bc89]; ret; 
0x0000000000045add: andps xmm0, xmmword ptr [rip + 0x857fc]; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000043001: andps xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000031cf1: andps xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x00000000000495d7: andps xmm1, xmm4; ucomisd xmm1, xmm3; ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000518f0: andps xmm1, xmmword ptr [rip + 0x7a1c9]; ucomiss xmm1, dword ptr [rip + 0x7a1d2]; ja 0x51928; movd xmm0, eax; ret; 
0x00000000000501d3: andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d353: andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000045a65: andps xmm1, xmmword ptr [rip + 0x85874]; ret; 
0x0000000000045001: andps xmm1, xmmword ptr [rip + 0x862d8]; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000043009: andps xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000003d135: andps xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320fd: andps xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4ed: andps xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x000000000004aa15: andps xmm2, xmm0; andps xmm0, xmm1; pop rbp; mulss xmm0, xmm2; ret; 
0x00000000000471e6: andps xmm2, xmm1; orpd xmm9, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000044f9d: andps xmm2, xmm4; movsd xmm0, qword ptr [rip + 0x862e8]; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000474d6: andps xmm2, xmmword ptr [rip + 0x83e03]; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000047778: andps xmm3, xmm2; ucomisd xmm4, xmm3; jbe 0x47785; mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x000000000000e4ea: andps xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x000000000000ee6a: andps xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0da: andps xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f181: andps xmm4, xmm1; ucomisd xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x000000000000e6ae: andps xmm5, xmm1; movsd xmm4, qword ptr [rsp + 8]; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000045c48: andps xmm5, xmm7; pop rbx; orpd xmm1, xmm5; ret; 
0x000000000004a4e3: andps xmm6, xmmword ptr [rip + 0x815f6]; orps xmm0, xmm6; add rsp, 0x28; ret; 
0x0000000000026ff9: andps xmm6, xmmword ptr [rip + 0xa42e0]; orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x000000000004753a: andps xmm7, xmm1; orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045b19: andps xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004ebab: andps xmm7, xmmword ptr [rip + 0x7cf2e]; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x00000000000493ad: andps xmm7, xmmword ptr [rip + 0x81f2c]; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000048ce6: andps xmm7, xmmword ptr [rip + 0x825f3]; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000004881d: andps xmm7, xmmword ptr [rip + 0x82abc]; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000044fa9: andps xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000002e9ea: andps xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000190e26: bnd call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x0000000000190e96: bnd call qword ptr [rax]; 
0x000000000019a472: bnd call qword ptr [rbp + 7]; 
0x000000000019a40a: bnd call qword ptr [rdx]; 
0x0000000000190e46: bnd call rax; 
0x00000000000d1114: bnd call rsp; 
0x0000000000190e8e: bnd call rsp; test al, 0; add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x0000000000019ae0: bnd jb 0x19b90; mov ecx, 0x1f; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x000000000006eada: bnd jmp 0xf6ceae9; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000190e76: bnd jmp qword ptr [rax]; 
0x000000000019a34a: bnd jmp qword ptr [rsi]; 
0x0000000000190e2e: bnd jmp rax; 
0x0000000000016059: bnd jne 0x16096; fscale; fstp st(1); ret; 
0x00000000000e81de: bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c15e: bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9be: bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x000000000002870d: btr dword ptr [rbx], ecx; add dl, dh; divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000027e7e: call 0x101270c2; add al, 0xc2; ret; 
0x000000000004a8da: call 0x10149bfe; add al, 0x82; ret; 
0x000000000011d6c6: call 0x11d709; add byte ptr [rcx], cl; add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x000000000001f5e3: call 0x12c70; fld xword ptr [rsp + 0x20]; add rsp, 0x20; add rsp, 0x28; ret; 
0x0000000000012e43: call 0x12f10; pop rcx; pop rsi; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x000000000014bf26: call 0x14bf69; add byte ptr [rcx], cl; add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x0000000000012e15: call 0x18c5b162; ret; 
0x0000000000019edc: call 0x19ee1; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019f4e: call 0x19f53; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000002080d: call 0x1aeb0; add rsp, 0x18; fchs; ret; 
0x000000000001c6b5: call 0x1cc20; add rsp, 0x20; fchs; add rsp, 8; fxch st(1); ret; 
0x000000000001bf78: call 0x1cea0; add rsp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x00000000000bfe92: call 0x1f1bfe96; add ch, al; ret; 
0x000000000002fca4: call 0x28123e0f; sal edx, 0xf; pop rcx; ret; 
0x0000000000038f13: call 0x2812d07e; ret 0xff2; 
0x000000000007f089: call 0x281734f4; shl dword ptr [rsi + 0x44], 0xf; push rsp; ret 0x44f2; 
0x000000000001f7b1: call 0x28c67afe; fchs; fdivrp st(2); fxch st(1); ret; 
0x0000000000020541: call 0x28c6888e; fchs; fdivrp st(2); fxch st(1); ret; 
0x00000000001058f7: call 0x2976e08; ret 0xf90d; 
0x00000000000b4d24: call 0x34212; jmp qword ptr [rsi + 0xf]; 
0x00000000000174db: call 0x3dd17e10; call rdi; 
0x000000000001796b: call 0x3dd182a0; call rdi; 
0x0000000000019f1f: call 0x3fdd5ffd; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000019f79: call 0x3fdd6057; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000190e70: call 0x41190f1c; pop rbx; bnd jmp qword ptr [rax]; 
0x000000000018f716: call 0x41a81a; add byte ptr [rax], ch; sub al, ch; call rax; 
0x000000000001543c: call 0x41f3329e; pop rsp; pop r13; ret; 
0x0000000000049614: call 0x43f10; movapd xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x00000000000435c9: call 0x441445c0; and al, 0xe8; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x000000000018f7ce: call 0x4440d2; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x0000000000020832: call 0x44f812b1; and al, 0xf; je 0x2084f; fstp st(1); ret; 
0x0000000000020842: call 0x44f812c1; and al, 0x1f; je 0x2084f; fstp st(1); ret; 
0x0000000000020872: call 0x44f812f1; and al, 0xf; je 0x2088f; fstp st(1); ret; 
0x0000000000020882: call 0x44f81301; and al, 0x1f; je 0x2088f; fstp st(1); ret; 
0x00000000000531d1: call 0x453bf; jmp qword ptr [rsi + 0xf]; 
0x00000000000762db: call 0x480762e0; add esp, 0x40; pop rbx; ret; 
0x0000000000086a40: call 0x48d9618d; and eax, edx; or rax, rsi; movq xmm0, rax; ret; 
0x0000000000043fdd: call 0x48f4712a; xor edx, ecx; cmp rdx, rax; setle al; movzx eax, al; ret; 
0x000000000018f926: call 0x4e1e2a; add byte ptr [rax], ch; mov ch, al; jmp qword ptr [rax + 0x35]; 
0x0000000000056d93: call 0x518d0; movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000018fb06: call 0x57c40a; add byte ptr [rax - 0x2e], ch; call 0x57ec12; add byte ptr [rax], bl; shr eax, cl; jmp qword ptr [rax]; 
0x000000000018fb0e: call 0x57ec12; add byte ptr [rax], bl; shr eax, cl; jmp qword ptr [rax]; 
0x000000000009c0c0: call 0x580285e4; sar byte ptr [rax], 0xc2; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x000000000002fc9f: call 0x58124196; call 0x28123e0f; sal edx, 0xf; pop rcx; ret; 
0x0000000000047983: call 0x5813bb7a; ret 0xff2; 
0x000000000002486b: call 0x59118e62; ret; 
0x000000000002503a: call 0x59119631; ret; 
0x0000000000026808: call 0x5911adff; ret 0x4466; 
0x000000000003407b: call 0x59128272; ret 0x44f2; 
0x000000000007fe21: call 0x59174018; ret; 
0x000000000007fce6: call 0x591741dd; ret; 
0x0000000000080bf2: call 0x5917fdf8; ret 0x3948; 
0x00000000000b6846: call 0x5946aa0f; ret; 
0x00000000000b6fba: call 0x5946b183; ret; 
0x00000000000b8658: call 0x5946c821; ret 0x79c5; 
0x00000000000ba6bc: call 0x59876885; ret 0x3bc5; 
0x00000000000bf151: call 0x5987b31a; ret; 
0x00000000000bfbf7: call 0x5987bdc0; ret; 
0x00000000000c0f15: call 0x5987d0de; ret; 
0x00000000000b8c74: call 0x5da62; inc ebp; ret; 
0x0000000000044fa4: call 0x6604580b; andps xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000440b6: call 0x66c64a03; movq mm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000044125: call 0x66c64a72; movq mm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000019f9d: call 0x6cdcdf7d; and al, 8; ret; 
0x00000000000ff4e6: call 0x701a862a; ret 0x7150; 
0x0000000000017c81: call 0x7025e961; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x000000000007c39c: call 0x742d0; pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x00000000000e73be: call 0x78148802; ret 0x4f00; 
0x000000000011b33e: call 0x7817c782; ret 0x4f00; 
0x0000000000149cde: call 0x781ab122; ret 0x4f00; 
0x0000000000177c1e: call 0x781d9062; ret 0x4f00; 
0x00000000000cd910: call 0x7c0d1b08; fiadd word ptr fs:[rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000010ac90: call 0x7c10ee88; fiadd word ptr fs:[rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000002e943: call 0x7fd56e49; div ebx; ret; 
0x000000000004e603: call 0x7fd76b09; div ebx; ret; 
0x000000000002e8eb: call 0x7ff96df1; div ebx; ret; 
0x0000000000015da9: call 0x8e1e0b3; lea rcx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x000000000001b1b1: call 0x943a089; ret; 
0x0000000000085ec3: call 0xb8a0; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x00000000000421dd: call 0xb8a0; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000000c36a: call 0xb8a0; nop; movzx eax, word ptr [rdi]; and esi, 0x3d; and eax, esi; ret; 
0x0000000000049f2c: call 0xba10; addss xmm0, dword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x0000000000050e60: call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000027108: call 0xba50; movsd xmm1, qword ptr [rip + 0xa4993]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000000bcee: call 0xba70; call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x000000000000bcf3: call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x0000000000015cab: call 0xc410; add rsp, 0x28; ret; 
0x00000000000c8d72: call 0xc4df0; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ff6: call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c9987: call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; ret; 
0x00000000000c8bc4: call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000c937c: call 0xc4df0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000007489c: call 0xc4e80; add rsp, 0x18; ret; 
0x0000000000072c19: call 0xc4e80; add rsp, 0x20; pop rbx; ret; 
0x000000000006b93c: call 0xc4e80; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb64: call 0xc4e80; add rsp, 0x28; ret; 
0x000000000006ad61: call 0xc4e80; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000006ea7e: call 0xc4e80; add rsp, 0x30; pop rbx; ret; 
0x0000000000057d96: call 0xc4e80; add rsp, 0x38; ret; 
0x000000000006b115: call 0xc4e80; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000069b44: call 0xc4e80; add rsp, 0x40; pop rbx; ret; 
0x000000000006bc6c: call 0xc4e80; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000007c98c: call 0xc4e80; add rsp, 0x48; ret; 
0x000000000005777a: call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000058434: call 0xc4e80; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x00000000000742b3: call 0xc4e80; add rsp, 0xf8; pop rbx; pop rbp; ret; 
0x00000000000586db: call 0xc4e80; movaps xmmword ptr [rsp + 0x20], xmm0; add rsp, 0x30; pop rbx; ret; 
0x000000000006e752: call 0xc4e80; movdqa xmm2, xmm0; add rsp, 0x30; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006c44c: call 0xc4e80; movdqa xmm2, xmm0; add rsp, 0x50; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006f794: call 0xc6150; add rsp, 0x18; ret; 
0x0000000000059212: call 0xc6150; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000006994f: call 0xc6150; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057e3d: call 0xc6150; add rsp, 0x38; ret; 
0x00000000000589df: call 0xc6150; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000005730b: call 0xc6150; add rsp, 0x50; pop rbx; ret; 
0x0000000000057f51: call 0xc6150; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000006f774: call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000058c1c: call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000069964: call 0xc6d90; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000069b85: call 0xc6d90; add rsp, 0x40; pop rbx; ret; 
0x000000000007de7d: call 0xc6d90; movdqa xmm2, xmm0; add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000007297b: call 0xc7880; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000006eb6d: call 0xc7880; add rsp, 0x30; pop rbx; ret; 
0x0000000000057e34: call 0xc7880; movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x38; ret; 
0x0000000000057302: call 0xc7880; movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x50; pop rbx; ret; 
0x000000000006c3b4: call 0xc7880; movdqa xmm2, xmm0; add rsp, 0x50; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000007c501: call 0xc8b50; test rax, rax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000071faa: call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x00000000000723b4: call 0xc8fa0; add rsp, 0x18; ret; 
0x000000000006f761: call 0xc9110; add rsp, 0x18; ret; 
0x000000000007d80b: call 0xc9460; test rax, rax; jg 0x7d820; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007db22: call 0xc9460; test rax, rax; jg 0x7db40; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007262b: call 0xc9660; test rax, rax; jns 0x72670; movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x000000000007dcbe: call 0xc9880; test rax, rax; je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000072d9a: call 0xc9880; test rax, rax; setne al; movzx eax, al; add rsp, 0x28; ret; 
0x00000000000cf917: call 0xdb932; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x8d1; 
0x000000000000d33a: call 0xe060; add rsp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000000d125: call 0xe060; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000cb8e: call 0xe060; add rsp, 0x28; ret; 
0x00000000000e9746: call 0xe9789; add byte ptr [rcx], cl; add al, ch; mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x00000000000128dc: call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000051a49: call 0xffffffff80051a5b; jg 0x519d9; ret 0xf66; 
0x00000000000f0886: call 0xffffffff802740ca; add dword ptr [rcx], 0x38; test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x0000000000124806: call 0xffffffff802a804a; add dword ptr [rcx], 0x38; test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x0000000000153066: call 0xffffffff802d68aa; add dword ptr [rcx], 0x38; test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x00000000000023f2: call 0xffffffff82f4948d; mov esp, 0x87919e45; ret; 
0x000000000000c4e8: call 0xffffffff83cb2835; ret 0x4801; 
0x00000000000186cd: call 0xffffffff856868b0; fstp xword ptr [rcx + 2]; fchs; pop rbx; ret; 
0x00000000000d7442: call 0xffffffff8fd6957a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000f38e2: call 0xffffffff8fd85a1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000127582: call 0xffffffff8fdb96ba; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000137922: call 0xffffffff8fdc9a5a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000155da2: call 0xffffffff8fde7eda; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000166062: call 0xffffffff8fdf819a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000179e42: call 0xffffffff8fe0bf7a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000184be2: call 0xffffffff8fe16d1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000018ff1c: call 0xffffffff9118ea6e; push rbx; add byte ptr [rax], al; mov byte ptr [rax - 0x15], dl; call rax; 
0x00000000000c4b19: call 0xffffffff9b1c0bf7; ret 0xe1de; 
0x0000000000190a38: call 0xffffffffb8190ac8; out dx, eax; jmp qword ptr [rax]; 
0x00000000000db6b8: call 0xffffffffbdc8284a; ret; 
0x00000000000f7b58: call 0xffffffffbdc9ecea; ret; 
0x000000000012b7f8: call 0xffffffffbdcd298a; ret; 
0x000000000013bb98: call 0xffffffffbdce2d2a; ret; 
0x000000000015a018: call 0xffffffffbdd011aa; ret; 
0x000000000016a2d8: call 0xffffffffbdd1146a; ret; 
0x000000000017e0b8: call 0xffffffffbdd2524a; ret; 
0x0000000000188e58: call 0xffffffffbdd2ffea; ret; 
0x00000000000e81eb: call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c16b: call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9cb: call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000519f8: call 0xffffffffc0051a0a; jg 0x51988; ret 0xf66; 
0x00000000000ece6d: call 0xffffffffc00f8d97; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000120ded: call 0xffffffffc012cd17; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000014f64d: call 0xffffffffc015b577; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x00000000000323d1: call 0xffffffffc05c33c8; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x00000000000e73ae: call 0xffffffffc0a12cf2; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x78148802; ret 0x4f00; 
0x000000000011b32e: call 0xffffffffc0a46c72; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x7817c782; ret 0x4f00; 
0x0000000000149cce: call 0xffffffffc0a75612; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781ab122; ret 0x4f00; 
0x0000000000177c0e: call 0xffffffffc0aa3552; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781d9062; ret 0x4f00; 
0x00000000000afb3c: call 0xffffffffc40b0151; ret; 
0x0000000000087e44: call 0xffffffffc50886d6; jns 0x87e73; ffreep st(5); ret; 
0x00000000000b9cf4: call 0xffffffffc50ba27d; stc; push rsp; ret; 
0x00000000000181a6: call 0xffffffffc8da4284; fstp st(0); pop rbx; pop rbp; ret; 
0x0000000000051945: call 0xffffffffca37097b; cmp edx, eax; setle al; movzx eax, al; ret; 
0x00000000000de746: call 0xffffffffd471a88a; out 0x8c, al; ret 0xbfd4; 
0x00000000000fabe6: call 0xffffffffd4736d2a; out 0x8c, al; ret 0xbfd4; 
0x000000000012e886: call 0xffffffffd476a9ca; out 0x8c, al; ret 0xbfd4; 
0x000000000013ec26: call 0xffffffffd477ad6a; out 0x8c, al; ret 0xbfd4; 
0x000000000015d0a6: call 0xffffffffd47991ea; out 0x8c, al; ret 0xbfd4; 
0x000000000016d366: call 0xffffffffd47a94aa; out 0x8c, al; ret 0xbfd4; 
0x0000000000181146: call 0xffffffffd47bd28a; out 0x8c, al; ret 0xbfd4; 
0x000000000018bee6: call 0xffffffffd47c802a; out 0x8c, al; ret 0xbfd4; 
0x00000000000ca39e: call 0xffffffffd64445e2; ret; 
0x00000000000443e3: call 0xffffffffd9fb8be9; test rdx, rdx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x000000000004441e: call 0xffffffffd9fb8c24; test rdx, rdx; cmovs rax, rcx; ret; 
0x0000000000044934: call 0xffffffffd9fb913a; test rdx, rdx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x000000000004496e: call 0xffffffffd9fb9174; test rdx, rdx; cmovs rax, rcx; ret; 
0x0000000000051cf6: call 0xffffffffd9fc64fc; test edx, edx; cmovs rax, rcx; ret; 
0x0000000000052236: call 0xffffffffd9fc6a3c; test edx, edx; cmovs rax, rcx; ret; 
0x0000000000105c0e: call 0xffffffffda108a52; ret; 
0x0000000000017339: call 0xffffffffe425d817; ret; 
0x0000000000017f59: call 0xffffffffe425e437; ret; 
0x00000000000187f3: call 0xffffffffe425ecd1; ret; 
0x0000000000018c52: call 0xffffffffe425f130; ret; 
0x00000000000d9a00: call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5ea0: call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b40: call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ee0: call 0xffffffffe56a1dbb; ret 0x3f84; 
0x0000000000158360: call 0xffffffffe56c023b; ret 0x3f84; 
0x0000000000168620: call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c400: call 0xffffffffe56e42db; ret 0x3f84; 
0x00000000001871a0: call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000862b4: call 0xffffffffe8086b0b; ret; 
0x00000000000180f6: call 0xffffffffe825edd6; pop rbx; pop rbp; ret; 
0x0000000000018c1c: call 0xffffffffe825f8fc; ret; 
0x000000000001af6c: call 0xffffffffe8261c4c; ret; 
0x00000000000435c5: call 0xffffffffe8287aa7; movsd xmm0, qword ptr [rsp - 0x18]; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x0000000000107a7e: call 0xffffffffe9d634c2; push rbx; sub bh, ah; rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x0000000000045b78: call 0xffffffffea045b7b; imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000012b80: call 0xffffffffeae0f65e; fstp st(1); jbe 0x12a58; fstp st(1); ret; 
0x000000000001b26b: call 0xffffffffec25fef9; mov word ptr [rsp - 0x10], dx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000004d690: call 0xffffffffef143cb4; sar byte ptr [rax], 0xc2; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x0000000000190674: call 0xfffffffff118f4a5; jbe 0x19067b; add al, bl; out dx, al; jmp qword ptr [rax]; 
0x000000000001700d: call 0xfffffffff1e050eb; ret; 
0x0000000000017058: call 0xfffffffff1e05136; ret; 
0x0000000000016190: call 0xfffffffff3e02673; fsubrp st(2); fmulp st(1); ret; 
0x0000000000019b74: call 0xfffffffff6260852; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019c8c: call 0xfffffffff626096a; mov rax, qword ptr [rsp - 0x18]; ret; 
0x00000000000435cf: call 0xfffffffff9e31fb0; fstp qword ptr [rsi]; ret; 
0x000000000001965a: call 0xffffffffff26fc9f; jg 0x195ea; ret 0xb70f; 
0x00000000000197bf: call 0xffffffffff26fe04; jg 0x1974f; ret 0xb70f; 
0x00000000000bc5c8: call 0xfffffffffff920b6; jmp qword ptr [rsi - 0x70]; 
0x0000000000030a74: call 0xfffffffffffac762; jmp qword ptr [rsi + 0xf]; 
0x000000000018f867: call ptr [rax + 0x2f]; add byte ptr [rax], al; mov byte ptr [rbp - 0x18], bl; call rax; 
0x00000000000e3ea3: call ptr [rax + 0x6b]; hlt; call ptr [rax + 0x6b]; hlt; jmp qword ptr [rax + 0x67]; 
0x00000000000e3ea7: call ptr [rax + 0x6b]; hlt; jmp qword ptr [rax + 0x67]; 
0x0000000000190147: call ptr [rax - 0x57ffffa3]; out 0xeb, eax; call rax; 
0x00000000000ccd0b: call ptr [rax]; mov esi, esp; inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x000000000005219a: call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001092f7: call ptr [rcx - 0x30]; cwde; ret 0x2b9d; 
0x00000000000e9818: call ptr [rdi + 3]; add bh, dh; call rdi; 
0x000000000003ce54: call ptr [rdi]; add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg dword ptr [rdi + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000000dca4c: call ptr [rdi]; sar byte ptr [rdi - 0x30686fff], 1; call qword ptr [rbx]; 
0x0000000000047dfe: call qword ptr [rax + 0x157e0ff3]; fdiv dword ptr [rax + rcx]; add byte ptr [rsi + 0xf], ah; push rsp; ret 0xf66; 
0x000000000018f4b7: call qword ptr [rax + 0x1d]; 
0x000000000018f4ef: call qword ptr [rax + 0x1e]; 
0x000000000018f557: call qword ptr [rax + 0x20]; 
0x000000000018f5a7: call qword ptr [rax + 0x22]; 
0x000000000018f5c7: call qword ptr [rax + 0x23]; 
0x000000000018f627: call qword ptr [rax + 0x25]; 
0x000000000018f8c7: call qword ptr [rax + 0x32]; 
0x0000000000109c11: call qword ptr [rax + 0x3a]; 
0x000000000018fa5f: call qword ptr [rax + 0x3b]; 
0x000000000018faaf: call qword ptr [rax + 0x3d]; 
0x000000000018fba7: call qword ptr [rax + 0x43]; 
0x000000000018fcaf: call qword ptr [rax + 0x48]; 
0x000000000018fd4f: call qword ptr [rax + 0x4c]; 
0x000000000018fe77: call qword ptr [rax + 0x51]; 
0x0000000000190057: call qword ptr [rax + 0x59]; 
0x000000000008083e: call qword ptr [rax + 0x5c415d5b]; ret; 
0x0000000000190167: call qword ptr [rax + 0x5e]; 
0x000000000019037f: call qword ptr [rax + 0x66]; 
0x0000000000030d5e: call qword ptr [rax + 0x69058b48]; ret 0x36; 
0x0000000000190597: call qword ptr [rax + 0x71]; 
0x000000000019070f: call qword ptr [rax + 0x7a]; 
0x000000000019533b: call qword ptr [rax + 2]; 
0x00000000001967d3: call qword ptr [rax + 7]; 
0x00000000000a2f4a: call qword ptr [rax - 0x3b]; 
0x00000000000a2f4a: call qword ptr [rax - 0x3b]; retf; pop rsp; inc ebp; ret; 
0x00000000000182b3: call qword ptr [rax - 0x3d]; 
0x0000000000190e27: call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x000000000000c36e: call qword ptr [rax - 0x7cf848f1]; out 0x3d, al; and eax, esi; ret; 
0x0000000000197847: call qword ptr [rax]; 
0x000000000018fc67: call qword ptr [rax]; add byte ptr [r8], r8b; cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000190a1f: call qword ptr [rax]; mov eax, dword ptr [rax]; add byte ptr [rax], cl; cmp bh, ch; jmp qword ptr [rax - 0x75]; 
0x000000000010be2f: call qword ptr [rbp + 0x16]; 
0x000000000000e05f: call qword ptr [rbp + 0x53]; 
0x0000000000198d9b: call qword ptr [rbp + 3]; 
0x000000000019990b: call qword ptr [rbp + 5]; 
0x000000000019a473: call qword ptr [rbp + 7]; 
0x00000000000d4114: call qword ptr [rbp - 0x11]; 
0x000000000010b8e7: call qword ptr [rbp - 0x58]; 
0x000000000019100b: call qword ptr [rbp]; 
0x00000000000558df: call qword ptr [rbx + 0x48]; 
0x00000000001027d4: call qword ptr [rbx + 0x6d]; 
0x000000000019307b: call qword ptr [rbx + 1]; 
0x00000000001931ab: call qword ptr [rbx + 2]; 
0x000000000008612d: call qword ptr [rbx + 8]; 
0x0000000000112591: call qword ptr [rbx - 0x29]; 
0x00000000000dc955: call qword ptr [rbx - 0x44]; 
0x0000000000113b53: call qword ptr [rbx - 0x76]; 
0x0000000000113b53: call qword ptr [rbx - 0x76]; mov cs, word ptr [rdx]; ret; 
0x0000000000192ebb: call qword ptr [rbx]; 
0x000000000005db8d: call qword ptr [rcx + 0xf660006]; 
0x000000000019259b: call qword ptr [rcx + 1]; 
0x000000000019a0e3: call qword ptr [rcx + 2]; 
0x00000000001982f3: call qword ptr [rcx + 5]; 
0x0000000000106146: call qword ptr [rcx - 0x20]; 
0x00000000000ce675: call qword ptr [rcx - 0x48]; 
0x000000000007f9cd: call qword ptr [rcx]; 
0x000000000004f0dd: call qword ptr [rdi + 0x3f]; 
0x00000000001933bb: call qword ptr [rdi + 4]; 
0x00000000000017a9: call qword ptr [rdi - 0x71]; 
0x000000000010306c: call qword ptr [rdi - 0xb]; 
0x000000000010306c: call qword ptr [rdi - 0xb]; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x0000000000102d2c: call qword ptr [rdi - 3]; 
0x0000000000101d0c: call qword ptr [rdi - 4]; 
0x0000000000191b6b: call qword ptr [rdi]; 
0x0000000000191123: call qword ptr [rdx + 1]; 
0x00000000001970eb: call qword ptr [rdx + 2]; 
0x000000000019238b: call qword ptr [rdx + 3]; 
0x0000000000198a87: call qword ptr [rdx + 4]; 
0x0000000000174019: call qword ptr [rdx]; 
0x0000000000195f23: call qword ptr [rsi + 0xa]; 
0x000000000006e17d: call qword ptr [rsi + 0xf660005]; 
0x000000000019905b: call qword ptr [rsi + 3]; 
0x0000000000193c83: call qword ptr [rsi + 6]; 
0x00000000000cdb58: call qword ptr [rsi - 0x17]; 
0x00000000000aad08: call qword ptr [rsi]; 
0x000000000000b800: call rax; 
0x000000000000b800: call rax; add rsp, 8; ret; 
0x000000000001ab5d: call rbx; 
0x00000000000dba41: call rcx; 
0x00000000000174e0: call rdi; 
0x00000000000cf3d4: call rdx; 
0x00000000000ddc45: call rsi; 
0x00000000000cb733: call rsp; 
0x0000000000190e8f: call rsp; test al, 0; add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x000000000003d1fb: cdq; add al, 0; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x0000000000041263: cdq; add dword ptr [rax], eax; add dh, dh; ret; 
0x000000000009c651: cdq; add eax, 0xa6979; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000008f2b8: cdq; cdq; ret; 
0x0000000000081ee7: cdq; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000044d12: cdq; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000001126ab: cdq; cmp byte ptr [rbp + 0x61], dl; cmp al, 0x83; int 0xa7; ret; 
0x000000000008f57f: cdq; fadd st(5), st(0); ret; 
0x000000000001dc03: cdq; fdiv st(6), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000009c394: cdq; fld st(5); sti; pop rcx; ret; 
0x000000000011a24d: cdq; jb 0x11a20c; ret 0x1c5e; 
0x0000000000148bed: cdq; jb 0x148bac; ret 0x1c5e; 
0x0000000000176b2d: cdq; jb 0x176aec; ret 0x1c5e; 
0x00000000000e628d: cdq; jb 0xe624c; ret 0x1c5e; 
0x0000000000123413: cdq; jbe 0x1233a3; ret; 
0x0000000000151c73: cdq; jbe 0x151c03; ret; 
0x00000000000ef493: cdq; jbe 0xef423; ret; 
0x000000000007d5b3: cdq; jl 0x7d5be; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa0e8; 
0x00000000000943fc: cdq; mov ah, 0xc1; jnp 0x9445a; ret 0xbbc5; 
0x0000000000094fc0: cdq; mov ah, 0xc1; jnp 0x9501e; ret 0xbbc5; 
0x0000000000092b51: cdq; mov ebp, 0x5c23c5c5; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000b2f03: cdq; mov ebp, esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000e8c90: cdq; mov ebx, dword ptr [rdi + 0x1a]; ret 0x2e01; 
0x000000000008fc60: cdq; mov ecx, 0xc450246c; ret 0xb999; 
0x00000000000e5a42: cdq; movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x0000000000031944: cdq; or dword ptr [rax], eax; ret; 
0x00000000001907dd: cdq; out dx, al; call qword ptr [rax]; 
0x00000000000e5a6d: cdq; push rsp; cmp al, 2; ret 0x2a49; 
0x00000000000e5683: cdq; ret 0x63f9; 
0x0000000000110210: cdq; ret 0xbc29; 
0x000000000011437c: cdq; ret 0xbf8b; 
0x0000000000108e35: cdq; ret 0xc04a; 
0x000000000008f8ce: cdq; ret 0xc1c4; 
0x000000000008f2b4: cdq; ret 0xc2c4; 
0x000000000007c595: cdq; ret 0xdb84; 
0x000000000008a828: cdq; ret 0xe2c4; 
0x00000000000f14e3: cdq; ret 0xf357; 
0x000000000008b7f7: cdq; ret 0xf3c5; 
0x000000000009c3db: cdq; ret 0xfbc5; 
0x000000000008b9eb: cdq; ret; 
0x000000000008cc5f: cdq; rol ah, 0xc1; jnp 0x8ccbd; ret; 
0x000000000009b9fb: cdq; rol ebp, 0xfb; pop rcx; and al, 0xf0; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c85c: cdq; rol ebp, 1; sti; pop rcx; ret 0xfbc5; 
0x00000000000943ce: cdq; rol esp, 0xc1; jnp 0x9442c; ret; 
0x0000000000094f92: cdq; rol esp, 0xc1; jnp 0x94ff0; ret; 
0x0000000000090e86: cdq; test eax, 0xc4102444; ret 0xbdc9; 
0x000000000008bf59: cdq; vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x00000000000d6042: cdq; xchg dword ptr [rax + 0x5c3c871e], esi; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x000000000011467c: cdqe; mov edi, dword ptr [rdi]; jp 0x1146c2; sub ebp, dword ptr [rsp + rsi*4 - 0x52f1463b]; fld dword ptr [rbx]; ret; 
0x000000000018fb94: clc; adc ebp, ecx; jmp qword ptr [rax]; 
0x00000000000c7269: clc; add al, 0x74; or ecx, dword ptr [rcx - 0x7d]; ret 0x4904; 
0x00000000000915a6: clc; add al, ch; sti; pop rsp; ret; 
0x000000000001df24: clc; add bl, cl; ret; 
0x00000000000742bb: clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000cdc72: clc; add byte ptr [rdx + 0x3600eb7e], cl; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x000000000001df19: clc; add dword ptr [rdi], ecx; mov ds, word ptr [rdi]; add al, byte ptr [rax]; add cl, bl; ret; 
0x000000000010f814: clc; and al, 0x83; ret 0xbfbc; 
0x00000000000c8f7b: clc; and rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c8ec3: clc; and rax, rdx; or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000005c03d: clc; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000001905d4: clc; cmc; in eax, dx; jmp qword ptr [rax]; 
0x00000000000d9cb3: clc; cmp eax, 0xec3c8d6d; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x00000000000fdebc: clc; cmpsb byte ptr [rsi], byte ptr [rdi]; cmp esi, esp; ret 0xfe9e; 
0x00000000000eb0c0: clc; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x000000000000d2e5: clc; dec dword ptr [rdi]; xchg esp, eax; ret 0xf883; 
0x000000000001e95e: clc; fxch st(1); leave; ret; 
0x000000000019019c: clc; imul bl; jmp qword ptr [rax]; 
0x0000000000198788: clc; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000190aec: clc; jae 0x190ade; call rax; 
0x0000000000042f57: clc; jg 0x42fa2; cmp eax, edx; seta al; movzx eax, al; ret; 
0x000000000007dac4: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000080165: clc; jmp qword ptr [rsi + 0xf]; 
0x000000000008200c: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000000c8dfa: clc; jne 0xc8d6a; add rsp, 0x28; ret; 
0x000000000018ffac: clc; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x000000000001cf4f: clc; leave; fxch st(1); ret; 
0x000000000001c9b6: clc; leave; ret; 
0x000000000004eb04: clc; mov dh, 7; add bl, dh; subps xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000001b32b: clc; mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x000000000006ab44: clc; mov eax, dword ptr [rdi]; add byte ptr [rsi + 0xf], ah; out dx, eax; ret 0xf66; 
0x0000000000018ef7: clc; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x0000000000015e82: clc; mov edx, dword ptr [rsp - 4]; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x00000000000e8c8e: clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x0000000000032220: clc; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000321e3: clc; movapd xmm0, xmm1; ret; 
0x000000000000f396: clc; movapd xmm2, xmm0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000075448: clc; movaps xmmword ptr [rdi], xmm0; movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000031a8d: clc; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000321dd: clc; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000003221a: clc; movsd xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000525a8: clc; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000c4539: clc; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000525c5: clc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000525d5: clc; movss xmm0, dword ptr [rsp - 8]; ret; 
0x0000000000086a8e: clc; not eax; and eax, edx; movd xmm0, eax; ret; 
0x0000000000051915: clc; or al, byte ptr [rax]; ret; 
0x0000000000044ce4: clc; or byte ptr gs:[rax], al; ret; 
0x000000000008b07c: clc; or eax, 0x897fe083; ret 0xe2c1; 
0x0000000000027e5c: clc; or rax, r9; movq xmm0, rax; ret; 
0x0000000000197ab8: clc; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x000000000019020c: clc; paddsb mm7, mm7; mov eax, 0x18000060; adc ah, ch; call rax; 
0x00000000000dba35: clc; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000dd17c: clc; pop rdi; ret 0xca3f; 
0x000000000009c0c3: clc; push rdi; sar byte ptr [rax], 0xc2; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x00000000000e5f13: clc; push rdx; xchg ebp, eax; ret 0xbf3f; 
0x00000000000ef373: clc; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x00000000000e371a: clc; ret 0x6e1f; 
0x00000000000e9c22: clc; ret 0xff7b; 
0x0000000000019a8d: clc; ret; 
0x00000000001902fc: clc; sbb al, 0xec; call rax; 
0x000000000006c071: clc; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000049647: clc; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x000000000004965f: clc; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049687: clc; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x000000000004969f: clc; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000019a87: clc; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x00000000000e6bd0: clc; xchg dword ptr [rbx + rsi*8], ebx; ret; 
0x000000000010c515: clc; xor al, 0xdb; cmp al, 0xb9; ret; 
0x000000000001c363: clc; xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x00000000000eb131: cld; adc dword ptr [rdi - 0x11], esi; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x00000000000cd9d6: cld; add byte ptr [rcx], dh; test al, 0x27; add cl, dh; outsb dx, byte ptr [rsi]; ret; 
0x0000000000015cce: cld; add dword ptr [rcx + rcx - 0x23], esi; fcomp st(5); add eax, 0xb55e6; ret; 
0x000000000004276a: cld; add dword ptr [rdi], ecx; test eax, eax; add al, byte ptr [rax]; add dh, dh; ret; 
0x00000000000207b6: cld; add eax, 0x8b483874; add eax, 0x37c7f7; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000015e86: cld; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x00000000000d43d4: cld; cli; mov ebx, 0xa8bc2240; ret; 
0x00000000000cfc64: cld; cmp eax, 0xdbdd3ff3; in al, dx; jmp qword ptr [rbx + 0x22]; 
0x00000000001149a0: cld; fcomp qword ptr [r10 - 0x42]; push r12; jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x0000000000016057: cld; fcompi st(2); jne 0x16096; fscale; fstp st(1); ret; 
0x0000000000019fd3: cld; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000019fd7: cld; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000017330: cld; fnstsw ax; and eax, 1; or dword ptr [rsp - 0x18], eax; fldenv [rsp - 0x1c]; ret; 
0x00000000000421e0: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000042498: cld; jmp qword ptr [rsi + 0x48]; 
0x0000000000043575: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000454ec: cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000015a5c: cld; jne 0x15a62; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aa7: cld; jne 0x15aad; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015af0: cld; jne 0x15af6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015b37: cld; jne 0x15b3d; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018ab0: cld; jne 0x18ab6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018af7: cld; jne 0x18afd; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000112305: cld; mov cl, 0x3f; movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x0000000000069950: cld; mov dword ptr [rip - 0x3b7cb800], 0x415d5b30; pop rsp; ret; 
0x00000000000e449e: cld; mov ebx, 0xc1abdcd; ret; 
0x0000000000101cce: cld; mov edi, 0x1c27bcce; test ch, dh; ret 0xe7fc; 
0x00000000000c453f: cld; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000e4d08: cld; or ch, byte ptr [rdi - 0x6ef19988]; cmp esi, dword ptr [rax]; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x000000000010e439: cld; out 0x20, eax; push -0x37c00089; outsb dx, byte ptr [rsi]; ret 0x6b8e; 
0x0000000000049f2f: cld; push rbx; addps xmm0, xmmword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x0000000000045ae0: cld; push rdi; or byte ptr [rax], al; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000107a85: cld; rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x00000000000e439c: cld; ret 0x3c02; 
0x00000000000cc1b3: cld; ret 0x3d6f; 
0x000000000010c589: cld; ret 0x5bf0; 
0x00000000000edd4a: cld; ret 0x5e0f; 
0x00000000000dd488: cld; ret 0x6d4f; 
0x00000000001108b4: cld; ret 0x8d6c; 
0x00000000001074e4: cld; ret 0xc883; 
0x00000000000fc812: cld; ret 0xddff; 
0x000000000006aa90: cld; ret 5; 
0x0000000000016ae3: cld; ret; 
0x0000000000056dc5: cld; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056ddc: cld; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e05: cld; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e1c: cld; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000016ade: cld; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x00000000000ff8e0: cld; xchg dword ptr [rdi], eax; sub rax, -0x49c012f9; ret 0x7ba2; 
0x00000000000e37fb: cld; xchg esi, eax; mov dl, 0x65; jle 0xe379d; ret; 
0x000000000010e739: cli; adc byte ptr [rcx + 0x41], cl; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x000000000009c0d5: cli; adc byte ptr [rip + 0x2e124], cl; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009c047: cli; adc byte ptr [rsp - 0x10], bh; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000009bc71: cli; adc byte ptr [rsp - 0xc], al; ret; 
0x000000000009cd32: cli; adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cd5e: cli; adc dword ptr [rdi], ecx; ret; 
0x000000000009ccd6: cli; adc dword ptr [rsi], eax; ret; 
0x000000000009cd5a: cli; adc dword ptr [rsi], ecx; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009cb2a: cli; adc dword ptr [rsi], esi; ret; 
0x0000000000086781: cli; add byte ptr [rax + rax], al; add byte ptr [rbp - 0xc], dh; addsd xmm0, xmm0; ret; 
0x0000000000091e9d: cli; add ecx, dword ptr [rdi]; test ah, cl; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe06], al; ret; 
0x000000000000db0f: cli; add rsp, 8; ret; 
0x0000000000080233: cli; and cl, byte ptr [rdi]; mov es, word ptr [rdi + 0x66000001]; movaps xmm0, xmm2; ret; 
0x00000000000b0183: cli; and cl, byte ptr [rdi]; mov es, word ptr [rip - 0x3affffff]; stc; sub dl, al; ret; 
0x0000000000045b1b: cli; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000fdebb: cli; clc; cmpsb byte ptr [rsi], byte ptr [rdi]; cmp esi, esp; ret 0xfe9e; 
0x00000000000ff88a: cli; cmp eax, 0x3fec9955; ret 0x51c4; 
0x0000000000012901: cli; fabs; fxch st(1); fpatan; ret; 
0x00000000000134c9: cli; faddp st(1); ret; 
0x0000000000042df0: cli; imul rax, rdx; ret; 
0x00000000001905dd: cli; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x00000000000e3e72: cli; inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x000000000011c15b: cli; jae 0x11c132; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9bb: cli; jae 0x14a992; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000e81db: cli; jae 0xe81b2; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000007db52: cli; jbe 0x7db5d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000008effe: cli; jle 0x8f01e; stosd dword ptr [rdi], eax; ret 3; 
0x00000000000906c4: cli; jle 0x906ec; push rbp; ret 6; 
0x00000000000a7073: cli; jle 0xa709b; cmpsb byte ptr [rsi], byte ptr [rdi]; pop rax; add eax, 0x2879c500; ret; 
0x00000000000632c2: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000005c03e: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000005e65c: cli; jmp qword ptr [rsi - 0x70]; 
0x000000000007d652: cli; jnp 0x7d65d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000d43d5: cli; mov ebx, 0xa8bc2240; ret; 
0x00000000000e6e42: cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x00000000000504b2: cli; or dword ptr [rbx], ecx; add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000077c02: cli; or esi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000cbc11: cli; out dx, al; ret 0x705f; 
0x00000000000d45a9: cli; push qword ptr [rcx + 0x4000a58d]; ret; 
0x0000000000102f5c: cli; ret 0x3f8d; 
0x000000000010e834: cli; ret 0xeb42; 
0x000000000010bc06: cli; ret 0xec6f; 
0x00000000000162a5: cli; ret; 
0x00000000000d6e04: cli; sar qword ptr [rdi + 0x1737ca6d], 0xda; ret 0x3f9e; 
0x0000000000049760: cli; std; ja 0x49770; add rsp, 8; ret; 
0x0000000000056ee0: cli; std; ja 0x56ef0; add rsp, 8; ret; 
0x000000000007c640: cli; std; ja 0x7c650; add rsp, 8; ret; 
0x0000000000020979: cli; std; pop rsi; ja 0x20988; add rsp, 8; ret; 
0x00000000000724c4: cli; sub ecx, esi; shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x00000000000d5adc: cli; test ebx, edx; mov edi, 0x4487f4b8; ret; 
0x00000000000df99a: cli; xlatb; ret; 
0x00000000000afccc: clts; add ah, al; ret; 
0x00000000000afc39: clts; add ch, al; ret; 
0x000000000004f7e7: cmc; adc eax, 0xff3000b; pop rcx; ret; 
0x000000000010e37d: cmc; add eax, 0x5f98c940; ret; 
0x00000000001060e7: cmc; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000105612: cmc; cmpsd dword ptr [rsi], dword ptr [rdi]; mov cs, ebp; push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x0000000000108086: cmc; dec dword ptr [rax]; leave; cmc; jmp qword ptr [rax]; 
0x00000000001905d5: cmc; in eax, dx; jmp qword ptr [rax]; 
0x000000000010809a: cmc; inc dword ptr [rax - 0x21]; cmc; jmp qword ptr [rax - 0x23]; 
0x000000000010809e: cmc; jmp qword ptr [rax - 0x23]; 
0x00000000000da941: cmc; jmp qword ptr [rax - 0x35]; 
0x000000000010808a: cmc; jmp qword ptr [rax]; 
0x00000000000acbe4: cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000addb8: cmc; jmp qword ptr [rsi + 0xf]; 
0x00000000000aed52: cmc; jmp qword ptr [rsi - 0x70]; 
0x00000000000dcc8d: cmc; mov bl, 0x3f; ret 0x71ac; 
0x00000000000ddc62: cmc; mov dword ptr [rdi + 0x27], esi; ret 0x11bf; 
0x00000000000c8ff7: cmc; mov ebp, 0x8b48ffff; add al, 0x24; add rsp, 0x28; ret; 
0x000000000010306e: cmc; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x000000000010308e: cmc; mov edi, 0xffbb9687; xchg esp, eax; ret 0x5106; 
0x00000000000d0a6d: cmc; mov esi, 0x5fa9663f; test dword ptr [rdi + 0x31], edx; ret; 
0x00000000000273e7: cmc; ret 0xb; 
0x00000000000e46ac: cmc; ret 0xbbf1; 
0x0000000000101cd5: cmc; ret 0xe7fc; 
0x00000000000ec21b: cmc; ret; 
0x00000000000dc563: cmc; scasd eax, dword ptr [rdi]; ret; 
0x000000000006c340: cmc; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fd31b: cmc; sub al, 0xc5; ret 0x66bb; 
0x0000000000058e87: cmc; xor bl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000010d31c: cmc; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x0000000000050b70: cmove eax, edx; movd xmm0, eax; ret; 
0x000000000004a7c6: cmove eax, edx; ret; 
0x000000000004a7c5: cmove rax, rdx; ret; 
0x0000000000044e3a: cmovne eax, ecx; mov qword ptr [rsp + 8], rax; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000051abf: cmovne eax, edi; neg esi; and eax, esi; movd xmm0, eax; ret; 
0x00000000000441bb: cmovne eax, edi; neg rdx; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000071f68: cmovne eax, edx; add rsp, 0x10; pop rbx; ret; 
0x000000000007257a: cmovne eax, edx; add rsp, 0x18; ret; 
0x0000000000086719: cmovne eax, edx; movd xmm0, eax; ret; 
0x0000000000086610: cmovne eax, edx; movq xmm0, rax; ret; 
0x00000000000c8df5: cmovne eax, edx; or r8, rdi; jne 0xc8d6a; add rsp, 0x28; ret; 
0x0000000000019b89: cmovne eax, edx; ret; 
0x0000000000011a3d: cmovne eax, edx; test al, al; jne 0x11a70; add rsp, 0x18; ret; 
0x000000000000e411: cmovne eax, edx; test al, al; jne 0xe440; add rsp, 0x28; ret; 
0x00000000000c90b9: cmovne eax, edx; test r8d, r8d; jne 0xc8fed; add rsp, 0x28; ret; 
0x00000000000866a5: cmovne edx, eax; movd xmm0, edx; ret; 
0x000000000008022f: cmovne edx, ecx; cmp edx, 0x22; jle 0x803c2; movapd xmm0, xmm2; ret; 
0x00000000000b017f: cmovne edx, ecx; cmp edx, 0x22; jle 0xb0290; vmovapd xmm0, xmm2; ret; 
0x0000000000044e39: cmovne rax, rcx; mov qword ptr [rsp + 8], rax; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x00000000000441ba: cmovne rax, rdi; neg rdx; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000071f67: cmovne rax, rdx; add rsp, 0x10; pop rbx; ret; 
0x0000000000072579: cmovne rax, rdx; add rsp, 0x18; ret; 
0x000000000008660f: cmovne rax, rdx; movq xmm0, rax; ret; 
0x0000000000019b88: cmovne rax, rdx; ret; 
0x00000000000c90b8: cmovne rax, rdx; test r8d, r8d; jne 0xc8fed; add rsp, 0x28; ret; 
0x0000000000015cde: cmovo esi, dword ptr [rbp - 0x10]; fadd st(0); ret; 
0x0000000000051cc4: cmovs eax, ecx; pop rbp; pop r12; ret; 
0x00000000000443ec: cmovs eax, ecx; pop rbx; pop rbp; ret; 
0x0000000000044427: cmovs eax, ecx; ret; 
0x0000000000074af0: cmovs eax, edx; pop rbp; pop r12; ret; 
0x000000000001b5d0: cmovs eax, edx; pop rbx; pop rbp; ret; 
0x0000000000051cc3: cmovs rax, rcx; pop rbp; pop r12; ret; 
0x00000000000443eb: cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044426: cmovs rax, rcx; ret; 
0x0000000000074aef: cmovs rax, rdx; pop rbp; pop r12; ret; 
0x000000000001b5cf: cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000015a5b: cmp ah, 0x40; jne 0x15a62; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aa6: cmp ah, 0x40; jne 0x15aad; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aef: cmp ah, 0x40; jne 0x15af6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015b36: cmp ah, 0x40; jne 0x15b3d; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018aaf: cmp ah, 0x40; jne 0x18ab6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018af6: cmp ah, 0x40; jne 0x18afd; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015ccd: cmp ah, 1; je 0x15cdb; fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x00000000000207b5: cmp ah, 5; je 0x207f2; mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000000248b: cmp ah, byte ptr [rcx]; ret; 
0x00000000000ef44c: cmp ah, byte ptr [rdi + 0x20003f3a]; ret 0x7bbf; 
0x00000000000d7e44: cmp ah, byte ptr [rdi + rcx*2 - 0x44]; leave; movsd dword ptr [rdi], dword ptr [rsi]; nop; ret; 
0x00000000001105a2: cmp ah, ch; ret 0x920c; 
0x00000000000dc157: cmp al, 0x11; ret 0xead4; 
0x000000000011251f: cmp al, 0x12; ret; 
0x00000000000d4cf9: cmp al, 0x14; test eax, 0x41c2450e; mov esp, 0xbe9fd995; and eax, 0x33e63c7d; pop rbp; ret; 
0x00000000000d5637: cmp al, 0x18; xchg esp, eax; push rsp; mov esi, ecx; ret; 
0x00000000000db257: cmp al, 0x1b; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000da3c7: cmp al, 0x1c; ret; 
0x000000000002080b: cmp al, 0x24; call 0x1aeb0; add rsp, 0x18; fchs; ret; 
0x0000000000015ca9: cmp al, 0x24; call 0xc410; add rsp, 0x28; ret; 
0x000000000000d338: cmp al, 0x24; call 0xe060; add rsp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000000d123: cmp al, 0x24; call 0xe060; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000cb8c: cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x0000000000078e5d: cmp al, 0x24; movaps xmmword ptr [rbx], xmm6; movaps xmmword ptr [rbx + 0x10], xmm7; add rsp, 0x70; pop rbx; ret; 
0x00000000000d8ae7: cmp al, 0x36; mov esp, 0xdabe0f10; ret; 
0x00000000000e77ee: cmp al, 0x3d; movabs rax, 0x3f454387b607; add dl, al; ret; 
0x00000000000d8977: cmp al, 0x3f; ret; 
0x00000000000d7857: cmp al, 0x41; push rbp; adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000dc067: cmp al, 0x43; int1; sub dword ptr [rax], esp; ret; 
0x00000000000aaf9f: cmp al, 0x56; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000001966cc: cmp al, 0x57; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000000d6047: cmp al, 0x5c; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x0000000000196ecc: cmp al, 0x5f; add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x00000000001970cc: cmp al, 0x61; add byte ptr [rax], al; mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x00000000000d7c67: cmp al, 0x63; ret; 
0x000000000010d0aa: cmp al, 0x64; ret 0x1353; 
0x00000000000d3900: cmp al, 0x73; lodsb al, byte ptr [rsi]; ret 0xbe6d; 
0x00000000001126af: cmp al, 0x83; int 0xa7; ret; 
0x00000000000d77d7: cmp al, 0x83; out dx, al; insb byte ptr [rdi], dx; add al, 0x12; push rax; ret; 
0x0000000000127e77: cmp al, 0x8d; jp 0x127e67; out 0x7b, eax; ret; 
0x0000000000138217: cmp al, 0x8d; jp 0x138207; out 0x7b, eax; ret; 
0x0000000000156697: cmp al, 0x8d; jp 0x156687; out 0x7b, eax; ret; 
0x0000000000166957: cmp al, 0x8d; jp 0x166947; out 0x7b, eax; ret; 
0x000000000017a737: cmp al, 0x8d; jp 0x17a727; out 0x7b, eax; ret; 
0x00000000001854d7: cmp al, 0x8d; jp 0x1854c7; out 0x7b, eax; ret; 
0x00000000000d7d37: cmp al, 0x8d; jp 0xd7d27; out 0x7b, eax; ret; 
0x00000000000f41d7: cmp al, 0x8d; jp 0xf41c7; out 0x7b, eax; ret; 
0x000000000011b497: cmp al, 0x92; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x1c3f; 
0x00000000000e74d7: cmp al, 0x92; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x3f; 
0x00000000000d9d37: cmp al, 0x95; add eax, 0xb0479c62; out 0x3f, al; ret 0xd7f0; 
0x0000000000133c87: cmp al, 0xac; jae 0x133c89; pop rdx; ret; 
0x00000000001623c7: cmp al, 0xac; jae 0x1623c9; pop rdx; ret; 
0x00000000000d34c7: cmp al, 0xac; jae 0xd34c9; pop rdx; ret; 
0x00000000000d8667: cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x00000000000d5df7: cmp al, 0xb2; mov ebx, 0x50545f93; ret 0xc83f; 
0x000000000010c518: cmp al, 0xb9; ret; 
0x00000000000d8de6: cmp al, 0xbc; sub dword ptr [rax - 0x54f51984], ebx; ret 0xef3f; 
0x00000000000fda4a: cmp al, 0xbf; out dx, eax; jmp rbx; 
0x00000000000dda68: cmp al, 0xc1; stosd dword ptr [rdi], eax; pop rdx; ret 0xc5a4; 
0x00000000000dbf37: cmp al, 0xca; and al, 0x54; ret; 
0x000000000012c427: cmp al, 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c7: cmp al, 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac47: cmp al, 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af07: cmp al, 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece7: cmp al, 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a87: cmp al, 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e7: cmp al, 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8787: cmp al, 0xcf; jno 0xf877e; ret 0x226; 
0x000000000011259f: cmp al, 0xd0; movsd dword ptr [rdi], dword ptr [rsi]; mov ch, 0x5f; loope 0x11255f; int 0x3f; ret 0xcc6f; 
0x00000000000d75f7: cmp al, 0xd2; ret 0xba1b; 
0x00000000000d6267: cmp al, 0xd5; fisttp qword ptr [rsi]; test al, 0xc6; cdq; ret; 
0x00000000000d8d57: cmp al, 0xd5; xor eax, 0xa1074cf3; mov edi, 0xc71ad288; xchg esi, eax; ret 0x3c4b; 
0x00000000000d9cb7: cmp al, 0xec; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x0000000000197431: cmp al, 0xee; call rsi; 
0x00000000000d99f7: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e97: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b37: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ed7: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x0000000000158357: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x0000000000168617: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3f7: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x0000000000187197: cmp al, 0xef; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x000000000003200b: cmp al, 0xf2; movups xmm0, xmmword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000027098: cmp al, 0xf2; movups xmm1, xmmword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000004a2a3: cmp al, 0xf3; movups xmm2, xmmword ptr [rip + 0xb6130]; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x000000000011d7df: cmp al, 0xf6; jg 0x11d7f0; add dh, ch; jmp rdi; 
0x000000000014c03f: cmp al, 0xf6; jg 0x14c050; add dh, ch; jmp rdi; 
0x00000000000e985f: cmp al, 0xf6; jg 0xe9870; add dh, ch; jmp rdi; 
0x0000000000128517: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x128549; ret; 
0x00000000001388b7: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x1388e9; ret; 
0x0000000000156d37: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x156d69; ret; 
0x0000000000166ff7: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x167029; ret; 
0x000000000017add7: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x17ae09; ret; 
0x0000000000185b77: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x185ba9; ret; 
0x00000000000d83d7: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0xd8409; ret; 
0x00000000000f4877: cmp al, 0xf6; shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0xf48a9; ret; 
0x00000000000182a8: cmp al, 0xff; dec dword ptr [rdi]; mov edi, gs; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x00000000000e5a6f: cmp al, 2; ret 0x2a49; 
0x00000000000eb65d: cmp al, 5; cmp eax, 0x3c14efab; ret 0x445c; 
0x000000000010e17a: cmp al, byte ptr [rax + 0x6d]; sub al, 9; xchg ebx, eax; jle 0x10e161; ret 0x2234; 
0x0000000000194a1d: cmp al, byte ptr [rax]; add byte ptr [rax], al; adc bl, ch; jmp qword ptr [rcx + 1]; 
0x00000000000e5a60: cmp al, byte ptr [rcx - 0x2e9ef37a]; ret 0x5fbf; 
0x000000000001c9af: cmp al, byte ptr [rdx]; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000018f7f5: cmp al, ch; jmp rax; 
0x000000000019095c: cmp al, ch; out dx, al; jmp rax; 
0x0000000000012e0e: cmp ax, 0x3fbb; jg 0x12dda; fld1; add rsp, 0x18; ret; 
0x0000000000072770: cmp bh, 0x7f; cmp rax, rdx; seta al; movzx eax, al; ret; 
0x0000000000019e66: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x0000000000047e2b: cmp bh, ah; jmp qword ptr [rsi - 0x70]; 
0x0000000000056975: cmp bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000ef44e: cmp bh, byte ptr [rdi]; add byte ptr [rax], ah; ret 0x7bbf; 
0x00000000000eac06: cmp bh, byte ptr [rdi]; ret 0x3bf5; 
0x00000000000d9b66: cmp bh, byte ptr [rdx + rax*2 + 0x47ca6299]; adc bh, byte ptr [rdx + 0x45db833f]; ret 0x961a; 
0x0000000000105a41: cmp bh, byte ptr [rip + 0x1dfbc179]; stc; mov edx, 0xcb7c5b8; ret; 
0x00000000000017a1: cmp bh, byte ptr [rip - 0x402100f1]; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x00000000000ecd3e: cmp bh, byte ptr [rip]; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x00000000001006d7: cmp bh, byte ptr [rsi + 0x56]; pop rcx; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000190a25: cmp bh, ch; jmp qword ptr [rax - 0x75]; 
0x00000000001985a8: cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000077dd0: cmp bh, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000007d284: cmp bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000787c2: cmp bh, dh; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000c4b17: cmp bl, bl; call 0xffffffff9b1c0bf7; ret 0xe1de; 
0x000000000001605b: cmp bl, cl; std; fstp st(1); ret; 
0x0000000000140e89: cmp byte ptr [rax - 0x28], bl; js 0x140e96; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000016f3c9: cmp byte ptr [rax - 0x28], bl; js 0x16f3d6; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000018df49: cmp byte ptr [rax - 0x28], bl; js 0x18df56; sar dword ptr [rdi], cl; ret 0xd82b; 
0x00000000000fd1a9: cmp byte ptr [rax - 0x28], bl; js 0xfd1b6; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000008669f: cmp byte ptr [rax - 0x40800000], 0xf; shl byte ptr [r14 + 0xf], 1; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x00000000000e0b03: cmp byte ptr [rax - 0x73c00ffe], ah; ret 0xaf2; 
0x00000000000207b9: cmp byte ptr [rax - 0x75], cl; add eax, 0x37c7f7; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000007babc: cmp byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000001906c8: cmp byte ptr [rax], 0; cmp byte ptr [rdi], dh; out dx, al; push qword ptr [rax + 0x8000078]; cmp dh, ch; jmp rax; 
0x0000000000199344: cmp byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x34000083; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x000000000001b466: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000000ecfc: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000001a0ff: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000002487: cmp byte ptr [rbp + 0x213a19a5], dh; ret; 
0x00000000001126ac: cmp byte ptr [rbp + 0x61], dl; cmp al, 0x83; int 0xa7; ret; 
0x00000000000f137e: cmp byte ptr [rbp], bh; add al, al; out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x0000000000056d94: cmp byte ptr [rbx + 0x280fffff], ch; or al, 0x24; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x00000000000c9526: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000002a1dc: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000002fa58: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000153e8: cmp byte ptr [rbx - 0x78f0f908], al; add eax, 0x8d480000; adc eax, 0xb78ef; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000190e44: cmp byte ptr [rbx], bl; bnd call rax; 
0x0000000000112a99: cmp byte ptr [rbx], bl; ret 0x5848; 
0x0000000000072714: cmp byte ptr [rbx], ch; or dword ptr [rax], eax; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000018310: cmp byte ptr [rbx], cl; add dh, bl; leave; ret; 
0x0000000000192eb8: cmp byte ptr [rcx - 0x18], dh; call qword ptr [rbx]; 
0x00000000000df00b: cmp byte ptr [rcx - 0x45402bed], bl; ret 0xe5b3; 
0x0000000000105b83: cmp byte ptr [rcx], ch; ret 0xb085; 
0x0000000000050ee7: cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000866a3: cmp byte ptr [rdi + 0x66d0450f], 0xf; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x000000000009c8d3: cmp byte ptr [rdi + 0x75], 0xe; mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c3: cmp byte ptr [rdi + 0x75], 0xe; mov rax, qword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000004a800: cmp byte ptr [rdi + 0x7e], 0xc; mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x00000000000e4d31: cmp byte ptr [rdi + 3], dh; xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x000000000007da34: cmp byte ptr [rdi + rdi*8], dl; jmp qword ptr [rsi + 0xf]; 
0x0000000000051a4d: cmp byte ptr [rdi - 0x77], 0xc2; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x00000000000ef36e: cmp byte ptr [rdi - 0x7e00000], bh; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x0000000000190d54: cmp byte ptr [rdi - 0xf], bl; jmp rax; 
0x000000000004a1eb: cmp byte ptr [rdi], 0xf; test ch, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x77], dl; ret; 
0x00000000000ebd6e: cmp byte ptr [rdi], bh; add byte ptr [rax], dh; xor esi, dword ptr [rdi + 0x52]; ret 0xbfd3; 
0x00000000000eaa3e: cmp byte ptr [rdi], bh; scasd eax, dword ptr [rdi]; ficomp dword ptr [rbx + rbp*2]; adc eax, 0xadbd3b55; ret 0xd64e; 
0x00000000001906cc: cmp byte ptr [rdi], dh; out dx, al; push qword ptr [rax + 0x8000078]; cmp dh, ch; jmp rax; 
0x00000000000d75f6: cmp byte ptr [rdx + rdx*8], bh; ret 0xba1b; 
0x000000000005b494: cmp byte ptr [rdx - 0x1c17fff6], ah; ret; 
0x000000000007bfc4: cmp byte ptr [rdx - 1], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000018f8c0: cmp byte ptr [rdx], dh; add byte ptr [rax], al; mov byte ptr [rsi - 0x18], ch; call qword ptr [rax + 0x32]; 
0x0000000000112302: cmp byte ptr [rip + 0x3fb1fc34], 0x4f; mov esi, 0x3d32e6f3; pop rdi; mov esp, 0x22a8ef9f; ret 0xefeb; 
0x00000000000496f8: cmp byte ptr [rip + 0xc76400], dh; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000070285: cmp byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5d5b; 
0x0000000000029cc8: cmp byte ptr [rsi + 0xf], ah; push rsp; ret 0xff2; 
0x00000000000e4751: cmp byte ptr [rsi - 0x26], cl; pop rbp; ret; 
0x000000000001a0fe: cmp byte ptr cs:[rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000001925c9: cmp ch, al; call qword ptr [rdi]; 
0x00000000000a4cb7: cmp ch, al; jns 0xa4ce3; ffreep st(4); ret; 
0x00000000000accd3: cmp ch, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b0d6a: cmp ch, byte ptr [rbp - 0x43affff]; pop rcx; ret; 
0x00000000000d97b0: cmp ch, ch; ret; 
0x00000000000a08b4: cmp cl, 8; add ah, al; ret; 
0x0000000000190d4d: cmp cl, dh; push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x00000000001060e3: cmp dh, byte ptr [rbp - 0x590a6eea]; ret; 
0x000000000007dc12: cmp dh, byte ptr [rsi + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000001906d5: cmp dh, ch; jmp rax; 
0x0000000000107343: cmp dh, cl; jg 0x107329; ret; 
0x0000000000056974: cmp dil, dil; jmp qword ptr [rsi + 0xf]; 
0x00000000000fc743: cmp dl, 0xd4; ret; 
0x000000000004d696: cmp dl, al; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x000000000009c0c6: cmp dl, al; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x00000000000d7afc: cmp dl, byte ptr [rsi + rbx*4 - 0x41]; ret 0x4d0e; 
0x00000000000ee039: cmp dl, dl; ret 0x49d3; 
0x00000000000f13f8: cmp dword ptr [rax + 0x10], edx; lahf; sahf; cmp eax, 0; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x000000000012d9fd: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x12da03; call rdx; 
0x000000000013dd9d: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x13dda3; call rdx; 
0x000000000015c21d: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x15c223; call rdx; 
0x000000000016c4dd: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x16c4e3; call rdx; 
0x00000000001802bd: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x1802c3; call rdx; 
0x000000000018b05d: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x18b063; call rdx; 
0x00000000000dd8bd: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xdd8c3; call rdx; 
0x00000000000f9d5d: cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xf9d63; call rdx; 
0x00000000000d4e85: cmp dword ptr [rax + rax*2], ecx; std; lahf; ret; 
0x00000000000d01ee: cmp dword ptr [rax + rdx - 0x3b6291aa], 0x52; ret; 
0x00000000001948d5: cmp dword ptr [rax], eax; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x000000000000bcec: cmp dword ptr [rax], eax; call 0xba70; call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x000000000000b7f9: cmp dword ptr [rax], eax; test rax, rax; je 0xb802; call rax; 
0x000000000000b7f9: cmp dword ptr [rax], eax; test rax, rax; je 0xb802; call rax; add rsp, 8; ret; 
0x000000000000bc5c: cmp dword ptr [rax], eax; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000bcad: cmp dword ptr [rax], eax; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000006a063: cmp dword ptr [rax], ebx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000478d6: cmp dword ptr [rax], ecx; add byte ptr [rdx + 6], bh; je 0x47a70; movapd xmm1, xmm0; ret; 
0x00000000001948d4: cmp dword ptr [rax], r8d; add al, ch; add ebp, ebx; call qword ptr [rcx]; 
0x00000000000e9b8e: cmp dword ptr [rbp + 0x1f3f63c], edi; pushfq; call qword ptr [rbx]; 
0x00000000000e0042: cmp dword ptr [rbp + 0x51], edx; push rbp; mov ch, 0x3f; ret 0x95e6; 
0x00000000000bd187: cmp dword ptr [rbp + rax + 0x22], edx; loope 0xbd18d; add ch, al; jns 0xbd1ba; ret; 
0x00000000000d5ec6: cmp dword ptr [rbp*2 + 0x1bf7edfa], -0x60; ret 0x9abf; 
0x0000000000001782: cmp dword ptr [rbx + 0x4a], edx; mov edx, 0x35307c9a; sti; xchg ecx, eax; push rbx; ret; 
0x000000000000bcab: cmp dword ptr [rbx], edx; cmp dword ptr [rax], eax; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000008df00: cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x0000000000027e71: cmp dword ptr [rcx + rcx*4 - 0x38], ecx; lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x000000000007db23: cmp dword ptr [rcx - 0x7ab7fffc], edi; sar byte ptr [rdi + 0x14], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000087bd3: cmp dword ptr [rcx], ecx; add ch, al; jns 0x87c02; ret; 
0x00000000000cd658: cmp dword ptr [rdi + rax + 0x15200c00], esi; add al, bl; ret; 
0x00000000001122fe: cmp dword ptr [rdi + rbp*8], -0x75; cmp byte ptr [rip + 0x3fb1fc34], 0x4f; mov esi, 0x3d32e6f3; pop rdi; mov esp, 0x22a8ef9f; ret 0xefeb; 
0x0000000000065679: cmp dword ptr [rdx], ecx; add al, ch; jmp qword ptr [rcx]; 
0x00000000000495e4: cmp dword ptr [rip + 0xc76400], esi; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000007b753: cmp dword ptr [rsi + 0x14e80004], esi; in eax, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000a9463: cmp dword ptr [rsi + rsi*8], esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000100d9f: cmp dword ptr [rsi], edx; and dword ptr [rsi - 0x7ad59cc5], 0xcbbbce3d; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x00000000000478cc: cmp dword ptr [rsp + rdi*8 - 1], -1; ucomisd xmm7, qword ptr [rip + 0x839f7]; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x000000000001b2b4: cmp dx, 0x7fff; fld xword ptr [rsp + 0x10]; je 0x1b3a0; pop rbx; ret; 
0x0000000000019dc1: cmp dx, 0x7fff; sete al; and eax, ecx; ret; 
0x00000000000f0c1f: cmp eax, 0; add byte ptr [rax + 0x64073fe7], bh; mov sil, 0x9c; ret; 
0x00000000000f13ff: cmp eax, 0; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x00000000000f0bff: cmp eax, 0; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x00000000000ecd3f: cmp eax, 0; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x0000000000012923: cmp eax, 0x107f3ffe; fld st(0); fsubrp st(1); fdiv st(0); add rsp, 0x18; ret; 
0x00000000000e9b2f: cmp eax, 0x16c7998; scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x0000000000105a42: cmp eax, 0x1dfbc179; stc; mov edx, 0xcb7c5b8; ret; 
0x000000000004a56b: cmp eax, 0x23ffffff; movss xmm1, dword ptr [rip + 0x7fc88]; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000e76e7: cmp eax, 0x27125244; ret; 
0x00000000000eae16: cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x000000000011817c: cmp eax, 0x2bbfdc6; loope 0x118157; cmp eax, 0xbf65873c; ret; 
0x0000000000146b1c: cmp eax, 0x2bbfdc6; loope 0x146af7; cmp eax, 0xbf65873c; ret; 
0x0000000000174a5c: cmp eax, 0x2bbfdc6; loope 0x174a37; cmp eax, 0xbf65873c; ret; 
0x00000000000e41bc: cmp eax, 0x2bbfdc6; loope 0xe4197; cmp eax, 0xbf65873c; ret; 
0x00000000000a7874: cmp eax, 0x2d876; jo 0xa7840; ret; 
0x00000000000e88ff: cmp eax, 0x2e1a0e83; xchg cl, al; xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x0000000000049c0b: cmp eax, 0x32800000; jg 0x49d40; movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x000000000000bce9: cmp eax, 0x391452; call 0xba70; call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x00000000000eb65f: cmp eax, 0x3c14efab; ret 0x445c; 
0x0000000000027094: cmp eax, 0x3c7fffff; movsd xmm1, qword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000f0c1e: cmp eax, 0x3d; add byte ptr [rax], al; mov eax, 0x64073fe7; mov sil, 0x9c; ret; 
0x0000000000100da7: cmp eax, 0x3ecbbbce; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x0000000000112303: cmp eax, 0x3fb1fc34; movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x0000000000058bb2: cmp eax, 0x3fb7ffff; jg 0x58c30; movdqa xmm0, xmmword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x0000000000020c7c: cmp eax, 0x3fbe; jge 0x20c88; fld1; faddp st(1); ret; 
0x00000000000ff88b: cmp eax, 0x3fec9955; ret 0x51c4; 
0x00000000000d8c69: cmp eax, 0x44af2eb3; ret; 
0x0000000000050589: cmp eax, 0x480; lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bc9: cmp eax, 0x480; lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0a9: cmp eax, 0x480; lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x000000000004a7b9: cmp eax, 0x480; lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d279: cmp eax, 0x480; lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d719: cmp eax, 0x480; lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000e7581: cmp eax, 0x4924925b; ret 0xfc3f; 
0x00000000000ce700: cmp eax, 0x4a121583; ret; 
0x0000000000049ecb: cmp eax, 0x4d7fffff; jle 0x49ee0; cmp eax, 0x7f7fffff; jle 0x49f28; addss xmm0, xmm0; ret; 
0x000000000004c99c: cmp eax, 0x6348000b; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000056e77: cmp eax, 0x64003461; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x000000000001b2b0: cmp eax, 0x66147640; cmp edx, 0x6cdb7fff; and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x000000000004ebad: cmp eax, 0x7cf2e; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000049ed2: cmp eax, 0x7f7fffff; jle 0x49f28; addss xmm0, xmm0; ret; 
0x000000000009b2c0: cmp eax, 0x7f800000; jne 0x9b2d5; mov rax, qword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009c8d0: cmp eax, 0x7f800000; jne 0x9c8e5; mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x0000000000050e7e: cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x000000000006fb59: cmp eax, 0x7fff; jne 0x6fb05; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000072ab9: cmp eax, 0x7fff; jne 0x72a63; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000209cc: cmp eax, 0x7fffffff; je 0x20a08; add rsp, 8; ret; 
0x00000000000497a2: cmp eax, 0x7fffffff; je 0x497d8; add rsp, 8; ret; 
0x0000000000056f22: cmp eax, 0x7fffffff; je 0x56f58; add rsp, 8; ret; 
0x000000000007c682: cmp eax, 0x7fffffff; je 0x7c6b8; add rsp, 8; ret; 
0x000000000004979b: cmp eax, 0x80000000; je 0x497b0; cmp eax, 0x7fffffff; je 0x497d8; add rsp, 8; ret; 
0x0000000000056f1b: cmp eax, 0x80000000; je 0x56f30; cmp eax, 0x7fffffff; je 0x56f58; add rsp, 8; ret; 
0x000000000007c67b: cmp eax, 0x80000000; je 0x7c690; cmp eax, 0x7fffffff; je 0x7c6b8; add rsp, 8; ret; 
0x00000000000e81e6: cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c166: cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9c6: cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000e99df: cmp eax, 0x80a65e36; ret; 
0x00000000000493af: cmp eax, 0x81f2c; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000048ce8: cmp eax, 0x825f3; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000004881f: cmp eax, 0x82abc; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000478d4: cmp eax, 0x839f7; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x00000000000e9e2f: cmp eax, 0x84cc1739; outsd dx, dword ptr [rsi]; jmp qword ptr [rax]; 
0x0000000000044fab: cmp eax, 0x86330; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000c6de5: cmp eax, 0x89497fff; ret; 
0x00000000000eb137: cmp eax, 0x89e20138; ret 0x40ed; 
0x000000000004227d: cmp eax, 0x970f07c9; ret 0xca08; 
0x000000000002e9ec: cmp eax, 0x9c8ef; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x00000000000e78af: cmp eax, 0xabaf54ec; pop rbp; ret; 
0x00000000000dc14d: cmp eax, 0xae12bfd1; mov bh, 0xb4; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x0000000000012e09: cmp eax, 0xb47f3ffc; cmp ax, 0x3fbb; jg 0x12dda; fld1; add rsp, 0x18; ret; 
0x00000000000e87df: cmp eax, 0xb57ed0c7; ret; 
0x00000000000db251: cmp eax, 0xba3e5d; push rsp; cmp al, 0x1b; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ecd4b: cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x00000000000e41c3: cmp eax, 0xbf65873c; ret; 
0x00000000000017a2: cmp eax, 0xbfdeff0f; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x00000000000eae0e: cmp eax, 0xc00000bf; sahf; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x0000000000017f8a: cmp eax, 0xc040; jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x0000000000012e0f: cmp eax, 0xc67f3fbb; fld1; add rsp, 0x18; ret; 
0x00000000000ecf38: cmp eax, 0xd2a9009e; ret 0xbd2e; 
0x00000000000cfc65: cmp eax, 0xdbdd3ff3; in al, dx; jmp qword ptr [rbx + 0x22]; 
0x00000000000fd270: cmp eax, 0xdd641e64; ret 0x4008; 
0x00000000000fe694: cmp eax, 0xe33ff4aa; add al, 0xb5; js 0xfe68f; ret; 
0x00000000000d9cb4: cmp eax, 0xec3c8d6d; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x000000000011230d: cmp eax, 0xef9fbc5f; test al, 0x22; ret 0xefeb; 
0x000000000004ff17: cmp eax, 0xf3000001; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000005259f: cmp eax, 0xf3000795; movups xmm1, xmmword ptr [rsp - 8]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000010d1a7: cmp eax, 0xf619aaf7; ret 0x4eb; 
0x00000000000d1fb4: cmp eax, 0xff3fdf66; fbld tbyte ptr [r10 + 0x3fe1dcbf]; in eax, 0xe4; ret 0x25e7; 
0x000000000004d60b: cmp eax, 0xff800000; jbe 0x4d639; mov dword ptr [rsp - 0x10], edx; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000009c03b: cmp eax, 0xff800000; jbe 0x9c069; mov dword ptr [rsp - 0x10], edx; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x00000000000153e9: cmp eax, 6; ja 0x15918; lea rdx, [rip + 0xb78ef]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000cdcc6: cmp eax, dword ptr [rax]; mov edi, 0x350039b5; ret 0xb; 
0x0000000000089021: cmp eax, dword ptr [rbp - 0x3e3bfffa]; imul ebx, dword ptr [rax - 0x34], -0x3c; sub ebx, dword ptr [r12 + rdx*8 - 0x3b]; sti; pop rcx; ret 0x41c4; 
0x00000000000fdfbf: cmp eax, dword ptr [rbx]; ret 0x498; 
0x0000000000192599: cmp eax, ebp; call qword ptr [rcx + 1]; 
0x000000000018f7fd: cmp eax, ebp; jmp qword ptr [rax]; 
0x00000000000d58cb: cmp eax, ecx; push -0x6ceb4046; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x00000000000804ab: cmp eax, ecx; setl al; lea eax, [rax + rax - 1]; ret; 
0x00000000000805af: cmp eax, edx; jg 0x805bd; mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x0000000000020d6b: cmp eax, edx; jle 0x20d98; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000057d8a: cmp eax, edx; jle 0x57e60; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x38; ret; 
0x0000000000042f5a: cmp eax, edx; seta al; movzx eax, al; ret; 
0x000000000004400b: cmp eax, edx; setbe al; movzx eax, al; ret; 
0x000000000007a1fb: cmp ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000dea1a: cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000012d9f9: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x12da03; call rdx; 
0x000000000013dd99: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x13dda3; call rdx; 
0x000000000015c219: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x15c223; call rdx; 
0x000000000016c4d9: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x16c4e3; call rdx; 
0x00000000001802b9: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x1802c3; call rdx; 
0x000000000018b059: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x18b063; call rdx; 
0x00000000000dd8b9: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xdd8c3; call rdx; 
0x00000000000f9d59: cmp ebp, dword ptr [rdi + 0x11]; pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xf9d63; call rdx; 
0x000000000004dd21: cmp ebp, dword ptr [rdi]; or eax, dword ptr [rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000018fe75: cmp ebp, ebx; call qword ptr [rax + 0x51]; 
0x0000000000090a61: cmp ebx, dword ptr [rax + 4]; ret 0xc2c4; 
0x00000000000a7041: cmp ebx, dword ptr [rax + 4]; ret 0xe3c4; 
0x00000000000c1cdf: cmp ebx, dword ptr [rax + 5]; ret 0x7e9; 
0x00000000000b68a8: cmp ebx, dword ptr [rbp + rax*8 - 0x3b]; ret; 
0x00000000000a6cbe: cmp ebx, dword ptr [rbp + rax*8 - 0x3c]; ret; 
0x00000000000e555f: cmp ebx, dword ptr [rbx + 0x20]; xchg ecx, eax; adc eax, 0x7b3f61bb; pop rbx; ret; 
0x000000000006fb81: cmp ebx, dword ptr [rbx]; or dword ptr [rax], eax; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000009982d: cmp ebx, dword ptr [rcx + rax*8 - 0x3b]; ret; 
0x00000000000c19f0: cmp ebx, dword ptr [rdi + rax*8 - 0x3b]; ret; 
0x00000000000d52f0: cmp ebx, dword ptr [rdx + 0x71c6e512]; mov esp, 0x3f76033f; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x00000000000c03fb: cmp ebx, dword ptr [rsi + rax*8 - 0x3b]; ret; 
0x00000000000bfd72: cmp ebx, dword ptr [rsp + rax*8 - 0x3b]; sti; pop rax; mov ebp, 0xc5fc28f9; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x000000000018fe4d: cmp ebx, ebp; call rax; 
0x0000000000050b6d: cmp ecx, -1; cmove eax, edx; movd xmm0, eax; ret; 
0x0000000000042e10: cmp ecx, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x000000000003d1e1: cmp ecx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000018eed: cmp ecx, 0xf407fbe; xchg edi, eax; mov byte ptr [rcx - 0x7f], 0xf8; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x00000000000dc388: cmp ecx, dword ptr [rax]; ret 0x6dd4; 
0x00000000000e528f: cmp ecx, dword ptr [rbp - 0x3f]; ret; 
0x00000000000878bd: cmp ecx, dword ptr [rcx]; add ch, al; ret; 
0x00000000000e4a9f: cmp ecx, dword ptr [rsi + 0x17]; sub esp, dword ptr [rbx]; ret 0x3e01; 
0x000000000001b586: cmp ecx, eax; je 0x1b590; neg rax; pop rbx; pop rbp; ret; 
0x000000000001b044: cmp ecx, eax; sete al; and eax, edx; ret; 
0x0000000000106526: cmp ecx, ebx; jns 0x1064f1; insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x00000000000fd2df: cmp ecx, ecx; xchg eax, esi; idiv edi; call rsp; 
0x00000000000442ba: cmp ecx, edx; je 0x44478; neg rax; pop rbx; pop rbp; ret; 
0x000000000001b0a7: cmp ecx, edx; setbe al; and eax, esi; ret; 
0x0000000000016f18: cmp edi, -1; jne 0x17050; fstp st(0); fld1; fdivrp st(1); ret; 
0x0000000000019b80: cmp edi, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x000000000004a7fc: cmp edi, 0x7f800000; jle 0x4a810; mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x0000000000071022: cmp edi, 0x970f7f8d; ret; 
0x0000000000017007: cmp edi, 1; je 0x17042; fld1; fchs; fdivrp st(1); ret; 
0x00000000000e438f: cmp edi, dword ptr [rax - 0x13464d]; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x00000000000e9b2e: cmp edi, dword ptr [rip + 0x16c7998]; scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x0000000000076008: cmp edi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000de963: cmp edi, edi; jmp rdx; 
0x0000000000067d54: cmp edi, edx; jmp qword ptr [rsi + 0xf]; 
0x0000000000027cf3: cmp edi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a0a62: cmp edx, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000004975f: cmp edx, -3; ja 0x49770; add rsp, 8; ret; 
0x0000000000056edf: cmp edx, -3; ja 0x56ef0; add rsp, 8; ret; 
0x000000000007c63f: cmp edx, -3; ja 0x7c650; add rsp, 8; ret; 
0x0000000000020978: cmp edx, -3; pop rsi; ja 0x20988; add rsp, 8; ret; 
0x0000000000080232: cmp edx, 0x22; jle 0x803c2; movapd xmm0, xmm2; ret; 
0x00000000000b0182: cmp edx, 0x22; jle 0xb0290; vmovapd xmm0, xmm2; ret; 
0x0000000000086780: cmp edx, 0x400; jne 0x8677c; addsd xmm0, xmm0; ret; 
0x000000000001b2b5: cmp edx, 0x6cdb7fff; and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x000000000004e61a: cmp edx, 0x7f800000; setne al; add eax, 0x7fffffff; ret; 
0x00000000000747ce: cmp edx, 0x7fff; je 0x74898; add rsp, 0x18; ret; 
0x0000000000012990: cmp edx, 0x7fff; jne 0x129b0; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x0000000000019dc2: cmp edx, 0x940f7fff; shl byte ptr [rcx], 0xc8; ret; 
0x00000000000474a0: cmp edx, 1; jbe 0x471d8; movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x0000000000125f58: cmp edx, dword ptr [rbx]; jg 0x125fae; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000001362f8: cmp edx, dword ptr [rbx]; jg 0x13634e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000154778: cmp edx, dword ptr [rbx]; jg 0x1547ce; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000164a38: cmp edx, dword ptr [rbx]; jg 0x164a8e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000178818: cmp edx, dword ptr [rbx]; jg 0x17886e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000001835b8: cmp edx, dword ptr [rbx]; jg 0x18360e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000d5e18: cmp edx, dword ptr [rbx]; jg 0xd5e6e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000f22b8: cmp edx, dword ptr [rbx]; jg 0xf230e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000043fe5: cmp edx, eax; setle al; movzx eax, al; ret; 
0x000000000010e738: cmp edx, edi; adc byte ptr [rcx + 0x41], cl; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x00000000000e3e71: cmp edx, edi; inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x000000000001f3c3: cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000072571: cmp esi, -1; mov edx, 0; cmovne rax, rdx; add rsp, 0x18; ret; 
0x0000000000019ca0: cmp esi, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x00000000000d4098: cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000e4d0f: cmp esi, dword ptr [rax]; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x000000000010cbe4: cmp esi, dword ptr [rdx + 0x2005554e]; ret; 
0x00000000000fc8cf: cmp esi, ebx; push rsp; movsb byte ptr [rdi], byte ptr [rsi]; ret 0x42d8; 
0x00000000000fdebf: cmp esi, esp; ret 0xfe9e; 
0x0000000000049016: cmp esp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000100da3: cmp esp, dword ptr [rbx + 0x2a]; test dword ptr [rip + 0x3ecbbbce], edi; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x00000000000e452f: cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x0000000000072634: cmp esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add eax, 0x8eff3; add rsp, 0x28; ret; 
0x0000000000015a5a: cmp r12b, 0x40; jne 0x15a62; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aa5: cmp r12b, 0x40; jne 0x15aad; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aee: cmp r12b, 0x40; jne 0x15af6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015b35: cmp r12b, 0x40; jne 0x15b3d; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018aae: cmp r12b, 0x40; jne 0x18ab6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018af5: cmp r12b, 0x40; jne 0x18afd; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015ccc: cmp r12b, 1; je 0x15cdb; fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x00000000000207b4: cmp r12b, 5; je 0x207f2; mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000071021: cmp r15d, 0x970f7f8d; ret; 
0x00000000000804aa: cmp r8, rcx; setl al; lea eax, [rax + rax - 1]; ret; 
0x00000000000c6de4: cmp r8d, 0x89497fff; ret; 
0x00000000000442b9: cmp r9d, r10d; je 0x44478; neg rax; pop rbx; pop rbp; ret; 
0x000000000001b585: cmp r9d, r8d; je 0x1b590; neg rax; pop rbx; pop rbp; ret; 
0x000000000001b043: cmp r9d, r8d; sete al; and eax, edx; ret; 
0x0000000000049eca: cmp rax, 0x4d7fffff; jle 0x49ee0; cmp eax, 0x7f7fffff; jle 0x49f28; addss xmm0, xmm0; ret; 
0x000000000006fb58: cmp rax, 0x7fff; jne 0x6fb05; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000072ab8: cmp rax, 0x7fff; jne 0x72a63; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000805ae: cmp rax, rdx; jg 0x805bd; mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x0000000000020d6a: cmp rax, rdx; jle 0x20d98; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000057d89: cmp rax, rdx; jle 0x57e60; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x38; ret; 
0x0000000000042f59: cmp rax, rdx; seta al; movzx eax, al; ret; 
0x000000000004400a: cmp rax, rdx; setbe al; movzx eax, al; ret; 
0x000000000018fe74: cmp rbp, rbx; call qword ptr [rax + 0x51]; 
0x000000000003d1e0: cmp rcx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000106525: cmp rcx, rbx; jns 0x1064f1; insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x0000000000067d53: cmp rdi, r10; jmp qword ptr [rsi + 0xf]; 
0x00000000000747cd: cmp rdx, 0x7fff; je 0x74898; add rsp, 0x18; ret; 
0x0000000000043fe4: cmp rdx, rax; setle al; movzx eax, al; ret; 
0x0000000000072570: cmp rsi, -1; mov edx, 0; cmovne rax, rdx; add rsp, 0x18; ret; 
0x00000000000ef44b: cmp spl, byte ptr [rdi + 0x20003f3a]; ret 0x7bbf; 
0x00000000000de258: cmpsb byte ptr [rsi], byte ptr [rdi]; adc eax, 0xda36ada4; mov cl, 0xbf; ret 0x34bb; 
0x00000000000dc0aa: cmpsb byte ptr [rsi], byte ptr [rdi]; adc ebx, edx; ret; 
0x00000000000480f6: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x0000000000190e41: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; cmp byte ptr [rbx], bl; bnd call rax; 
0x0000000000190e39: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; mov byte ptr [rdx], bl; inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x00000000000e4cd2: cmpsb byte ptr [rsi], byte ptr [rdi]; add dh, cl; call qword ptr [rbx]; 
0x000000000004b4f6: cmpsb byte ptr [rsi], byte ptr [rdi]; add edi, esp; jmp qword ptr [rsi + 0xf]; 
0x00000000000fdebd: cmpsb byte ptr [rsi], byte ptr [rdi]; cmp esi, esp; ret 0xfe9e; 
0x0000000000100da2: cmpsb byte ptr [rsi], byte ptr [rdi]; cmp esp, dword ptr [rbx + 0x2a]; test dword ptr [rip + 0x3ecbbbce], edi; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x00000000000ff448: cmpsb byte ptr [rsi], byte ptr [rdi]; in al, 0x56; sub r9b, dl; out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x00000000000d8806: cmpsb byte ptr [rsi], byte ptr [rdi]; mov edi, 0x9e13b088; movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x00000000001015d5: cmpsb byte ptr [rsi], byte ptr [rdi]; mov esp, 0x94f34f45; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000a7076: cmpsb byte ptr [rsi], byte ptr [rdi]; pop rax; add eax, 0x2879c500; ret; 
0x000000000010bd4a: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0x105; 
0x000000000005a9e6: cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000010c5d7: cmpsb byte ptr [rsi], byte ptr [rdi]; ror cl, 1; xchg edx, eax; ret 0x32be; 
0x00000000000c9ae6: cmpsb byte ptr [rsi], byte ptr [rdi]; sar bh, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000000d0b6: cmpsb byte ptr [rsi], byte ptr [rdi]; sldt word ptr [rax]; add rsp, 0x28; ret; 
0x000000000010c5d6: cmpsb byte ptr cs:[rsi], byte ptr [rdi]; ror cl, 1; xchg edx, eax; ret 0x32be; 
0x00000000001063f9: cmpsd dword ptr [rsi], dword ptr [rdi]; adc byte ptr [rdx + rdx*4 - 0x4400957], al; ret 0x6c54; 
0x000000000010ef32: cmpsd dword ptr [rsi], dword ptr [rdi]; adc cl, byte ptr [rbp - 0x356d4f95]; ret 0x3290; 
0x000000000010e379: cmpsd dword ptr [rsi], dword ptr [rdi]; adc ebp, r15d; cmc; add eax, 0x5f98c940; ret; 
0x0000000000190e71: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; pop r11; bnd jmp qword ptr [rax]; 
0x000000000010377c: cmpsd dword ptr [rsi], dword ptr [rdi]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x0000000000140ff1: cmpsd dword ptr [rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x000000000016f531: cmpsd dword ptr [rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x000000000018e0b1: cmpsd dword ptr [rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x00000000000fd311: cmpsd dword ptr [rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x00000000000ef44d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmp bh, byte ptr [rdi]; add byte ptr [rax], ah; ret 0x7bbf; 
0x00000000001148b9: cmpsd dword ptr [rsi], dword ptr [rdi]; jae 0x1148d7; ret; 
0x00000000001333da: cmpsd dword ptr [rsi], dword ptr [rdi]; je 0x1333b7; jmp qword ptr [rdi]; 
0x0000000000161b1a: cmpsd dword ptr [rsi], dword ptr [rdi]; je 0x161af7; jmp qword ptr [rdi]; 
0x00000000000d2c1a: cmpsd dword ptr [rsi], dword ptr [rdi]; je 0xd2bf7; jmp qword ptr [rdi]; 
0x0000000000015995: cmpsd dword ptr [rsi], dword ptr [rdi]; jne 0x159a3; add dh, bl; ret 0xc9dc; 
0x0000000000105613: cmpsd dword ptr [rsi], dword ptr [rdi]; mov cs, ebp; push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000dc272: cmpsd dword ptr [rsi], dword ptr [rdi]; pop rsi; in al, dx; ret 0xbc01; 
0x00000000000464b5: cmpsd dword ptr [rsi], dword ptr [rdi]; push rbx; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000e6619: cmpsd dword ptr [rsi], dword ptr [rdi]; push rsp; sbb eax, 0x3ff005d2; imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x00000000000eb0c1: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x000000000005aae5: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 6; 
0x00000000000cdc64: cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x00000000000e78ac: cmpsd dword ptr [rsi], dword ptr [rdi]; sub byte ptr [rip - 0x5450ab14], r15b; pop rbp; ret; 
0x0000000000140ff0: cmpsd dword ptr gs:[rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x000000000016f530: cmpsd dword ptr gs:[rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x000000000018e0b0: cmpsd dword ptr gs:[rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x00000000000fd310: cmpsd dword ptr gs:[rsi], dword ptr [rdi]; and dword ptr [rdx - 0x42], 0xc4400733; push rcx; jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x000000000004ea86: cvtpi2ps xmm0, mm0; addss xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000004403c: cvtpi2ps xmm0, mm0; ret; 
0x00000000000320e6: cvtpi2ps xmm0, mm2; ret; 
0x0000000000030f2d: cvtpi2ps xmm1, mm0; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004f235: cvtpi2ps xmm1, mm0; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000031556: cvtpi2ps xmm1, mm3; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004f796: cvtpi2ps xmm1, mm3; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x00000000000128e2: cvtps2pd xmm0, xmm0; add rsp, 8; ret; 
0x000000000004a735: cvtps2pd xmm0, xmm0; ret; 
0x000000000004d4ea: cvtps2pd xmm0, xmm1; ret; 
0x000000000004aa00: cvtps2pd xmm0, xmm2; ret; 
0x0000000000051238: cvtps2pd xmm1, xmm0; subsd xmm3, xmm1; divsd xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x00000000000128d9: cvtps2pd xmm1, xmm1; call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000051244: cvtps2pd xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x0000000000042d82: cvtps2pi mm0, xmm0; ret; 
0x0000000000042d80: cvtsd2si rax, xmm0; ret; 
0x00000000000128e1: cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x000000000004a734: cvtsd2ss xmm0, xmm0; ret; 
0x000000000004d4e9: cvtsd2ss xmm0, xmm1; ret; 
0x000000000004a9ff: cvtsd2ss xmm0, xmm2; ret; 
0x0000000000051243: cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x000000000004403a: cvtsi2sd xmm0, rax; ret; 
0x00000000000320e4: cvtsi2sd xmm0, rdx; ret; 
0x0000000000030f2c: cvtsi2sd xmm1, eax; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x0000000000031555: cvtsi2sd xmm1, ebx; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004ea85: cvtsi2ss xmm0, eax; addss xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x00000000000501b2: cvtsi2ss xmm0, eax; ret; 
0x000000000004f234: cvtsi2ss xmm1, eax; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x000000000004f795: cvtsi2ss xmm1, ebx; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000051237: cvtss2sd xmm1, xmm0; subsd xmm3, xmm1; divsd xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x00000000000128d8: cvtss2sd xmm1, xmm1; call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000050d40: cvtss2si rax, xmm0; ret; 
0x0000000000042e02: cvttps2pi mm0, xmm0; ret; 
0x0000000000042e00: cvttsd2si rax, xmm0; ret; 
0x0000000000050da0: cvttss2si rax, xmm0; ret; 
0x000000000003265f: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000075cc7: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008200b: cwde; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000000134c5: cwde; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x000000000018f4a4: cwde; int 0xe7; call qword ptr [rax]; 
0x000000000007ae64: cwde; jnp 0x7ae66; jmp qword ptr [rsi + 0xf]; 
0x000000000012340c: cwde; js 0x12341d; mov edi, 0x99164000; jbe 0x1233a3; ret; 
0x0000000000151c6c: cwde; js 0x151c7d; mov edi, 0x99164000; jbe 0x151c03; ret; 
0x00000000000ef48c: cwde; js 0xef49d; mov edi, 0x99164000; jbe 0xef423; ret; 
0x00000000000d94fd: cwde; mov ch, 0xbf; mov bh, 0x3f; add dword ptr [rax], eax; movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x0000000000199b28: cwde; mov eax, dword ptr [rax]; add byte ptr [rdx + rdi*2], al; int1; call rsi; 
0x00000000001931d8: cwde; mov eax, ebp; jmp qword ptr [rax + 2]; 
0x000000000012e746: cwde; mov edi, 0x736708ae; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae6: cwde; mov edi, 0x736708ae; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf66: cwde; mov edi, 0x736708ae; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d226: cwde; mov edi, 0x736708ae; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181006: cwde; mov edi, 0x736708ae; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda6: cwde; mov edi, 0x736708ae; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de606: cwde; mov edi, 0x736708ae; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa6: cwde; mov edi, 0x736708ae; jge 0xfaabc; ret 0x8d3f; 
0x000000000011467d: cwde; mov edi, dword ptr [rdi]; jp 0x1146c2; sub ebp, dword ptr [rsp + rsi*4 - 0x52f1463b]; fld dword ptr [rbx]; ret; 
0x000000000018fc6c: cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000191f58: cwde; or al, ch; call rsp; 
0x000000000001aed9: cwde; or r10d, esi; or r10d, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x0000000000190144: cwde; out 0xeb, al; call ptr [rax - 0x57ffffa3]; out 0xeb, eax; call rax; 
0x000000000010e381: cwde; pop rdi; ret; 
0x00000000001092fa: cwde; ret 0x2b9d; 
0x00000000000fc52d: cwde; ret 0x843f; 
0x000000000009ccb7: cwde; ret 0xdbc5; 
0x000000000009d077: cwde; ret 0xf3c5; 
0x000000000000ef44: cwde; ret; 
0x0000000000191b48: cwde; shl edi, cl; call rax; 
0x0000000000198d98: cwde; std; out dx, eax; call qword ptr [rbp + 3]; 
0x000000000018ffbc: cwde; xchg bl, ch; call rax; 
0x00000000000dd7db: cwde; xchg ecx, eax; push 0x5aaf3fa2; xor al, 0x2d; std; call rcx; 
0x000000000004964b: dec byte ptr [rax]; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049663: dec byte ptr [rax]; je 0x49668; ret; 
0x000000000004968b: dec byte ptr [rax]; je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000496a3: dec byte ptr [rax]; je 0x496a8; ret; 
0x00000000000af3f6: dec byte ptr [rdi]; xchg dword ptr [rbx - 0x3b000000], esp; sti; pop rsp; ret; 
0x0000000000098dbf: dec byte ptr [rdi]; xchg dword ptr [rdx - 0x3b000000], ebp; sti; pop rsp; ret; 
0x00000000001311d9: dec byte ptr [rdx + rbp*8]; jno 0x1311ae; ret 0xd33f; 
0x000000000015f919: dec byte ptr [rdx + rbp*8]; jno 0x15f8ee; ret 0xd33f; 
0x00000000000d0a19: dec byte ptr [rdx + rbp*8]; jno 0xd09ee; ret 0xd33f; 
0x0000000000051013: dec byte ptr [rdx]; add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000af3f5: dec byte ptr cs:[rdi]; xchg dword ptr [rbx - 0x3b000000], esp; sti; pop rsp; ret; 
0x0000000000098dbe: dec byte ptr cs:[rdi]; xchg dword ptr [rdx - 0x3b000000], ebp; sti; pop rsp; ret; 
0x0000000000051037: dec byte ptr gs:[rdx]; add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000001900df: dec dword ptr [rax + 0x1800005b]; ret; 
0x00000000000c56ac: dec dword ptr [rax + 0x21]; ret 0x7be9; 
0x0000000000067d44: dec dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000071ddd: dec dword ptr [rax + 0x21]; retf 0x948; ret 0x8948; 
0x000000000018fe47: dec dword ptr [rax + 0x28000050]; cmp ebx, ebp; call rax; 
0x000000000006a693: dec dword ptr [rax + 0x39]; ret; 
0x00000000000c8644: dec dword ptr [rax + 9]; ret; 
0x0000000000059644: dec dword ptr [rax - 0x39]; ret 0xda80; 
0x00000000000c606f: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x00000000000c52af: dec dword ptr [rax - 0x3f]; out dx, al; add esp, dword ptr [rsi + 0x41]; and eax, 0x21487fff; ret 0x8949; 
0x00000000000c9a3c: dec dword ptr [rax - 0x48]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000001562f: dec dword ptr [rax - 0x73]; adc eax, 0xb76cd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002a84b: dec dword ptr [rax - 0x73]; adc eax, 0xb9669; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000c7288: dec dword ptr [rax - 0x73]; xchg ecx, eax; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000c8ffa: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000000c998b: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x30; pop rbx; ret; 
0x00000000000c9636: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c8bc8: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x38; ret; 
0x00000000000c874b: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000c9b2c: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x95; ret; 
0x000000000018fb8f: dec dword ptr [rax]; add byte ptr [r8], al; clc; adc ebp, ecx; jmp qword ptr [rax]; 
0x000000000019058f: dec dword ptr [rax]; jno 0x190593; add byte ptr [rax - 0x41], ch; in eax, dx; call qword ptr [rax + 0x71]; 
0x0000000000108087: dec dword ptr [rax]; leave; cmc; jmp qword ptr [rax]; 
0x0000000000190197: dec dword ptr [rax]; pop rdi; add byte ptr [rax], al; clc; imul bl; jmp qword ptr [rax]; 
0x00000000000cb72b: dec dword ptr [rbp + rax*2 + 0x426cfff4]; hlt; call rsp; 
0x000000000002cd4f: dec dword ptr [rbp - 0x41371]; call rbx; 
0x00000000000c67fc: dec dword ptr [rbp - 0x73]; nop; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x0000000000069e13: dec dword ptr [rcx + 0x21]; ret; 
0x0000000000097110: dec dword ptr [rcx + 0x29]; ret 0x394d; 
0x00000000000c88ff: dec dword ptr [rcx + 1]; fmul dword ptr [rax + 0x11]; ret 0xf48; 
0x0000000000098387: dec dword ptr [rcx - 0x73]; push rsp; jmp qword ptr [rax]; 
0x00000000000c6019: dec dword ptr [rcx - 0x77]; ret; 
0x000000000002cf10: dec dword ptr [rcx - 0x7a192c12]; test byte ptr [rdi], -0x7b; ret; 
0x00000000000c772e: dec dword ptr [rcx - 0x7d]; ret 0x4904; 
0x00000000000c7658: dec dword ptr [rcx - 0x7d]; ret 0x4908; 
0x0000000000059559: dec dword ptr [rcx - 0x7f]; ret; 
0x0000000000042505: dec dword ptr [rcx]; fmul dword ptr [rax + 0x21]; ror dword ptr [rax + 9], cl; ret; 
0x000000000010be2b: dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x000000000010308c: dec dword ptr [rdi - 0xb]; mov edi, 0xffbb9687; xchg esp, eax; ret 0x5106; 
0x00000000000182aa: dec dword ptr [rdi]; mov edi, gs; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x000000000004ee52: dec dword ptr [rdi]; push rdi; add eax, 0x7cc86; ret; 
0x000000000004a0ac: dec dword ptr [rdi]; push rdi; add eax, 0x81a2c; ret; 
0x00000000000526f2: dec dword ptr [rdi]; push rsp; ret 0x3ba; 
0x000000000005004a: dec dword ptr [rdi]; sub al, cl; mulss xmm1, xmm0; ret; 
0x0000000000056d97: dec dword ptr [rdi]; sub byte ptr [rsp], cl; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x00000000000c245b: dec dword ptr [rdi]; test byte ptr [rax - 0x16000045], dh; test dh, -1; inc ebp; ret; 
0x00000000000c863c: dec dword ptr [rdi]; test dl, ah; add eax, dword ptr [rax]; add byte ptr [rcx], dh; dec dword ptr [rax + 9]; ret; 
0x0000000000041945: dec dword ptr [rdi]; test dword ptr [rbp + rdi*8 - 1], esp; jmp qword ptr [rsi + 0xf]; 
0x000000000003c43b: dec dword ptr [rdi]; test dword ptr [rdi + rsi*8 - 1], edx; jmp qword ptr [rsi + 0x41]; 
0x000000000002dd2d: dec dword ptr [rdi]; test dword ptr [rsp + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000000d2e6: dec dword ptr [rdi]; xchg esp, eax; ret 0xf883; 
0x0000000000050f05: dec dword ptr [rdx]; add byte ptr [rdi], cl; push rsp; ret; 
0x000000000001cdd7: dec dword ptr [rdx]; add cl, bl; leave; ret; 
0x00000000000e9abd: dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x000000000019045f: dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x000000000000c124: div byte ptr [rcx]; jmp qword ptr [rsi + 0xd]; 
0x000000000019a471: div dl; call qword ptr [rbp + 7]; 
0x00000000000ea28b: div dword ptr [rdi + rdi*2]; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000d71ac: div dword ptr [rdx - 0x2bbcc02e]; ret 0xcfc1; 
0x000000000002e8f0: div ebx; ret; 
0x00000000000ec20c: div esp; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x000000000004db65: divps xmm0, xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000002099b: divps xmm0, xmm0; add rsp, 8; ret; 
0x0000000000056e71: divps xmm0, xmm0; mov rax, qword ptr [rip + 0x34613d]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000496f1: divps xmm0, xmm0; mov rax, qword ptr [rip + 0x3538bd]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000044aa9: divps xmm0, xmm0; mov rax, qword ptr [rip + 0x358505]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000442d9: divps xmm0, xmm0; mov rax, qword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000208e9: divps xmm0, xmm0; mov rax, qword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000003ceed: divps xmm0, xmm0; pop r13; ret; 
0x0000000000027e95: divps xmm0, xmm0; ret; 
0x000000000002c4f5: divps xmm0, xmm1; ret; 
0x000000000004ac0b: divps xmm0, xmm2; addss xmm0, xmm4; ret; 
0x000000000004ff24: divps xmm0, xmmword ptr [rip + 0x7bba9]; ret; 
0x0000000000032015: divps xmm0, xmmword ptr [rip + 0x992b4]; ret; 
0x000000000003cb97: divps xmm1, xmm0; js 0x3cc28; addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x0000000000050671: divps xmm1, xmm0; js 0x506f0; addss xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x000000000004ae76: divps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000002de49: divps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc39: divps xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000283c6: divps xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000003100e: divps xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000004f2f9: divps xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000049d14: divps xmm1, xmm3; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000002a671: divps xmm1, xmm4; pop r13; movapd xmm0, xmm1; ret; 
0x000000000003d01d: divps xmm1, xmmword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000002866c: divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002917e: divps xmm13, xmm10; addsd xmm13, qword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002865e: divps xmm13, xmm10; subsd xmm13, qword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002714a: divps xmm2, xmm0; addsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000004a600: divps xmm2, xmm0; addss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000002e032: divps xmm3, xmm0; subsd xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000004ddb8: divps xmm3, xmm0; subss xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x0000000000051240: divps xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x000000000002866d: divps xmm5, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002df72: divps xmm5, xmm1; addsd xmm0, xmm5; mulsd xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x000000000004dd77: divps xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x000000000002917f: divps xmm5, xmm2; addsd xmm13, qword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002865f: divps xmm5, xmm2; subsd xmm13, qword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000032014: divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x000000000003ceec: divsd xmm0, xmm0; pop r13; ret; 
0x0000000000027e94: divsd xmm0, xmm0; ret; 
0x000000000002c4f4: divsd xmm0, xmm1; ret; 
0x000000000003d01c: divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000003cb96: divsd xmm1, xmm0; js 0x3cc28; addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x000000000002de48: divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000283c5: divsd xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000003100d: divsd xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000002a670: divsd xmm1, xmm4; pop r13; movapd xmm0, xmm1; ret; 
0x000000000002866b: divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002917d: divsd xmm13, xmm10; addsd xmm13, qword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002865d: divsd xmm13, xmm10; subsd xmm13, qword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000027149: divsd xmm2, xmm0; addsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000002e031: divsd xmm3, xmm0; subsd xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000005123f: divsd xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x000000000002df71: divsd xmm5, xmm1; addsd xmm0, xmm5; mulsd xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x000000000004ff23: divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004db64: divss xmm0, xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000002099a: divss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000056e70: divss xmm0, xmm0; mov rax, qword ptr [rip + 0x34613d]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000496f0: divss xmm0, xmm0; mov rax, qword ptr [rip + 0x3538bd]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000044aa8: divss xmm0, xmm0; mov rax, qword ptr [rip + 0x358505]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000442d8: divss xmm0, xmm0; mov rax, qword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000208e8: divss xmm0, xmm0; mov rax, qword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000049c34: divss xmm0, xmm0; ret; 
0x000000000004d35a: divss xmm0, xmm1; ret; 
0x000000000004ac0a: divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x0000000000050670: divss xmm1, xmm0; js 0x506f0; addss xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x000000000004ae75: divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004dc38: divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004f2f8: divss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000049d13: divss xmm1, xmm3; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000004a5ff: divss xmm2, xmm0; addss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004ddb7: divss xmm3, xmm0; subss xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004dd76: divss xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x0000000000015463: fabs; fld1; fdivrp st(1); ret; 
0x0000000000015a60: fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000012902: fabs; fxch st(1); fpatan; ret; 
0x0000000000017f24: fabs; ret; 
0x00000000000207b1: fadd dword ptr [rax - 0x37fba1c]; add eax, 0x8b483874; add eax, 0x37c7f7; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000006fc77: fadd dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x00000000000cd91a: fadd dword ptr [rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000010d522: fadd dword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; sahf; ret; 
0x00000000000c8155: fadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x0000000000193b28: fadd dword ptr [rcx - 0x17]; jmp qword ptr [rdx]; 
0x000000000004ecc4: fadd dword ptr [rcx]; add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x00000000000a7876: fadd dword ptr [rdx]; add byte ptr [rax - 0x3b], dh; ret; 
0x00000000000cd919: fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000007d170: fadd qword ptr [rax + 0xf660008]; outsd dx, dword ptr [rsi]; ret 0xe3e8; 
0x0000000000045a60: fadd qword ptr [rax]; add byte ptr [rax], al; andpd xmm1, xmmword ptr [rip + 0x85874]; ret; 
0x00000000000297bd: fadd qword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x000000000010d31a: fadd qword ptr [rcx]; cmc; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x000000000010d920: fadd qword ptr [rdi]; ret; 
0x0000000000109bc3: fadd qword ptr [rdx + 0x3a4f91d0]; ret 0xc49a; 
0x0000000000017f91: fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x0000000000032398: fadd qword ptr [rsp - 0x20]; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000001a0c4: fadd st(0); add rsp, 8; ret; 
0x0000000000012dfe: fadd st(0); fdivp st(1); faddp st(1); ret; 
0x000000000001b3a0: fadd st(0); pop rbx; ret; 
0x000000000001299f: fadd st(0); ret; 
0x0000000000012dfa: fadd st(2), st(0); fxch st(2); fadd st(0); fdivp st(1); faddp st(1); ret; 
0x00000000000bac56: fadd st(4), st(0); and ebx, dword ptr [r8 + rbx*8 - 0x3b]; and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x000000000008fe12: fadd st(4), st(0); pop r11; pop rcx; ret; 
0x000000000009033a: fadd st(4); fnstcw word ptr [rcx + 0x3bc1c4d9]; pop rax; ret; 
0x00000000000b74bf: fadd st(4); jns 0xb74ec; ret; 
0x0000000000090a72: fadd st(4); ret 0x9da1; 
0x000000000008f327: fadd st(4); ret 0xb9c1; 
0x000000000009fc49: fadd st(4); ret; 
0x000000000009315f: fadd st(5), st(0); and dword ptr [rdx + rbx*8 - 0x3b], edx; ret; 
0x0000000000098bac: fadd st(5), st(0); jns 0x98bd8; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000af1ed: fadd st(5), st(0); jns 0xaf219; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000b4d33: fadd st(5), st(0); jns 0xb4d5f; ret; 
0x00000000000bde94: fadd st(5), st(0); jns 0xbdec0; ret; 
0x0000000000095fe8: fadd st(5), st(0); pop rbx; pop rcx; ret; 
0x000000000008f580: fadd st(5), st(0); ret; 
0x00000000000bac5b: fadd st(5); and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000b973b: fadd st(5); jns 0xb9768; rol ah, 0xc1; jnp 0xb979c; ret; 
0x00000000000bdd23: fadd st(5); jns 0xbdd4f; ret 0x39c5; 
0x00000000000bf14d: fadd st(5); jns 0xbf17a; call 0x5987b31a; ret; 
0x00000000000bf3cf: fadd st(5); jns 0xbf3fb; ret; 
0x00000000000c19ea: fadd st(5); jns 0xc1a16; ret; 
0x00000000000bffd4: fadd st(5); ret; 
0x0000000000098ddd: fadd st(5); sti; adc dword ptr [rdi], eax; vaddsd xmm1, xmm3, xmm1; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x00000000000b1694: fadd st(5); sti; pop rax; ret; 
0x000000000008bf4c: fadd st(5); sti; pop rsp; ret; 
0x00000000000cfc62: fadd st(6); cld; cmp eax, 0xdbdd3ff3; in al, dx; jmp qword ptr [rbx + 0x22]; 
0x0000000000020b92: faddp st(1); add rsp, 0x28; ret; 
0x000000000001761b: faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x00000000000134c6: faddp st(1); fdivp st(2); faddp st(1); ret; 
0x0000000000012bd5: faddp st(1); fld xword ptr [rip + 0xb8f13]; fsubrp st(1); jns 0x12b49; fchs; ret; 
0x0000000000018724: faddp st(1); fld xword ptr [rsp + 0x10]; pop rbx; fmulp st(1); ret; 
0x0000000000050398: faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000015628: faddp st(1); ja 0x152ed; lea rdx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000018118: faddp st(1); pop rbx; pop rbp; ret; 
0x00000000000186fd: faddp st(1); pop rbx; ret; 
0x0000000000012bb6: faddp st(1); ret; 
0x00000000000176cd: faddp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000016191: faddp st(4); fdivrp st(3); fsubrp st(2); fmulp st(1); ret; 
0x0000000000090e67: faddp st(4); ret 0x9dd9; 
0x0000000000090335: faddp st(4); stc; mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x000000000008967e: faddp st(5); and dword ptr [rcx + rbx*8 - 0x3c], edx; jns 0x896b5; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x000000000009fbfe: faddp st(5); and dword ptr [rcx + rbx*8 - 0x3c], edx; jns 0x9fc35; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x00000000000bd9a6: faddp st(5); ret; 
0x00000000000bf48a: faddp st(5); sti; pop rcx; ret; 
0x00000000000c199e: faddp st(5); sti; pop rsp; ret; 
0x00000000000d1fb9: fbld tbyte ptr [r10 + 0x3fe1dcbf]; in eax, 0xe4; ret 0x25e7; 
0x00000000000ca39a: fbld tbyte ptr [rax]; adc bl, dl; call 0xffffffffd64445e2; ret; 
0x000000000010e378: fbld tbyte ptr [rdi - 0xa02eebc]; add eax, 0x5f98c940; ret; 
0x00000000000d1fba: fbld tbyte ptr [rdx + 0x3fe1dcbf]; in eax, 0xe4; ret 0x25e7; 
0x000000000004f074: fbstp tbyte ptr [rax + rax]; lea rdx, [rip + 0x37a62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x00000000000e452b: fbstp tbyte ptr [rdi - 0x7e]; in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x000000000001c11e: fchs; add rsp, 0x18; ret; 
0x000000000001fdc6: fchs; add rsp, 0x30; pop rbx; fxch st(1); ret; 
0x000000000001c6be: fchs; add rsp, 8; fxch st(1); ret; 
0x000000000001700e: fchs; fdivrp st(1); ret; 
0x000000000001f7b6: fchs; fdivrp st(2); fxch st(1); ret; 
0x000000000001bdf4: fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000020808: fchs; fstp xword ptr [rsp]; call 0x1aeb0; add rsp, 0x18; fchs; ret; 
0x000000000001bebe: fchs; fxch st(1); ret; 
0x000000000001cf4a: fchs; mov rbx, qword ptr [rbp - 8]; leave; fxch st(1); ret; 
0x0000000000012d18: fchs; pop rbx; ret; 
0x0000000000012be5: fchs; ret; 
0x000000000002082c: fcmovb st(0), st(1); fstp st(1); ret; 
0x00000000000b7554: fcmovb st(0), st(4); jns 0xb7581; ret 0x41c4; 
0x00000000000a3356: fcmovb st(0), st(4); pop r9; ret; 
0x000000000008a3e9: fcmovb st(0), st(4); ret 0x9999; 
0x000000000008cc57: fcmovb st(0), st(5); jns 0x8cc83; int 0xc4; ret 0x99c1; 
0x00000000000955bd: fcmovb st(0), st(5); jns 0x955e9; ret 0x876; 
0x00000000000abbd1: fcmovb st(0), st(5); jns 0xabbfd; ret 0x876; 
0x000000000008809c: fcmovb st(0), st(5); rcl dword ptr [rbx + rbp*8 - 0x3b]; ret; 
0x0000000000087d43: fcmovb st(0), st(5); ret; 
0x00000000000939ba: fcmovb st(0), st(5); stc; push rsp; ret 0x79c5; 
0x000000000009374d: fcmovb st(0), st(5); sti; pop rax; ret 0xe3c5; 
0x000000000008b69f: fcmovb st(0), st(5); sti; pop rsp; ret; 
0x0000000000020b84: fcmovbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000012340a: fcmove st(0), st(0); cwde; js 0x12341d; mov edi, 0x99164000; jbe 0x1233a3; ret; 
0x0000000000151c6a: fcmove st(0), st(0); cwde; js 0x151c7d; mov edi, 0x99164000; jbe 0x151c03; ret; 
0x00000000000ef48a: fcmove st(0), st(0); cwde; js 0xef49d; mov edi, 0x99164000; jbe 0xef423; ret; 
0x00000000000e83c3: fcmove st(0), st(3); ret 0x3f3a; 
0x000000000002086c: fcmovnb st(0), st(1); fstp st(1); ret; 
0x0000000000092882: fcmovnb st(0), st(2); ret; 
0x00000000000bac51: fcmovnb st(0), st(4); jns 0xbac7e; fadd st(4), st(0); and ebx, dword ptr [r8 + rbx*8 - 0x3b]; and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000afdfd: fcmovnb st(0), st(4); ret; 
0x00000000000877f2: fcmovnb st(0), st(5); imul ebx, dword ptr [rcx - 0x37], -0x3b; jns 0x87822; ret 0xe3c5; 
0x00000000000990c2: fcmovnb st(0), st(5); jns 0x990ee; ffreep st(5); ret; 
0x0000000000099652: fcmovnb st(0), st(5); jns 0x9967e; ffreep st(5); ret; 
0x0000000000020c42: fcmovnbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000012851c: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x128549; ret; 
0x00000000001388bc: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x1388e9; ret; 
0x0000000000156d3c: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x156d69; ret; 
0x0000000000166ffc: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x167029; ret; 
0x000000000017addc: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x17ae09; ret; 
0x0000000000185b7c: fcmovne st(0), st(0); mov ah, 0xbf; jb 0x185ba9; ret; 
0x00000000000d83dc: fcmovne st(0), st(0); mov ah, 0xbf; jb 0xd8409; ret; 
0x00000000000f487c: fcmovne st(0), st(0); mov ah, 0xbf; jb 0xf48a9; ret; 
0x000000000006f78a: fcmovne st(0), st(0); movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x000000000007dac2: fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000001907d4: fcom dword ptr [rax + 0x7ed8ffee]; add byte ptr [rax], al; pop rax; cdq; out dx, al; call qword ptr [rax]; 
0x0000000000197698: fcom dword ptr [rcx - 0x12]; jmp qword ptr [rsi]; 
0x0000000000190ba0: fcom dword ptr [rdx - 0x2f1f0000]; out dx, eax; call qword ptr [rax]; 
0x000000000019a46c: fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x00000000000d988a: fcom qword ptr [rbx + 0x51]; ret; 
0x00000000000549e2: fcomi st(3); movups xmmword ptr [rsp + 0x50], xmm4; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x000000000004ea8c: fcomi st(3); subps xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x0000000000051ba3: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000181ac: fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000004db54: fcomp dword ptr [rbx + 0x66]; movd mm0, eax; pop rbp; ret; 
0x0000000000190a6c: fcomp dword ptr [rcx - 0x11]; call rax; 
0x00000000001966a8: fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x00000000001149a2: fcomp qword ptr [r10 - 0x42]; push r12; jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x0000000000102d42: fcomp qword ptr [rbp - 0x11]; or eax, 0x13e; add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x0000000000197874: fcomp qword ptr [rcx - 0x12]; call qword ptr [rax]; 
0x00000000001149a3: fcomp qword ptr [rdx - 0x42]; push r12; jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x00000000000206e7: fcomp st(1); add eax, 0xac642; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001f957: fcomp st(1); add eax, 0xad3d2; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001e521: fcomp st(1); add eax, 0xae808; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000001cdd3: fcomp st(1); add eax, 0xaff56; fxch st(1); ret; 
0x000000000001c197: fcomp st(1); add eax, 0xb02d2; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x000000000001c712: fcomp st(1); add eax, 0xb32db; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x0000000000015a68: fcomp st(1); int1; ret; 
0x0000000000016099: fcomp st(1); out dx, al; fdiv st(0); ret; 
0x0000000000012fcf: fcomp st(1); out dx, al; ret; 
0x00000000000503a9: fcomp st(1); pop rsp; and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000001ae1c: fcomp st(1); ret 0xc5d8; 
0x00000000000c4a99: fcomp st(1); ret; 
0x000000000001ae8e: fcomp st(3); insb byte ptr [rdi], dx; and al, 0xa8; faddp st(1); ret; 
0x0000000000020a2d: fcomp st(3); jl 0x20a55; or cl, ch; sub dword ptr [rbp - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000016ada: fcomp st(3); pop rsp; and al, 0xfc; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x000000000001dec4: fcomp st(3); sub eax, 0xb1b15; add rsp, 0x58; fxch st(1); ret; 
0x000000000001c162: fcomp st(3); sub eax, 0xb3877; add rsp, 0x18; fldz; ret; 
0x0000000000018306: fcomp st(3); sub eax, 0xb6573; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000015e34: fcomp st(5); add eax, 0xb5485; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015cd3: fcomp st(5); add eax, 0xb55e6; ret; 
0x0000000000015e93: fcomp st(5); add eax, 0xb5c1e; ret; 
0x0000000000016097: fcomp st(5); fcomp st(1); out dx, al; fdiv st(0); ret; 
0x000000000001a131: fcomp st(5); fdivr dword ptr [rax - 1]; ret; 
0x000000000001dbff: fcomp st(5); fsubr st(0); cdq; fdiv st(6), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000032369: fcomp st(5); pop rsp; and al, 0xe0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000019934d: fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x0000000000016058: fcompi st(2); jne 0x16096; fscale; fstp st(1); ret; 
0x000000000010809d: fcompi st(5); jmp qword ptr [rax - 0x23]; 
0x0000000000041e21: fcos; jmp qword ptr [rsi + 0xf]; 
0x000000000001a562: fdecstp; ret; 
0x0000000000047e04: fdiv dword ptr [rax + rcx]; add byte ptr [rsi + 0xf], ah; push rsp; ret 0xf66; 
0x0000000000190afc: fdiv dword ptr [rbp - 0x11]; call qword ptr [rax]; 
0x0000000000015c59: fdiv dword ptr [rbx + 6]; fld st(0); fmul st(0); fstp st(0); ret; 
0x000000000018f8f8: fdiv dword ptr [rbx]; add byte ptr [rax], al; pop rax; jge 0x18f8e7; call qword ptr [rax]; 
0x000000000001c6f9: fdiv dword ptr [rdx + rcx - 0x77]; ret 0xe680; 
0x0000000000012d64: fdiv dword ptr [rip + 0xb8d6a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000018ba7: fdiv dword ptr [rsi + rdi*2 - 0xd]; ret; 
0x0000000000048790: fdiv qword ptr [rcx]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000001279d: fdiv qword ptr [rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb932d]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000011bfd: fdiv qword ptr [rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb9ecd]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011b7d: fdiv qword ptr [rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb9f4d]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x000000000000e560: fdiv qword ptr [rdx + 0x15]; ucomisd xmm0, qword ptr [rip + 0xbcd65]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x000000000000e4f0: fdiv qword ptr [rdx + 0xd]; add rsp, 0x18; ret; 
0x000000000000f187: fdiv qword ptr [rdx + 6]; add rsp, 0x18; ret; 
0x0000000000011b1d: fdiv qword ptr [rdx + 8]; add rsp, 0x18; ret; 
0x0000000000012704: fdiv qword ptr [rdx + 9]; add rsp, 0x18; ret; 
0x0000000000015e3b: fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015e2a: fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x000000000001279c: fdiv qword ptr cs:[rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb932d]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000011bfc: fdiv qword ptr cs:[rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb9ecd]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011b7c: fdiv qword ptr cs:[rdx + 0x10]; ucomiss xmm0, dword ptr [rip + 0xb9f4d]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x000000000000e55f: fdiv qword ptr cs:[rdx + 0x15]; ucomisd xmm0, qword ptr [rip + 0xbcd65]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x000000000000e4ef: fdiv qword ptr cs:[rdx + 0xd]; add rsp, 0x18; ret; 
0x000000000000f186: fdiv qword ptr cs:[rdx + 6]; add rsp, 0x18; ret; 
0x0000000000011b1c: fdiv qword ptr cs:[rdx + 8]; add rsp, 0x18; ret; 
0x0000000000012703: fdiv qword ptr cs:[rdx + 9]; add rsp, 0x18; ret; 
0x0000000000012d26: fdiv st(0); add rsp, 0x10; pop rbx; ret; 
0x000000000001292c: fdiv st(0); add rsp, 0x18; ret; 
0x0000000000012a3a: fdiv st(0); ret; 
0x00000000001126a9: fdiv st(2); cdq; cmp byte ptr [rbp + 0x61], dl; cmp al, 0x83; int 0xa7; ret; 
0x000000000002e034: fdiv st(2); subps xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x0000000000054d0b: fdiv st(3); movups xmmword ptr [rsp + 0x40], xmm2; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x000000000005333a: fdiv st(3); movups xmmword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x00000000000207f1: fdiv st(3); ret; 
0x000000000004ddba: fdiv st(3); subps xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000005013f: fdiv st(3); subps xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050007: fdiv st(3); subps xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x000000000001dc04: fdiv st(6), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000015de1: fdiv st(6); ret 0x7402; 
0x000000000003c7c3: fdiv st(7), st(0); jmp qword ptr [rsi + 0x45]; 
0x000000000003c6ff: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000017619: fdivp st(1); faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x0000000000012e00: fdivp st(1); faddp st(1); ret; 
0x00000000000435d2: fdivp st(1); fstp qword ptr [rsi]; ret; 
0x0000000000013752: fdivp st(1); ret; 
0x00000000000134c8: fdivp st(2); faddp st(1); ret; 
0x000000000007b71b: fdivp st(5); jmp qword ptr [rsi + 0xf]; 
0x0000000000036ed7: fdivp st(7); jmp qword ptr [rsi + 0x41]; 
0x000000000003fbb7: fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000016ae6: fdivr dword ptr [rax + 0x7fffffff]; ret; 
0x00000000000fd1ab: fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x0000000000016aee: fdivr dword ptr [rax - 0x80000000]; ret; 
0x000000000001a133: fdivr dword ptr [rax - 1]; ret; 
0x00000000001907b8: fdivr dword ptr [rbp]; add byte ptr [rax + 0x76], cl; out dx, al; call qword ptr [rax]; 
0x0000000000190700: fdivr dword ptr [rcx]; add byte ptr [rax], ch; out dx, al; jmp qword ptr [rax]; 
0x00000000001930d8: fdivr dword ptr [rdi - 0x18]; call qword ptr [rdi]; 
0x00000000000dc14c: fdivr dword ptr [rip - 0x51ed402f]; mov bh, 0xb4; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x000000000018fdcc: fdivr dword ptr [rsi - 0x16]; jmp qword ptr [rax + 0x4e]; 
0x00000000001907d8: fdivr dword ptr [rsi]; add byte ptr [rax - 0x67], bl; out dx, al; call qword ptr [rax]; 
0x00000000000d1da5: fdivr qword ptr [r15]; sti; ret 0xa7e9; 
0x00000000000d8326: fdivr qword ptr [rdi]; std; and ecx, esp; ret; 
0x00000000000d1da6: fdivr qword ptr [rdi]; sti; ret 0xa7e9; 
0x00000000000186f9: fdivr st(1); js 0x18740; faddp st(1); pop rbx; ret; 
0x0000000000053340: fdivr st(3), st(0); movd dword ptr [rsp - 0x28], mm0; ret; 
0x000000000010b777: fdivr st(6), st(0); ret 0xa9aa; 
0x000000000000e05d: fdivr st(7); call qword ptr [rbp + 0x53]; 
0x00000000000e439a: fdivr st(7); cld; ret 0x3c02; 
0x000000000003c60a: fdivr st(7); jmp qword ptr [rsi + 0x41]; 
0x000000000004015b: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000012c62: fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x000000000001543e: fdivrp st(1); pop r12; pop r13; ret; 
0x0000000000015467: fdivrp st(1); ret; 
0x000000000001f7b8: fdivrp st(2); fxch st(1); ret; 
0x0000000000016193: fdivrp st(3); fsubrp st(2); fmulp st(1); ret; 
0x000000000009da5b: fdivrp st(6); jmp qword ptr [rsi - 0x70]; 
0x0000000000093128: ffree st(4); ret 0xb9c1; 
0x0000000000095962: ffree st(5); movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000b3751: ffree st(5); pop rcx; int 0xc5; sti; pop rcx; ret; 
0x000000000008a481: ffree st(5); ret; 
0x0000000000088fd5: ffree st(5); sti; pop rcx; ret 0xc1c4; 
0x000000000009e252: ffreep st(4); ret; 
0x00000000000b7e46: ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7e78; ret; 
0x00000000000b7f2c: ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7f5e; ret; 
0x00000000000b8012: ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb8044; ret; 
0x00000000000bca30: ffreep st(5); jns 0xbca5d; ffreep st(5); ret; 
0x00000000000bfbf3: ffreep st(5); jns 0xbfc20; call 0x5987bdc0; ret; 
0x00000000000c0f11: ffreep st(5); jns 0xc0f3e; call 0x5987d0de; ret; 
0x0000000000087d5f: ffreep st(5); ret; 
0x00000000000b4697: ffreep st(5); sti; pop rax; ret; 
0x00000000000c90b4: fiadd dword ptr [rax - 0x7c]; test byte ptr [rax + 0xf], 0x45; ret 0x8545; 
0x00000000000c8df1: fiadd dword ptr [rax - 0x7c]; test byte ptr [rdi], 0x45; ret 0x949; 
0x00000000000d4cf5: fiadd dword ptr [rbx + 0x143c1f41]; test eax, 0x41c2450e; mov esp, 0xbe9fd995; and eax, 0x33e63c7d; pop rbp; ret; 
0x000000000007dfd2: fiadd dword ptr [rcx + 0x29]; ret 0x894c; 
0x00000000000c56f5: fiadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x000000000009dad3: fiadd dword ptr [rdi]; add byte ptr [rdi], cl; xchg ah, cl; add eax, 0x89480000; ret 0xc089; 
0x000000000009c8da: fiadd dword ptr [rsi]; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x00000000000eb12d: fiadd word ptr [rax + 0x3f]; sub bh, ah; adc dword ptr [rdi - 0x11], esi; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x00000000000cd916: fiadd word ptr [rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000010b8e1: fiadd word ptr [rcx - 0x2883477b]; call qword ptr [rbp - 0x58]; 
0x00000000001148b4: fiadd word ptr [rdi + rcx*4]; jp 0x1148f4; cmpsd dword ptr [rsi], dword ptr [rdi]; jae 0x1148d7; ret; 
0x000000000009d481: fiadd word ptr [rdx]; add ch, al; sti; ret 0x4305; 
0x00000000000cd915: fiadd word ptr fs:[rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x00000000000a34e8: ficom dword ptr [rax - 0x3b]; ret; 
0x000000000000cd82: ficom dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000000000e3d30: ficom dword ptr [rsi]; pop rbp; ret 0xec71; 
0x000000000010d539: ficomp dword ptr [rbp + rbp*8 + 0x401610f7]; ret; 
0x00000000000eaa41: ficomp dword ptr [rbx + rbp*2]; adc eax, 0xadbd3b55; ret 0xd64e; 
0x00000000000ef4d3: ficomp word ptr [rcx - 0x3c]; ret; 
0x0000000000045a9d: fidiv word ptr [rbx + 0x1c]; ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000000f06cb: fidiv word ptr [rsi]; xchg ebx, eax; sbb bh, byte ptr [rdi]; add byte ptr [rax], ah; xchg ecx, eax; ret; 
0x0000000000045a9c: fidiv word ptr cs:[rbx + 0x1c]; ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x0000000000110617: fidivr dword ptr [rbp + 0x3f]; add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x000000000009affa: fidivr dword ptr [rdi + 0xa]; add dl, dh; mulps xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000ddee6: fidivr dword ptr [rdi]; add byte ptr [rbp + 0x1a], al; ret 0xb24f; 
0x00000000000d5e15: fidivr word ptr [rdx + 0x7f133b3f]; push rdx; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000098c86: fidivr word ptr [rsi + 7]; add ch, al; ret; 
0x00000000000a6941: fild dword ptr [rax + 0x6bd943c4]; fist dword ptr [rax + 0x583bc1c4]; ret; 
0x0000000000083e98: fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x00000000000c51ce: fild dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x0000000000019fd4: fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000d0b22: fild qword ptr [rax - 0x6b]; cld; ret; 
0x000000000001b0c2: fild qword ptr [rsp - 0x10]; ret; 
0x000000000004a215: fild word ptr [rax]; add byte ptr [rax], al; movaps xmm2, xmm0; movaps xmm0, xmm2; pop rbx; ret; 
0x00000000000d4102: fild word ptr [rbp + 0x40c56267]; outsb dx, byte ptr [rsi]; ror byte ptr [rbx], 0x2d; and ah, byte ptr [rcx - 0x53]; mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x00000000000be921: fild word ptr [rbx]; add ch, al; ret; 
0x00000000000be935: fild word ptr [rbx]; add ch, al; sti; pop rcx; ret; 
0x000000000010cc1b: fild word ptr [rsi]; js 0x10cc2b; push 0x7d; and r15d, edx; ret 0x6adc; 
0x000000000006f889: fimul dword ptr [rax + 0x21]; ret 0x3948; 
0x00000000000441c0: fimul dword ptr [rax + 0x21]; shl byte ptr [rsi + 0x48], 1; movd mm0, eax; ret; 
0x00000000000727e4: fimul dword ptr [rax + 9]; ret 0xb848; 
0x00000000000c880d: fimul dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000bd96e: fimul dword ptr [rax - 0x77]; ret 0xcbc5; 
0x000000000003757e: fimul dword ptr [rax - 0x77]; ret 0xff2; 
0x00000000000c780a: fimul dword ptr [rbp - 0x7b]; rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0xf45; 
0x0000000000019e42: fimul dword ptr [rcx]; ret 0xc889; 
0x000000000001904c: fimul dword ptr [rdi]; wait; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000008e773: fimul dword ptr [rdi]; xchg byte ptr [rbx + rax], ch; add ch, al; ret; 
0x000000000009352e: fimul dword ptr [rdi]; xchg byte ptr [rbx], bl; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000a9af6: fimul dword ptr [rdi]; xchg byte ptr [rbx], ch; adc byte ptr [rax], al; add ch, al; ret; 
0x0000000000089610: fimul dword ptr [rdi]; xchg byte ptr [rcx], ch; adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000009fb92: fimul dword ptr [rdi]; xchg byte ptr [rdi], dl; adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000009fc07: fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x0000000000089687: fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x00000000000c5119: fimul dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000008e772: fimul dword ptr cs:[rdi]; xchg byte ptr [rbx + rax], ch; add ch, al; ret; 
0x000000000009352d: fimul dword ptr cs:[rdi]; xchg byte ptr [rbx], bl; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000a9af5: fimul dword ptr cs:[rdi]; xchg byte ptr [rbx], ch; adc byte ptr [rax], al; add ch, al; ret; 
0x000000000008960f: fimul dword ptr cs:[rdi]; xchg byte ptr [rcx], ch; adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000009fb91: fimul dword ptr cs:[rdi]; xchg byte ptr [rdi], dl; adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000009fc06: fimul dword ptr cs:[rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x0000000000089686: fimul dword ptr cs:[rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x000000000009ae03: fimul word ptr [rax - 0x46]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x0000000000084067: fimul word ptr [rcx + 0x29]; ret 0x1f0f; 
0x00000000000a6947: fist dword ptr [rax + 0x583bc1c4]; ret; 
0x00000000000a6533: fist dword ptr [rax - 0x3b]; sbb dword ptr [rcx - 0x14], -0x3c; ret; 
0x0000000000105600: fist dword ptr [rbx + 0x2fa584f]; ret; 
0x000000000010dc80: fist dword ptr [rcx + 0x39537598]; ret; 
0x00000000000fc7c3: fist word ptr [rdx]; int1; ret 0x9f3f; 
0x0000000000001be5: fist word ptr [rip + 0xd16fa95]; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000000fc7c2: fist word ptr ds:[rdx]; int1; ret 0x9f3f; 
0x00000000000a334b: fistp dword ptr [rax + 0x25]; add qword ptr [rdi], 0x5b41c400; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x000000000008eb6f: fistp dword ptr [rax + 0x25]; ret 0xa16; 
0x00000000000b908b: fistp dword ptr [rax + riz*8 - 0x3b]; ret; 
0x00000000000a5d44: fistp dword ptr [rbp + rbp - 0x1b]; push 5; add ah, al; ret; 
0x00000000000bfce6: fistp dword ptr [rbp + riz*8 - 0x3b]; ret; 
0x000000000008f391: fistp dword ptr [rbp + riz*8 - 0x3c]; ret 0xbdf9; 
0x000000000009c426: fistp dword ptr [rcx - 0x2e]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c3cc: fistp dword ptr [rcx - 0x3f]; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6ec0]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009170a: fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x00000000000bc245: fistp dword ptr [rdi + riz*8 - 0x3b]; jns 0xbc274; inc ebp; ret; 
0x00000000000bcbba: fistp dword ptr [rdi + riz*8 - 0x3b]; jns 0xbcbe9; inc ebp; ret; 
0x000000000012f6a2: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa42: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015dec2: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e182: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f62: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd02: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df562: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba02: fistp dword ptr [rdx + 8]; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xfba4f; ret 0x3fe5; 
0x0000000000095e2e: fistp dword ptr [rsi + rsi*8 - 0x3b]; retf; pop rsp; inc ebp; ret; 
0x0000000000016adb: fistp dword ptr [rsp - 4]; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x00000000000d200e: fistp qword ptr [rdi]; in al, 0xd4; push rcx; and eax, 0xfe3fe25e; ret; 
0x0000000000019b71: fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019a84: fistp qword ptr [rsp - 8]; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000049f2d: fistp word ptr [rdx]; cld; push rbx; addps xmm0, xmmword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x00000000000c8152: fisttp dword ptr [rax + 9]; fadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x0000000000087130: fisttp dword ptr [rax - 0x77]; ret 0xfbc5; 
0x00000000000c51cb: fisttp dword ptr [rax - 0x7b]; fild dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x00000000000c71c2: fisttp dword ptr [rbp + 1]; rol dword ptr [rcx + 0xf], 1; xchg edx, eax; ret; 
0x00000000000c7ab1: fisttp dword ptr [rcx + 1]; fmul dword ptr [rax + 0x11]; ret 0xf48; 
0x00000000000c56f2: fisttp dword ptr [rcx + 9]; fiadd dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x000000000007ad6a: fisttp dword ptr [rdi]; push rax; ret 0x8a8; 
0x000000000007c373: fisttp dword ptr [rdi]; sub dword ptr [rsp + 0x20], ebx; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000c58c0: fisttp dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000000c733d: fisttp dword ptr [rdi]; xchg esp, eax; ret 0x5422; 
0x000000000003cd49: fisttp qword ptr [rax + 0x21]; ret; 
0x00000000000fd0d5: fisttp qword ptr [rip + 0x60278f40]; or al, 0x86; mov edx, 0x42c1bbdc; idiv di; call rax; 
0x000000000010c84c: fisttp qword ptr [rip + 0x75043ff3]; push 0x32969b54; add eax, 0x2583811e; ret; 
0x00000000000d5f4c: fisttp qword ptr [rsi]; ret; 
0x00000000000d6269: fisttp qword ptr [rsi]; test al, 0xc6; cdq; ret; 
0x000000000009ce93: fisttp word ptr [rax - 0x46]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x00000000000eaec1: fisttp word ptr [rbp + rdx + 0x1a]; ret 0xbd31; 
0x00000000000ece0c: fisttp word ptr [rbp + riz + 0x5f6000bf]; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x000000000002d323: fisttp word ptr [rcx]; add byte ptr [rdi], cl; test ah, dh; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000005069a: fisttp word ptr [rdi]; push rdi; or eax, 0x7b43e; pop rbx; movaps xmm0, xmm1; ret; 
0x00000000000bffdc: fisttp word ptr [rdi]; test bl, dh; sbb dword ptr [rax], eax; add ch, al; ret; 
0x0000000000027021: fisttp word ptr [rdx]; add byte ptr [rsi + 0xf], ah; shl dword ptr cs:[rsi + 0xf], 0x28; ret 0xd676; 
0x00000000001019b3: fisub dword ptr [rax + 0x2b]; stosd dword ptr [rdi], eax; ret; 
0x000000000001baca: fisub dword ptr [rsi + 0x45]; test ecx, ecx; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000001b5ca: fisub dword ptr [rsi + 0x45]; test edx, edx; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000c76b3: fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x00000000000dcf48: fisubr dword ptr [rax + 0x38]; sbb ecx, dword ptr [rax]; wait; mov ebp, 0x45adfc3f; ret; 
0x00000000000d5634: fisubr dword ptr [rax - 0x6be7c3a8]; push rsp; mov esi, ecx; ret; 
0x0000000000051cbf: fld dword ptr [rbp + 0xf485bd2]; rcr qword ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000017006: fld dword ptr [rbx + 0x367401ff]; fld1; fchs; fdivrp st(1); ret; 
0x0000000000114689: fld dword ptr [rbx]; ret; 
0x000000000006a440: fld dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000000206e8: fld dword ptr [rip + 0xac642]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001fae0: fld dword ptr [rip + 0xac98a]; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x000000000001fa3b: fld dword ptr [rip + 0xaca2f]; ret; 
0x000000000001f958: fld dword ptr [rip + 0xad3d2]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001e522: fld dword ptr [rip + 0xae808]; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000001cdd4: fld dword ptr [rip + 0xaff56]; fxch st(1); ret; 
0x000000000001c198: fld dword ptr [rip + 0xb02d2]; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x000000000001c719: fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000001c19e: fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x000000000001c713: fld dword ptr [rip + 0xb32db]; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x0000000000050390: fld dword ptr [rsp - 0x10]; fld xword ptr [rsp + 8]; faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x00000000000d6e00: fld qword ptr [rax + 0x49]; cli; sar qword ptr [rdi + 0x1737ca6d], 0xda; ret 0x3f9e; 
0x000000000001b2bf: fld qword ptr [rax]; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000dcfc0: fld qword ptr [rbp + 0x5b1e569e]; ret; 
0x0000000000015db5: fld qword ptr [rcx + rax]; ret; 
0x0000000000015d1d: fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000015d99: fld qword ptr [rcx + rdx*8]; ret; 
0x000000000001608f: fld qword ptr [rdx + rax]; ret; 
0x0000000000015e35: fld qword ptr [rip + 0xb5485]; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015e24: fld qword ptr [rip + 0xb5496]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x0000000000015d30: fld qword ptr [rip + 0xb558a]; ret; 
0x0000000000015cd4: fld qword ptr [rip + 0xb55e6]; ret; 
0x0000000000015e94: fld qword ptr [rip + 0xb5c1e]; ret; 
0x0000000000015e8b: fld qword ptr [rip + 0xb72d7]; ret; 
0x0000000000103771: fld qword ptr [rsp + rbp - 0x5f]; jno 0x103703; imul dword ptr [rcx - 0x5815110f]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000000435c6: fld qword ptr [rsp - 0x18]; movsd xmm0, qword ptr [rsp - 0x18]; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000000181a7: fld st(0); fmul st(0); fstp st(0); pop rbx; pop rbp; ret; 
0x0000000000015c5c: fld st(0); fmul st(0); fstp st(0); ret; 
0x000000000001314e: fld st(0); fmul st(1); fstp st(0); add rsp, 0x40; pop rbx; ret; 
0x0000000000019f20: fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x000000000000cb85: fld st(0); fstp xword ptr [rsp + 0x10]; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x0000000000012928: fld st(0); fsubrp st(1); fdiv st(0); add rsp, 0x18; ret; 
0x000000000001e52c: fld st(0); fxch st(1); ret; 
0x000000000001706a: fld st(0); jbe 0x17040; fmul st(1); fstp st(0); ret; 
0x000000000001ae85: fld st(0); jne 0x1ad78; fstp st(0); fld xword ptr [rsp - 0x58]; faddp st(1); ret; 
0x0000000000089682: fld st(4); jns 0x896b5; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x000000000008e76e: fld st(4); jns 0x8e7a1; fimul dword ptr [rdi]; xchg byte ptr [rbx + rax], ch; add ch, al; ret; 
0x000000000009fc02: fld st(4); jns 0x9fc35; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x000000000009596b: fld st(4); movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000a78e5: fld st(4); ret; 
0x000000000009033f: fld st(4); sar dword ptr [rbx], 0x58; ret; 
0x000000000008e7cd: fld st(5); jnp 0x8e7e1; push rcx; and ch, al; ret; 
0x00000000000a4dbd: fld st(5); jnp 0xa4dd1; push rcx; and ch, al; ret; 
0x00000000000b1e30: fld st(5); jns 0xb1e5c; ret; 
0x00000000000880d2: fld st(5); ret; 
0x00000000000b9644: fld st(5); sti; pop rax; ret; 
0x000000000009c395: fld st(5); sti; pop rcx; ret; 
0x000000000008b62c: fld st(5); sti; pop rsp; ret; 
0x0000000000016c53: fld xword ptr [rcx + rdx]; fsubrp st(1); faddp st(1); ret; 
0x0000000000020380: fld xword ptr [rip + 0xaf6ea]; fmulp st(2); add rsp, 0x28; ret; 
0x000000000001dec5: fld xword ptr [rip + 0xb1b15]; add rsp, 0x58; fxch st(1); ret; 
0x000000000001c163: fld xword ptr [rip + 0xb3877]; add rsp, 0x18; fldz; ret; 
0x000000000001830d: fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x000000000001aee2: fld xword ptr [rip + 0xb39c8]; ret; 
0x00000000000183b5: fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x00000000000183ad: fld xword ptr [rip + 0xb64ad]; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000018307: fld xword ptr [rip + 0xb6573]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000016e9a: fld xword ptr [rip + 0xb7330]; fsubp st(1); fmulp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000012bd7: fld xword ptr [rip + 0xb8f13]; fsubrp st(1); jns 0x12b49; fchs; ret; 
0x0000000000012baa: fld xword ptr [rip + 0xb8f50]; fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x0000000000012c5a: fld xword ptr [rip + 0xb8f60]; fsubp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x000000000001b2b9: fld xword ptr [rsp + 0x10]; je 0x1b3a0; pop rbx; ret; 
0x00000000000186e4: fld xword ptr [rsp + 0x10]; jne 0x18698; pop rbx; ret; 
0x0000000000018726: fld xword ptr [rsp + 0x10]; pop rbx; fmulp st(1); ret; 
0x000000000001374a: fld xword ptr [rsp + 0x18]; add rsp, 0x10; fdivp st(1); ret; 
0x000000000001bdf0: fld xword ptr [rsp + 0x18]; fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000012c74: fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x000000000001be00: fld xword ptr [rsp + 0x18]; ret; 
0x00000000000161f0: fld xword ptr [rsp + 0x20]; add rsp, 0x10; pop rbx; fadd st(0); ret; 
0x000000000001f5e8: fld xword ptr [rsp + 0x20]; add rsp, 0x20; add rsp, 0x28; ret; 
0x0000000000012d60: fld xword ptr [rsp + 0x20]; fdiv dword ptr [rip + 0xb8d6a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000018114: fld xword ptr [rsp + 0x28]; faddp st(1); pop rbx; pop rbp; ret; 
0x0000000000017c82: fld xword ptr [rsp + 0x70]; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000017f20: fld xword ptr [rsp + 8]; fabs; ret; 
0x0000000000032394: fld xword ptr [rsp + 8]; fadd qword ptr [rsp - 0x20]; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000015d40: fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000050394: fld xword ptr [rsp + 8]; faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000019a80: fld xword ptr [rsp + 8]; fistp qword ptr [rsp - 8]; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000012c70: fld xword ptr [rsp + 8]; fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x0000000000017180: fld xword ptr [rsp + 8]; fld1; fpatan; ret; 
0x0000000000012bb0: fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x0000000000018270: fld xword ptr [rsp + 8]; frndint; ret; 
0x0000000000019fd8: fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000162a0: fld xword ptr [rsp + 8]; fsqrt; ret; 
0x0000000000012a34: fld xword ptr [rsp + 8]; fsub st(0); fdiv st(0); ret; 
0x0000000000019f24: fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000017fb0: fld xword ptr [rsp + 8]; fxtract; fstp st(0); ret; 
0x00000000000183f0: fld xword ptr [rsp + 8]; fxtract; fstp st(1); ret; 
0x0000000000019e89: fld xword ptr [rsp + 8]; ret; 
0x000000000001b335: fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x0000000000019f9a: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000001b17c: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000180f7: fld xword ptr [rsp - 0x18]; pop rbx; pop rbp; ret; 
0x00000000000182e6: fld xword ptr [rsp - 0x18]; ret; 
0x000000000001ae8f: fld xword ptr [rsp - 0x58]; faddp st(1); ret; 
0x00000000000134c2: fld xword ptr [rsp - 0x68]; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x0000000000012998: fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x0000000000014f90: fld xword ptr [rsp]; jne 0x1519b; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000012e14: fld1; add rsp, 0x18; ret; 
0x000000000001f7b0: fld1; add rsp, 0x28; fchs; fdivrp st(2); fxch st(1); ret; 
0x0000000000016cb0: fld1; faddp st(1); ret; 
0x000000000001618f: fld1; faddp st(4); fdivrp st(3); fsubrp st(2); fmulp st(1); ret; 
0x000000000001700c: fld1; fchs; fdivrp st(1); ret; 
0x0000000000017f0f: fld1; fchs; ret; 
0x0000000000015465: fld1; fdivrp st(1); ret; 
0x0000000000017c80: fld1; fld xword ptr [rsp + 0x70]; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x0000000000017184: fld1; fpatan; ret; 
0x000000000001543b: fld1; pop rbp; fdivrp st(1); pop r12; pop r13; ret; 
0x0000000000016b62: fld1; ret; 
0x000000000008fe7b: fldcw word ptr [rbp - 0x3bdfdba4]; ret 0x9da1; 
0x00000000000a593c: fldcw word ptr [rbx - 0x27]; xor ch, al; ret; 
0x00000000000a7f3c: fldcw word ptr [rbx - 0xf]; jo 0xa7f06; xor ebx, dword ptr [rsi + rcx*8 - 0x3c]; ret; 
0x00000000000a988a: fldcw word ptr [rdi - 0x13]; and ch, al; ret; 
0x0000000000051003: fldcw word ptr [rdx + 0xff30007]; adc byte ptr [rip + 0xaf3a5], cl; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000019b75: fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019b6d: fldcw word ptr [rsp - 0xc]; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x00000000000dd0d0: fldenv [rbp + 0x1a]; ret; 
0x000000000000c002: fldenv [rdi]; stmxcsr dword ptr [rdi + 0x1c]; xor eax, eax; ret; 
0x00000000000ff590: fldenv [rdi]; stosb byte ptr [rdi], al; push rbx; ret; 
0x000000000009b8d4: fldenv [rsi + 0xf]; pop rax; fldenv [rsi + 0xf]; pop rdx; ret; 
0x000000000009b8d8: fldenv [rsi + 0xf]; pop rdx; ret; 
0x000000000003cbca: fldenv [rsi + 0xf]; push rdi; or eax, 0x8e70d; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000001733a: fldenv [rsp - 0x1c]; ret; 
0x00000000000993d1: fldl2t; retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x0000000000012fc4: fldpi; or ebp, dword ptr [rcx + 0x200]; je 0x12fd2; fstp st(0); fldz; ret; 
0x0000000000019d74: fldpi; or ebp, dword ptr [rcx + 0x200]; je 0x19d82; fstp st(0); fldz; ret; 
0x000000000001fdc4: fldz; fchs; add rsp, 0x30; pop rbx; fxch st(1); ret; 
0x000000000001609a: fldz; fdiv st(0); ret; 
0x000000000000db08: fldz; fucompi st(1); ja 0xdb18; fsqrt; add rsp, 8; ret; 
0x0000000000016e1e: fldz; fucompi st(2); fstp st(1); jbe 0x16d23; fchs; ret; 
0x000000000001fa37: fldz; jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x0000000000012fd0: fldz; ret; 
0x00000000000c83a2: fmul dword ptr [rax + 0x11]; ret 0x2bf; 
0x00000000000c8087: fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x00000000000c7ab4: fmul dword ptr [rax + 0x11]; ret 0xf48; 
0x00000000000c815e: fmul dword ptr [rax + 0x19]; ret 0x11e9; 
0x00000000000c7970: fmul dword ptr [rax + 0x19]; ret 0x1f0f; 
0x0000000000042507: fmul dword ptr [rax + 0x21]; ror dword ptr [rax + 9], cl; ret; 
0x00000000000fd1b2: fmul dword ptr [rax + rcx*4]; out 0xa, al; lea ebx, [rdi]; sbb al, 0x14; ret; 
0x000000000009c52b: fmul dword ptr [rax - 0x46]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x000000000004d87f: fmul dword ptr [rdi]; push rdi; retf 0x570f; ret 0xff3; 
0x00000000000758d3: fmul dword ptr [rdi]; sub dword ptr [rbx + 0x10], eax; jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x0000000000018f63: fmul dword ptr [rdi]; wait; ret 0x440f; 
0x00000000000c7aa9: fmul dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000000208c2: fmul dword ptr [rdi]; xchg ebx, eax; ret 0xc084; 
0x0000000000012e4a: fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x000000000004fafc: fmul qword ptr [rax]; or eax, dword ptr [rax]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x00000000001136b0: fmul qword ptr [rdi]; in al, dx; ret; 
0x00000000000a314d: fmul qword ptr [rdi]; xchg byte ptr [rax - 0x3bffffe6], dl; jnp 0xa31b4; ret 0x3bc5; 
0x000000000008ce67: fmul qword ptr [rdi]; xchg byte ptr [rdi + rdx + 0x41c40000], al; jnp 0x8cece; ret 0x3bc5; 
0x00000000000a314c: fmul qword ptr cs:[rdi]; xchg byte ptr [rax - 0x3bffffe6], dl; jnp 0xa31b4; ret 0x3bc5; 
0x000000000008ce66: fmul qword ptr cs:[rdi]; xchg byte ptr [rdi + rdx + 0x41c40000], al; jnp 0x8cece; ret 0x3bc5; 
0x00000000000181a9: fmul st(0); fstp st(0); pop rbx; pop rbp; ret; 
0x0000000000015c5e: fmul st(0); fstp st(0); ret; 
0x0000000000012c64: fmul st(1); faddp st(1); ret; 
0x0000000000013150: fmul st(1); fstp st(0); add rsp, 0x40; pop rbx; ret; 
0x000000000001706e: fmul st(1); fstp st(0); ret; 
0x0000000000016ca6: fmul st(1); fsub dword ptr [rip + 0xb451e]; fmulp st(1); fld1; faddp st(1); ret; 
0x0000000000012e75: fmul st(1); fxch st(2); add rsp, 0x18; fdivp st(1); faddp st(1); ret; 
0x00000000000e4749: fmul st(5); mov dh, 0x20; sahf; fnstsw word ptr [rbx - 0x25b1c714]; pop rbp; ret; 
0x00000000000d6c99: fmul st(7), st(0); xchg edi, eax; ret; 
0x0000000000012bb4: fmulp st(1); faddp st(1); ret; 
0x00000000000189ae: fmulp st(1); fdiv st(0); ret; 
0x0000000000012ba8: fmulp st(1); fld xword ptr [rip + 0xb8f50]; fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x00000000000134c0: fmulp st(1); fld xword ptr [rsp - 0x68]; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x0000000000016cae: fmulp st(1); fld1; faddp st(1); ret; 
0x0000000000016ea2: fmulp st(1); fmul st(1); faddp st(1); ret; 
0x00000000000128fe: fmulp st(1); fsqrt; fabs; fxch st(1); fpatan; ret; 
0x0000000000016197: fmulp st(1); ret; 
0x0000000000020386: fmulp st(2); add rsp, 0x28; ret; 
0x000000000004ed1f: fnsave dword ptr [rdi + rax - 0xc948a00]; ret; 
0x00000000000e555e: fnstcw word ptr [rbx]; pop rbx; and byte ptr [rsi - 0x6f], al; adc eax, 0x7b3f61bb; pop rbx; ret; 
0x000000000009033d: fnstcw word ptr [rcx + 0x3bc1c4d9]; pop rax; ret; 
0x00000000000d7c5c: fnstcw word ptr [rcx + 0x4097bfbf]; pop rsp; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x0000000000106527: fnstcw word ptr [rcx - 0x39]; insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x0000000000090333: fnstcw word ptr [rcx - 0x6bd3b22]; mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x000000000000c380: fnstcw word ptr [rdi]; xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000001a0bf: fnstcw word ptr [rdx + 0xe]; jne 0x1a0d0; fadd st(0); add rsp, 8; ret; 
0x0000000000020a8f: fnstcw word ptr [rdx + 0xe]; jne 0x20aa0; fadd st(0); add rsp, 8; ret; 
0x000000000000ce2a: fnstcw word ptr [rdx + 2]; je 0xce38; add rsp, 8; ret; 
0x000000000000ceba: fnstcw word ptr [rdx + 2]; je 0xcec8; add rsp, 8; ret; 
0x000000000000df0a: fnstcw word ptr [rdx + 2]; je 0xdf18; add rsp, 8; ret; 
0x000000000001a0f5: fnstcw word ptr [rdx - 0x32]; jne 0x1a0c6; mov rax, qword ptr [rip + 0x382eb7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000020ac5: fnstcw word ptr [rdx - 0x32]; jne 0x20a96; mov rax, qword ptr [rip + 0x37c4e7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000ec20e: fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x00000000000cd91c: fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000009f4ff: fnstenv [rax + 0x5c73c1c4]; ret 0x19c5; 
0x000000000000ecf4: fnstenv [rbx + 0x59]; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000c000: fnstenv [rdi]; fldenv [rdi]; stmxcsr dword ptr [rdi + 0x1c]; xor eax, eax; ret; 
0x000000000000dda0: fnstenv [rdx + 0xd]; fstp st(0); add rsp, 0x18; ret; 
0x000000000000cdb0: fnstenv [rdx + 0xd]; fstp st(0); add rsp, 8; ret; 
0x000000000000de57: fnstenv [rdx + 0xe]; fstp st(0); add rsp, 8; ret; 
0x000000000007db73: fnstenv [rsi + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe0e8; 
0x000000000000ecf3: fnstenv cs:[rbx + 0x59]; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000012feb: fnstsw ax; and ah, 4; jne 0x12fe8; fstp st(1); ret; 
0x0000000000017331: fnstsw ax; and eax, 1; or dword ptr [rsp - 0x18], eax; fldenv [rsp - 0x1c]; ret; 
0x000000000001a096: fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x0000000000015da6: fnstsw ax; shr eax, 5; and eax, 8; lea rcx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x000000000001600b: fnstsw ax; test eax, 0x400; jne 0x16008; fstp st(1); ret; 
0x00000000001126a4: fnstsw word ptr [rax - 0x27f8c02e]; cdq; cmp byte ptr [rbp + 0x61], dl; cmp al, 0x83; int 0xa7; ret; 
0x000000000001830f: fnstsw word ptr [rax]; or eax, dword ptr [rax]; fmulp st(1); ret; 
0x00000000000e474e: fnstsw word ptr [rbx - 0x25b1c714]; pop rbp; ret; 
0x00000000000e0041: fnstsw word ptr [rcx]; push rbp; push rcx; push rbp; mov ch, 0x3f; ret 0x95e6; 
0x0000000000112986: fnstsw word ptr [rdi]; pushfq; ret 0xa75f; 
0x000000000004eaff: fpatan; movups xmm1, xmmword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x0000000000012906: fpatan; ret; 
0x0000000000050003: fpatan; subps xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000051242: fptan; cvtps2pd xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x000000000005123e: fptan; divps xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x0000000000016056: frndint; fcompi st(2); jne 0x16096; fscale; fstp st(1); ret; 
0x000000000001732f: frndint; fnstsw ax; and eax, 1; or dword ptr [rsp - 0x18], eax; fldenv [rsp - 0x1c]; ret; 
0x0000000000018274: frndint; ret; 
0x000000000007a388: frstor dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000001605c: fscale; fstp st(1); ret; 
0x000000000000db0e: fsqrt; add rsp, 8; ret; 
0x0000000000012900: fsqrt; fabs; fxch st(1); fpatan; ret; 
0x00000000000162a4: fsqrt; ret; 
0x0000000000001c0a: fst dword ptr [rax - 0x76]; insw word ptr [rdi], dx; jne 0x417cb2ca; ret; 
0x00000000000d7855: fst dword ptr [rcx]; cmp al, 0x41; push rbp; adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000fc621: fst qword ptr [rcx + 0x6b]; ret 0x8bed; 
0x000000000004f80b: fst qword ptr [rip + 0xff3000b]; pop rcx; ret; 
0x00000000000ff801: fst st(6); pop rbx; ret 0xebf2; 
0x000000000009090a: fstp dword ptr [rbp + 0x28f9c5e2]; out 0xc4, eax; ret 0x99a9; 
0x000000000008f38d: fstp dword ptr [rbp + 0x5cdbc5e8]; in eax, 0xc4; ret 0xbdf9; 
0x000000000008cc55: fstp dword ptr [rbx + 0x2879c5da]; int 0xc4; ret 0x99c1; 
0x00000000001011a4: fstp dword ptr [rbx + 0x5e]; wait; and byte ptr [rdx + 0x1600003e], bl; ret; 
0x000000000009c85b: fstp dword ptr [rcx + 0x59fbc5d1]; ret 0xfbc5; 
0x000000000009c393: fstp dword ptr [rcx + 0x59fbc5d9]; ret; 
0x000000000009bd31: fstp dword ptr [rcx + 0x775c805]; add ch, al; sti; pop rax; ret 0xe2c4; 
0x00000000000916e7: fstp dword ptr [rcx + 0x7bc1c4f9]; pop rcx; ret 0x41c4; 
0x00000000000d4d02: fstp dword ptr [rdi + 0x3c7d25be]; out 0x33, al; pop rbp; ret; 
0x000000000005039a: fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000002a1af: fstp qword ptr [rbx + rcx + 0x590ff200]; ret 0xceb; 
0x00000000000435d4: fstp qword ptr [rsi]; ret; 
0x0000000000043ef1: fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000003236a: fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000000d318: fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x000000000000dda3: fstp st(0); add rsp, 0x18; ret; 
0x000000000000ccd8: fstp st(0); add rsp, 0x28; ret; 
0x0000000000013152: fstp st(0); add rsp, 0x40; pop rbx; ret; 
0x000000000001de76: fstp st(0); add rsp, 0x58; ret; 
0x000000000000cdb3: fstp st(0); add rsp, 8; ret; 
0x000000000001a098: fstp st(0); and eax, 0x200; ret; 
0x0000000000016ad9: fstp st(0); fistp dword ptr [rsp - 4]; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x00000000000206e6: fstp st(0); fld dword ptr [rip + 0xac642]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001f956: fstp st(0); fld dword ptr [rip + 0xad3d2]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x000000000001e520: fstp st(0); fld dword ptr [rip + 0xae808]; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000001cdd2: fstp st(0); fld dword ptr [rip + 0xaff56]; fxch st(1); ret; 
0x000000000001c196: fstp st(0); fld dword ptr [rip + 0xb02d2]; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x000000000001c711: fstp st(0); fld dword ptr [rip + 0xb32db]; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x0000000000015e33: fstp st(0); fld qword ptr [rip + 0xb5485]; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015cd2: fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x0000000000015e92: fstp st(0); fld qword ptr [rip + 0xb5c1e]; ret; 
0x000000000001dec3: fstp st(0); fld xword ptr [rip + 0xb1b15]; add rsp, 0x58; fxch st(1); ret; 
0x000000000001c161: fstp st(0); fld xword ptr [rip + 0xb3877]; add rsp, 0x18; fldz; ret; 
0x0000000000018305: fstp st(0); fld xword ptr [rip + 0xb6573]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x000000000001ae8d: fstp st(0); fld xword ptr [rsp - 0x58]; faddp st(1); ret; 
0x0000000000017f0d: fstp st(0); fld1; fchs; ret; 
0x0000000000016f21: fstp st(0); fld1; fdivrp st(1); ret; 
0x0000000000016b60: fstp st(0); fld1; ret; 
0x0000000000016098: fstp st(0); fldz; fdiv st(0); ret; 
0x0000000000012fce: fstp st(0); fldz; ret; 
0x00000000000503a8: fstp st(0); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000032368: fstp st(0); fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000000d000: fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x000000000001de74: fstp st(0); fstp st(0); add rsp, 0x58; ret; 
0x0000000000016096: fstp st(0); fstp st(0); fldz; fdiv st(0); ret; 
0x0000000000020b60: fstp st(0); fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x0000000000020b70: fstp st(0); fstp st(0); fstp st(1); add rsp, 0x28; ret; 
0x000000000001a130: fstp st(0); fstp st(0); mov eax, 0xffffffff; ret; 
0x000000000000d6be: fstp st(0); fstp st(1); add rsp, 0x28; ret; 
0x0000000000015a67: fstp st(0); fyl2x; ret; 
0x0000000000015c58: fstp st(0); jae 0x15c62; fld st(0); fmul st(0); fstp st(0); ret; 
0x0000000000020ca4: fstp st(0); jae 0x20cae; fld st(0); fmul st(0); fstp st(0); ret; 
0x0000000000016ae5: fstp st(0); mov eax, 0x7fffffff; ret; 
0x0000000000016aed: fstp st(0); mov eax, 0x80000000; ret; 
0x000000000001a132: fstp st(0); mov eax, 0xffffffff; ret; 
0x000000000001af5c: fstp st(0); mov word ptr [rsp - 0x10], r9w; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000181ab: fstp st(0); pop rbx; pop rbp; ret; 
0x0000000000043f00: fstp st(0); pxor xmm0, xmm0; ret; 
0x0000000000015c60: fstp st(0); ret; 
0x000000000001a125: fstp st(0); setp al; cmovne eax, edx; ret; 
0x000000000001fa32: fstp st(0); test ah, 2; fldz; jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x000000000001c113: fstp st(0); test ah, 2; jne 0x1c1b0; fchs; add rsp, 0x18; ret; 
0x0000000000016122: fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x000000000000d6c0: fstp st(1); add rsp, 0x28; ret; 
0x00000000000170e0: fstp st(1); add rsp, 8; ret; 
0x0000000000015a73: fstp st(1); fadd st(0); ret; 
0x0000000000017068: fstp st(1); fld st(0); jbe 0x17040; fmul st(1); fstp st(0); ret; 
0x0000000000017055: fstp st(1); fld1; fchs; fdivrp st(1); ret; 
0x0000000000043eef: fstp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000016120: fstp st(1); fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x0000000000015a71: fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000043eed: fstp st(1); fstp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000001beb6: fstp st(1); fxch st(1); add rsp, 0x18; fchs; fxch st(1); ret; 
0x0000000000015a62: fstp st(1); fyl2xp1; ret; 
0x000000000000cdaf: fstp st(1); jb 0xcdc0; fstp st(0); add rsp, 8; ret; 
0x000000000000daaf: fstp st(1); jb 0xdac0; fstp st(0); add rsp, 8; ret; 
0x000000000000dd9f: fstp st(1); jb 0xddb0; fstp st(0); add rsp, 0x18; ret; 
0x000000000000de56: fstp st(1); jb 0xde68; fstp st(0); add rsp, 8; ret; 
0x0000000000012b85: fstp st(1); jbe 0x12a58; fstp st(1); ret; 
0x0000000000016e22: fstp st(1); jbe 0x16d23; fchs; ret; 
0x000000000001a0be: fstp st(1); jp 0x1a0d0; jne 0x1a0d0; fadd st(0); add rsp, 8; ret; 
0x0000000000020a8e: fstp st(1); jp 0x20aa0; jne 0x20aa0; fadd st(0); add rsp, 8; ret; 
0x000000000000ce29: fstp st(1); jp 0xce2f; je 0xce38; add rsp, 8; ret; 
0x000000000000ceb9: fstp st(1); jp 0xcebf; je 0xcec8; add rsp, 8; ret; 
0x000000000000df09: fstp st(1); jp 0xdf0f; je 0xdf18; add rsp, 8; ret; 
0x0000000000012b8d: fstp st(1); ret; 
0x000000000001de72: fstp st(3); fstp st(0); fstp st(0); add rsp, 0x58; ret; 
0x00000000000cfc68: fstp st(3); in al, dx; jmp qword ptr [rbx + 0x22]; 
0x000000000001de70: fstp st(5); fstp st(3); fstp st(0); fstp st(0); add rsp, 0x58; ret; 
0x00000000001067e3: fstp xword ptr [rbp - 7]; ret; 
0x0000000000020943: fstp xword ptr [rbx]; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000020956: fstp xword ptr [rbx]; add rsp, 0x10; pop rbx; ret; 
0x00000000000186d2: fstp xword ptr [rcx + 2]; fchs; pop rbx; ret; 
0x000000000010c517: fstp xword ptr [rcx + rdi*4]; ret; 
0x0000000000050698: fstp xword ptr [rcx - 0x21]; xorps xmm1, xmmword ptr [rip + 0x7b43e]; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000003cbc8: fstp xword ptr [rcx - 0x27]; xorpd xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000013261: fstp xword ptr [rcx]; ret; 
0x0000000000019f22: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000019f9e: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000019ee6: fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000fd606: fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x000000000001b180: fstp xword ptr [rdi]; ret; 
0x00000000000ddffe: fstp xword ptr [rdi]; rol ah, 0xcd; add dword ptr [rdi], edx; ret; 
0x0000000000044fc3: fstp xword ptr [rdx + 0x52]; ucomisd xmm3, qword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000015ca4: fstp xword ptr [rsp + 0x10]; fstp xword ptr [rsp]; call 0xc410; add rsp, 0x28; ret; 
0x000000000000cb87: fstp xword ptr [rsp + 0x10]; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x000000000001a03c: fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000182dd: fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x000000000002080a: fstp xword ptr [rsp]; call 0x1aeb0; add rsp, 0x18; fchs; ret; 
0x0000000000015ca8: fstp xword ptr [rsp]; call 0xc410; add rsp, 0x28; ret; 
0x000000000000d337: fstp xword ptr [rsp]; call 0xe060; add rsp, 0x20; add rsp, 0x10; pop rbx; ret; 
0x000000000000d122: fstp xword ptr [rsp]; call 0xe060; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000cb8b: fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x0000000000044fc2: fstp xword ptr cs:[rdx + 0x52]; ucomisd xmm3, qword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000017056: fstpnce st(1), st(0); call 0xfffffffff1e05136; ret; 
0x000000000001beb7: fstpnce st(1), st(0); leave; add rsp, 0x18; fchs; fxch st(1); ret; 
0x0000000000017069: fstpnce st(1), st(0); sal byte ptr [rsi - 0x2e], 0xd8; leave; fstp st(0); ret; 
0x0000000000015a63: fstpnce st(1), st(0); stc; ret; 
0x0000000000043eee: fstpnce st(5), st(0); fstpnce st(5), st(0); pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000043ef0: fstpnce st(5), st(0); pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042f04: fsub dword ptr [rax]; or dword ptr [rax], eax; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x0000000000045004: fsub dword ptr [rdx + 8]; add byte ptr [rsi + 0xf], ah; out dx, eax; shl byte ptr [rsi + 0xf], 0x56; or eax, 0xb9a5c; ret; 
0x0000000000190794: fsub dword ptr [rdx - 0x12]; call qword ptr [rax]; 
0x000000000001a099: fsub dword ptr [rip + 0x200]; ret; 
0x0000000000016ca8: fsub dword ptr [rip + 0xb451e]; fmulp st(1); fld1; faddp st(1); ret; 
0x000000000001af5d: fsub dword ptr [rsi + 0x44]; mov dword ptr [rsp - 0x10], ecx; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000009a9cc: fsub dword ptr [rsi + 0xf]; out dx, eax; sal dl, 0xf; pop rdx; ret; 
0x00000000000680d6: fsub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000106bcb: fsub qword ptr [rdi - 0x69]; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x000000000009b6ab: fsub qword ptr [rsi + 0xf]; pop rdx; ret; 
0x0000000000012d24: fsub st(0); fdiv st(0); add rsp, 0x10; pop rbx; ret; 
0x0000000000012a38: fsub st(0); fdiv st(0); ret; 
0x00000000000435d0: fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000001982f1: fsub st(6), st(0); call qword ptr [rcx + 5]; 
0x00000000001982dd: fsub st(6), st(0); jmp qword ptr [rdx]; 
0x00000000001908d5: fsub st(6), st(0); jmp rax; 
0x0000000000016ea0: fsubp st(1); fmulp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000017c8b: fsubp st(1); ret; 
0x0000000000012c60: fsubp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000190125: fsubp st(3); jmp qword ptr [rax]; 
0x0000000000196ff1: fsubp st(5); jmp rax; 
0x00000000001908fd: fsubp st(6); jmp qword ptr [rax - 0x7c]; 
0x000000000009c27e: fsubr dword ptr [rax + 0x5cebc501]; ror dword ptr [rdi], cl; test ebp, edi; add al, byte ptr [rax]; add ch, al; ret; 
0x000000000009c749: fsubr dword ptr [rax + 0x5cebc501]; ror dword ptr [rdi], cl; test edx, ebp; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000ec219: fsubr dword ptr [rax]; cmc; ret; 
0x00000000000489b4: fsubr dword ptr [rax]; or byte ptr [rax], al; ret; 
0x0000000000048ec4: fsubr dword ptr [rbx]; or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x000000000005feb4: fsubr dword ptr [rdi + 0xa]; add al, ch; ret; 
0x000000000019067c: fsubr dword ptr [rsi]; out dx, al; jmp qword ptr [rax]; 
0x000000000001dc01: fsubr st(0); cdq; fdiv st(6), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000000e05a: fsubr st(0); fdivr st(7); call qword ptr [rbp + 0x53]; 
0x000000000001863d: fsubr st(0); pop rbp; xor bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000dd16c: fsubr st(1); ret; 
0x000000000018fe05: fsubr st(2); jmp qword ptr [rax + 0x4f]; 
0x000000000001cdcf: fsubr st(3); add bl, ch; fcomp st(1); add eax, 0xaff56; fxch st(1); ret; 
0x0000000000196f49: fsubr st(5); jmp qword ptr [rbx + 1]; 
0x0000000000016c56: fsubrp st(1); faddp st(1); ret; 
0x000000000001292a: fsubrp st(1); fdiv st(0); add rsp, 0x18; ret; 
0x0000000000016c51: fsubrp st(1); fld xword ptr [rcx + rdx]; fsubrp st(1); faddp st(1); ret; 
0x0000000000012bdd: fsubrp st(1); jns 0x12b49; fchs; ret; 
0x0000000000018740: fsubrp st(1); pop rbx; ret; 
0x0000000000019f28: fsubrp st(1); ret; 
0x00000000000186ce: fsubrp st(1); test bx, bx; jns 0x186d7; fchs; pop rbx; ret; 
0x0000000000016195: fsubrp st(2); fmulp st(1); ret; 
0x0000000000109bc1: fucom st(3); fadd qword ptr [rdx + 0x3a4f91d0]; ret 0xc49a; 
0x000000000018f555: fucom st(7); call qword ptr [rax + 0x20]; 
0x000000000018f54d: fucom st(7); push qword ptr [rax]; and byte ptr [rax], al; add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x0000000000020831: fucomi st(0); jp 0x2083f; test byte ptr [rsp + 0xf], 0x40; je 0x2084f; fstp st(1); ret; 
0x0000000000020841: fucomi st(0); jp 0x2084f; test byte ptr [rsp + 0x1f], 0x40; je 0x2084f; fstp st(1); ret; 
0x0000000000020871: fucomi st(0); jp 0x2087f; test byte ptr [rsp + 0xf], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000020881: fucomi st(0); jp 0x2088f; test byte ptr [rsp + 0x1f], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000020b82: fucomi st(1); fcmovbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x0000000000020c40: fucomi st(1); fcmovnbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000000cdad: fucomi st(1); fstp st(1); jb 0xcdc0; fstp st(0); add rsp, 8; ret; 
0x000000000000daad: fucomi st(1); fstp st(1); jb 0xdac0; fstp st(0); add rsp, 8; ret; 
0x000000000000dd9d: fucomi st(1); fstp st(1); jb 0xddb0; fstp st(0); add rsp, 0x18; ret; 
0x000000000000de54: fucomi st(1); fstp st(1); jb 0xde68; fstp st(0); add rsp, 8; ret; 
0x000000000000ce27: fucomi st(1); fstp st(1); jp 0xce2f; je 0xce38; add rsp, 8; ret; 
0x000000000000ceb7: fucomi st(1); fstp st(1); jp 0xcebf; je 0xcec8; add rsp, 8; ret; 
0x000000000000df07: fucomi st(1); fstp st(1); jp 0xdf0f; je 0xdf18; add rsp, 8; ret; 
0x0000000000020828: fucomi st(1); jp 0x20831; fcmovb st(0), st(1); fstp st(1); ret; 
0x0000000000020868: fucomi st(1); jp 0x20871; fcmovnb st(0), st(1); fstp st(1); ret; 
0x0000000000072ae1: fucomi st(3); or byte ptr [rax], al; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x00000000000cfc69: fucomi st(4); jmp qword ptr [rbx + 0x22]; 
0x0000000000106cb6: fucomi st(6); ret; 
0x00000000000ece6b: fucomi st(7); call 0xffffffffc00f8d97; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000120deb: fucomi st(7); call 0xffffffffc012cd17; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000014f64b: fucomi st(7); call 0xffffffffc015b577; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000018fe2d: fucomp st(2); call qword ptr [rax]; 
0x000000000018fe1d: fucomp st(2); jmp rax; 
0x00000000000c3728: fucompi st(0); ret 0xfbcd; 
0x0000000000081728: fucompi st(0); ret 0xffed; 
0x000000000007c7d7: fucompi st(0); ret; 
0x000000000001a123: fucompi st(1); fstp st(0); setp al; cmovne eax, edx; ret; 
0x000000000000db0a: fucompi st(1); ja 0xdb18; fsqrt; add rsp, 8; ret; 
0x0000000000015c6d: fucompi st(1); je 0x15c74; faddp st(1); ret; 
0x00000000000d604c: fucompi st(1); ret; 
0x0000000000012b83: fucompi st(2); fstp st(1); jbe 0x12a58; fstp st(1); ret; 
0x0000000000016e20: fucompi st(2); fstp st(1); jbe 0x16d23; fchs; ret; 
0x000000000010cae3: fucompi st(4); out 0x49, al; out 0xd2, al; pop rbx; ret; 
0x0000000000107971: fucompi st(5); ret; 
0x000000000001a094: fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000001beb8: fxch st(1); add rsp, 0x18; fchs; fxch st(1); ret; 
0x000000000001e3c0: fxch st(1); add rsp, 0x58; ret; 
0x000000000001f25e: fxch st(1); add rsp, 0x78; ret; 
0x0000000000020b90: fxch st(1); faddp st(1); add rsp, 0x28; ret; 
0x0000000000012904: fxch st(1); fpatan; ret; 
0x0000000000020b80: fxch st(1); fucomi st(1); fcmovbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000001e95f: fxch st(1); leave; ret; 
0x000000000001cc79: fxch st(1); nop dword ptr [rax + rax]; fxch st(1); ret; 
0x000000000001bec0: fxch st(1); ret; 
0x0000000000012e77: fxch st(2); add rsp, 0x18; fdivp st(1); faddp st(1); ret; 
0x0000000000012dfc: fxch st(2); fadd st(0); fdivp st(1); faddp st(1); ret; 
0x0000000000016c4f: fxch st(2); fsubrp st(1); fld xword ptr [rcx + rdx]; fsubrp st(1); faddp st(1); ret; 
0x0000000000012b81: fxch st(2); fucompi st(2); fstp st(1); jbe 0x12a58; fstp st(1); ret; 
0x0000000000016ad7: fxtract; fstp st(0); fistp dword ptr [rsp - 4]; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x0000000000017fb4: fxtract; fstp st(0); ret; 
0x00000000000183f4: fxtract; fstp st(1); ret; 
0x0000000000015a69: fyl2x; ret; 
0x0000000000015a64: fyl2xp1; ret; 
0x0000000000195984: hlt; add byte ptr [r8], al; clc; ret; 
0x0000000000195784: hlt; add byte ptr [r8], r8b; pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000086787: hlt; addsd xmm0, xmm0; ret; 
0x00000000000e3ea2: hlt; call ptr [rax + 0x6b]; hlt; call ptr [rax + 0x6b]; hlt; jmp qword ptr [rax + 0x67]; 
0x00000000000e3ea6: hlt; call ptr [rax + 0x6b]; hlt; jmp qword ptr [rax + 0x67]; 
0x00000000000ccd0a: hlt; call ptr [rax]; mov esi, esp; inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x00000000000cb732: hlt; call rsp; 
0x00000000000e8c8d: hlt; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x000000000010d0a9: hlt; cmp al, 0x64; ret 0x1353; 
0x00000000000cb72a: hlt; dec dword ptr [rbp + rax*2 + 0x426cfff4]; hlt; call rsp; 
0x0000000000019b70: hlt; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019b6c: hlt; fldcw word ptr [rsp - 0xc]; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x00000000000ec20d: hlt; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x0000000000016ad8: hlt; fstp st(0); fistp dword ptr [rsp - 4]; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x0000000000017fb5: hlt; fstp st(0); ret; 
0x0000000000015c7c: hlt; fstp st(1); ret; 
0x000000000002d328: hlt; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000b4d26: hlt; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000cccfa: hlt; inc eax; mov dh, ah; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000cccfe: hlt; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000ccd0e: hlt; inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x000000000011da38: hlt; je 0x11da0c; loope 0x11d9c4; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x000000000014c298: hlt; je 0x14c26c; loope 0x14c224; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x00000000000e9ab8: hlt; je 0xe9a8c; loope 0xe9a44; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x00000000000e3eaa: hlt; jmp qword ptr [rax + 0x67]; 
0x00000000000ccd02: hlt; jmp qword ptr [rax]; 
0x000000000010076e: hlt; jmp qword ptr [rdi]; 
0x00000000000bd805: hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000000ccd12: hlt; jmp qword ptr [rsi]; 
0x0000000000105ea1: hlt; jnp 0x105ebf; pop rdx; rcr dword ptr [rdi], 0xd9; ret 0x6a2b; 
0x00000000000aba59: hlt; mov al, 0xc5; and ebx, dword ptr [rcx + 0x1c]; and al, 0xc4; ret; 
0x00000000000edd48: hlt; mov cl, 0xfc; ret 0x5e0f; 
0x000000000001b330: hlt; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x00000000000525b4: hlt; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005039d: hlt; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000050168: hlt; or al, 0xb; add bl, dh; addps xmm0, xmm2; addss xmm0, xmm1; ret; 
0x00000000001013c4: hlt; ret 0x74e; 
0x00000000000ca4ba: hlt; ret 0xa1fc; 
0x00000000000fdec0: hlt; ret 0xfe9e; 
0x000000000004d235: hlt; ret; 
0x0000000000105b79: hlt; shl ebx, 0x24; sbb eax, 0xcfc73fdd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x000000000002c3a4: hlt; std; jmp qword ptr [rsi + 0xf]; 
0x000000000004c487: hlt; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000032023: hlt; subsd xmm0, xmm6; ret; 
0x00000000000840d8: hlt; syscall; 
0x00000000000fe7b3: idiv bh; jmp qword ptr [rbx]; 
0x000000000000c1af: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000036744: idiv bh; jmp qword ptr [rsi + 0x41]; 
0x000000000002d329: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000198b0: idiv bh; jmp qword ptr [rsi + 5]; 
0x000000000000c27b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000019912: idiv bh; jmp qword ptr [rsi - 0x7d]; 
0x000000000010be22: idiv bh; mov edi, 0xf3fff61c; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x000000000010be1e: idiv bh; movabs byte ptr [0xf3fff61cbffff61e], al; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x000000000010be06: idiv bh; or esi, esi; jmp qword ptr [rax + 9]; 
0x000000000010bdf6: idiv bh; rcl byte ptr [rdx], 0xf6; jmp rax; 
0x000000000010be26: idiv bh; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x00000000000525f4: idiv bl; jmp qword ptr [rsi + 0xf]; 
0x0000000000086711: idiv byte ptr [rax + 0x1c]; mov edx, 0x3f800000; cmovne eax, edx; movd xmm0, eax; ret; 
0x00000000000e469e: idiv byte ptr [rbx - 0x71561f84]; push rcx; test byte ptr [rdi - 0x41], dl; mov byte ptr [rax + 0xa], al; mov bh, 0xf5; ret 0xbbf1; 
0x000000000009c0d1: idiv byte ptr [rcx - 0x6b]; vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000004d6a9: idiv byte ptr [rcx - 0x73]; movss xmm1, dword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000e9860: idiv byte ptr [rdi + 0xd]; add dh, ch; jmp rdi; 
0x00000000000cc7a8: idiv byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret 0xf20c; 
0x00000000000cfbb6: idiv byte ptr [rdi]; ret 0x1bf3; 
0x0000000000078fc8: idiv ch; jmp qword ptr [rsi + 0xf]; 
0x00000000000fd0e2: idiv di; call rax; 
0x00000000000c2aae: idiv dil; jmp qword ptr [rsi + 0x2e]; 
0x00000000000478d5: idiv dword ptr [rcx]; or byte ptr [rax], al; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x000000000010224e: idiv dword ptr [rdi - 0x7d8c2433]; push 0x5a1ac94d; ret 0x5d3a; 
0x00000000000cc7f8: idiv dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or dl, byte ptr [rbx + 0x138cb2f6]; ret 0xf2a5; 
0x00000000000fd0e3: idiv edi; call rax; 
0x00000000000fd2e3: idiv edi; call rsp; 
0x00000000000c8a51: idiv edi; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000003c439: idiv edi; dec dword ptr [rdi]; test dword ptr [rdi + rsi*8 - 1], edx; jmp qword ptr [rsi + 0x41]; 
0x00000000000227c3: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000022d8b: idiv edi; jmp qword ptr [rsi + 0x41]; 
0x0000000000071b97: idiv edi; jmp qword ptr [rsi + 0x45]; 
0x0000000000022804: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000616eb: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000dd074: idiv edi; ret 0x403f; 
0x0000000000091893: idiv r15b; jmp qword ptr [rsi + 0xf]; 
0x000000000019019d: imul bl; jmp qword ptr [rax]; 
0x0000000000049615: imul dword ptr [rax + 0xf66ffff]; sub byte ptr [rsp], cl; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000103777: imul dword ptr [rcx - 0x5815110f]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x0000000000197ab5: imul eax, dword ptr [rax], 0; clc; outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x00000000000e951c: imul eax, dword ptr [rax], 0x3f0d; add byte ptr [rax - 0x40f2ffcc], dl; test byte ptr [rsi], 0x2d; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000190459: imul eax, dword ptr [rax], 0xec7a0800; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x0000000000190461: imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x00000000001978a1: imul eax, dword ptr [rax], 0xee5a4c00; call qword ptr [rax]; 
0x000000000018f430: imul eax, dword ptr [rbx], 0; add al, ch; ret; 
0x000000000001cc73: imul eax, dword ptr [rcx], 0x7eb0000; fxch st(1); nop dword ptr [rax + rax]; fxch st(1); ret; 
0x00000000000723b6: imul eax, dword ptr [rip - 0x3b7cb800], 0x18; ret; 
0x0000000000042203: imul eax, edx, 0x10; ret; 
0x0000000000030d63: imul eax, edx, 0x8d480036; adc eax, 0x55d62; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x00000000000724cb: imul eax, edx; add rsp, 0x18; ret; 
0x0000000000019af1: imul eax, edx; ret; 
0x0000000000072381: imul eax, esi; add rsp, 0x18; ret; 
0x000000000003a7d8: imul eax; ret 0x466; 
0x00000000000d0151: imul ebp, dword ptr [rax - 0x76], 0xbf75b8b3; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000a9d77: imul ebp, dword ptr [rbx + 0x1d], 0x968f9; xor ch, al; sti; pop rax; ret 0xe3c5; 
0x00000000000ddc1d: imul ebp, esp, 0xd6d0aa3f; ret 0xee95; 
0x00000000000ac4b5: imul ebx, dword ptr [r8 - 0x2e], -0x3c; ret; 
0x00000000000ac35d: imul ebx, dword ptr [r8 - 0x40], -0x3c; ret; 
0x00000000000a1b7b: imul ebx, dword ptr [r9 - 0x37], -0x3c; ret; 
0x0000000000098bde: imul ebx, dword ptr [rax + rdx*8 - 0x3b], -0x15; pop rax; inc ebp; ret; 
0x00000000000ac4b6: imul ebx, dword ptr [rax - 0x2e], -0x3c; ret; 
0x0000000000088096: imul ebx, dword ptr [rax - 0x2f], -0x3b; ret; 
0x00000000000c10e3: imul ebx, dword ptr [rax - 0x30], -0x3b; sti; pop rsp; ret 0xf9c5; 
0x0000000000089027: imul ebx, dword ptr [rax - 0x34], -0x3c; sub ebx, dword ptr [r12 + rdx*8 - 0x3b]; sti; pop rcx; ret 0x41c4; 
0x00000000000ac35e: imul ebx, dword ptr [rax - 0x40], -0x3c; ret; 
0x0000000000087c98: imul ebx, dword ptr [rax - 6], -0x3b; ret; 
0x00000000000877f4: imul ebx, dword ptr [rcx - 0x37], -0x3b; jns 0x87822; ret 0xe3c5; 
0x00000000000a1b7c: imul ebx, dword ptr [rcx - 0x37], -0x3c; ret; 
0x00000000000ea6ec: imul ebx, dword ptr [rsi], 0x34; mov edi, 0x88800000; xor eax, 0x2f3f341f; cld; ret; 
0x0000000000106bca: imul ebx, esp, 0x67; xchg edi, eax; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x00000000000cd284: imul ecx, dword ptr [rax + rax*8 + 0x47c41900], 0; int 0x67; ret; 
0x00000000001068cb: imul ecx, dword ptr [rbp + 0x2e], 0xd4a23ffb; ret; 
0x00000000000a9d71: imul ecx, dword ptr [rcx], 0xe3c43000; imul ebp, dword ptr [rbx + 0x1d], 0x968f9; xor ch, al; sti; pop rax; ret 0xe3c5; 
0x00000000000dbf2c: imul ecx, dword ptr [rdi + 0x37403fe7], -0x80; mov dword ptr [rax - 0x35c37bfa], esp; and al, 0x54; ret; 
0x000000000007c2e1: imul ecx, dword ptr [rdi + 0xf660008], 0x6f; ret 0x290f; 
0x000000000009c968: imul ecx, dword ptr [rdx], 0x59ebc500; leave; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000001bde1: imul ecx, dword ptr [rsi], -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001959f2: imul ecx, dword ptr [rsi], 8; ret; 
0x000000000007bc91: imul ecx, ecx, -3; jmp qword ptr [rsi + 0xf]; 
0x000000000010e737: imul edi, dword ptr [rcx], 0x414910fa; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x00000000000e77ed: imul edi, dword ptr [rdi - 0x49f847b8], 0x3f454387; add byte ptr [rax], al; add dl, al; ret; 
0x00000000000dd789: imul edi, dword ptr [rdx - 0x31b34147], -0x41; sbb al, 0x43; ret 0x8e90; 
0x00000000000ea284: imul edi, dword ptr [rsi + 0x2c], 0x800000bf; div dword ptr [rdi + rdi*2]; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000cbef0: imul edi, edi, -0x4c; ret 0x8bd5; 
0x0000000000045b7d: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000017173: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000c76f3: imul edi, esi, 0x8349ffff; ret 0x4908; 
0x0000000000076b52: imul edx, dword ptr [rax], 0xf; test dword ptr [rbp + 0x48000002], ecx; add esp, 0x50; pop rbx; ret; 
0x00000000000bb959: imul edx, dword ptr [rbp + rdx*8 - 0x3b], 0xe9c256f9; ret; 
0x00000000000a7e0b: imul edx, dword ptr [rsi + rdx*8 - 0x3b], 0xe9c256f9; leave; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000113f35: imul edx, edx, 0x15; ret 0x6ac4; 
0x0000000000103066: imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x0000000000103066: imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x0000000000194701: imul edx; jmp qword ptr [rdi]; 
0x00000000000d9eb8: imul esi, dword ptr [rax], 0x728b5ecd; out 0x3f, al; jmp qword ptr [rbx]; 
0x000000000007dbe3: imul esi, dword ptr [rsi + 8], 0x6f0f6600; ret 0x70e8; 
0x00000000000dd0eb: imul esi, ebx, -0x2a; ret; 
0x00000000000c1419: imul esi, edx, 7; add ch, al; ret; 
0x00000000000e6620: imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x0000000000042661: imul esp, dword ptr [rcx + 0xf66000b], 0x28; ret 0xe7e9; 
0x0000000000112438: imul esp, dword ptr [rdi], 0x2ace133a; push rbp; mov esp, 0x5e4ab88f; sub dh, ch; ret 0x583f; 
0x00000000000da93b: imul esp, eax, 0x9b3fe4c9; cmc; jmp qword ptr [rax - 0x35]; 
0x000000000012eb55: imul esp, ecx, 0x3f; ja 0x12eb85; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000013eef5: imul esp, ecx, 0x3f; ja 0x13ef25; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000015d375: imul esp, ecx, 0x3f; ja 0x15d3a5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000016d635: imul esp, ecx, 0x3f; ja 0x16d665; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x0000000000181415: imul esp, ecx, 0x3f; ja 0x181445; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018c1b5: imul esp, ecx, 0x3f; ja 0x18c1e5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000dea15: imul esp, ecx, 0x3f; ja 0xdea45; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000faeb5: imul esp, ecx, 0x3f; ja 0xfaee5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000e83b4: imul esp, ecx, 0xcfb0bf3a; adc eax, 0xbd2092e2; out dx, eax; sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x00000000000724ca: imul rax, rdx; add rsp, 0x18; ret; 
0x0000000000019af0: imul rax, rdx; ret; 
0x0000000000072380: imul rax, rsi; add rsp, 0x18; ret; 
0x000000000010da41: in al, 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x00000000000cbe75: in al, 0x2d; ret 0xbff3; 
0x0000000000194c74: in al, 0x3c; add byte ptr [rax], al; mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x00000000000deb5e: in al, 0x3f; and ah, ch; ret; 
0x00000000000da93e: in al, 0x3f; wait; cmc; jmp qword ptr [rax - 0x35]; 
0x00000000000e8c84: in al, 0x40; mov edi, 0x2b29884e; mov ah, dh; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x000000000002a66d: in al, 0x41; pop rsp; divsd xmm1, xmm4; pop r13; movapd xmm0, xmm1; ret; 
0x0000000000015ccb: in al, 0x45; cmp ah, 1; je 0x15cdb; fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x00000000000207b3: in al, 0x45; cmp ah, 5; je 0x207f2; mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000ff449: in al, 0x56; sub r9b, dl; out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x00000000000e4395: in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000043301: in al, 0x66; ucomiss xmm0, xmm4; jp 0x43310; jne 0x43310; addsd xmm0, xmm0; ret; 
0x0000000000049851: in al, 0x66; ucomiss xmm0, xmm4; jp 0x49860; jne 0x49860; addsd xmm0, xmm0; ret; 
0x00000000000d6bdb: in al, 0x6b; mov ah, cl; mov edi, 0x7604b95a; ret; 
0x00000000000ddc40: in al, 0x83; sub dh, al; sti; call rsi; 
0x000000000008cc30: in al, 0xc4; pop r11; pop rax; ret; 
0x0000000000098d74: in al, 0xc4; ret 0xb9e1; 
0x00000000000a401a: in al, 0xc5; adc dword ptr [rcx + rbp*8 - 0x3c], edx; ret; 
0x0000000000099837: in al, 0xc5; jns 0x99863; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x00000000000afe21: in al, 0xc5; jns 0xafe4d; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x00000000000b9d68: in al, 0xc5; ret; 
0x0000000000089048: in al, 0xc5; sti; pop rcx; ret 0x41c4; 
0x000000000010d381: in al, 0xcf; adc byte ptr [rbp - 0xa], bl; ret; 
0x00000000000d2010: in al, 0xd4; push rcx; and eax, 0xfe3fe25e; ret; 
0x00000000000dc14b: in al, 0xd8; cmp eax, 0xae12bfd1; mov bh, 0xb4; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x000000000001adce: in al, 0xd9; ret 0xc9d8; 
0x0000000000018fce: in al, 0xd9; ret; 
0x000000000011b3ab: in al, 0xdc; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x11b3b4; ret 0x56ca; 
0x0000000000149d4b: in al, 0xdc; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x149d54; ret 0x56ca; 
0x0000000000177c8b: in al, 0xdc; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x177c94; ret 0x56ca; 
0x00000000000e742b: in al, 0xdc; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0xe7434; ret 0x56ca; 
0x0000000000107970: in al, 0xdf; in eax, dx; ret; 
0x00000000000fe3bd: in al, 0xed; mov edi, 0x630e5489; ret 0xc374; 
0x000000000019093d: in al, 0xee; jmp qword ptr [rax - 0x7b]; 
0x00000000000ddee2: in al, 0xf3; add al, byte ptr [rax]; fidivr dword ptr [rdi]; add byte ptr [rbp + 0x1a], al; ret 0xb24f; 
0x000000000006c408: in al, 0xf9; or dword ptr [rax], eax; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e330a: in al, 0xf9; ret; 
0x00000000000fcb4c: in al, 0xf; mov bh, 0x3f; jmp qword ptr [rdx - 0x1b]; 
0x00000000000424da: in al, 0xf; test dword ptr [rdi - 0x9fffffe], eax; ret; 
0x000000000007b7d7: in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000c249f: in al, 0xff; inc ebp; ret; 
0x0000000000030a33: in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000003b9f5: in al, 0xff; jmp qword ptr [rsi + 0x41]; 
0x0000000000010f94: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000039cdb: in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000000516dc: in al, 1; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000012fee: in al, 4; jne 0x12fe8; fstp st(1); ret; 
0x00000000000422dc: in al, 8; ret 0x974; 
0x0000000000057252: in al, dx; add al, byte ptr [rax]; nop dword ptr [rax]; addss xmm0, xmm0; ret; 
0x000000000009c65d: in al, dx; add al, byte ptr [rax]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000019117c: in al, dx; add dword ptr [rax], eax; add byte ptr [rax], al; mov cl, 0xe7; jmp qword ptr [rdx]; 
0x0000000000105c0a: in al, dx; add eax, 0x3fe815e6; add dl, bl; ret; 
0x000000000001d70c: in al, dx; and dh, bl; ret 0xc9d9; 
0x000000000019037e: in al, dx; call qword ptr [rax + 0x66]; 
0x00000000001901d6: in al, dx; call qword ptr [rax]; 
0x0000000000195d1a: in al, dx; call qword ptr [rdi]; 
0x0000000000195f22: in al, dx; call qword ptr [rsi + 0xa]; 
0x0000000000195d9a: in al, dx; call qword ptr [rsi]; 
0x0000000000190216: in al, dx; call rax; 
0x00000000000e4750: in al, dx; cmp byte ptr [rsi - 0x26], cl; pop rbp; ret; 
0x000000000019045e: in al, dx; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x0000000000190376: in al, dx; inc dword ptr [rax]; add byte ptr [rax], al; xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x0000000000190326: in al, dx; jmp qword ptr [rax + 0x64]; 
0x00000000001904c6: in al, dx; jmp qword ptr [rax + 0x6b]; 
0x00000000001903be: in al, dx; jmp qword ptr [rax]; 
0x00000000000cfc6a: in al, dx; jmp qword ptr [rbx + 0x22]; 
0x0000000000195d32: in al, dx; jmp qword ptr [rcx]; 
0x00000000001902ae: in al, dx; jmp rax; 
0x00000000000dde53: in al, dx; jmp rdi; 
0x00000000000e4393: in al, dx; jmp rsp; 
0x00000000000180f2: in al, dx; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; pop rbx; pop rbp; ret; 
0x0000000000018c18: in al, dx; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af68: in al, dx; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d9cb8: in al, dx; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x000000000001b26f: in al, dx; mov word ptr [rsp - 0x10], dx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000020da6: in al, dx; or al, byte ptr [rax]; add rsp, 8; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000000b7f2: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x3917cd; test rax, rax; je 0xb802; call rax; 
0x0000000000072b0a: in al, dx; or byte ptr [rax], al; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000010cae4: in al, dx; out 0x49, al; out 0xd2, al; pop rbx; ret; 
0x00000000000d7d3a: in al, dx; out 0x7b, eax; ret; 
0x00000000000dec90: in al, dx; out dx, al; ret; 
0x00000000000e9c20: in al, dx; pop rsi; clc; ret 0xff7b; 
0x0000000000190456: in al, dx; push qword ptr [rax + 0x8000069]; jp 0x19044b; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x000000000019031e: in al, dx; push qword ptr [rax]; add byte ptr fs:[rax], al; test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x00000000000e78b0: in al, dx; push rsp; scasd eax, dword ptr [rdi]; stosd dword ptr [rdi], eax; pop rbp; ret; 
0x00000000001105a3: in al, dx; ret 0x920c; 
0x00000000000dc274: in al, dx; ret 0xbc01; 
0x00000000000d8b5a: in al, dx; ret; 
0x00000000000e3d35: in al, dx; sar dil, 0xd9; add dh, byte ptr [rbx]; ret 0x1270; 
0x0000000000029b0b: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000000e9060: in al, dx; shr bh, 0x46; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x000000000007a0b1: in al, dx; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000db449: in al, dx; stosd dword ptr [rdi], eax; movsd dword ptr [rdi], dword ptr [rsi]; push rsi; ret 0xbfd2; 
0x00000000000e527c: in al, dx; xchg esi, eax; ret; 
0x000000000010da3d: in eax, 0; ror byte ptr [rax - 0x1c], 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x000000000010d1a5: in eax, 0x25; cmp eax, 0xf619aaf7; ret 0x4eb; 
0x00000000000d6bd8: in eax, 0x28; in eax, dx; in al, 0x6b; mov ah, cl; mov edi, 0x7604b95a; ret; 
0x00000000000da026: in eax, 0x3f; add r11b, byte ptr [rsi + 0x21]; ret 0x3fe2; 
0x0000000000112f96: in eax, 0x3f; pop rcx; ret 0x8073; 
0x00000000000d4e2e: in eax, 0x40; ret 0x3b36; 
0x00000000001028da: in eax, 0x4a; ret; 
0x0000000000046d67: in eax, 0x4c; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000d8641: in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000000e6520: in eax, 0x5d; rol dl, cl; ret; 
0x00000000000d4a94: in eax, 0x77; and byte ptr [rax + 0x66], al; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000e73ac: in eax, 0x86; call 0xffffffffc0a12cf2; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x78148802; ret 0x4f00; 
0x000000000011b32c: in eax, 0x86; call 0xffffffffc0a46c72; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x7817c782; ret 0x4f00; 
0x0000000000149ccc: in eax, 0x86; call 0xffffffffc0a75612; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781ab122; ret 0x4f00; 
0x0000000000177c0c: in eax, 0x86; call 0xffffffffc0aa3552; mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781d9062; ret 0x4f00; 
0x00000000000db445: in eax, 0x8c; mov esp, 0xa5abec2f; push rsi; ret 0xbfd2; 
0x00000000000d7440: in eax, 0x96; call 0xffffffff8fd6957a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000f38e0: in eax, 0x96; call 0xffffffff8fd85a1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000127580: in eax, 0x96; call 0xffffffff8fdb96ba; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000137920: in eax, 0x96; call 0xffffffff8fdc9a5a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000155da0: in eax, 0x96; call 0xffffffff8fde7eda; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000166060: in eax, 0x96; call 0xffffffff8fdf819a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000179e40: in eax, 0x96; call 0xffffffff8fe0bf7a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000184be0: in eax, 0x96; call 0xffffffff8fe16d1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000031ae7: in eax, 0xa; add dl, dh; addps xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x0000000000031b62: in eax, 0xa; add dl, dh; mulps xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000103bf5: in eax, 0xac; nop; ret; 
0x00000000000520cf: in eax, 0xae; xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000e49fe: in eax, 0xbb; lea r13d, [r15 + 0x44019029]; mov edi, 0xa4df0dfd; ret 0x7f48; 
0x0000000000090330: in eax, 0xc4; fnstcw word ptr [rcx - 0x6bd3b22]; mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x000000000009231d: in eax, 0xc4; ret 0x9d99; 
0x0000000000092c78: in eax, 0xc4; ret 0x9df9; 
0x000000000008f393: in eax, 0xc4; ret 0xbdf9; 
0x00000000000a07d0: in eax, 0xc5; add dword ptr [rcx + rdi*8 - 0x3c], edx; ret; 
0x0000000000095e2c: in eax, 0xc5; fistp dword ptr [rsi + rsi*8 - 0x3b]; retf; pop rsp; inc ebp; ret; 
0x00000000000880a8: in eax, 0xc5; ret; 
0x0000000000092b57: in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000a918c: in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x00000000000bfdc2: in eax, 0xc5; sti; pop rax; ret 0xfbc5; 
0x0000000000089002: in eax, 0xc5; sti; pop rcx; ret 0xc1c4; 
0x00000000000c2671: in eax, 0xc5; sti; pop rsi; ret; 
0x00000000000c260c: in eax, 0xc5; sti; pop rsp; ret 0xfbc5; 
0x000000000000e5e7: in eax, 0xcc; or eax, dword ptr [rax]; jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000001a384: in eax, 0xd9; ret 0xced8; 
0x0000000000014a70: in eax, 0xd9; ret 0xeddf; 
0x00000000000d1fc0: in eax, 0xe4; ret 0x25e7; 
0x000000000018f59d: in eax, 0xe7; jmp qword ptr [rax]; 
0x0000000000198421: in eax, 0xee; call rdx; 
0x0000000000198a85: in eax, 0xef; call qword ptr [rdx + 4]; 
0x000000000004240e: in eax, 0xf; wait; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000a4cec: in eax, 0xf; xchg ah, al; add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000008d3dd: in eax, 0xf; xchg byte ptr [rax], bl; adc eax, 0x41c40000; jnp 0x8d444; ret; 
0x00000000000a3272: in eax, 0xf; xchg byte ptr [rdi], ch; sbb al, 0; add ah, al; jnp 0xa32d9; ret; 
0x000000000008e6f8: in eax, 0xf; xchg dh, bh; add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000007b677: in eax, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000095c17: in eax, 0xff; inc ebp; ret; 
0x00000000000b4ce3: in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f15f: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000059a1a: in eax, 0xff; push qword ptr [rcx]; ror byte ptr [rax + 1], cl; ret; 
0x00000000000e4d12: in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x000000000013524d: in eax, 4; sub eax, 0xe515b023; ja 0x135277; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000016398d: in eax, 4; sub eax, 0xe515b023; ja 0x1639b7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d4a8d: in eax, 4; sub eax, 0xe515b023; ja 0xd4ab7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000004f7f3: in eax, dx; adc eax, 0xff3000b; pop rcx; ret; 
0x00000000000a988c: in eax, dx; and ch, al; ret; 
0x00000000000bfe91: in eax, dx; call 0x1f1bfe96; add ch, al; ret; 
0x0000000000190596: in eax, dx; call qword ptr [rax + 0x71]; 
0x00000000001967d2: in eax, dx; call qword ptr [rax + 7]; 
0x0000000000190526: in eax, dx; call qword ptr [rax]; 
0x0000000000112590: in eax, dx; call qword ptr [rbx - 0x29]; 
0x00000000001966aa: in eax, dx; call qword ptr [rcx + 1]; 
0x0000000000197072: in eax, dx; call qword ptr [rcx]; 
0x00000000001962b2: in eax, dx; call qword ptr [rdi + 4]; 
0x0000000000196752: in eax, dx; call qword ptr [rdi]; 
0x00000000001970ea: in eax, dx; call qword ptr [rdx + 2]; 
0x0000000000196dc2: in eax, dx; call qword ptr [rsi]; 
0x00000000000acbe3: in eax, dx; cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e452e: in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x000000000019058e: in eax, dx; dec dword ptr [rax]; jno 0x190593; add byte ptr [rax - 0x41], ch; in eax, dx; call qword ptr [rax + 0x71]; 
0x000000000010e377: in eax, dx; fbld tbyte ptr [rdi - 0xa02eebc]; add eax, 0x5f98c940; ret; 
0x00000000000d6bda: in eax, dx; in al, 0x6b; mov ah, cl; mov edi, 0x7604b95a; ret; 
0x000000000019051e: in eax, dx; inc eax; insd dword ptr [rdi], dx; add byte ptr [rax], al; sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x0000000000190576: in eax, dx; jmp qword ptr [rax + 0x70]; 
0x00000000001905de: in eax, dx; jmp qword ptr [rax + 0x73]; 
0x00000000001905d6: in eax, dx; jmp qword ptr [rax]; 
0x0000000000196f4a: in eax, dx; jmp qword ptr [rbx + 1]; 
0x00000000001964e2: in eax, dx; jmp qword ptr [rcx + 3]; 
0x0000000000196ed2: in eax, dx; jmp qword ptr [rcx]; 
0x0000000000196d76: in eax, dx; jmp qword ptr [rdi + 3]; 
0x0000000000196d5a: in eax, dx; jmp qword ptr [rdi]; 
0x0000000000196ff2: in eax, dx; jmp rax; 
0x000000000019686a: in eax, dx; jmp rcx; 
0x00000000000a7f2a: in eax, dx; jo 0xa7ef1; ret; 
0x00000000000a812d: in eax, dx; mov al, 0xc4; ret; 
0x00000000000e4db2: in eax, dx; mov byte ptr [rbx - 1], cl; xor bh, byte ptr [rdi]; ret; 
0x00000000000fe3ae: in eax, dx; mov edi, 0x2f019fa9; xor al, 0x62; movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000fe3be: in eax, dx; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000eb0b4: in eax, dx; mov es, word ptr [rax + 0x3f]; ret; 
0x000000000002c4f1: in eax, dx; or dword ptr [rax], eax; divsd xmm0, xmm1; ret; 
0x00000000000ef334: in eax, dx; pop rbp; ret 0x493f; 
0x00000000000dc560: in eax, dx; popfq; mov cl, 0xf5; scasd eax, dword ptr [rdi]; ret; 
0x000000000019056e: in eax, dx; push qword ptr [rax]; jo 0x190573; add byte ptr [rax], cl; mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x00000000000fd3c8: in eax, dx; push rdx; mov ah, 0x9f; pop rsi; ret 0x3fd7; 
0x000000000000178e: in eax, dx; rcl cl, 0x68; iretd; lodsq rax, qword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x00000000000ddbf5: in eax, dx; ret 0x1fbf; 
0x00000000000d785d: in eax, dx; ret 0xa3bf; 
0x00000000000d97b1: in eax, dx; ret; 
0x00000000000de960: in eax, dx; retfq; cmp edi, edi; jmp rdx; 
0x00000000000ecd68: in eax, dx; sbb edx, esi; mov esi, 0xbf3bed61; add byte ptr [rax + 0x65fcb015], ah; ret; 
0x0000000000079fc3: in eax, dx; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000089d0f: in eax, dx; sub al, byte ptr [rdi]; add ch, al; ret; 
0x000000000000eb40: in eax, dx; ucomisd xmm0, xmm5; jp 0xeb49; je 0xebb0; add rsp, 0x18; ret; 
0x000000000001211f: in eax, dx; ucomiss xmm0, xmm5; jp 0x12127; je 0x12180; add rsp, 0x18; ret; 
0x0000000000099315: in eax, dx; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x0000000000056dc9: inc byte ptr [rax + 0x74]; sbb bl, dh; movups xmm0, xmm1; ret; 
0x0000000000048b56: inc byte ptr [rax + rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x00000000000ca76c: inc byte ptr [rax - 0x5436c011]; sbb al, 0x1c; ret; 
0x000000000004e0b8: inc byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000000e3e73: inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x00000000000b1d8c: inc ch; adc ebx, dword ptr [rcx + rbp*8 - 0x3b]; ret; 
0x00000000000b4a14: inc ch; rcl dword ptr [rcx + rbp*8 - 0x3b]; ret; 
0x00000000000878ab: inc ch; ret; 
0x00000000000b83f2: inc ch; retf; pop rax; test ebp, 0xc5e72979; ret; 
0x00000000000896ee: inc ch; sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x89725; fcmovb st(0), st(5); ret; 
0x000000000009fc6c: inc ch; sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x0000000000190e3f: inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x00000000001909f7: inc dword ptr [rax - 0x17ffff77]; sub ebp, edi; call rax; 
0x000000000010809b: inc dword ptr [rax - 0x21]; cmc; jmp qword ptr [rax - 0x23]; 
0x0000000000190a67: inc dword ptr [rax - 0x27ffff73]; pop rcx; out dx, eax; call rax; 
0x0000000000190e1f: inc dword ptr [rax - 0x5b]; add byte ptr [rax], al; mov byte ptr [rbx], dl; bnd call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x0000000000190937: inc dword ptr [rax - 0x7b]; add byte ptr [rax], al; pop rax; in al, 0xee; jmp qword ptr [rax - 0x7b]; 
0x00000000000887e9: inc dword ptr [rax]; add al, dh; jg 0x887fe; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000009ed69: inc dword ptr [rax]; add al, dh; jg 0x9ed7e; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x00000000000c7f1c: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0x8944; 
0x00000000000c7e86: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0xffb8; 
0x00000000000c7335: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ror dword ptr [rcx + 0x39], 1; fisttp dword ptr [rdi]; xchg esp, eax; ret 0x5422; 
0x0000000000072011: inc dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000004a7fd: inc dword ptr [rax]; add byte ptr [rax - 0xcf38181], al; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x00000000000ca1d4: inc dword ptr [rax]; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000190377: inc dword ptr [rax]; add byte ptr [rax], al; xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x00000000000c54f4: inc dword ptr [rax]; add byte ptr [rsi + 0x41], ah; and eax, 0x21487fff; ret 0xcae9; 
0x000000000006fb36: inc dword ptr [rax]; or byte ptr [rax - 0x3f], 0xe0; xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x00000000001311d2: inc dword ptr [rbp + 0x3fbe377d]; push rbp; dec byte ptr [rdx + rbp*8]; jno 0x1311ae; ret 0xd33f; 
0x000000000015f912: inc dword ptr [rbp + 0x3fbe377d]; push rbp; dec byte ptr [rdx + rbp*8]; jno 0x15f8ee; ret 0xd33f; 
0x00000000000d0a12: inc dword ptr [rbp + 0x3fbe377d]; push rbp; dec byte ptr [rdx + rbp*8]; jno 0xd09ee; ret 0xd33f; 
0x0000000000020937: inc dword ptr [rbp - 0x76a6a540]; ret 0x2cdb; 
0x00000000000c880a: inc dword ptr [rbp - 0x77]; fimul dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000c5e78: inc dword ptr [rbp - 0x77]; loope 0xc5e66; ret; 
0x0000000000018b35: inc dword ptr [rbp - 0x77]; ret 0xfe83; 
0x00000000000320e0: inc dword ptr [rbx]; add byte ptr [rax], al; cvtsi2sd xmm0, rdx; ret; 
0x00000000000bc87c: inc dword ptr [rbx]; add ch, al; ret; 
0x000000000001b3ca: inc dword ptr [rcx - 0x7d]; ret 0xf01; 
0x0000000000084b6d: inc dword ptr [rcx - 0x7d]; ret; 
0x000000000006988b: inc dword ptr [rcx]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000017008: inc dword ptr [rcx]; je 0x17042; fld1; fchs; fdivrp st(1); ret; 
0x000000000010bdf7: inc eax; adc dh, dh; jmp rax; 
0x000000000019051f: inc eax; insd dword ptr [rdi], dx; add byte ptr [rax], al; sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x0000000000190a17: inc eax; mov al, byte ptr [rax]; add byte ptr [rax + 0x37], bl; out dx, eax; call qword ptr [rax]; 
0x00000000000cccfb: inc eax; mov dh, ah; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000cccff: inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x0000000000019e69: inc eax; shr eax, 0x1f; ret; 
0x00000000000ba22f: inc ebp; jns 0xba25c; ffreep st(5); ret; 
0x00000000000878a7: inc ebp; ret; 
0x00000000000b645e: inc ebp; retf; pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000887f3: inc ebp; rol edx, cl; ret; 
0x00000000000bec14: inc ebp; sti; pop rax; mov ebp, 0xc5fd28f9; ret; 
0x00000000000c1877: inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc18a7; ret 0xc1c4; 
0x00000000000c270c: inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc273c; ret 0xc1c4; 
0x00000000000ccd0f: inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x00000000000c13ad: inc esp; jns 0xc13da; ret 0xc3c5; 
0x000000000008e5f1: inc esp; push r11; pop rax; ret 0x41c4; 
0x000000000008e8ed: inc esp; push r11; pop rsp; ret; 
0x0000000000090139: inc esp; ret 0x99d1; 
0x00000000000d77da: insb byte ptr [rdi], dx; add al, 0x12; push rax; ret; 
0x00000000001990fc: insb byte ptr [rdi], dx; add dword ptr [rax], 0xf0496000; jmp qword ptr [rdx + 0xd]; 
0x000000000008e776: insb byte ptr [rdi], dx; add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000004fe4b: insb byte ptr [rdi], dx; add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000001b2ba: insb byte ptr [rdi], dx; and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x00000000000186e5: insb byte ptr [rdi], dx; and al, 0x10; jne 0x18698; pop rbx; ret; 
0x0000000000018727: insb byte ptr [rdi], dx; and al, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000001374b: insb byte ptr [rdi], dx; and al, 0x18; add rsp, 0x10; fdivp st(1); ret; 
0x000000000001bdf1: insb byte ptr [rdi], dx; and al, 0x18; fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000012c75: insb byte ptr [rdi], dx; and al, 0x18; fpatan; ret; 
0x000000000001be01: insb byte ptr [rdi], dx; and al, 0x18; ret; 
0x00000000000161f1: insb byte ptr [rdi], dx; and al, 0x20; add rsp, 0x10; pop rbx; fadd st(0); ret; 
0x000000000001f5e9: insb byte ptr [rdi], dx; and al, 0x20; add rsp, 0x20; add rsp, 0x28; ret; 
0x0000000000012d61: insb byte ptr [rdi], dx; and al, 0x20; fdiv dword ptr [rip + 0xb8d6a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000018115: insb byte ptr [rdi], dx; and al, 0x28; faddp st(1); pop rbx; pop rbp; ret; 
0x00000000000549ec: insb byte ptr [rdi], dx; and al, 0x54; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x0000000000017c83: insb byte ptr [rdi], dx; and al, 0x70; add rsp, 0x60; pop rbx; fsubp st(1); ret; 
0x00000000000134c3: insb byte ptr [rdi], dx; and al, 0x98; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x000000000001ae90: insb byte ptr [rdi], dx; and al, 0xa8; faddp st(1); ret; 
0x0000000000019f9b: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000001b17d: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; ret; 
0x00000000000180f8: insb byte ptr [rdi], dx; and al, 0xe8; pop rbx; pop rbp; ret; 
0x00000000000182e7: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000001b336: insb byte ptr [rdi], dx; and al, 0xf0; pop rbx; ret; 
0x000000000001b0c3: insb byte ptr [rdi], dx; and al, 0xf0; ret; 
0x0000000000019b6e: insb byte ptr [rdi], dx; and al, 0xf4; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019b76: insb byte ptr [rdi], dx; and al, 0xf6; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000017f21: insb byte ptr [rdi], dx; and al, 8; fabs; ret; 
0x0000000000032395: insb byte ptr [rdi], dx; and al, 8; fadd qword ptr [rsp - 0x20]; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000015d41: insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x0000000000050395: insb byte ptr [rdi], dx; and al, 8; faddp st(1); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000019a81: insb byte ptr [rdi], dx; and al, 8; fistp qword ptr [rsp - 8]; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000012c71: insb byte ptr [rdi], dx; and al, 8; fld xword ptr [rsp + 0x18]; fpatan; ret; 
0x0000000000017181: insb byte ptr [rdi], dx; and al, 8; fld1; fpatan; ret; 
0x0000000000012bb1: insb byte ptr [rdi], dx; and al, 8; fmulp st(1); faddp st(1); ret; 
0x0000000000018271: insb byte ptr [rdi], dx; and al, 8; frndint; ret; 
0x0000000000019fd9: insb byte ptr [rdi], dx; and al, 8; fscale; fstp st(1); ret; 
0x00000000000162a1: insb byte ptr [rdi], dx; and al, 8; fsqrt; ret; 
0x0000000000012a35: insb byte ptr [rdi], dx; and al, 8; fsub st(0); fdiv st(0); ret; 
0x0000000000019f25: insb byte ptr [rdi], dx; and al, 8; fsubrp st(1); ret; 
0x0000000000017fb1: insb byte ptr [rdi], dx; and al, 8; fxtract; fstp st(0); ret; 
0x00000000000183f1: insb byte ptr [rdi], dx; and al, 8; fxtract; fstp st(1); ret; 
0x0000000000019e8a: insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000010652a: insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x00000000000d99f9: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e99: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b39: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ed9: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x0000000000158359: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x0000000000168619: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3f9: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x0000000000187199: insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000d9d36: insb byte ptr [rdi], dx; cmp al, 0x95; add eax, 0xb0479c62; out 0x3f, al; ret 0xd7f0; 
0x00000000000cb730: insb byte ptr [rdi], dx; hlt; call rsp; 
0x00000000000d16d9: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; ret; 
0x0000000000198dfc: insb byte ptr [rdi], dx; jle 0x198dff; add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x000000000012fee4: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x12fe97; and al, 0xee; ret; 
0x0000000000140284: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x140237; and al, 0xee; ret; 
0x000000000015e704: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x15e6b7; and al, 0xee; ret; 
0x000000000016e9c4: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x16e977; and al, 0xee; ret; 
0x00000000001827a4: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x182757; and al, 0xee; ret; 
0x000000000018d544: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x18d4f7; and al, 0xee; ret; 
0x00000000000dfda4: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xdfd57; and al, 0xee; ret; 
0x00000000000fc244: insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xfc1f7; and al, 0xee; ret; 
0x00000000000138f0: insb byte ptr [rdi], dx; mov cl, byte ptr [rbx]; add al, bl; ret 0xcad8; 
0x00000000001006d5: insb byte ptr [rdi], dx; mov eax, 0x59567e3a; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000197844: insb byte ptr [rdi], dx; pop rcx; out dx, al; call qword ptr [rax]; 
0x00000000000e24b3: insb byte ptr [rdi], dx; push rbx; ret; 
0x00000000000e3d2e: insb byte ptr [rdi], dx; rcr dl, 0x16; pop rbp; ret 0xec71; 
0x00000000000eed4b: insb byte ptr [rdi], dx; ret 0x227e; 
0x00000000000ce3e5: insb byte ptr [rdi], dx; ret; 
0x00000000000b3480: insb byte ptr [rdi], dx; sbb dword ptr [rax], eax; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x00000000000de7a9: insb byte ptr [rdi], dx; sti; mov edx, 0x3fe0657e; ret; 
0x0000000000190521: insd dword ptr [rdi], dx; add byte ptr [rax], al; sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x000000000006fdce: insd dword ptr [rdi], dx; add rsp, 0x48; ret; 
0x0000000000103364: insd dword ptr [rdi], dx; call qword ptr [rbx]; 
0x0000000000104cd8: insd dword ptr [rdi], dx; cld; ret; 
0x00000000000d45a8: insd dword ptr [rdi], dx; cli; push qword ptr [rcx + 0x4000a58d]; ret; 
0x000000000004c55f: insd dword ptr [rdi], dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000009c187: insd dword ptr [rdi], dx; insd dword ptr [rdi], dx; or al, byte ptr [rax]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000011bcb2: insd dword ptr [rdi], dx; ja 0x11bd2b; ret 0x3f41; 
0x000000000014a512: insd dword ptr [rdi], dx; ja 0x14a58b; ret 0x3f41; 
0x00000000000e7d32: insd dword ptr [rdi], dx; ja 0xe7dab; ret 0x3f41; 
0x000000000011b3b0: insd dword ptr [rdi], dx; jne 0x11b3b4; ret 0x56ca; 
0x0000000000149d50: insd dword ptr [rdi], dx; jne 0x149d54; ret 0x56ca; 
0x0000000000177c90: insd dword ptr [rdi], dx; jne 0x177c94; ret 0x56ca; 
0x0000000000001c0e: insd dword ptr [rdi], dx; jne 0x417cb2ca; ret; 
0x00000000000e7430: insd dword ptr [rdi], dx; jne 0xe7434; ret 0x56ca; 
0x00000000000d9cb5: insd dword ptr [rdi], dx; lea edi, [rsp + rbp*8]; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x000000000007b43f: insd dword ptr [rdi], dx; loope 0x7b43f; jmp qword ptr [rsi + 0xf]; 
0x000000000001d4ae: insd dword ptr [rdi], dx; mov al, 0xdb; insd dword ptr [rdi], dx; movabs al, byte ptr [0x24b840f906ddb]; add dh, bl; ret 0x6ddb; 
0x000000000001d4b1: insd dword ptr [rdi], dx; movabs al, byte ptr [0x24b840f906ddb]; add dh, bl; ret 0x6ddb; 
0x000000000009c188: insd dword ptr [rdi], dx; or al, byte ptr [rax]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x00000000000a98bd: insd dword ptr [rdi], dx; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x000000000007bf8f: insd dword ptr [rdi], dx; push -1; jmp qword ptr [rsi + 0xf]; 
0x000000000001d137: insd dword ptr [rdi], dx; rcr dh, 1; ret 0x6ddb; 
0x00000000000cd63c: insd dword ptr [rdi], dx; ret 0x4d; 
0x00000000000f0c99: insd dword ptr [rdi], dx; ret 0xafe6; 
0x00000000000e8ee3: insd dword ptr [rdi], dx; ret 0xb440; 
0x00000000000d81db: insd dword ptr [rdi], dx; ret 0xb79c; 
0x00000000000d16da: insd dword ptr [rdi], dx; ret; 
0x000000000001d708: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x7d], 1; in al, dx; and dh, bl; ret 0xc9d9; 
0x000000000010c49b: insd dword ptr [rdi], dx; sti; ret; 
0x000000000010e17c: insd dword ptr [rdi], dx; sub al, 9; xchg ebx, eax; jle 0x10e161; ret 0x2234; 
0x000000000006eaff: insd dword ptr [rdi], dx; sub ecx, dword ptr [rcx]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x54e8; 
0x0000000000001c0d: insw word ptr [rdi], dx; jne 0x417cb2ca; ret; 
0x00000000000d616c: int 0; ret; 
0x000000000000cb8f: int 0x14; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000b7f7: int 0x17; cmp dword ptr [rax], eax; test rax, rax; je 0xb802; call rax; 
0x00000000001012bc: int 0x29; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000077dcf: int 0x3a; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000004c99b: int 0x3d; or eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001125a6: int 0x3f; ret 0xcc6f; 
0x00000000000eb28d: int 0x41; mov edi, 0xd4600000; ret 0x41ce; 
0x00000000000e3e6e: int 0x41; out dx, eax; cmp edx, edi; inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x0000000000105615: int 0x54; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000745cb: int 0x66; pxor mm0, mm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000cd28c: int 0x67; ret; 
0x00000000000ed873: int 0x73; retf; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x0000000000015633: int 0x76; or eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a4e19: int 0x80; 
0x00000000000422d1: int 0x89; ret 0x9b0f; 
0x0000000000011c03: int 0x9e; or eax, dword ptr [rax]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x00000000001126b1: int 0xa7; ret; 
0x0000000000093958: int 0xa; add byte ptr [rbx + 0x41c401e0], al; jns 0x93990; ret 0x820f; 
0x000000000000e568: int 0xb; add byte ptr [rdx + 2], bh; je 0xe578; add rsp, 0x18; ret; 
0x000000000011898e: int 0xbb; loope 0x118942; leave; jae 0x118963; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000014732e: int 0xbb; loope 0x1472e2; leave; jae 0x147303; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000017526e: int 0xbb; loope 0x175222; leave; jae 0x175243; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e49ce: int 0xbb; loope 0xe4982; leave; jae 0xe49a3; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000009298c: int 0xc4; ret 0x99b1; 
0x00000000000956c4: int 0xc4; ret 0x99b9; 
0x000000000008cc5b: int 0xc4; ret 0x99c1; 
0x00000000000a8fb8: int 0xc4; ret; 
0x00000000000939b6: int 0xc5; and dword ptr [rdx + rbx*8 - 0x3b], edx; stc; push rsp; ret 0x79c5; 
0x0000000000087d4f: int 0xc5; pop r8; ret 0xfbc5; 
0x00000000000b8e6b: int 0xc5; ret; 
0x0000000000093fa1: int 0xc5; stc; push rsp; ret 0x79c5; 
0x00000000000b3755: int 0xc5; sti; pop rcx; ret; 
0x000000000008cc8f: int 0xc5; xor dword ptr [rcx + rcx*8 - 0x3b], edx; ret; 
0x000000000008ea5c: int 0xc5; xor ebx, dword ptr [rax + 0xd]; ret; 
0x00000000000e3e6d: int 0xcd; out dx, eax; cmp edx, edi; inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x00000000000e83c2: int 0xda; retf; ret 0x3f3a; 
0x0000000000102250: int 0xdb; jae 0x1021d6; push 0x5a1ac94d; ret 0x5d3a; 
0x000000000000c5b2: int 0xde; ret; 
0x00000000000e8c83: int 0xe4; mov edi, 0x2b29884e; mov ah, dh; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x000000000018f4a5: int 0xe7; call qword ptr [rax]; 
0x00000000000283c0: int 0xf2; addps xmm2, xmm3; divsd xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000001eb9b: int 0xfe; jmp qword ptr [rsi - 0x70]; 
0x0000000000040fd7: int 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000105c07: int1; adc dl, byte ptr [rbp + 0x15e605ec]; call 0xffffffffda108a52; ret; 
0x0000000000105efc: int1; add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x000000000019990a: int1; call qword ptr [rbp + 5]; 
0x00000000001995de: int1; call qword ptr [rdx + 4]; 
0x0000000000199b2e: int1; call rsi; 
0x000000000008f57e: int1; cdq; fadd st(5), st(0); ret; 
0x0000000000012c63: int1; fmul st(1); faddp st(1); ret; 
0x00000000000bc87b: int1; inc dword ptr [rbx]; add ch, al; ret; 
0x00000000000d6d13: int1; iretd; mov ch, 0x3f; ret 0x5a22; 
0x00000000001003fd: int1; iretd; ret 0x8ecf; 
0x0000000000107344: int1; jg 0x107329; ret; 
0x000000000019995a: int1; jmp qword ptr [rbx + 2]; 
0x0000000000199762: int1; jmp qword ptr [rcx + 3]; 
0x0000000000199a12: int1; jmp qword ptr [rdi + 3]; 
0x0000000000190d56: int1; jmp rax; 
0x00000000000a7f3e: int1; jo 0xa7f06; xor ebx, dword ptr [rsi + rcx*8 - 0x3c]; ret; 
0x00000000000ccd52: int1; mov ch, 0x1a; ret; 
0x000000000004459d: int1; mov eax, 1; shl rax, cl; sub rax, 1; ret; 
0x000000000008cde2: int1; mov ebx, 0x5ccbc5fd; inc ebp; ret; 
0x000000000010e99d: int1; nop; mov edi, 0x947c13a; ret; 
0x0000000000077a0b: int1; or edi, esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000cd9dc: int1; outsb dx, byte ptr [rsi]; ret; 
0x00000000000a30c2: int1; outsd dx, dword ptr [rsi]; call qword ptr [rax - 0x3b]; 
0x000000000009e5e1: int1; outsd dx, dword ptr [rsi]; retf 0xc480; ret; 
0x000000000001543f: int1; pop r12; pop r13; ret; 
0x0000000000190d4e: int1; push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x00000000000e81e3: int1; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c163: int1; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9c3: int1; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000fc7c5: int1; ret 0x9f3f; 
0x00000000000d4088: int1; ret 0xad8c; 
0x00000000000dde62: int1; ret 0xe7cc; 
0x0000000000015468: int1; ret; 
0x0000000000042ded: int1; sar rdx, cl; imul rax, rdx; ret; 
0x0000000000019c0c: int1; shr edx, cl; imul rax, rdx; ret; 
0x00000000000724c6: int1; shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x00000000000dc069: int1; sub dword ptr [rax], esp; ret; 
0x0000000000087bc2: int1; test eax, 0x6994f15; add ah, al; ret 0x99e1; 
0x000000000010d382: iretd; adc byte ptr [rbp - 0xa], bl; ret; 
0x00000000000e83b9: iretd; adc eax, 0xbd2092e2; out dx, eax; sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x000000000012e743: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae3: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf63: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d223: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181003: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda3: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de603: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa3: iretd; add al, 0xd3; cwde; mov edi, 0x736708ae; jge 0xfaabc; ret 0x8d3f; 
0x0000000000098dfd: iretd; and al, 3; add ch, al; ret; 
0x00000000000dca53: iretd; call qword ptr [rbx]; 
0x00000000000fd2de: iretd; cmp ecx, ecx; xchg eax, esi; idiv edi; call rsp; 
0x0000000000017fa1: iretd; fstp st(1); fstp st(1); fadd st(0); ret; 
0x00000000000182dc: iretd; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b4ce2: iretd; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000103363: iretd; insd dword ptr [rdi], dx; call qword ptr [rbx]; 
0x000000000012c428: iretd; jno 0x12c41e; ret 0x226; 
0x000000000013c7c8: iretd; jno 0x13c7be; ret 0x226; 
0x000000000015ac48: iretd; jno 0x15ac3e; ret 0x226; 
0x000000000016af08: iretd; jno 0x16aefe; ret 0x226; 
0x000000000017ece8: iretd; jno 0x17ecde; ret 0x226; 
0x0000000000189a88: iretd; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e8: iretd; jno 0xdc2de; ret 0x226; 
0x00000000000f8788: iretd; jno 0xf877e; ret 0x226; 
0x0000000000105b81: iretd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x0000000000001793: iretd; lodsq rax, qword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x00000000000d6d15: iretd; mov ch, 0x3f; ret 0x5a22; 
0x0000000000100400: iretd; mov cs, esi; ret 0xbba; 
0x00000000000324ae: iretd; movapd xmm0, xmm1; ret; 
0x0000000000050ffb: iretd; movaps xmm0, xmm1; ret; 
0x000000000009b91e: iretd; movss dword ptr [rsi], xmm1; ret; 
0x0000000000043165: iretd; or dword ptr [rax], eax; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000ec012: iretd; out 0xf, eax; call rcx; 
0x0000000000101879: iretd; ret 0x10f4; 
0x00000000001003fe: iretd; ret 0x8ecf; 
0x0000000000048cf5: iretd; ret; 
0x000000000002e8a4: iretd; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000d6c9a: iretd; xchg edi, eax; ret; 
0x0000000000044ccd: iretd; xchg esi, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000001002c9: ja 0x1002d1; ret; 
0x000000000010e26b: ja 0x10e1f7; ret 0x4000; 
0x00000000001184ec: ja 0x118470; in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x0000000000118cf2: ja 0x118cf7; xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x0000000000119813: ja 0x119867; ret 0xbfd3; 
0x000000000011b664: ja 0x11b682; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x000000000011bcb3: ja 0x11bd2b; ret 0x3f41; 
0x000000000011f069: ja 0x11f042; ret 0xb2ad; 
0x000000000011f0b3: ja 0x11f0a4; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x000000000011fcf3: ja 0x11fd47; ret 0xbfd3; 
0x0000000000120d54: ja 0x120d4c; ret 0xdbf; 
0x0000000000012467: ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x0000000000126ff6: ja 0x126fb4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000012dda4: ja 0x12ddcd; ret 0x11bf; 
0x000000000012eb58: ja 0x12eb85; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000012eb5c: ja 0x12ebc8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000013144c: ja 0x131426; ret; 
0x0000000000135255: ja 0x135277; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000137396: ja 0x137354; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000013e144: ja 0x13e16d; ret 0x11bf; 
0x000000000013eef8: ja 0x13ef25; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000013eefc: ja 0x13ef68; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000146e8c: ja 0x146e10; in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x0000000000147692: ja 0x147697; xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x00000000001481b3: ja 0x148207; ret 0xbfd3; 
0x0000000000149ec4: ja 0x149ee2; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x000000000014a513: ja 0x14a58b; ret 0x3f41; 
0x000000000014d8c9: ja 0x14d8a2; ret 0xb2ad; 
0x000000000014d913: ja 0x14d904; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x000000000014e553: ja 0x14e5a7; ret 0xbfd3; 
0x000000000014f5b4: ja 0x14f5ac; ret 0xdbf; 
0x000000000001562a: ja 0x152ed; lea rdx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000155816: ja 0x1557d4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000153ec: ja 0x15918; lea rdx, [rip + 0xb78ef]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000015c5c4: ja 0x15c5ed; ret 0x11bf; 
0x000000000015d378: ja 0x15d3a5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000015d37c: ja 0x15d3e8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000015e3d: ja 0x15e9b; or eax, dword ptr [rax]; ret; 
0x000000000015fb8c: ja 0x15fb66; ret; 
0x0000000000163995: ja 0x1639b7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000165ad6: ja 0x165a94; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000016c884: ja 0x16c8ad; ret 0x11bf; 
0x000000000016d638: ja 0x16d665; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000016d63c: ja 0x16d6a8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000174dcc: ja 0x174d50; in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x00000000001755d2: ja 0x1755d7; xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x00000000001760f3: ja 0x176147; ret 0xbfd3; 
0x00000000001798b6: ja 0x179874; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000180664: ja 0x18068d; ret 0x11bf; 
0x0000000000181418: ja 0x181445; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018141c: ja 0x181488; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000184656: ja 0x184614; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000018b404: ja 0x18b42d; ret 0x11bf; 
0x000000000018c1b8: ja 0x18c1e5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018c1bc: ja 0x18c228; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000190b3d: ja 0x190b2e; call rax; 
0x0000000000198789: ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x000000000019b87c: ja 0x19b87f; add byte ptr [rax], al; ret; 
0x000000000001c165: ja 0x1c19f; or eax, dword ptr [rax]; add rsp, 0x18; fldz; ret; 
0x000000000002097c: ja 0x20988; add rsp, 8; ret; 
0x000000000002a846: ja 0x2a530; lea rdx, [rip + 0xb9669]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000045a5e: ja 0x45b40; andpd xmm1, xmmword ptr [rip + 0x85874]; ret; 
0x0000000000048992: ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x000000000004951a: ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x00000000000495de: ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000049762: ja 0x49770; add rsp, 8; ret; 
0x0000000000050435: ja 0x5049a; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000050ba5: ja 0x50c04; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000518fe: ja 0x51928; movd xmm0, eax; ret; 
0x0000000000056d59: ja 0x56d74; mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000056ee2: ja 0x56ef0; add rsp, 8; ret; 
0x0000000000058ac5: ja 0x58a73; or byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000058bb8: ja 0x58c20; movq mm0, qword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x000000000005f9b5: ja 0x5f9c1; add al, ch; ret; 
0x00000000000777b4: ja 0x777b5; jmp qword ptr [rsi + 0xf]; 
0x000000000007c642: ja 0x7c650; add rsp, 8; ret; 
0x000000000007dafa: ja 0x7db04; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007db1b: ja 0x7db25; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x39e8; 
0x000000000007ff18: ja 0x7ff22; ret; 
0x00000000000a98bc: ja 0xa992b; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000000ca4b9: ja 0xca4af; ret 0xa1fc; 
0x00000000000cc041: ja 0xcbfc9; ret 0x149a; 
0x00000000000cf4f3: ja 0xcf49e; out 0x47, eax; pushfq; ret 0x3f; 
0x00000000000d0c8c: ja 0xd0c66; ret; 
0x00000000000d4a95: ja 0xd4ab7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d6eb6: ja 0xd6e74; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000000db0c: ja 0xdb18; fsqrt; add rsp, 8; ret; 
0x00000000000ddc64: ja 0xddc8d; ret 0x11bf; 
0x00000000000dea18: ja 0xdea45; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000dea1c: ja 0xdea88; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000e452c: ja 0xe44b0; in eax, dx; cmp esp, dword ptr [rbx - 0x4ed5f14a]; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x00000000000e4d32: ja 0xe4d37; xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x00000000000e5853: ja 0xe58a7; ret 0xbfd3; 
0x00000000000e76e4: ja 0xe7702; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x00000000000e7d33: ja 0xe7dab; ret 0x3f41; 
0x00000000000eb0e9: ja 0xeb0c2; ret 0xb2ad; 
0x00000000000eb133: ja 0xeb124; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x00000000000ebd73: ja 0xebdc7; ret 0xbfd3; 
0x00000000000ecdd4: ja 0xecdcc; ret 0xdbf; 
0x000000000000eeb8: ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x00000000000f3356: ja 0xf3314; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000fa104: ja 0xfa12d; ret 0x11bf; 
0x00000000000faeb8: ja 0xfaee5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000faebc: ja 0xfaf28; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000102252: jae 0x1021d6; push 0x5a1ac94d; ret 0x5d3a; 
0x00000000001094c8: jae 0x1094f5; xor ch, byte ptr [rsi - 0x3c]; ret 0x402d; 
0x0000000000110615: jae 0x11061c; fidivr dword ptr [rbp + 0x3f]; add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x0000000000112351: jae 0x11231b; ret; 
0x00000000001148ba: jae 0x1148d7; ret; 
0x0000000000118993: jae 0x118963; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000011ab32: jae 0x11ab7b; ret; 
0x000000000011b71b: jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x000000000011c15c: jae 0x11c132; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x00000000001217f4: jae 0x1217c1; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x00000000000122b6: jae 0x12310; mov rax, qword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x00000000001264d2: jae 0x1264fe; out dx, al; ret 0x3fbb; 
0x000000000012bb72: jae 0x12bba9; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000012d2d1: jae 0x12d26d; ret; 
0x0000000000130753: jae 0x130731; ret 0x3fe6; 
0x0000000000133c89: jae 0x133c89; pop rdx; ret; 
0x00000000001340c1: jae 0x13406f; ret 0xbe6d; 
0x0000000000136872: jae 0x13689e; out dx, al; ret 0x3fbb; 
0x000000000013bf12: jae 0x13bf49; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000013d671: jae 0x13d60d; ret; 
0x00000000001417b3: jae 0x141815; mov ebx, 0xa9c23ff8; xlatb; sbb bl, byte ptr [rbx]; ret; 
0x0000000000014533: jae 0x14534; jmp qword ptr [rsi + 0x2e]; 
0x0000000000147333: jae 0x147303; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000001494d2: jae 0x14951b; ret; 
0x0000000000149f7b: jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x000000000014a9bc: jae 0x14a992; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x0000000000150054: jae 0x150021; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x0000000000154cf2: jae 0x154d1e; out dx, al; ret 0x3fbb; 
0x000000000015a392: jae 0x15a3c9; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000015baf1: jae 0x15ba8d; ret; 
0x0000000000015c5a: jae 0x15c62; fld st(0); fmul st(0); fstp st(0); ret; 
0x0000000000015d96: jae 0x15da3; add ch, bl; add al, 0xd1; ret; 
0x000000000015ee93: jae 0x15ee71; ret 0x3fe6; 
0x00000000001623c9: jae 0x1623c9; pop rdx; ret; 
0x0000000000162801: jae 0x1627af; ret 0xbe6d; 
0x0000000000164fb2: jae 0x164fde; out dx, al; ret 0x3fbb; 
0x000000000016a652: jae 0x16a689; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000016bdb1: jae 0x16bd4d; ret; 
0x0000000000016f78: jae 0x16f85; add cl, bl; ret; 
0x0000000000016f84: jae 0x16f91; add dh, bl; ret 0xc9dc; 
0x0000000000016f98: jae 0x16fa5; add dh, bl; ret 0xc9dc; 
0x000000000016fcf3: jae 0x16fd55; mov ebx, 0xa9c23ff8; xlatb; sbb bl, byte ptr [rbx]; ret; 
0x0000000000175273: jae 0x175243; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000177412: jae 0x17745b; ret; 
0x000000000000179a: jae 0x1786; and dword ptr [rsi - 2], ebp; jnp 0x17b5; cmp bh, byte ptr [rip - 0x402100f1]; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x0000000000178d92: jae 0x178dbe; out dx, al; ret 0x3fbb; 
0x000000000017e432: jae 0x17e469; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x0000000000017f8f: jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x000000000017fb91: jae 0x17fb2d; ret; 
0x0000000000018309: jae 0x18370; or eax, dword ptr [rax]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000183b32: jae 0x183b5e; out dx, al; ret 0x3fbb; 
0x00000000001891d2: jae 0x189209; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000018a931: jae 0x18a8cd; ret; 
0x000000000018e873: jae 0x18e8d5; mov ebx, 0xa9c23ff8; xlatb; sbb bl, byte ptr [rbx]; ret; 
0x00000000001905d9: jae 0x1905db; add byte ptr [rax], bl; cli; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x0000000000190aed: jae 0x190ade; call rax; 
0x0000000000020ca6: jae 0x20cae; fld st(0); fmul st(0); fstp st(0); ret; 
0x0000000000045a9e: jae 0x45abc; ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000000478cb: jae 0x4754d; ucomisd xmm7, qword ptr [rip + 0x839f7]; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x000000000004ae71: jae 0x4ae76; or byte ptr [rax], al; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000050c8c: jae 0x50c84; ret; 
0x000000000006fba9: jae 0x6fbc6; or dword ptr [rax], eax; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x00000000000799c1: jae 0x799d3; jne 0x79cf4; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000079fa3: jae 0x79fb5; jne 0x7a331; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000007dea2: jae 0x7deac; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dec1: jae 0x7decb; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x93e8; 
0x0000000000087871: jae 0x878cb; retf 0x73c5; pop rax; ret; 
0x0000000000087875: jae 0x878cf; ret; 
0x0000000000087ca4: jae 0x87cff; ret 0x6bc5; 
0x0000000000088f82: jae 0x88fe0; ret 0x19c5; 
0x000000000009ddec: jae 0x9de46; retf 0x73c5; pop rax; ret; 
0x000000000009ddf0: jae 0x9de4a; ret; 
0x000000000009e232: jae 0x9e28d; ret 0x6bc5; 
0x000000000009ee89: jae 0x9eeb1; add eax, 0x23c1c400; pop rcx; ret 0xf3c5; 
0x000000000009f503: jae 0x9f561; ret 0x19c5; 
0x00000000000cff93: jae 0xcff71; ret 0x3fe6; 
0x00000000000d34c9: jae 0xd34c9; pop rdx; ret; 
0x00000000000d3901: jae 0xd38af; ret 0xbe6d; 
0x00000000000d6392: jae 0xd63be; out dx, al; ret 0x3fbb; 
0x00000000000dba32: jae 0xdba69; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000dd191: jae 0xdd12d; ret; 
0x00000000000e49d3: jae 0xe49a3; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e6b92: jae 0xe6bdb; ret; 
0x00000000000e779b: jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e81dc: jae 0xe81b2; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000000ecf5: jae 0xed50; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x00000000000ed874: jae 0xed841; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x00000000000f2832: jae 0xf285e; out dx, al; ret 0x3fbb; 
0x00000000000f7ed2: jae 0xf7f09; xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000f9631: jae 0xf95cd; ret; 
0x00000000000fdad3: jae 0xfdb35; mov ebx, 0xa9c23ff8; xlatb; sbb bl, byte ptr [rbx]; ret; 
0x00000000001003f9: jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x00000000001058f4: jb 0x10594e; push rbx; call 0x2976e08; ret 0xf90d; 
0x0000000000106bd0: jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x0000000000109270: jb 0x1092af; ret 0xe192; 
0x000000000010ea94: jb 0x10ea3b; ret 0x576; 
0x0000000000119642: jb 0x1195dd; ret 0x63f9; 
0x000000000011a24e: jb 0x11a20c; ret 0x1c5e; 
0x0000000000011b1e: jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000011b7e: jb 0x11b90; ucomiss xmm0, dword ptr [rip + 0xb9f4d]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x0000000000011bfe: jb 0x11c10; ucomiss xmm0, dword ptr [rip + 0xb9ecd]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011cda: jb 0x11ce8; add rsp, 0x18; ret; 
0x000000000011fce9: jb 0x11fcf0; xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0x11fd47; ret 0xbfd3; 
0x000000000012018a: jb 0x12016f; div esp; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x000000000001242e: jb 0x12438; add rsp, 0x18; ret; 
0x000000000001266e: jb 0x12678; add rsp, 0x18; ret; 
0x0000000000012705: jb 0x12710; add rsp, 0x18; ret; 
0x0000000000127a80: jb 0x127a9f; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x000000000001279e: jb 0x127b0; ucomiss xmm0, dword ptr [rip + 0xb932d]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000128152: jb 0x128158; int 0x80; 
0x0000000000128520: jb 0x128549; ret; 
0x000000000012da03: jb 0x12da03; call rdx; 
0x0000000000137e20: jb 0x137e3f; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x00000000001384f2: jb 0x1384f8; int 0x80; 
0x00000000001388c0: jb 0x1388e9; ret; 
0x000000000013dda3: jb 0x13dda3; call rdx; 
0x0000000000147fe2: jb 0x147f7d; ret 0x63f9; 
0x0000000000148bee: jb 0x148bac; ret 0x1c5e; 
0x000000000014e549: jb 0x14e550; xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0x14e5a7; ret 0xbfd3; 
0x000000000014e9ea: jb 0x14e9cf; div esp; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x00000000001562a0: jb 0x1562bf; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x0000000000156972: jb 0x156978; int 0x80; 
0x0000000000156d40: jb 0x156d69; ret; 
0x000000000015c223: jb 0x15c223; call rdx; 
0x0000000000015c74: jb 0x15c71; test byte ptr [rsp + 0x1f], 0x40; je 0x15c71; fstp st(1); ret; 
0x0000000000166560: jb 0x16657f; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x0000000000166c32: jb 0x166c38; int 0x80; 
0x0000000000167000: jb 0x167029; ret; 
0x000000000016c4e3: jb 0x16c4e3; call rdx; 
0x0000000000175f22: jb 0x175ebd; ret 0x63f9; 
0x0000000000176b2e: jb 0x176aec; ret 0x1c5e; 
0x000000000017a340: jb 0x17a35f; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x000000000017aa12: jb 0x17aa18; int 0x80; 
0x000000000017ade0: jb 0x17ae09; ret; 
0x00000000001802c3: jb 0x1802c3; call rdx; 
0x00000000001850e0: jb 0x1850ff; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x00000000001857b2: jb 0x1857b8; int 0x80; 
0x0000000000185b80: jb 0x185ba9; ret; 
0x000000000018b063: jb 0x18b063; call rdx; 
0x00000000001905d1: jb 0x1905d3; add al, bh; cmc; in eax, dx; jmp qword ptr [rax]; 
0x0000000000019ae1: jb 0x19b90; mov ecx, 0x1f; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000047e2a: jb 0x47e66; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000006aa0a: jb 0x6a9da; add eax, 0x6f0f6600; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000082c2a: jb 0x82bb8; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000009beb4: jb 0x9bebd; add ch, al; pop rax; ret 0xe1c4; 
0x00000000000cca80: jb 0xcca94; mov ds, word ptr [rdi]; ret; 
0x000000000000cdb1: jb 0xcdc0; fstp st(0); add rsp, 8; ret; 
0x00000000000d7940: jb 0xd795f; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x00000000000d8012: jb 0xd8018; int 0x80; 
0x00000000000d83e0: jb 0xd8409; ret; 
0x000000000000dab1: jb 0xdac0; fstp st(0); add rsp, 8; ret; 
0x00000000000dd8c3: jb 0xdd8c3; call rdx; 
0x000000000000dda1: jb 0xddb0; fstp st(0); add rsp, 0x18; ret; 
0x000000000000de58: jb 0xde68; fstp st(0); add rsp, 8; ret; 
0x000000000000e4f1: jb 0xe500; add rsp, 0x18; ret; 
0x00000000000e5682: jb 0xe561d; ret 0x63f9; 
0x000000000000e561: jb 0xe578; ucomisd xmm0, qword ptr [rip + 0xbcd65]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x00000000000e628e: jb 0xe624c; ret 0x1c5e; 
0x000000000000e6bb: jb 0xe6c8; add rsp, 0x18; ret; 
0x00000000000ebd69: jb 0xebd70; xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0xebdc7; ret 0xbfd3; 
0x00000000000ec20a: jb 0xec1ef; div esp; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x000000000000edbc: jb 0xedd0; ucomisd xmm0, qword ptr [rip + 0xbc50a]; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000ee71: jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0e1: jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f188: jb 0xf190; add rsp, 0x18; ret; 
0x00000000000f3de0: jb 0xf3dff; sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x00000000000f44b2: jb 0xf44b8; int 0x80; 
0x00000000000f4880: jb 0xf48a9; ret; 
0x00000000000f9d63: jb 0xf9d63; call rdx; 
0x0000000000107341: jbe 0x107379; cmp dh, cl; jg 0x107329; ret; 
0x000000000010d37c: jbe 0x10d39d; and al, byte ptr [rax - 0x39]; in al, 0xcf; adc byte ptr [rbp - 0xa], bl; ret; 
0x0000000000112981: jbe 0x112987; xor al, 0xca; pop rbx; fnstsw word ptr [rdi]; pushfq; ret 0xa75f; 
0x000000000011ad88: jbe 0x11ad75; ret 0x6c01; 
0x000000000011c103: jbe 0x11c17a; ret; 
0x0000000000123414: jbe 0x1233a3; ret; 
0x0000000000124c12: jbe 0x124c27; mov bl, 0x53; sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x0000000000125c9a: jbe 0x125c46; ret; 
0x00000000001279e9: jbe 0x1279a9; sti; ret; 
0x0000000000127e76: jbe 0x127eb4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000012b87: jbe 0x12a58; fstp st(1); ret; 
0x0000000000012d12: jbe 0x12d28; add rsp, 0x10; fchs; pop rbx; ret; 
0x000000000012dba2: jbe 0x12dbdb; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000012df9c: jbe 0x12e016; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000130259: jbe 0x13029a; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x000000000013603a: jbe 0x135fe6; ret; 
0x0000000000137d89: jbe 0x137d49; sti; ret; 
0x0000000000138216: jbe 0x138254; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000013df42: jbe 0x13df7b; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000013e33c: jbe 0x13e3b6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000149728: jbe 0x149715; ret 0x6c01; 
0x000000000014a963: jbe 0x14a9da; ret; 
0x0000000000151c74: jbe 0x151c03; ret; 
0x0000000000153472: jbe 0x153487; mov bl, 0x53; sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x00000000001544ba: jbe 0x154466; ret; 
0x0000000000156209: jbe 0x1561c9; sti; ret; 
0x0000000000015634: jbe 0x15641; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000156696: jbe 0x1566d4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000015c3c2: jbe 0x15c3fb; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000015c7bc: jbe 0x15c836; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000016477a: jbe 0x164726; ret; 
0x00000000001664c9: jbe 0x166489; sti; ret; 
0x0000000000166956: jbe 0x166994; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000016c682: jbe 0x16c6bb; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000016ca7c: jbe 0x16caf6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000016e24: jbe 0x16d23; fchs; ret; 
0x000000000001706c: jbe 0x17040; fmul st(1); fstp st(0); ret; 
0x0000000000177668: jbe 0x177655; ret 0x6c01; 
0x000000000017855a: jbe 0x178506; ret; 
0x000000000017a2a9: jbe 0x17a269; sti; ret; 
0x000000000017a736: jbe 0x17a774; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000180462: jbe 0x18049b; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000018085c: jbe 0x1808d6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000001832fa: jbe 0x1832a6; ret; 
0x0000000000185049: jbe 0x185009; sti; ret; 
0x00000000001854d6: jbe 0x185514; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000018b202: jbe 0x18b23b; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000018b5fc: jbe 0x18b676; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000190679: jbe 0x19067b; add al, bl; out dx, al; jmp qword ptr [rax]; 
0x00000000001907bd: jbe 0x1907ad; call qword ptr [rax]; 
0x00000000001985a5: jbe 0x1985a7; add byte ptr [rax], bh; out dx, eax; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x000000000001b2b2: jbe 0x1b2c8; cmp dx, 0x7fff; fld xword ptr [rsp + 0x10]; je 0x1b3a0; pop rbx; ret; 
0x000000000002deb6: jbe 0x2ded0; mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x0000000000031c3c: jbe 0x31c98; addsd xmm0, xmm2; subsd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x0000000000032084: jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x0000000000044fce: jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000471c7: jbe 0x471cd; mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x00000000000474a3: jbe 0x471d8; movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x000000000004777f: jbe 0x47785; mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x0000000000048ab3: jbe 0x48d00; movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x000000000004d610: jbe 0x4d639; mov dword ptr [rsp - 0x10], edx; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000004dc8c: jbe 0x4dca8; mulss xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004fd7b: jbe 0x4fdd8; addss xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x0000000000050045: jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x00000000000747cb: jbe 0x747e0; cmp rdx, 0x7fff; je 0x74898; add rsp, 0x18; ret; 
0x000000000007799d: jbe 0x7799e; jmp qword ptr [rsi + 0xf]; 
0x000000000007db53: jbe 0x7db5d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007db74: jbe 0x7db7e; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe0e8; 
0x000000000007dbc3: jbe 0x7dbcd; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dbe4: jbe 0x7dbee; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x70e8; 
0x000000000007dc13: jbe 0x7dc1d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dc34: jbe 0x7dc3e; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x20e8; 
0x000000000009c040: jbe 0x9c069; mov dword ptr [rsp - 0x10], edx; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x00000000000a7875: jbe 0xa784f; add al, byte ptr [rax]; jo 0xa7840; ret; 
0x000000000000d1e6: jbe 0xd1f6; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000000000d52f9: jbe 0xd533a; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x00000000000d5b5a: jbe 0xd5b06; ret; 
0x00000000000d78a9: jbe 0xd7869; sti; ret; 
0x00000000000d7d36: jbe 0xd7d74; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000dda62: jbe 0xdda9b; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x00000000000dde5c: jbe 0xdded6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000e6de8: jbe 0xe6dd5; ret 0x6c01; 
0x00000000000e8183: jbe 0xe81fa; ret; 
0x00000000000ef494: jbe 0xef423; ret; 
0x00000000000f0c92: jbe 0xf0ca7; mov bl, 0x53; sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x00000000000f1799: jbe 0xf17da; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x00000000000f1ffa: jbe 0xf1fa6; ret; 
0x00000000000f3d49: jbe 0xf3d09; sti; ret; 
0x00000000000f41d6: jbe 0xf4214; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000f9f02: jbe 0xf9f3b; test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x00000000000fa2fc: jbe 0xfa376; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000100fc6: je 0x100f86; ret 0xe6aa; 
0x0000000000103455: je 0x10341f; xchg esi, eax; push rsp; mov ss, edx; test byte ptr [rdx], bh; ret 0xbf8b; 
0x0000000000105ef8: je 0x105f28; push rcx; xor esi, ecx; add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x000000000010c749: je 0x10c6d1; ret; 
0x00000000001158b9: je 0x115851; ret 0xbdcf; 
0x000000000011a033: je 0x119fbb; ret 0x3fcb; 
0x0000000000011b89: je 0x11b90; add rsp, 0x18; ret; 
0x0000000000011c09: je 0x11c10; add rsp, 0x18; ret; 
0x000000000011da39: je 0x11da0c; loope 0x11d9c4; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x0000000000012125: je 0x12180; add rsp, 0x18; ret; 
0x0000000000012386: je 0x12390; add rsp, 0x18; ret; 
0x0000000000123df3: je 0x123d7b; ret 0x3fcb; 
0x0000000000127916: je 0x127954; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x00000000000127a9: je 0x127b0; add rsp, 0x18; ret; 
0x0000000000012fcc: je 0x12fd2; fstp st(0); fldz; ret; 
0x00000000001333db: je 0x1333b7; jmp qword ptr [rdi]; 
0x000000000013548c: je 0x13545e; pop rsp; and al, 0x82; ret; 
0x0000000000137cb6: je 0x137cf4; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x0000000000144299: je 0x144231; ret 0xbdcf; 
0x00000000001489d3: je 0x14895b; ret 0x3fcb; 
0x000000000014c299: je 0x14c26c; loope 0x14c224; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x0000000000152653: je 0x1525db; ret 0x3fcb; 
0x0000000000156136: je 0x156174; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x0000000000015c7b: je 0x15c71; fstp st(1); ret; 
0x0000000000015c6f: je 0x15c74; faddp st(1); ret; 
0x0000000000015c95: je 0x15ca2; add dh, dh; ret 0x7402; 
0x0000000000015cd0: je 0x15cdb; fstp st(0); fld qword ptr [rip + 0xb55e6]; ret; 
0x0000000000015d8d: je 0x15dc3; shr edx, 0x1f; lea rcx, [rip + 0xb73c7]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015e22: je 0x15e35; fld qword ptr [rip + 0xb5496]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x0000000000015e89: je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x0000000000161b1b: je 0x161af7; jmp qword ptr [rdi]; 
0x0000000000163bcc: je 0x163b9e; pop rsp; and al, 0x82; ret; 
0x00000000001663f6: je 0x166434; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x000000000001700a: je 0x17042; fld1; fchs; fdivrp st(1); ret; 
0x0000000000017053: je 0x17060; fstp st(1); fld1; fchs; fdivrp st(1); ret; 
0x00000000001721d9: je 0x172171; ret 0xbdcf; 
0x0000000000176913: je 0x17689b; ret 0x3fcb; 
0x000000000017a1d6: je 0x17a214; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x0000000000018303: je 0x1830d; fstp st(0); fld xword ptr [rip + 0xb6573]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000184f76: je 0x184fb4; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x0000000000190af5: je 0x190ae6; push rax; pop qword ptr [rax]; add al, bl; jne 0x190aee; call qword ptr [rax]; 
0x000000000019841d: je 0x19841f; add byte ptr [rax], al; in eax, 0xee; call rdx; 
0x0000000000198c04: je 0x198c82; add byte ptr [rax], al; out dx, eax; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000019d7c: je 0x19d82; fstp st(0); fldz; ret; 
0x000000000001b2bd: je 0x1b3a0; pop rbx; ret; 
0x000000000001b588: je 0x1b590; neg rax; pop rbx; pop rbp; ret; 
0x000000000001c15f: je 0x1c169; fstp st(0); fld xword ptr [rip + 0xb3877]; add rsp, 0x18; fldz; ret; 
0x000000000001c70f: je 0x1c719; fstp st(0); fld dword ptr [rip + 0xb32db]; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000001cf48: je 0x1cf4c; fchs; mov rbx, qword ptr [rbp - 8]; leave; fxch st(1); ret; 
0x000000000001dec1: je 0x1de68; fstp st(0); fld xword ptr [rip + 0xb1b15]; add rsp, 0x58; fxch st(1); ret; 
0x00000000000207b8: je 0x207f2; mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000002083a: je 0x2084f; fstp st(1); ret; 
0x000000000002087a: je 0x2088f; fstp st(1); ret; 
0x00000000000209b5: je 0x209db; sbb bh, bh; je 0x209df; sbb al, ch; jmp qword ptr [rax - 1]; 
0x00000000000209b9: je 0x209df; sbb al, ch; jmp qword ptr [rax - 1]; 
0x00000000000209ca: je 0x209e0; cmp eax, 0x7fffffff; je 0x20a08; add rsp, 8; ret; 
0x00000000000209d1: je 0x20a08; add rsp, 8; ret; 
0x0000000000020cb4: je 0x20cba; fstp st(0); fldz; ret; 
0x00000000000320d7: je 0x32118; pxor xmm0, xmm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x00000000000321f9: je 0x3217f; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003238e: je 0x322de; fld xword ptr [rsp + 8]; fadd qword ptr [rsp - 0x20]; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000033913: je 0x33939; and byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x000000000003d138: je 0x3d11b; or byte ptr [rax], al; divsd xmm0, xmm1; ret; 
0x0000000000040fd1: je 0x40ff7; adc byte ptr [rdi], cl; xchg dword ptr [rsi], esp; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000041eb1: je 0x41ed7; and byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x0000000000043f74: je 0x43f9a; clc; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000044060: je 0x44078; xor eax, eax; movq xmm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000442bc: je 0x44478; neg rax; pop rbx; pop rbp; ret; 
0x0000000000045a68: je 0x45ac2; or byte ptr [rax], al; ret; 
0x00000000000478db: je 0x47a70; movapd xmm1, xmm0; ret; 
0x000000000004964d: je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049665: je 0x49668; ret; 
0x000000000004968d: je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000496a5: je 0x496a8; ret; 
0x00000000000497a0: je 0x497b0; cmp eax, 0x7fffffff; je 0x497d8; add rsp, 8; ret; 
0x00000000000497a7: je 0x497d8; add rsp, 8; ret; 
0x00000000000501a9: je 0x501e0; pxor xmm0, xmm0; sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x0000000000050f8f: je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000519b8: je 0x519d0; xor eax, eax; movd xmm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x0000000000051b9b: je 0x51d50; neg rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056dcb: je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056de2: je 0x56de5; ret; 
0x0000000000056e0b: je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e22: je 0x56e25; ret; 
0x0000000000056f20: je 0x56f30; cmp eax, 0x7fffffff; je 0x56f58; add rsp, 8; ret; 
0x0000000000056f27: je 0x56f58; add rsp, 8; ret; 
0x0000000000071f99: je 0x71fa0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x8f; ret; 
0x00000000000745ca: je 0x74599; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007470b: je 0x74750; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000747d4: je 0x74898; add rsp, 0x18; ret; 
0x0000000000077b94: je 0x77b95; jmp qword ptr [rsi + 0xf]; 
0x000000000007c5a2: je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x000000000007c680: je 0x7c690; cmp eax, 0x7fffffff; je 0x7c6b8; add rsp, 8; ret; 
0x000000000007c687: je 0x7c6b8; add rsp, 8; ret; 
0x000000000007ce86: je 0x7ce98; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cf66: je 0x7cf78; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dcc6: je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008027f: je 0x8023b; movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x00000000000804a6: je 0x804c0; xor eax, eax; cmp r8, rcx; setl al; lea eax, [rax + rax - 1]; ret; 
0x0000000000099bdf: je 0x99b9b; vmovsd xmm2, qword ptr [rip + 0x49b37]; vmovapd xmm0, xmm2; ret; 
0x000000000009c178: je 0x9c409; vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x00000000000a79d9: je 0xa79ff; and ah, al; ret; 
0x00000000000b01cf: je 0xb018b; vmovsd xmm2, qword ptr [rip + 0x33547]; vmovapd xmm0, xmm2; ret; 
0x000000000000b7fe: je 0xb802; call rax; 
0x000000000000b7fe: je 0xb802; call rax; add rsp, 8; ret; 
0x00000000000b9faa: je 0xb9fd0; and ch, al; stc; push rsp; ret; 
0x000000000000bc55: je 0xbc70; mov rax, qword ptr [rip + 0x391352]; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000bc61: je 0xbc70; pop rbp; jmp rax; 
0x000000000000bca6: je 0xbcc0; mov rax, qword ptr [rip + 0x391339]; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000000bcb2: je 0xbcc0; pop rbp; jmp rax; 
0x00000000000c968d: je 0xc96b3; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000c990f: je 0xc99dd; test edi, edi; jne 0xc9983; add rsp, 0x30; pop rbx; ret; 
0x00000000000cc0b4: je 0xcc117; ret 0xfb98; 
0x000000000000ce2d: je 0xce38; add rsp, 8; ret; 
0x000000000000cebd: je 0xcec8; add rsp, 8; ret; 
0x00000000000d2c1b: je 0xd2bf7; jmp qword ptr [rdi]; 
0x00000000000d4ccc: je 0xd4c9e; pop rsp; and al, 0x82; ret; 
0x00000000000d77d6: je 0xd7814; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x000000000000df0d: je 0xdf18; add rsp, 8; ret; 
0x00000000000e0ed9: je 0xe0e71; ret 0xbdcf; 
0x000000000000e56d: je 0xe578; add rsp, 0x18; ret; 
0x000000000000e5ed: je 0xe5f8; add rsp, 0x18; ret; 
0x00000000000e6073: je 0xe5ffb; ret 0x3fcb; 
0x00000000000e9ab9: je 0xe9a8c; loope 0xe9a44; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x000000000000eb47: je 0xebb0; add rsp, 0x18; ret; 
0x000000000000edc8: je 0xedd0; add rsp, 0x18; ret; 
0x00000000000efe73: je 0xefdfb; ret 0x3fcb; 
0x000000000000f22d: je 0xf238; add rsp, 0x18; ret; 
0x00000000000f3c76: je 0xf3cb4; sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x00000000000ff450: je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x0000000000107346: jg 0x107329; ret; 
0x0000000000108c86: jg 0x108c82; ret; 
0x0000000000113afa: jg 0x113abc; adc ch, al; mov bh, byte ptr [rdi]; out 0x2e, eax; or esi, esp; ret; 
0x000000000011ade0: jg 0x11ad8d; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x000000000011d7e1: jg 0x11d7f0; add dh, ch; jmp rdi; 
0x0000000000125f5a: jg 0x125fae; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000001264cd: jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000126712: jg 0x12676f; ret 0x5732; 
0x0000000000126ff3: jg 0x126faf; xchg esi, eax; ja 0x126fb4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000012926: jg 0x12938; fld st(0); fsubrp st(1); fdiv st(0); add rsp, 0x18; ret; 
0x0000000000012993: jg 0x12995; add byte ptr [rbp + 0x18], dh; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x0000000000012ca1: jg 0x12cac; ret 0xd089; 
0x0000000000012e0c: jg 0x12dc2; cmp ax, 0x3fbb; jg 0x12dda; fld1; add rsp, 0x18; ret; 
0x0000000000012e12: jg 0x12dda; fld1; add rsp, 0x18; ret; 
0x0000000000013026: jg 0x13028; add byte ptr [rcx], bh; ret; 
0x00000000001362fa: jg 0x13634e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x000000000013686d: jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136ab2: jg 0x136b0f; ret 0x5732; 
0x0000000000137393: jg 0x13734f; xchg esi, eax; ja 0x137354; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000013bf7: jg 0x13bfa; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x0000000000149780: jg 0x14972d; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x000000000014c041: jg 0x14c050; add dh, ch; jmp rdi; 
0x000000000015477a: jg 0x1547ce; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000154ced: jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154f32: jg 0x154f8f; ret 0x5732; 
0x0000000000155813: jg 0x1557cf; xchg esi, eax; ja 0x1557d4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x000000000001608c: jg 0x16099; add ch, bl; add al, 2; ret; 
0x0000000000164a3a: jg 0x164a8e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000164fad: jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000001651f2: jg 0x16524f; ret 0x5732; 
0x0000000000165ad3: jg 0x165a8f; xchg esi, eax; ja 0x165a94; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000001776c0: jg 0x17766d; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x000000000017881a: jg 0x17886e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000178d8d: jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178fd2: jg 0x17902f; ret 0x5732; 
0x0000000000017955: jg 0x17966; test byte ptr [rcx + rax - 0x40f10000], al; ret 0xe0c1; 
0x00000000001798b3: jg 0x17986f; xchg esi, eax; ja 0x179874; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000001835ba: jg 0x18360e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000183b2d: jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183d72: jg 0x183dcf; ret 0x5732; 
0x0000000000184653: jg 0x18460f; xchg esi, eax; ja 0x184614; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000001930d9: jg 0x1930c3; call qword ptr [rdi]; 
0x0000000000019555: jg 0x194e0; ret 0xb70f; 
0x000000000001965f: jg 0x195ea; ret 0xb70f; 
0x00000000000196c5: jg 0x19650; ret 0xb70f; 
0x00000000000197c4: jg 0x1974f; ret 0xb70f; 
0x00000000000197e7: jg 0x19772; ret 0xb70f; 
0x00000000000198ba: jg 0x19845; ret 0xb70f; 
0x0000000000198eb5: jg 0x198eb7; add byte ptr [rax], ch; adc al, 0xf0; jmp qword ptr [rdi + 3]; 
0x0000000000019dc5: jg 0x19dd6; xchg esp, eax; shl byte ptr [rcx], 0xc8; ret; 
0x0000000000019dc0: jg 0x19e28; cmp edx, 0x940f7fff; shl byte ptr [rcx], 0xc8; ret; 
0x0000000000019e80: jg 0x19e82; add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000001b2b8: jg 0x1b295; insb byte ptr [rdi], dx; and al, 0x10; je 0x1b3a0; pop rbx; ret; 
0x0000000000020976: jg 0x209d1; cmp edx, -3; pop rsi; ja 0x20988; add rsp, 8; ret; 
0x00000000000209d0: jg 0x20a46; xor eax, 0x8c48348; ret; 
0x0000000000020c79: jg 0x20c7b; add byte ptr [rip + 0x3fbe], bh; jge 0x20c88; fld1; faddp st(1); ret; 
0x00000000000217f4: jg 0x2177f; ret 0xe2c1; 
0x0000000000027097: jg 0x270d5; movsd xmm1, qword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000270e1: jg 0x27160; movsd xmm1, qword ptr [rip + 0xb8f8d]; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000270a1: jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000002e905: jg 0x2e938; ror byte ptr [rcx], 0xca; setne al; add eax, 0x7fffffff; ret; 
0x00000000000321f5: jg 0x3223b; or esi, eax; je 0x3217f; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042f58: jg 0x42fa2; cmp eax, edx; seta al; movzx eax, al; ret; 
0x0000000000042fcb: jg 0x43015; sub eax, edx; shr rax, 0x3f; ret; 
0x0000000000042fe9: jg 0x43051; movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000044660: jg 0x446bd; pop rbp; ret; 
0x000000000004975e: jg 0x496e3; cli; std; ja 0x49770; add rsp, 8; ret; 
0x0000000000049c09: jg 0x49c50; cmp eax, 0x32800000; jg 0x49d40; movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000049c10: jg 0x49d40; movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000049ece: jg 0x49f1d; jle 0x49ee0; cmp eax, 0x7f7fffff; jle 0x49f28; addss xmm0, xmm0; ret; 
0x0000000000049ed6: jg 0x49f56; addss xmm0, xmm0; ret; 
0x0000000000049ed5: jg 0x49f56; jle 0x49f28; addss xmm0, xmm0; ret; 
0x000000000004a0a7: jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x000000000004a5a7: jg 0x4a610; movss xmm1, dword ptr [rip + 0xb5e03]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004a578: jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000004a5a6: jg 0x4a627; movss xmm1, dword ptr [eip + 0xb5e03]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004a801: jg 0x4a881; or al, 0xf3; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000004e615: jg 0x4e695; sbb byte ptr [rcx], dh; rol byte ptr [rcx - 0x7fffff06], 0x7f; setne al; add eax, 0x7fffffff; ret; 
0x0000000000050198: jg 0x50123; ret 0x2b74; 
0x00000000000501b1: jg 0x501a6; cvtpi2ps xmm0, mm0; ret; 
0x000000000005048a: jg 0x5040c; shl eax, 0x17; or eax, ecx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000050ff1: jg 0x50f73; shl edi, 0x17; or edi, edx; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x00000000000510f7: jg 0x51079; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000519fd: jg 0x51988; ret 0xf66; 
0x0000000000051a4e: jg 0x519d9; ret 0xf66; 
0x0000000000056ede: jg 0x56e63; cli; std; ja 0x56ef0; add rsp, 8; ret; 
0x0000000000058bb0: jg 0x58bd0; cmp eax, 0x3fb7ffff; jg 0x58c30; movdqa xmm0, xmmword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x0000000000058bb7: jg 0x58c30; movdqa xmm0, xmmword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x000000000006848c: jg 0x68497; ret; 
0x000000000006ee5d: jg 0x6eea7; and edx, eax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000006f078: jg 0x6f080; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x000000000006fb5b: jg 0x6fb5d; add byte ptr [rbp - 0x5b], dh; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000071025: jg 0x71036; xchg edi, eax; ret; 
0x0000000000072210: jg 0x72278; movq mm0, qword ptr [rsp]; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x000000000007220f: jg 0x72290; movdqa xmm0, xmmword ptr [rsp]; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x00000000000723af: jg 0x72417; movq mm0, mm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x0000000000072772: jg 0x727bc; cmp eax, edx; seta al; movzx eax, al; ret; 
0x0000000000072805: jg 0x7284f; sub eax, edx; shr rax, 0x3f; ret; 
0x0000000000072823: jg 0x7286d; and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000072abb: jg 0x72abd; add byte ptr [rbp - 0x5d], dh; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000747d1: jg 0x747d3; add byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bh; add esp, 0x18; ret; 
0x000000000007c39e: jg 0x7c39f; jmp qword ptr [rsi + 0xf]; 
0x000000000007c63e: jg 0x7c5c3; cli; std; ja 0x7c650; add rsp, 8; ret; 
0x000000000007cdb3: jg 0x7cdc0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e8: jg 0x7d0f8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007d813: jg 0x7d820; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007db2a: jg 0x7db40; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dbf3: jg 0x7dc00; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dd1b: jg 0x7dcc8; mov rax, qword ptr [rip + 0x31f294]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000007f456: jg 0x7f460; ret; 
0x00000000000805b1: jg 0x805bd; mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x000000000008669a: jg 0x86656; add byte ptr [rax], al; add byte ptr [rax - 0x7fffff48], al; mov edi, 0x66d0450f; movd mm0, edx; ret; 
0x0000000000086a8b: jg 0x86a8d; sar eax, cl; not eax; and eax, edx; movd xmm0, eax; ret; 
0x00000000000887ed: jg 0x887fe; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x000000000008b080: jg 0x8b00b; ret 0xe2c1; 
0x000000000009affb: jg 0x9b007; add dl, dh; mulps xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ed6d: jg 0x9ed7e; test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x00000000000a15f0: jg 0xa157b; ret 0xe2c1; 
0x00000000000aaa8c: jg 0xaaae9; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000000afe30: jg 0xafdf7; ret; 
0x00000000000c5474: jg 0xc5476; add byte ptr [rax + 0x21], cl; ret 0x50e9; 
0x00000000000c8b92: jg 0xc8b94; add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000000c8b98: jg 0xc8b9a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000000c8f78: jg 0xc8fc2; or eax, edi; and rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c98e1: jg 0xc98e3; add byte ptr [rax - 0x77], cl; ret 0x3775; 
0x00000000000cf182: jg 0xcf165; movabs dword ptr [0xc000fd238a], eax; add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x00000000000d5e1a: jg 0xd5e6e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000d638d: jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d65d2: jg 0xd662f; ret 0x5732; 
0x00000000000d6eb3: jg 0xd6e6f; xchg esi, eax; ja 0xd6e74; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000e6e40: jg 0xe6ded; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x00000000000e9861: jg 0xe9870; add dh, ch; jmp rdi; 
0x00000000000f22ba: jg 0xf230e; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000f282d: jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2a72: jg 0xf2acf; ret 0x5732; 
0x00000000000f3353: jg 0xf330f; xchg esi, eax; ja 0xf3314; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000001067e4: jge 0x1067df; ret; 
0x000000000010b771: jge 0x10b7b1; xor dword ptr [rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x000000000010cc21: jge 0x10cc64; and edi, edx; ret 0x6adc; 
0x000000000010d0a7: jge 0x10d0c9; hlt; cmp al, 0x64; ret 0x1353; 
0x000000000012aa16: jge 0x12aa54; ret 0xeef5; 
0x000000000012e74c: jge 0x12e75c; ret 0x8d3f; 
0x000000000012fee8: jge 0x12fe97; and al, 0xee; ret; 
0x00000000001318c9: jge 0x1318fd; ret 0xfa2d; 
0x000000000013487a: jge 0x134892; ret 0x7a16; 
0x00000000001352c1: jge 0x135337; ret; 
0x00000000001354c6: jge 0x135504; out 0x33, al; pop rbp; ret; 
0x000000000013adb6: jge 0x13adf4; ret 0xeef5; 
0x000000000013eaec: jge 0x13eafc; ret 0x8d3f; 
0x0000000000140288: jge 0x140237; and al, 0xee; ret; 
0x0000000000159236: jge 0x159274; ret 0xeef5; 
0x000000000015cf6c: jge 0x15cf7c; ret 0x8d3f; 
0x000000000015e708: jge 0x15e6b7; and al, 0xee; ret; 
0x0000000000160009: jge 0x16003d; ret 0xfa2d; 
0x0000000000162fba: jge 0x162fd2; ret 0x7a16; 
0x0000000000163a01: jge 0x163a77; ret; 
0x0000000000163c06: jge 0x163c44; out 0x33, al; pop rbp; ret; 
0x00000000001694f6: jge 0x169534; ret 0xeef5; 
0x000000000016d22c: jge 0x16d23c; ret 0x8d3f; 
0x000000000016e9c8: jge 0x16e977; and al, 0xee; ret; 
0x000000000017d2d6: jge 0x17d314; ret 0xeef5; 
0x000000000018100c: jge 0x18101c; ret 0x8d3f; 
0x00000000001827a8: jge 0x182757; and al, 0xee; ret; 
0x0000000000188076: jge 0x1880b4; ret 0xeef5; 
0x000000000018bdac: jge 0x18bdbc; ret 0x8d3f; 
0x000000000018d548: jge 0x18d4f7; and al, 0xee; ret; 
0x000000000018f8fd: jge 0x18f8e7; call qword ptr [rax]; 
0x00000000001907b1: jge 0x1907b3; add byte ptr [rax - 0x27001191], ch; jge 0x1907bb; add byte ptr [rax + 0x76], cl; out dx, al; call qword ptr [rax]; 
0x00000000001907b9: jge 0x1907bb; add byte ptr [rax + 0x76], cl; out dx, al; call qword ptr [rax]; 
0x0000000000020c81: jge 0x20c88; fld1; faddp st(1); ret; 
0x00000000000270e2: jge 0x270d6; movups xmm1, xmmword ptr [rip + 0xb8f8d]; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000528d2: jge 0x528e3; push rdi; ret 0x280f; 
0x000000000007d528: jge 0x7d532; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d549: jge 0x7d553; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbe8; 
0x00000000000ca4f0: jge 0xca540; ret 0xd796; 
0x000000000000cbdf: jge 0xcbf5; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000000000d1109: jge 0xd113d; ret 0xfa2d; 
0x00000000000d40ba: jge 0xd40d2; ret 0x7a16; 
0x00000000000d4b01: jge 0xd4b77; ret; 
0x00000000000d4d06: jge 0xd4d44; out 0x33, al; pop rbp; ret; 
0x00000000000da8d6: jge 0xda914; ret 0xeef5; 
0x00000000000de60c: jge 0xde61c; ret 0x8d3f; 
0x00000000000dfda8: jge 0xdfd57; and al, 0xee; ret; 
0x00000000000f6d76: jge 0xf6db4; ret 0xeef5; 
0x00000000000faaac: jge 0xfaabc; ret 0x8d3f; 
0x00000000000fc248: jge 0xfc1f7; and al, 0xee; ret; 
0x000000000010ac94: jl 0x10acfa; fiadd word ptr [rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000010b8e5: jl 0x10b8be; call qword ptr [rbp - 0x58]; 
0x000000000010bf42: jl 0x10bee4; ret; 
0x000000000010e178: jl 0x10e150; cmp al, byte ptr [rax + 0x6d]; sub al, 9; xchg ebx, eax; jle 0x10e161; ret 0x2234; 
0x0000000000118660: jl 0x118642; test eax, 0x5784518e; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x000000000011b380: jl 0x11b383; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000012e4c: jl 0x12dd1; or eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x0000000000134854: jl 0x13482d; sahf; cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x0000000000147000: jl 0x146fe2; test eax, 0x5784518e; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x0000000000149d20: jl 0x149d23; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000015ca5: jl 0x15ccb; adc bl, bl; cmp al, 0x24; call 0xc410; add rsp, 0x28; ret; 
0x0000000000162f94: jl 0x162f6d; sahf; cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x0000000000174f40: jl 0x174f22; test eax, 0x5784518e; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x0000000000177c60: jl 0x177c63; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000191f0c: jl 0x191f1d; add byte ptr [rax], al; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x0000000000193079: jl 0x193063; call qword ptr [rbx + 1]; 
0x0000000000198c05: jl 0x198c07; add byte ptr [rax - 0x11], cl; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000019a85: jl 0x19aab; clc; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x0000000000019b72: jl 0x19b98; call 0xfffffffff6260852; mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019c8a: jl 0x19cb0; call 0xfffffffff626096a; mov rax, qword ptr [rsp - 0x18]; ret; 
0x000000000001ae1a: jl 0x1ae40; fcomp st(1); ret 0xc5d8; 
0x000000000001bdd9: jl 0x1bdff; sbb bl, bl; jl 0x1be03; or cl, ch; imul ecx, dword ptr [rsi], -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000001bddd: jl 0x1be03; or cl, ch; imul ecx, dword ptr [rsi], -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000001c13: jl 0x1c56; ret; 
0x0000000000020a2f: jl 0x20a55; or cl, ch; sub dword ptr [rbp - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000027e70: jl 0x27eab; mov rax, r9; lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x000000000004610f: jl 0x46135; xor byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x0000000000049520: jl 0x49547; or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x000000000006facb: jl 0x6faf1; sbb byte ptr [rax + 0x21], cl; ret 0x8b48; 
0x00000000000714c1: jl 0x714e7; jle 0x714cd; ret 0x850f; 
0x00000000000772bd: jl 0x772be; jmp qword ptr [rsi + 0xf]; 
0x000000000007d593: jl 0x7d59d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d5b4: jl 0x7d5be; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa0e8; 
0x000000000007d5d8: jl 0x7d5e2; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d5f9: jl 0x7d603; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5be8; 
0x000000000008fd71: jl 0x8fd97; and ch, al; stc; push rsp; ret; 
0x00000000000914d6: jl 0x914fc; adc ah, al; ret 0xb9c9; 
0x0000000000091b22: jl 0x91b48; and ah, al; ret 0xb9f9; 
0x000000000009b289: jl 0x9b295; add dl, dh; mulps xmm0, xmm2; addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000a634e: jl 0xa6374; and ch, al; stc; push rsp; ret; 
0x00000000000a8d22: jl 0xa8d48; and byte ptr [rax - 0x3c], ah; ret; 
0x00000000000beac5: jl 0xbeaeb; or ch, al; ret; 
0x00000000000c293d: jl 0xc2963; or ch, al; jns 0xc296b; ret; 
0x00000000000c4a97: jl 0xc4abd; fcomp st(1); ret; 
0x000000000000cb88: jl 0xcbae; adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x000000000000cbd8: jl 0xcbfe; adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x000000000000cc38: jl 0xcc5e; adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x00000000000cd914: jl 0xcd97a; fiadd word ptr [rax]; wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000000d0af: jl 0xd0d5; adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x000000000000d1df: jl 0xd205; adc bl, bl; cmp al, 0x24; call 0xe060; add rsp, 0x28; ret; 
0x00000000000d4094: jl 0xd406d; sahf; cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000e46a0: jl 0xe4682; test eax, 0x5784518e; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x00000000000e7400: jl 0xe7403; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x000000000000f69c: jl 0xf6c2; adc al, ch; pop rsp; ret 0xffff; 
0x00000000001006d8: jle 0x100730; pop rcx; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000102c34: jle 0x102c70; ret; 
0x000000000010aff5: jle 0x10afe2; add byte ptr [rsi], dh; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x000000000010e181: jle 0x10e161; ret 0x2234; 
0x000000000011c762: jle 0x11c719; ret; 
0x000000000011e205: jle 0x11e233; mov edi, 0xf7800000; xor al, 0x7f; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000001264d0: jle 0x126502; jae 0x1264fe; out dx, al; ret 0x3fbb; 
0x00000000001290f2: jle 0x129103; ret 0x5489; 
0x0000000000136870: jle 0x1368a2; jae 0x13689e; out dx, al; ret 0x3fbb; 
0x0000000000013942: jle 0x13945; add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x0000000000139492: jle 0x1394a3; ret 0x5489; 
0x000000000014afc2: jle 0x14af79; ret; 
0x000000000014ca65: jle 0x14ca93; mov edi, 0xf7800000; xor al, 0x7f; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x0000000000154cf0: jle 0x154d22; jae 0x154d1e; out dx, al; ret 0x3fbb; 
0x0000000000157912: jle 0x157923; ret 0x5489; 
0x0000000000164fb0: jle 0x164fe2; jae 0x164fde; out dx, al; ret 0x3fbb; 
0x0000000000167bd2: jle 0x167be3; ret 0x5489; 
0x0000000000178d90: jle 0x178dc2; jae 0x178dbe; out dx, al; ret 0x3fbb; 
0x000000000017b9b2: jle 0x17b9c3; ret 0x5489; 
0x0000000000183b30: jle 0x183b62; jae 0x183b5e; out dx, al; ret 0x3fbb; 
0x0000000000186752: jle 0x186763; ret 0x5489; 
0x0000000000018ba9: jle 0x18b9e; ret; 
0x000000000018fdcd: jle 0x18fdb9; jmp qword ptr [rax + 0x4e]; 
0x00000000001907d9: jle 0x1907db; add byte ptr [rax - 0x67], bl; out dx, al; call qword ptr [rax]; 
0x0000000000198dc1: jle 0x198dc3; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x0000000000198dfd: jle 0x198dff; add al, dl; or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x0000000000020d6d: jle 0x20d98; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000028c58: jle 0x28c5b; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000031a90: jle 0x31ad6; and al, 0xf8; ret; 
0x00000000000321e0: jle 0x3222e; and al, 0xf8; movapd xmm0, xmm1; ret; 
0x000000000003db17: jle 0x3db36; ret; 
0x0000000000042fed: jle 0x42faf; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000043f79: jle 0x43fc7; and al, 0xf8; movapd xmm0, xmm1; ret; 
0x0000000000044031: jle 0x43ff3; pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x00000000000471ee: jle 0x47268; or eax, dword ptr [rax]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000047e02: jle 0x47e19; fdiv dword ptr [rax + rcx]; add byte ptr [rsi + 0xf], ah; push rsp; ret 0xf66; 
0x0000000000049ed0: jle 0x49ee0; cmp eax, 0x7f7fffff; jle 0x49f28; addss xmm0, xmm0; ret; 
0x0000000000049ed7: jle 0x49f28; addss xmm0, xmm0; ret; 
0x000000000004a802: jle 0x4a810; mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000004db51: jle 0x4db23; xor eax, ebx; pop rbx; movd xmm0, eax; pop rbp; ret; 
0x000000000004e616: jle 0x4e630; xor eax, eax; cmp edx, 0x7f800000; setne al; add eax, 0x7fffffff; ret; 
0x000000000004ecc2: jle 0x4eea0; movss xmm0, dword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x000000000004fc15: jle 0x4fbd7; add eax, esi; movd xmm0, eax; ret; 
0x000000000004fda5: jle 0x4fd67; add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000004fe04: jle 0x4fdd6; add eax, esi; movd xmm0, eax; ret; 
0x0000000000050ec2: jle 0x50e86; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000050ee2: jle 0x50ea4; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000051986: jle 0x51948; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x00000000000525b7: jle 0x525fd; and al, 0xf0; ret; 
0x00000000000526c0: jle 0x52706; and al, 0x10; add rsp, 0x48; ret; 
0x00000000000528e7: jle 0x5292d; and al, 0x20; add rsp, 0x48; ret; 
0x0000000000052b24: jle 0x52b6a; and al, 0x40; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x0000000000052e5d: jle 0x52ea3; and al, 0x10; add rsp, 0x38; ret; 
0x0000000000053343: jle 0x53389; and al, 0xd8; ret; 
0x00000000000549f1: jle 0x54a37; and al, 0x50; add rsp, 0x68; ret; 
0x0000000000054d1a: jle 0x54d60; and al, 0x40; add rsp, 0x58; ret; 
0x0000000000055327: jle 0x5536d; and al, 0x30; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000556a6: jle 0x556ec; and al, 0x40; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x00000000000559cd: jle 0x55a13; and al, 0x30; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x0000000000055dbe: jle 0x55e04; and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x0000000000056192: jle 0x561d8; and al, 0xf0; ret; 
0x000000000005620c: jle 0x56252; and al, 0x40; add rsp, 0x50; pop rbx; ret; 
0x00000000000569a2: jle 0x569e8; and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x0000000000057d8c: jle 0x57e60; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x38; ret; 
0x000000000005eeb5: jle 0x5eec1; add al, ch; ret; 
0x000000000006b881: jle 0x6b988; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006e4fd: jle 0x6e800; add rsp, 0x30; movdqa xmm0, xmm2; pop rbx; ret; 
0x00000000000714c3: jle 0x714cd; ret 0x850f; 
0x00000000000723ae: jle 0x7242f; movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000724fc: jle 0x72582; movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x0000000000074666: jle 0x746ac; and al, 0xe8; mov qword ptr [rsp - 0x18], rsi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007473b: jle 0x74781; and al, 0xe8; mov qword ptr [rsp - 0x18], rdx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000770c2: jle 0x770c3; jmp qword ptr [rsi + 0xf]; 
0x000000000007abfc: jle 0x7abfd; jmp qword ptr [rsi + 0xf]; 
0x000000000007ccb0: jle 0x7ccbc; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000080044: jle 0x8005b; xchg esi, eax; mov dl, 4; add byte ptr [rsi + 0xf], ah; push rdi; ret 0xf66; 
0x0000000000080235: jle 0x803c2; movapd xmm0, xmm2; ret; 
0x00000000000867a1: jle 0x86763; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000086802: jle 0x867c4; shl ecx, 0x1f; and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x000000000008efff: jle 0x8f01e; stosd dword ptr [rdi], eax; ret 3; 
0x00000000000906c5: jle 0x906ec; push rbp; ret 6; 
0x0000000000098c87: jle 0x98c90; add ch, al; ret; 
0x00000000000999b4: jle 0x999cb; sbb dword ptr es:[rbx], eax; add ch, al; stc; push rdi; ret 0xf1c5; 
0x0000000000099a9a: jle 0x99ab1; sbb byte ptr [rbx], al; add ch, al; stc; push rdi; ret 0xf1c5; 
0x0000000000099b95: jle 0x99ca3; vmovapd xmm0, xmm2; ret; 
0x00000000000a7074: jle 0xa709b; cmpsb byte ptr [rsi], byte ptr [rdi]; pop rax; add eax, 0x2879c500; ret; 
0x00000000000ac00d: jle 0xac054; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000000affa4: jle 0xaffbb; mov bl, 1; add ch, al; stc; push rdi; ret 0xf1c5; 
0x00000000000b0185: jle 0xb0290; vmovapd xmm0, xmm2; ret; 
0x00000000000bb6b5: jle 0xbb6e4; and eax, 0xc50000fc; jns 0xbb6e6; ret; 
0x00000000000c4542: jle 0xc4588; and al, 0xf8; ret; 
0x00000000000cdc75: jle 0xcdc62; add byte ptr [rsi], dh; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x00000000000d6390: jle 0xd63c2; jae 0xd63be; out dx, al; ret 0x3fbb; 
0x00000000000d8fb2: jle 0xd8fc3; ret 0x5489; 
0x00000000000e3800: jle 0xe379d; ret; 
0x00000000000e87e2: jle 0xe8799; ret; 
0x00000000000ea285: jle 0xea2b3; mov edi, 0xf7800000; xor al, 0x7f; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000f2830: jle 0xf2862; jae 0xf285e; out dx, al; ret 0x3fbb; 
0x00000000000f5452: jle 0xf5463; ret 0x5489; 
0x000000000018f6bf: jmp qword ptr [rax + 0x27]; 
0x000000000018f797: jmp qword ptr [rax + 0x2a]; 
0x000000000018f7d7: jmp qword ptr [rax + 0x2b]; 
0x000000000018f92f: jmp qword ptr [rax + 0x35]; 
0x000000000018f977: jmp qword ptr [rax + 0x36]; 
0x000000000018f98f: jmp qword ptr [rax + 0x37]; 
0x000000000018fa6f: jmp qword ptr [rax + 0x3c]; 
0x000000000018fb27: jmp qword ptr [rax + 0x3f]; 
0x000000000018fb47: jmp qword ptr [rax + 0x40]; 
0x000000000018fc6f: jmp qword ptr [rax + 0x47]; 
0x000000000018fdcf: jmp qword ptr [rax + 0x4e]; 
0x000000000018fe07: jmp qword ptr [rax + 0x4f]; 
0x000000000018fe37: jmp qword ptr [rax + 0x50]; 
0x000000000018ff0f: jmp qword ptr [rax + 0x53]; 
0x000000000018ff37: jmp qword ptr [rax + 0x54]; 
0x000000000018ffaf: jmp qword ptr [rax + 0x56]; 
0x000000000019000f: jmp qword ptr [rax + 0x58]; 
0x0000000000190327: jmp qword ptr [rax + 0x64]; 
0x00000000000e3eab: jmp qword ptr [rax + 0x67]; 
0x00000000001904c7: jmp qword ptr [rax + 0x6b]; 
0x0000000000190577: jmp qword ptr [rax + 0x70]; 
0x00000000001905df: jmp qword ptr [rax + 0x73]; 
0x0000000000190fb3: jmp qword ptr [rax + 2]; 
0x0000000000195ca3: jmp qword ptr [rax + 3]; 
0x0000000000195cf3: jmp qword ptr [rax + 4]; 
0x000000000010be0f: jmp qword ptr [rax + 7]; 
0x0000000000197463: jmp qword ptr [rax + 8]; 
0x000000000010be0b: jmp qword ptr [rax + 9]; 
0x000000000010809f: jmp qword ptr [rax - 0x23]; 
0x00000000000da942: jmp qword ptr [rax - 0x35]; 
0x00000000000a57fd: jmp qword ptr [rax - 0x3b]; 
0x0000000000190eef: jmp qword ptr [rax - 0x54]; 
0x0000000000190c37: jmp qword ptr [rax - 0x68]; 
0x0000000000190a27: jmp qword ptr [rax - 0x75]; 
0x000000000019093f: jmp qword ptr [rax - 0x7b]; 
0x00000000001908ff: jmp qword ptr [rax - 0x7c]; 
0x0000000000190817: jmp qword ptr [rax - 0x80]; 
0x00000000000209bd: jmp qword ptr [rax - 1]; 
0x0000000000194d83: jmp qword ptr [rax]; 
0x00000000000efe29: jmp qword ptr [rbp + 0x19]; 
0x0000000000198dc7: jmp qword ptr [rbp + 5]; 
0x00000000000554dd: jmp qword ptr [rbp + 7]; 
0x0000000000101497: jmp qword ptr [rbp - 0x1d]; 
0x00000000000d3812: jmp qword ptr [rbp - 0x36]; 
0x0000000000195633: jmp qword ptr [rbp]; 
0x00000000000cfc6b: jmp qword ptr [rbx + 0x22]; 
0x0000000000196f4b: jmp qword ptr [rbx + 1]; 
0x0000000000198e03: jmp qword ptr [rbx + 2]; 
0x000000000000f3a9: jmp qword ptr [rbx - 0x39]; 
0x00000000000e4e9a: jmp qword ptr [rbx - 0x75]; 
0x00000000000020bf: jmp qword ptr [rbx - 9]; 
0x000000000004a56e: jmp qword ptr [rbx]; 
0x00000000000e546b: jmp qword ptr [rcx + 0x46]; 
0x0000000000194a23: jmp qword ptr [rcx + 1]; 
0x0000000000192137: jmp qword ptr [rcx + 2]; 
0x00000000001964e3: jmp qword ptr [rcx + 3]; 
0x00000000001940bb: jmp qword ptr [rcx + 5]; 
0x0000000000060b8d: jmp qword ptr [rcx + 6]; 
0x000000000004c03d: jmp qword ptr [rcx]; 
0x0000000000197abb: jmp qword ptr [rdi + 0xa]; 
0x0000000000193123: jmp qword ptr [rdi + 1]; 
0x0000000000197e03: jmp qword ptr [rdi + 3]; 
0x000000000010b447: jmp qword ptr [rdi - 0x20]; 
0x000000000010302c: jmp qword ptr [rdi - 0xb]; 
0x0000000000101ccc: jmp qword ptr [rdi - 4]; 
0x00000000000d2c1d: jmp qword ptr [rdi]; 
0x000000000019934f: jmp qword ptr [rdx + 0x21]; 
0x00000000001109d5: jmp qword ptr [rdx + 0x41]; 
0x00000000000ff452: jmp qword ptr [rdx + 0x6a]; 
0x00000000001985ab: jmp qword ptr [rdx + 0xd]; 
0x0000000000199247: jmp qword ptr [rdx + 0xf]; 
0x0000000000192a63: jmp qword ptr [rdx + 1]; 
0x00000000000fcb50: jmp qword ptr [rdx - 0x1b]; 
0x00000000000fd0e9: jmp qword ptr [rdx - 0x1f]; 
0x00000000000e7391: jmp qword ptr [rdx - 0x80]; 
0x0000000000198373: jmp qword ptr [rdx]; 
0x000000000000bd84: jmp qword ptr [rsi + 0x2e]; 
0x0000000000019797: jmp qword ptr [rsi + 0x39]; 
0x0000000000019527: jmp qword ptr [rsi + 0x41]; 
0x0000000000023c37: jmp qword ptr [rsi + 0x44]; 
0x0000000000019975: jmp qword ptr [rsi + 0x45]; 
0x0000000000021c50: jmp qword ptr [rsi + 0x48]; 
0x000000000000c126: jmp qword ptr [rsi + 0xd]; 
0x000000000006c68d: jmp qword ptr [rsi + 0xf660005]; 
0x000000000000bd19: jmp qword ptr [rsi + 0xf]; 
0x0000000000192243: jmp qword ptr [rsi + 2]; 
0x00000000000198b2: jmp qword ptr [rsi + 5]; 
0x000000000000c05d: jmp qword ptr [rsi - 0x70]; 
0x0000000000071bd7: jmp qword ptr [rsi - 0x7b]; 
0x0000000000019914: jmp qword ptr [rsi - 0x7d]; 
0x00000000000428bb: jmp qword ptr [rsi - 0x7f]; 
0x000000000019a34b: jmp qword ptr [rsi]; 
0x000000000000bc64: jmp rax; 
0x00000000000deb25: jmp rbx; 
0x0000000000068b8d: jmp rcx; 
0x0000000000002344: jmp rdi; 
0x00000000000c6ec3: jmp rdx; 
0x000000000003e0fd: jmp rsi; 
0x00000000000dece5: jmp rsp; 
0x0000000000100e20: jne 0x100de4; int1; ret; 
0x000000000010c851: jne 0x10c8bb; push rsp; wait; xchg esi, eax; xor al, byte ptr [rip + 0x2583811e]; ret; 
0x000000000010da49: jne 0x10da0c; ret; 
0x00000000001108b1: jne 0x110876; cld; ret 0x8d6c; 
0x0000000000110955: jne 0x11099e; add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x0000000000111a55: jne 0x111a9e; add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000001149a8: jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x0000000000117b9a: jne 0x117bc0; ret 0x314d; 
0x000000000000f45e: jne 0x118be; add rsp, 0x40; pop rbx; ret; 
0x0000000000011a42: jne 0x11a70; add rsp, 0x18; ret; 
0x000000000011b3b1: jne 0x11b3b4; ret 0x56ca; 
0x000000000011d796: jne 0x11d7d4; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x0000000000012503: jne 0x12638; add rsp, 0x28; ret; 
0x0000000000128776: jne 0x1287b4; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000012867: jne 0x128bf; add rsp, 0x28; ret; 
0x0000000000012996: jne 0x129b0; fld xword ptr [rsp]; add rsp, 0x18; fadd st(0); ret; 
0x0000000000012ff0: jne 0x12fe8; fstp st(1); ret; 
0x0000000000130916: jne 0x1308d7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x0000000000134b90: jne 0x134c03; leave; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x0000000000138b16: jne 0x138b54; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000013940: jne 0x13ac4; add rsp, 0x70; pop rbx; ret; 
0x0000000000013bf5: jne 0x13d7a; add rsp, 0x60; pop rbx; ret; 
0x0000000000142195: jne 0x1421de; add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x000000000014657a: jne 0x1465a0; ret 0x314d; 
0x0000000000014676: jne 0x14802; add rsp, 0x60; pop rbx; ret; 
0x0000000000149d51: jne 0x149d54; ret 0x56ca; 
0x000000000014bff6: jne 0x14c034; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x0000000000014f93: jne 0x1519b; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000156f96: jne 0x156fd4; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000000158c0: jne 0x158cd; add al, bl; ret; 
0x00000000000158f2: jne 0x158ff; add dh, bl; ret; 
0x00000000000158fc: jne 0x15909; add dh, bl; ret 0xc9d9; 
0x000000000001596e: jne 0x1597b; add dh, bl; ret 0xc9dc; 
0x0000000000015978: jne 0x15985; add dh, bl; ret 0xc9dc; 
0x0000000000015982: jne 0x1598f; add dh, bl; ret 0xc9dc; 
0x000000000001598c: jne 0x15999; add dh, bl; ret 0xc9dc; 
0x0000000000015996: jne 0x159a3; add dh, bl; ret 0xc9dc; 
0x0000000000015a6f: jne 0x15a3d; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000015a5e: jne 0x15a62; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015aa9: jne 0x15aad; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015b03: jne 0x15ad1; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000015af2: jne 0x15af6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015b39: jne 0x15b3d; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000015bdd: jne 0x15bea; add dh, dh; ret 0xf02; 
0x0000000000015ce0: jne 0x15cd2; fadd st(0); ret; 
0x000000000015f056: jne 0x15f017; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x0000000000015ef9: jne 0x15fec; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000016012: jne 0x16008; fstp st(1); ret; 
0x000000000001605a: jne 0x16096; fscale; fstp st(1); ret; 
0x00000000001632d0: jne 0x163343; leave; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x00000000000164fd: jne 0x166aa; add rsp, 0xa0; pop rbx; ret; 
0x0000000000167256: jne 0x167294; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000016894: jne 0x16ab9; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000016c22: jne 0x16c2f; add al, bl; retf 0x2ddb; ret; 
0x0000000000016b5a: jne 0x16c60; fstp st(0); fld1; ret; 
0x0000000000016f1b: jne 0x17050; fstp st(0); fld1; fdivrp st(1); ret; 
0x00000000001706d5: jne 0x17071e; add byte ptr [r8], al; add byte ptr [rax + 0x416a3243], al; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000172bc: jne 0x172fc; add rsp, 0x38; ret; 
0x00000000001744ba: jne 0x1744e0; ret 0x314d; 
0x000000000001739d: jne 0x174a0; add rsp, 0x38; ret; 
0x0000000000177c91: jne 0x177c94; ret 0x56ca; 
0x000000000017b036: jne 0x17b074; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000017fa0: jne 0x17f71; fstp st(1); fstp st(1); fadd st(0); ret; 
0x00000000000183b3: jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x000000000001845f: jne 0x1855d; add rsp, 0x38; ret; 
0x0000000000185dd6: jne 0x185e14; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000018613: jne 0x1863c; add rsp, 0x38; ret; 
0x00000000000186e8: jne 0x18698; pop rbx; ret; 
0x0000000000018ac3: jne 0x18a95; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000018ab2: jne 0x18ab6; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018af9: jne 0x18afd; fabs; fstp st(1); fyl2xp1; ret; 
0x0000000000018ced: jne 0x18e85; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000190651: jne 0x190653; add byte ptr [rax + 0x18], bl; out dx, al; call qword ptr [rax]; 
0x0000000000190afd: jne 0x190aee; call qword ptr [rax]; 
0x0000000000019081: jne 0x19924; add rsp, 0xb0; pop rbx; pop rbp; pop r12; ret; 
0x000000000001a0f8: jne 0x1a0c6; mov rax, qword ptr [rip + 0x382eb7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000001a0c2: jne 0x1a0d0; fadd st(0); add rsp, 8; ret; 
0x000000000001a298: jne 0x1a2c6; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000001a3b3: jne 0x1a410; mov rax, qword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001a3c3: jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001aac8: jne 0x1aacc; add byte ptr [rax], al; add rsp, 0x158; pop rbx; pop rbp; ret; 
0x000000000001aac6: jne 0x1ad41; add rsp, 0x158; pop rbx; pop rbp; ret; 
0x000000000001ae87: jne 0x1ad78; fstp st(0); fld xword ptr [rsp - 0x58]; faddp st(1); ret; 
0x000000000001aee0: jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x000000000001ba26: jne 0x1ba80; mov rax, rdx; neg rax; pop rbx; pop rbp; ret; 
0x000000000001c118: jne 0x1c1b0; fchs; add rsp, 0x18; ret; 
0x000000000001c36d: jne 0x1c681; leave; ret; 
0x000000000001ed15: jne 0x1efa7; fxch st(1); leave; ret; 
0x000000000001f258: jne 0x1f4ba; fxch st(1); add rsp, 0x78; ret; 
0x000000000001fa39: jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x0000000000020941: jne 0x20950; fstp xword ptr [rbx]; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000020a34: jne 0x20a35; jmp qword ptr [rsi + 0xf]; 
0x0000000000020ac8: jne 0x20a96; mov rax, qword ptr [rip + 0x37c4e7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000020a92: jne 0x20aa0; fadd st(0); add rsp, 8; ret; 
0x0000000000020e20: jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x0000000000021f52: jne 0x22e73; add rsp, 0x48; ret; 
0x0000000000023016: jne 0x23024; add rsp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000230c6: jne 0x26ed9; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000273ae: jne 0x277ae; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000279c6: jne 0x27cf1; add rsp, 0x28; ret; 
0x00000000000288a2: jne 0x28acd; add rsp, 0x40; pop rbx; ret; 
0x0000000000028c56: jne 0x28dda; add rsp, 0x40; pop rbx; ret; 
0x0000000000029431: jne 0x29645; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000000297bb: jne 0x2999d; add rsp, 0x40; pop rbx; ret; 
0x000000000002d9c2: jne 0x2ddd2; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000002e307: jne 0x2e454; add rsp, 0x50; pop rbx; ret; 
0x000000000002e5f2: jne 0x2e8a2; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fa4f: jne 0x30b7d; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000030d32: jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000031fb6: jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000003200a: jne 0x32048; movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000037406: jne 0x37412; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x000000000003d1e7: jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000001c0f: jne 0x417cb2ca; ret; 
0x0000000000043308: jne 0x43310; addsd xmm0, xmm0; ret; 
0x0000000000043be2: jne 0x43e96; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044ffa: jne 0x44f2c; andpd xmm1, xmmword ptr [rip + 0x862d8]; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x000000000004519e: jne 0x454e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000045832: jne 0x459fe; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000045aa6: jne 0x45abc; ret; 
0x0000000000046bee: jne 0x46f1a; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000047542: jne 0x4754f; add byte ptr [rsi + 0xf], ah; sub bh, dl; movapd xmm1, xmm2; ret; 
0x0000000000047c0b: jne 0x47e29; add rsp, 0x50; pop rbx; ret; 
0x0000000000047f85: jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000048273: jne 0x48599; add rsp, 0x60; pop rbx; ret; 
0x0000000000049858: jne 0x49860; addsd xmm0, xmm0; ret; 
0x0000000000049892: jne 0x498a2; mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000049b96: jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004a7fa: jne 0x4a804; cmp edi, 0x7f800000; jle 0x4a810; mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000004a8cd: jne 0x4a8ee; mov eax, r10d; lea rdx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000004b001: jne 0x4b20c; add rsp, 0x20; pop rbx; ret; 
0x000000000004b36e: jne 0x4b4f5; add rsp, 0x20; pop rbx; ret; 
0x000000000004b9ae: jne 0x4bbbc; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000004bd14: jne 0x4bf50; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000004c4de: jne 0x4c787; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004d698: jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x000000000004d8b1: jne 0x4daba; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004e0b6: jne 0x4e1ba; add rsp, 0x30; pop rbx; ret; 
0x000000000004f048: jne 0x4f069; add rsp, 0x28; ret; 
0x000000000004ff15: jne 0x50058; movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x0000000000050622: jne 0x50640; add rsp, 0x18; ret; 
0x0000000000050cb3: jne 0x50d07; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000050f41: jne 0x50f58; movss dword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000051154: jne 0x51160; addss xmm0, xmm0; ret; 
0x000000000005118e: jne 0x5119e; mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x00000000000516da: jne 0x518c4; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000051f1a: jne 0x51f77; pop rbp; pop r12; ret; 
0x0000000000052b28: jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x000000000005313b: jne 0x532c7; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000000544a8: jne 0x54772; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000005532b: jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x0000000000055827: jne 0x55830; add byte ptr [rdi], cl; push rsp; ret; 
0x00000000000556aa: jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x00000000000559d1: jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x0000000000056fd4: jne 0x56fe0; addss xmm0, xmm0; ret; 
0x000000000005700e: jne 0x5701e; mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000059b49: jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c32e: jne 0x5e659; add rsp, 0xb8; ret; 
0x0000000000060e16: jne 0x632bf; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000643fc: jne 0x678fa; add rsp, 0x50; pop rbx; ret; 
0x0000000000067963: jne 0x67d52; sub rsp, -0x80; pop rbx; ret; 
0x00000000000681d7: jne 0x68440; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000069594: jne 0x697db; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000069f4f: jne 0x6a062; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000006a43e: jne 0x6a61d; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000006bfbe: jne 0x6c06f; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000006c255: jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006f076: jne 0x6f6fb; add rsp, 0x50; pop rbx; ret; 
0x000000000006fb5e: jne 0x6fb05; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000006fc75: jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdcd: jne 0x6fe3c; add rsp, 0x48; ret; 
0x0000000000070907: jne 0x70b70; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000070d1f: jne 0x70dbf; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000070e92: jne 0x70f8c; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000072abe: jne 0x72a63; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000007561d: jne 0x756ed; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000000758d8: jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x0000000000075ae3: jne 0x75aee; add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x0000000000075cbe: jne 0x7620f; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000762d9: jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x0000000000076b54: jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x0000000000076f38: jne 0x77dce; add rsp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000799c3: jne 0x79cf4; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000079fa5: jne 0x7a331; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000007a451: jne 0x7a968; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000007b42d: jne 0x7b42e; jmp qword ptr [rsi + 0xf]; 
0x000000000007bab7: jne 0x7bac3; add rsp, 0x38; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007c439: jne 0x7c468; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c509: jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c931: jne 0x7c948; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000007ca61: jne 0x7ca78; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000007d989: jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007dc83: jne 0x7dc8d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dca4: jne 0x7dcae; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xb0e8; 
0x000000000007dceb: jne 0x7dcf5; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dd0c: jne 0x7dd16; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x48e8; 
0x000000000007e418: jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x00000000000800ce: jne 0x80162; add rsp, 0x20; pop rbx; ret; 
0x0000000000080469: jne 0x80480; xor eax, eax; test rcx, rcx; setne al; neg eax; ret; 
0x00000000000809cf: jne 0x80d30; add rsp, 0x30; pop rbx; ret; 
0x00000000000830c6: jne 0x8310c; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086786: jne 0x8677c; addsd xmm0, xmm0; ret; 
0x00000000000867f3: jne 0x867e5; addss xmm0, xmm0; ret; 
0x00000000000868a2: jne 0x8690d; add rsp, 0x48; ret; 
0x000000000008699b: jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000086cf1: jne 0x8709b; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000008720c: jne 0x874d9; add rsp, 0x28; ret; 
0x0000000000089c33: jne 0x8a757; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008a7c0: jne 0x8b497; add rsp, 0x40; pop rbx; ret; 
0x000000000008b6da: jne 0x8c3d3; add rsp, 0x48; ret; 
0x000000000008c4f6: jne 0x8c504; add rsp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c766: jne 0x8eda1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000092e16: jne 0x92e22; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x0000000000097fe6: jne 0x9802c; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099643: jne 0x9964c; add ch, al; ret; 
0x0000000000099a2f: jne 0x99ac3; add rsp, 0x20; pop rbx; ret; 
0x000000000009b2c5: jne 0x9b2d5; mov rax, qword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009bd35: jne 0x9bd3e; add ch, al; sti; pop rax; ret 0xe2c4; 
0x000000000009c0c8: jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x000000000009c8d5: jne 0x9c8e5; mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009d263: jne 0x9d60c; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000009d78e: jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000a01a3: jne 0xa0cc7; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a0d30: jne 0xa1a0f; add rsp, 0x40; pop rbx; ret; 
0x00000000000a1c62: jne 0xa297d; add rsp, 0x48; ret; 
0x00000000000a2aa6: jne 0xa2ab4; add rsp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a2d16: jne 0xa535b; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a9456: jne 0xa9462; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000ae626: jne 0xae66c; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b001f: jne 0xb00b3; add rsp, 0x20; pop rbx; ret; 
0x00000000000b111f: jne 0xb1522; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000b16e6: jne 0xb1a01; add rsp, 0x28; ret; 
0x00000000000b3d99: jne 0xb3d9c; add ch, al; stc; push rsi; ret; 
0x00000000000b3db7: jne 0xb4e2c; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000b4f56: jne 0xb4f64; add rsp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b51c6: jne 0xb8cea; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000bd7f6: jne 0xbd802; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x000000000000bd77: jne 0xbd80; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000bdcc: jne 0xbdd5; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000be60: jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bed8: jne 0xbee1; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000bf26: jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf6f: jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000bfdc: jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c050: jne 0xc059; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c114: jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c20b: jne 0xc214; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c272: jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2d6: jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000c321: jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c363: jne 0xc36a; add rsp, 0x18; ret; 
0x000000000000c3e3: jne 0xc3fc; add rsp, 0x18; ret; 
0x00000000000c4531: jne 0xc4547; movss dword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000c47d8: jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x00000000000c8c90: jne 0xc8bc0; add rsp, 0x38; ret; 
0x00000000000c8dfb: jne 0xc8d6a; add rsp, 0x28; ret; 
0x00000000000c90bf: jne 0xc8fed; add rsp, 0x28; ret; 
0x00000000000c951d: jne 0xc962b; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c971f: jne 0xc97f9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c9917: jne 0xc9983; add rsp, 0x30; pop rbx; ret; 
0x000000000000c9c8: jne 0xcb2a; add rsp, 0xc0; pop rbx; ret; 
0x00000000000d0156: jne 0xd0117; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000d43d0: jne 0xd4443; leave; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x00000000000d8636: jne 0xd8674; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x000000000000dbc8: jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfde: jne 0xe059; add rsp, 0x18; ret; 
0x000000000000e0f6: jne 0xe2b3; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000e31ba: jne 0xe31e0; ret 0x314d; 
0x000000000000e416: jne 0xe440; add rsp, 0x28; ret; 
0x00000000000e7431: jne 0xe7434; ret 0x56ca; 
0x00000000000e9816: jne 0xe9854; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x000000000000ef5a: jne 0xf0ab; add rsp, 0x38; ret; 
0x000000000000f2ea: jne 0xf34f; add rsp, 0x28; ret; 
0x00000000000f4ad6: jne 0xf4b14; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000001028d4: jno 0x102886; add byte ptr [rbx + 0x4ae58e10], dh; ret; 
0x0000000000103775: jno 0x103703; imul dword ptr [rcx - 0x5815110f]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000001055a2: jno 0x105543; iretd; ret; 
0x0000000000119a34: jno 0x119a73; ret 0x69bf; 
0x000000000011a24b: jno 0x11a27e; cdq; jb 0x11a20c; ret 0x1c5e; 
0x0000000000120df4: jno 0x120e33; ret 0x5cbf; 
0x0000000000126326: jno 0x1262e4; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x0000000000127a9c: jno 0x127ac5; ret 0xaebf; 
0x000000000012c429: jno 0x12c41e; ret 0x226; 
0x000000000012e139: jno 0x12e12e; ret 0x4000; 
0x00000000001311dc: jno 0x1311ae; ret 0xd33f; 
0x00000000001333d8: jno 0x1333f8; cmpsd dword ptr [rsi], dword ptr [rdi]; je 0x1333b7; jmp qword ptr [rdi]; 
0x0000000000134142: jno 0x13416c; ret 0xf61c; 
0x0000000000134b91: jno 0x134b5c; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x00000000001366c6: jno 0x136684; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x0000000000137e3c: jno 0x137e65; ret 0xaebf; 
0x000000000013c7c9: jno 0x13c7be; ret 0x226; 
0x000000000013e4d9: jno 0x13e4ce; ret 0x4000; 
0x00000000001412e1: jno 0x141267; or al, byte ptr [rax]; fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x00000000001483d4: jno 0x148413; ret 0x69bf; 
0x0000000000148beb: jno 0x148c1e; cdq; jb 0x148bac; ret 0x1c5e; 
0x000000000014f654: jno 0x14f693; ret 0x5cbf; 
0x0000000000154b46: jno 0x154b04; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x00000000001562bc: jno 0x1562e5; ret 0xaebf; 
0x000000000015ac49: jno 0x15ac3e; ret 0x226; 
0x000000000015c959: jno 0x15c94e; ret 0x4000; 
0x000000000015f91c: jno 0x15f8ee; ret 0xd33f; 
0x0000000000161b18: jno 0x161b38; cmpsd dword ptr [rsi], dword ptr [rdi]; je 0x161af7; jmp qword ptr [rdi]; 
0x0000000000162882: jno 0x1628ac; ret 0xf61c; 
0x00000000001632d1: jno 0x16329c; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x0000000000164e06: jno 0x164dc4; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x000000000016657c: jno 0x1665a5; ret 0xaebf; 
0x000000000016af09: jno 0x16aefe; ret 0x226; 
0x000000000016cc19: jno 0x16cc0e; ret 0x4000; 
0x000000000016f821: jno 0x16f7a7; or al, byte ptr [rax]; fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x0000000000176314: jno 0x176353; ret 0x69bf; 
0x0000000000176b2b: jno 0x176b5e; cdq; jb 0x176aec; ret 0x1c5e; 
0x0000000000178be6: jno 0x178ba4; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x000000000017a35c: jno 0x17a385; ret 0xaebf; 
0x000000000017ece9: jno 0x17ecde; ret 0x226; 
0x00000000001809f9: jno 0x1809ee; ret 0x4000; 
0x0000000000183986: jno 0x183944; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x00000000001850fc: jno 0x185125; ret 0xaebf; 
0x0000000000189a89: jno 0x189a7e; ret 0x226; 
0x000000000018b799: jno 0x18b78e; ret 0x4000; 
0x000000000018e3a1: jno 0x18e327; or al, byte ptr [rax]; fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x0000000000190591: jno 0x190593; add byte ptr [rax - 0x41], ch; in eax, dx; call qword ptr [rax + 0x71]; 
0x0000000000190599: jno 0x19059b; add al, bl; ret; 
0x0000000000192ea1: jno 0x192e8b; call qword ptr [rcx]; 
0x0000000000192eb9: jno 0x192ea3; call qword ptr [rbx]; 
0x0000000000192ed1: jno 0x192ebb; call qword ptr [rax]; 
0x0000000000050be2: jno 0x50b8d; ret 0x66c3; 
0x0000000000054774: jno 0x54771; jmp qword ptr [rsi + 0xf]; 
0x0000000000051a88: jno 0x61a88; add byte ptr [rdi + riz*2 - 0xd], dh; ret; 
0x000000000006ae1b: jno 0x6addc; add eax, 0x83d88900; ret; 
0x0000000000079cc5: jno 0x79cc6; jmp qword ptr [rsi + 0xf]; 
0x00000000000ccd50: jno 0xccd4d; int1; mov ch, 0x1a; ret; 
0x00000000000d0a1c: jno 0xd09ee; ret 0xd33f; 
0x00000000000d2c18: jno 0xd2c38; cmpsd dword ptr [rsi], dword ptr [rdi]; je 0xd2bf7; jmp qword ptr [rdi]; 
0x00000000000d3982: jno 0xd39ac; ret 0xf61c; 
0x00000000000d43d1: jno 0xd439c; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x00000000000d61e6: jno 0xd61a4; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x00000000000d795c: jno 0xd7985; ret 0xaebf; 
0x00000000000dc2e9: jno 0xdc2de; ret 0x226; 
0x00000000000ddff9: jno 0xddfee; ret 0x4000; 
0x00000000000e3d34: jno 0xe3d22; sar dil, 0xd9; add dh, byte ptr [rbx]; ret 0x1270; 
0x00000000000e5a74: jno 0xe5ab3; ret 0x69bf; 
0x00000000000e628b: jno 0xe62be; cdq; jb 0xe624c; ret 0x1c5e; 
0x00000000000ece74: jno 0xeceb3; ret 0x5cbf; 
0x00000000000f2686: jno 0xf2644; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x00000000000f3dfc: jno 0xf3e25; ret 0xaebf; 
0x00000000000f8789: jno 0xf877e; ret 0x226; 
0x00000000000fa499: jno 0xfa48e; ret 0x4000; 
0x00000000000fd601: jno 0xfd587; or al, byte ptr [rax]; fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x00000000001058f3: jnp 0x105967; pop rax; push rbx; call 0x2976e08; ret 0xf90d; 
0x0000000000105ea2: jnp 0x105ebf; pop rdx; rcr dword ptr [rdi], 0xd9; ret 0x6a2b; 
0x000000000010a806: jnp 0x10a808; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x0000000000119528: jnp 0x119585; ret; 
0x00000000001233d4: jnp 0x12342c; ret; 
0x000000000012bd68: jnp 0x12bd18; pop r11; ret; 
0x00000000001339d8: jnp 0x133a10; outsd dx, dword ptr [rsi]; ret; 
0x000000000013c108: jnp 0x13c0b8; pop r11; ret; 
0x0000000000013d7e: jnp 0x13d7f; jmp qword ptr [rsi + 0x2e]; 
0x0000000000141b59: jnp 0x141b52; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000147ec8: jnp 0x147f25; ret; 
0x0000000000151c34: jnp 0x151c8c; ret; 
0x00000000000152ae: jnp 0x152bb; add al, bl; ret; 
0x000000000015a588: jnp 0x15a538; pop r11; ret; 
0x0000000000162118: jnp 0x162150; outsd dx, dword ptr [rsi]; ret; 
0x000000000016a848: jnp 0x16a7f8; pop r11; ret; 
0x0000000000170099: jnp 0x170092; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000175e08: jnp 0x175e65; ret; 
0x000000000000179f: jnp 0x17b5; cmp bh, byte ptr [rip - 0x402100f1]; mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x000000000017e628: jnp 0x17e5d8; pop r11; ret; 
0x00000000001893c8: jnp 0x189378; pop r11; ret; 
0x000000000018ec19: jnp 0x18ec12; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000069b0a: jnp 0x69b15; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ae8; 
0x0000000000078e64: jnp 0x78e76; add rsp, 0x70; pop rbx; ret; 
0x000000000007a44f: jnp 0x7a461; jne 0x7a968; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000007ae30: jnp 0x7ae31; jmp qword ptr [rsi + 0xf]; 
0x000000000007ae65: jnp 0x7ae66; jmp qword ptr [rsi + 0xf]; 
0x000000000007d653: jnp 0x7d65d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d678: jnp 0x7d682; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x000000000007d6b8: jnp 0x7d6c2; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d6dd: jnp 0x7d6e7; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x77e8; 
0x0000000000088918: jnp 0x88973; ret; 
0x000000000008897b: jnp 0x889d9; ret; 
0x0000000000088d7a: jnp 0x88dd4; ret 0x23c5; 
0x0000000000088fbc: jnp 0x8901a; ret; 
0x0000000000088fdc: jnp 0x89036; ret; 
0x0000000000088fe5: jnp 0x8903f; ret 0x73c5; 
0x0000000000089085: jnp 0x890df; ret 0x73c5; 
0x000000000008b2d7: jnp 0x8b331; rol ah, 0x62; mov cl, 0x9d; ret 0x7bc5; 
0x000000000008bf53: jnp 0x8bfad; rol ah, 0xe2; loope 0x8bef3; vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x000000000008cc63: jnp 0x8ccbd; ret; 
0x000000000008ce70: jnp 0x8cece; ret 0x3bc5; 
0x000000000008cf86: jnp 0x8cfe4; ret; 
0x000000000008d3e6: jnp 0x8d444; ret; 
0x000000000008db58: jnp 0x8db6a; or r12b, al; ret 0xb9a9; 
0x000000000008db96: jnp 0x8dbf0; rol esp, 0xc1; jns 0x8dbcb; ret 0x8a0f; 
0x000000000008e746: jnp 0x8e758; xor r13b, al; ret; 
0x000000000008e7cf: jnp 0x8e7e1; push rcx; and ch, al; ret; 
0x000000000008f2bd: jnp 0x8f318; ret; 
0x000000000008f338: jnp 0x8f396; rol ah, 0x41; and ebx, dword ptr [rax + rax*8 - 0x3c]; ret 0xb9f1; 
0x000000000008f8d2: jnp 0x8f92d; ret; 
0x000000000008fe70: jnp 0x8fecb; ret; 
0x0000000000091014: jnp 0x9106f; ret 0x41c4; 
0x0000000000091019: jnp 0x91074; ret 0xcbc5; 
0x00000000000912c1: jnp 0x9131c; fadd st(5), st(0); ret; 
0x00000000000916ec: jnp 0x91747; ret 0x41c4; 
0x00000000000916f1: jnp 0x9174c; ret 0xcbc5; 
0x0000000000093130: jnp 0x9318a; ret; 
0x0000000000093159: jnp 0x931b3; ret; 
0x0000000000093452: jnp 0x934ac; rol ch, 0xfb; pop rax; ret; 
0x0000000000093db2: jnp 0x93e0c; ret 0xbbc5; 
0x0000000000094004: jnp 0x9405e; ret; 
0x00000000000943d2: jnp 0x9442c; ret; 
0x0000000000094400: jnp 0x9445a; ret 0xbbc5; 
0x0000000000094f96: jnp 0x94ff0; ret; 
0x0000000000094fc4: jnp 0x9501e; ret 0xbbc5; 
0x0000000000095602: jnp 0x9565d; ret 0x14e9; 
0x00000000000990b3: jnp 0x990bc; add ch, al; ret; 
0x000000000009c421: jnp 0x9c491; or al, byte ptr [rax]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009d7e7: jnp 0x9d806; shr byte ptr [rax - 0x3acffff9], cl; ret; 
0x000000000009ee98: jnp 0x9eef3; ret; 
0x000000000009eefb: jnp 0x9ef59; ret; 
0x000000000009f2fa: jnp 0x9f354; ret 0x23c5; 
0x000000000009f539: jnp 0x9f597; ret; 
0x000000000009f55a: jnp 0x9f5b4; ret; 
0x000000000009f55f: jnp 0x9f5b9; ret 0x73c5; 
0x000000000009f600: jnp 0x9f65a; ret 0x73c5; 
0x00000000000a05df: jnp 0xa0606; ret 0x8fb; 
0x00000000000a3156: jnp 0xa31b4; ret 0x3bc5; 
0x00000000000a327b: jnp 0xa32d9; ret; 
0x00000000000a36ba: jnp 0xa3718; ret; 
0x00000000000a3ab2: jnp 0xa3b0c; rol esp, 0xc1; jns 0xa3ae7; ret 0x8a0f; 
0x00000000000a3cd2: jnp 0xa3ce4; sub spl, al; jns 0xa3d02; loope 0xa3ca0; ret; 
0x00000000000a484c: jnp 0xa48a6; ret; 
0x00000000000a4d38: jnp 0xa4d4a; xor r13b, al; ret; 
0x00000000000a4da6: jnp 0xa4db8; sbb r12b, al; jns 0xa4dd6; fadd st(4); ret; 
0x00000000000a4dbf: jnp 0xa4dd1; push rcx; and ch, al; ret; 
0x00000000000a57e5: jnp 0xa5840; ret; 
0x00000000000a5dc3: jnp 0xa5e1e; ret; 
0x00000000000a644d: jnp 0xa64a8; ret; 
0x00000000000a645e: jnp 0xa64bc; and al, 0x20; mov al, 0xc4; ret; 
0x00000000000a6c96: jnp 0xa6cf0; ret 0x43c4; 
0x00000000000a7048: jnp 0xa7026; add ah, 0x63; test eax, 0xc4c0d37b; ret; 
0x00000000000a761b: jnp 0xa7676; ret 0x41c4; 
0x00000000000a7620: jnp 0xa767b; ret 0xcbc5; 
0x00000000000a78c3: jnp 0xa791e; fadd st(5), st(0); ret; 
0x00000000000a7cec: jnp 0xa7d47; ret 0x41c4; 
0x00000000000a7cf1: jnp 0xa7d4c; ret 0xcbc5; 
0x00000000000a919b: jnp 0xa9169; mov al, 0xc4; ret; 
0x00000000000a9743: jnp 0xa979d; ret; 
0x00000000000a9776: jnp 0xa97d4; ret 0x41c4; 
0x00000000000a979c: jnp 0xa97f6; ret; 
0x00000000000a9a93: jnp 0xa9aed; rol ch, 0xfb; pop rax; ret; 
0x00000000000aa3d4: jnp 0xaa42e; ret 0xbbc5; 
0x00000000000aa9d7: jnp 0xaaa31; ret; 
0x00000000000aaa07: jnp 0xaaa61; ret 0xbbc5; 
0x00000000000ab59f: jnp 0xab5f9; ret; 
0x00000000000ab5cf: jnp 0xab629; ret 0xbbc5; 
0x00000000000ab6bf: jnp 0xab719; shr cl, 0xc; loope 0xab6c5; jmp qword ptr [rsi + 0xf]; 
0x00000000000ab6f2: jnp 0xab750; rol ah, 0xc1; jnp 0xab751; ret; 
0x00000000000ab6f7: jnp 0xab751; ret; 
0x00000000000abc17: jnp 0xabc72; ret 0x3fe9; 
0x00000000000af849: jnp 0xaf8a4; fld st(4); ret; 
0x00000000000afda9: jnp 0xafe04; fld st(4); ret; 
0x00000000000b3465: jnp 0xb34bf; ret 0xc1c5; 
0x00000000000b38a5: jnp 0xb3903; ret; 
0x00000000000b39bd: jnp 0xb3a1b; ret 0xc1c4; 
0x00000000000b39d4: jnp 0xb3a2e; ret 0x79c5; 
0x00000000000b3a05: jnp 0xb3a5f; ret 0xbc5; 
0x00000000000b3b1a: jnp 0xb3b74; ret; 
0x00000000000b3bf5: jnp 0xb3c4f; ret 0x33c5; 
0x00000000000b40d8: jnp 0xb4132; ret 0x23c5; 
0x00000000000b4121: jnp 0xb417b; ret 0x41c4; 
0x00000000000b4839: jnp 0xb4893; ret 0x7bc5; 
0x00000000000b486c: jnp 0xb48c6; ret; 
0x00000000000b4885: jnp 0xb48df; rol esp, 0xc1; jnp 0xb48e4; ret; 
0x00000000000b488a: jnp 0xb48e4; ret; 
0x00000000000b4b50: jnp 0xb4bae; ret 0x79c5; 
0x00000000000b4cde: jnp 0xb4d38; shr ecx, 0xcf; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b559a: jnp 0xb55f5; ret 0x7bc5; 
0x00000000000b55b2: jnp 0xb560d; ret 0xfbc5; 
0x00000000000b55bf: jnp 0xb561a; ret 0xfbc5; 
0x00000000000b55cc: jnp 0xb5627; ret 0xfbc5; 
0x00000000000b55d9: jnp 0xb5634; ret 0x79c5; 
0x00000000000b55fa: jnp 0xb5654; ret; 
0x00000000000b575c: jnp 0xb57b7; ret 0x41c4; 
0x00000000000b57d1: jnp 0xb582f; ret; 
0x00000000000b57e7: jnp 0xb5841; ret; 
0x00000000000b584a: jnp 0xb58a5; ret 0x41c4; 
0x00000000000b718c: jnp 0xb71e6; ret; 
0x00000000000b71ed: jnp 0xb7248; ret 0xcbc5; 
0x00000000000b722d: jnp 0xb728b; ret 0xfbc5; 
0x00000000000b7341: jnp 0xb739b; ret 0x33c5; 
0x00000000000b73a1: jnp 0xb73fb; ret; 
0x00000000000b73d3: jnp 0xb742d; ret 0x860f; 
0x00000000000b7481: jnp 0xb74db; ret; 
0x00000000000b7566: jnp 0xb75c0; ret; 
0x00000000000b75e7: jnp 0xb7641; ret 0xc1c4; 
0x00000000000b8991: jnp 0xb89ef; rol esp, 0xc1; jnp 0xb89f0; ret; 
0x00000000000b8996: jnp 0xb89f0; ret; 
0x00000000000b89e9: jnp 0xb8a47; ret 0xfbc5; 
0x00000000000b8fee: jnp 0xb9049; ret 0x33c5; 
0x00000000000b96c4: jnp 0xb971f; ret 0x41c4; 
0x00000000000b9742: jnp 0xb979c; ret; 
0x00000000000b9a97: jnp 0xb9af1; ret; 
0x00000000000ba21e: jnp 0xba279; ret 0x3bc5; 
0x00000000000ba3fc: jnp 0xba457; ret 0x79c5; 
0x00000000000ba41f: jnp 0xba47a; ret 0xc1c4; 
0x00000000000ba450: jnp 0xba4ab; ret 0x3bc5; 
0x00000000000ba475: jnp 0xba4d0; ret 0xfbc5; 
0x00000000000ba482: jnp 0xba4dd; ret 0xc1c4; 
0x00000000000ba6bf: jnp 0xba71a; ret 0x3bc5; 
0x00000000000ba9a6: jnp 0xbaa00; ret 0xc1c4; 
0x00000000000bac84: jnp 0xbacdf; ret; 
0x00000000000bae82: jnp 0xbaee0; ret 0xdbc5; 
0x00000000000bb4f4: jnp 0xbb54e; ret 0xfbc5; 
0x00000000000bb754: jnp 0xbb7ae; ret 0x33c5; 
0x00000000000bb838: jnp 0xbb892; ret; 
0x00000000000bbd3f: jnp 0xbbd99; ret 0xfbc5; 
0x00000000000bc159: jnp 0xbc1b7; rol ah, 0x41; jns 0xbc188; ret; 
0x00000000000bc6ea: jnp 0xbc745; rol esp, 0xc1; jnp 0xbc749; rol ch, 0xfb; pop rcx; ret; 
0x00000000000bc6ef: jnp 0xbc749; rol ch, 0xfb; pop rcx; ret; 
0x00000000000bcbc7: jnp 0xbcc22; ret; 
0x00000000000bd51b: jnp 0xbd579; ret; 
0x00000000000be67d: jnp 0xbe6d7; ret; 
0x00000000000beac3: jnp 0xbead6; jl 0xbeaeb; or ch, al; ret; 
0x00000000000bea9c: jnp 0xbeafa; ret 0xfbc5; 
0x00000000000beb63: jnp 0xbebc3; ret 0x3bc5; 
0x00000000000bed8a: jnp 0xbede4; ret 0x21c5; 
0x00000000000bede0: jnp 0xbee3e; ret 0x41c4; 
0x00000000000beec1: jnp 0xbef1f; ret 0x41c4; 
0x00000000000befa2: jnp 0xbf000; ret 0x41c4; 
0x00000000000bf083: jnp 0xbf0e1; ret 0x41c4; 
0x00000000000bf154: jnp 0xbf1af; ret; 
0x00000000000bf17c: jnp 0xbf1d6; ret 0x79c5; 
0x00000000000bf1e6: jnp 0xbf240; ret 0xc1c4; 
0x00000000000bf84b: jnp 0xbf8a5; ret 0x21c5; 
0x00000000000bf89f: jnp 0xbf8fd; ret 0x41c4; 
0x00000000000bf97a: jnp 0xbf9d8; ret 0x41c4; 
0x00000000000bfa55: jnp 0xbfab3; ret 0x41c4; 
0x00000000000bfb30: jnp 0xbfb8e; ret 0x41c4; 
0x00000000000bfbfa: jnp 0xbfc55; ret; 
0x00000000000bfc1b: jnp 0xbfc75; ret 0x79c5; 
0x00000000000bfc87: jnp 0xbfce1; ret 0xdbc5; 
0x00000000000c0b69: jnp 0xc0bc3; ret 0x21c5; 
0x00000000000c0bbd: jnp 0xc0c1b; ret 0x41c4; 
0x00000000000c0c98: jnp 0xc0cf6; ret 0x41c4; 
0x00000000000c0d73: jnp 0xc0dd1; ret 0x41c4; 
0x00000000000c0e4e: jnp 0xc0eac; ret 0x41c4; 
0x00000000000c0f18: jnp 0xc0f73; ret; 
0x00000000000c0f2b: jnp 0xc0f85; ret 0x79c5; 
0x00000000000c1a70: jnp 0xc1acb; ret 0x9ae9; 
0x00000000000c2637: jnp 0xc2692; ret 0x79c5; 
0x00000000000c2656: jnp 0xc26b4; ret; 
0x00000000000c293b: jnp 0xc294d; jl 0xc2963; or ch, al; jns 0xc296b; ret; 
0x00000000000cadb1: jnp 0xcade8; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x00000000000cd486: jnp 0xcd488; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000000d3218: jnp 0xd3250; outsd dx, dword ptr [rsi]; ret; 
0x000000000000d5e1: jnp 0xd5ed; add byte ptr [rax], al; add rsp, 0x20; add rsp, 8; ret; 
0x00000000000dbc28: jnp 0xdbbd8; pop r11; ret; 
0x00000000000e5568: jnp 0xe55c5; ret; 
0x00000000000ef454: jnp 0xef4ac; ret; 
0x00000000000f80c8: jnp 0xf8078; pop r11; ret; 
0x00000000000fde79: jnp 0xfde72; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000010043c: jns 0x100475; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000105a43: jns 0x105a06; sti; sbb eax, 0xc5b8baf9; mov bh, 0xc; ret; 
0x0000000000106528: jns 0x1064f1; insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x0000000000106bd5: jns 0x106c29; ret; 
0x000000000010bc05: jns 0x10bc01; ret 0xec6f; 
0x000000000010c992: jns 0x10c99f; ret 0x9214; 
0x000000000010d0a6: jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x000000000010e374: jns 0x10e38b; mov al, 0xed; fbld tbyte ptr [rdi - 0xa02eebc]; add eax, 0x5f98c940; ret; 
0x00000000001153c9: jns 0x1153ee; ret; 
0x000000000011965b: jns 0x1196d6; ret 0xbc01; 
0x000000000011daac: jns 0x11da97; cmp edi, dword ptr [rip + 0x16c7998]; scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x0000000000127da4: jns 0x127dfd; pop rsi; cmp al, 0x63; ret; 
0x0000000000012bdf: jns 0x12b49; fchs; ret; 
0x000000000012de5b: jns 0x12de53; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x000000000012f6b3: jns 0x12f6ef; ret 0x3fe5; 
0x0000000000138144: jns 0x13819d; pop rsi; cmp al, 0x63; ret; 
0x000000000013e1fb: jns 0x13e1f3; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x000000000013fa53: jns 0x13fa8f; ret 0x3fe5; 
0x0000000000141b52: jns 0x141b6c; sub eax, 0xb03ff37c; jnp 0x141b52; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000143da9: jns 0x143dce; ret; 
0x0000000000147ffb: jns 0x148076; ret 0xbc01; 
0x000000000014c30c: jns 0x14c2f7; cmp edi, dword ptr [rip + 0x16c7998]; scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x00000000001565c4: jns 0x15661d; pop rsi; cmp al, 0x63; ret; 
0x000000000015c67b: jns 0x15c673; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x000000000015ded3: jns 0x15df0f; ret 0x3fe5; 
0x0000000000166884: jns 0x1668dd; pop rsi; cmp al, 0x63; ret; 
0x000000000016c93b: jns 0x16c933; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x000000000016e193: jns 0x16e1cf; ret 0x3fe5; 
0x0000000000170092: jns 0x1700ac; sub eax, 0xb03ff37c; jnp 0x170092; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000171ce9: jns 0x171d0e; ret; 
0x0000000000175f3b: jns 0x175fb6; ret 0xbc01; 
0x000000000017a664: jns 0x17a6bd; pop rsi; cmp al, 0x63; ret; 
0x000000000018071b: jns 0x180713; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x0000000000181f73: jns 0x181faf; ret 0x3fe5; 
0x0000000000185404: jns 0x18545d; pop rsi; cmp al, 0x63; ret; 
0x00000000000186d3: jns 0x186d7; fchs; pop rbx; ret; 
0x000000000018b4bb: jns 0x18b4b3; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x000000000018cd13: jns 0x18cd4f; ret 0x3fe5; 
0x000000000018ec12: jns 0x18ec2c; sub eax, 0xb03ff37c; jnp 0x18ec12; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000190455: jns 0x190443; push qword ptr [rax + 0x8000069]; jp 0x19044b; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x0000000000190701: jns 0x190703; add byte ptr [rax], ch; out dx, al; jmp qword ptr [rax]; 
0x0000000000190f25: jns 0x190f1a; jmp rax; 
0x000000000001b7c7: jns 0x1b7d0; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000001bcca: jns 0x1bcd8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000031943: jns 0x318de; or dword ptr [rax], eax; ret; 
0x000000000003cbc9: jns 0x3cba4; xorpd xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000004465f: jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb8: jns 0x44c68; pop rbx; pop rbp; ret; 
0x000000000004d6aa: jns 0x4d639; movss xmm1, dword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004ee4d: jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x0000000000050699: jns 0x5067a; xorps xmm1, xmmword ptr [rip + 0x7b43e]; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000051f19: jns 0x51f90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052474: jns 0x52518; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058abb: jns 0x589e4; pxor xmm0, xmmword ptr [rip + 0x8ac77]; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000006b91c: jns 0x6b887; pxor xmm0, xmmword ptr [rip + 0x77e16]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000072633: jns 0x72670; movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000073123: jns 0x730ac; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000074d20: jns 0x74d30; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000752c9: jns 0x752d8; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000007d854: jns 0x7d85e; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe8; 
0x000000000007d918: jns 0x7d922; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d939: jns 0x7d943; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x0000000000087774: jns 0x8779f; ret; 
0x00000000000877f8: jns 0x87822; ret 0xe3c5; 
0x0000000000087851: jns 0x8787b; ret 0x39c5; 
0x0000000000087bd7: jns 0x87c02; ret; 
0x0000000000087d5d: jns 0x87d87; ffreep st(5); ret; 
0x0000000000087dd3: jns 0x87dfd; ffreep st(5); ret; 
0x0000000000087e49: jns 0x87e73; ffreep st(5); ret; 
0x0000000000087ebf: jns 0x87ee9; ffreep st(5); ret; 
0x0000000000087f35: jns 0x87f5f; ffreep st(5); ret; 
0x0000000000087fab: jns 0x87fd5; ffreep st(5); ret; 
0x0000000000089601: jns 0x8962b; ffreep st(5); ret; 
0x000000000008960e: jns 0x8963e; fimul dword ptr [rdi]; xchg byte ptr [rcx], ch; adc dword ptr [rax], eax; add ch, al; ret; 
0x0000000000089678: jns 0x896a2; ffreep st(5); ret; 
0x0000000000089685: jns 0x896b5; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x00000000000896f5: jns 0x89725; fcmovb st(0), st(5); ret; 
0x00000000000898fd: jns 0x89927; ret; 
0x0000000000089b9c: jns 0x89bcc; ret 0x860f; 
0x0000000000089e91: jns 0x89ebb; ret 0x8948; 
0x0000000000089f08: jns 0x89f32; ret 0x8948; 
0x0000000000089f7f: jns 0x89fa9; ret 0x8948; 
0x000000000008a449: jns 0x8a479; ret 0x860f; 
0x000000000008cc59: jns 0x8cc83; int 0xc4; ret 0x99c1; 
0x000000000008cc8d: jns 0x8ccb7; int 0xc5; xor dword ptr [rcx + rcx*8 - 0x3b], edx; ret; 
0x000000000008ce65: jns 0x8ce95; fmul qword ptr [rdi]; xchg byte ptr [rdi + rdx + 0x41c40000], al; jnp 0x8cece; ret 0x3bc5; 
0x000000000008d3db: jns 0x8d40b; in eax, 0xf; xchg byte ptr [rax], bl; adc eax, 0x41c40000; jnp 0x8d444; ret; 
0x000000000008db9b: jns 0x8dbcb; ret 0x8a0f; 
0x000000000008e580: jns 0x8e5b0; loope 0x8e549; ret; 
0x000000000008e764: jns 0x8e78e; ffreep st(5); ret; 
0x000000000008e771: jns 0x8e7a1; fimul dword ptr [rdi]; xchg byte ptr [rbx + rax], ch; add ch, al; ret; 
0x000000000008f006: jns 0x8f030; ret 0xfbc5; 
0x0000000000090a9b: jns 0x90ac5; ret; 
0x00000000000913fd: jns 0x91453; ret; 
0x000000000009315d: jns 0x93187; fadd st(5), st(0); and dword ptr [rdx + rbx*8 - 0x3b], edx; ret; 
0x00000000000934a8: jns 0x934d2; ffreep st(5); ret; 
0x000000000009351f: jns 0x93549; ffreep st(5); ret; 
0x000000000009352c: jns 0x9355c; fimul dword ptr [rdi]; xchg byte ptr [rbx], bl; adc byte ptr [rax], al; add ch, al; ret; 
0x000000000009360a: jns 0x93634; ffreep st(5); ret; 
0x0000000000093960: jns 0x93990; ret 0x820f; 
0x00000000000948c4: jns 0x948ee; mov ch, 0x39; push rsp; ret 0x41c4; 
0x0000000000095226: jns 0x95256; ret 0x67a; 
0x00000000000955b3: jns 0x955e3; ret 0x27a; 
0x00000000000955bf: jns 0x955e9; ret 0x876; 
0x00000000000956c2: jns 0x956ec; int 0xc4; ret 0x99b9; 
0x0000000000095739: jns 0x95763; ret; 
0x000000000009595c: jns 0x95986; out 0xc5, eax; and ebx, dword ptr [rbp + rbx*8 - 0x3b]; movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x0000000000095ae8: jns 0x95b18; ret 0x8a0f; 
0x0000000000098bae: jns 0x98bd8; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000990c4: jns 0x990ee; ffreep st(5); ret; 
0x0000000000099654: jns 0x9967e; ffreep st(5); ret; 
0x0000000000099846: jns 0x9980d; ret; 
0x0000000000099839: jns 0x99863; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x000000000009b7e6: jns 0x9b7f2; add byte ptr [rcx], ah; ret 0x8d4c; 
0x000000000009c0d2: jns 0x9c069; vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009c653: jns 0x9c6be; or al, byte ptr [rax]; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009dcf1: jns 0x9dd1c; ret; 
0x000000000009ddcc: jns 0x9ddf6; ret 0x39c5; 
0x000000000009e250: jns 0x9e27a; ffreep st(4); ret; 
0x000000000009e2eb: jns 0x9e315; ffreep st(5); ret; 
0x000000000009e35f: jns 0x9e389; ffreep st(5); ret; 
0x000000000009e3d3: jns 0x9e3fd; ffreep st(5); ret; 
0x000000000009e447: jns 0x9e471; ffreep st(5); ret; 
0x000000000009e4bb: jns 0x9e4e5; ffreep st(5); ret; 
0x000000000009e52f: jns 0x9e559; ffreep st(5); ret; 
0x000000000009fb83: jns 0x9fbad; ffreep st(5); ret; 
0x000000000009fb90: jns 0x9fbc0; fimul dword ptr [rdi]; xchg byte ptr [rdi], dl; adc dword ptr [rax], eax; add ch, al; ret; 
0x000000000009fbf8: jns 0x9fc22; ffreep st(5); ret; 
0x000000000009fc05: jns 0x9fc35; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x000000000009fc47: jns 0x9fc71; fadd st(4); ret; 
0x000000000009fc73: jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x000000000009fe72: jns 0x9fe9c; ret; 
0x00000000000a010d: jns 0xa013d; ret 0x860f; 
0x00000000000a09b1: jns 0xa09e1; ret 0x860f; 
0x00000000000a314b: jns 0xa317b; fmul qword ptr [rdi]; xchg byte ptr [rax - 0x3bffffe6], dl; jnp 0xa31b4; ret 0x3bc5; 
0x00000000000a3ab7: jns 0xa3ae7; ret 0x8a0f; 
0x00000000000a3cd8: jns 0xa3d02; loope 0xa3ca0; ret; 
0x00000000000a4878: jns 0xa48a2; int 0xc5; xor dword ptr [rcx + rcx*8 - 0x3b], edx; ret; 
0x00000000000a4b52: jns 0xa4b82; loope 0xa4b1b; ret; 
0x00000000000a4cb9: jns 0xa4ce3; ffreep st(4); ret; 
0x00000000000a4d56: jns 0xa4d80; ffreep st(5); ret; 
0x00000000000a4dac: jns 0xa4dd6; fadd st(4); ret; 
0x00000000000a55be: jns 0xa55e8; ret 0xfbc5; 
0x00000000000a707b: jns 0xa70a5; ret; 
0x00000000000a7a04: jns 0xa7a5a; ret; 
0x00000000000a9ae7: jns 0xa9b11; ffreep st(5); ret; 
0x00000000000a9af4: jns 0xa9b24; fimul dword ptr [rdi]; xchg byte ptr [rbx], ch; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000a9b5c: jns 0xa9b86; ffreep st(5); ret; 
0x00000000000a9ba7: jns 0xa9bd1; ffreep st(4); ret; 
0x00000000000a9c43: jns 0xa9c6d; ffreep st(5); ret; 
0x00000000000a9f87: jns 0xa9fb7; ret 0x820f; 
0x00000000000aaecd: jns 0xaaef7; mov ch, 0x39; push rsp; ret 0x41c4; 
0x00000000000ab822: jns 0xab852; ret 0x67a; 
0x00000000000abbc7: jns 0xabbf7; ret 0x27a; 
0x00000000000abbd3: jns 0xabbfd; ret 0x876; 
0x00000000000abd50: jns 0xabd7a; ret; 
0x00000000000ac0df: jns 0xac10f; ret 0x8a0f; 
0x00000000000af1ef: jns 0xaf219; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000afe23: jns 0xafe4d; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x00000000000b1523: jns 0xb14c8; cmc; jmp qword ptr [rsi + 0xf]; 
0x00000000000b1cf2: jns 0xb1d1d; rol esp, 0x41; jns 0xb1d21; ret 0xc1c4; 
0x00000000000b1cf7: jns 0xb1d21; ret 0xc1c4; 
0x00000000000b1db6: jns 0xb1de1; rol ebp, 1; retf; pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000b1e32: jns 0xb1e5c; ret; 
0x00000000000b1f55: jns 0xb1f7f; ret 0x41c4; 
0x00000000000b31f1: jns 0xb321b; ret 0xfbc5; 
0x00000000000b33d0: jns 0xb33fa; inc ch; ret; 
0x00000000000b347b: jns 0xb34ab; test dword ptr [rdi], 0x196c86; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x00000000000b3485: jns 0xb34b0; out 0xc5, eax; ret; 
0x00000000000b3f27: jns 0xb3f57; ret 0x860f; 
0x00000000000b464b: jns 0xb4675; ret; 
0x00000000000b4d35: jns 0xb4d5f; ret; 
0x00000000000b5270: jns 0xb52a0; ret; 
0x00000000000b5282: jns 0xb52b2; ret 0xf9c5; 
0x00000000000b5613: jns 0xb563d; ret 0x41c4; 
0x00000000000b5a62: jns 0xb5a92; ret; 
0x00000000000b69c4: jns 0xb69f4; ret; 
0x00000000000b7383: jns 0xb73ad; ret; 
0x00000000000b74c2: jns 0xb74ec; ret; 
0x00000000000b7557: jns 0xb7581; ret 0x41c4; 
0x00000000000b75b6: jns 0xb75e0; ret 0xc148; 
0x00000000000b7d83: jns 0xb7dad; out 0xc5, al; ret; 
0x00000000000b7e4e: jns 0xb7e78; ret; 
0x00000000000b7f34: jns 0xb7f5e; ret; 
0x00000000000b801a: jns 0xb8044; ret; 
0x00000000000b83f8: jns 0xb8423; out 0xc5, eax; ret; 
0x00000000000b86cc: jns 0xb86f6; rol ch, 0xdb; pop rax; out 0xc5, eax; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x00000000000b8f9b: jns 0xb8fc5; ret 0xfbc5; 
0x00000000000b95ce: jns 0xb95fe; ret 0x860f; 
0x00000000000b9675: jns 0xb969f; ret; 
0x00000000000b973d: jns 0xb9768; rol ah, 0xc1; jnp 0xb979c; ret; 
0x00000000000b9eb9: jns 0xb9ee3; ret; 
0x00000000000ba215: jns 0xba23f; mov ch, 0x3b; pop rsp; rol ah, 0xc1; jnp 0xba279; ret 0x3bc5; 
0x00000000000ba231: jns 0xba25c; ffreep st(5); ret; 
0x00000000000ba3c9: jns 0xba3f9; ret 0x860f; 
0x00000000000ba836: jns 0xba860; retf 0x41c4; jns 0xba865; ret 0x41c4; 
0x00000000000ba83b: jns 0xba865; ret 0x41c4; 
0x00000000000bac54: jns 0xbac7e; fadd st(4), st(0); and ebx, dword ptr [r8 + rbx*8 - 0x3b]; and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000bb6bc: jns 0xbb6e6; ret; 
0x00000000000bb9e8: jns 0xbba13; ret; 
0x00000000000bbf0d: jns 0xbbf38; ret; 
0x00000000000bc15e: jns 0xbc188; ret; 
0x00000000000bc249: jns 0xbc274; inc ebp; ret; 
0x00000000000bc5c6: jns 0xbc5f1; call 0xfffffffffff920b6; jmp qword ptr [rsi - 0x70]; 
0x00000000000bc646: jns 0xbc670; ret; 
0x00000000000bca32: jns 0xbca5d; ffreep st(5); ret; 
0x00000000000bcacf: jns 0xbcafa; mov ebp, 0xc5c558fb; ret; 
0x00000000000bcbbe: jns 0xbcbe9; inc ebp; ret; 
0x00000000000bd18f: jns 0xbd1ba; ret; 
0x00000000000bda34: jns 0xbda5e; ret 0xfbc5; 
0x00000000000bda9f: jns 0xbdaca; ret; 
0x00000000000bdd25: jns 0xbdd4f; ret 0x39c5; 
0x00000000000bde96: jns 0xbdec0; ret; 
0x00000000000beab1: jns 0xbeadb; ret 0xc1c4; 
0x00000000000bec02: jns 0xbec2c; rol ebp, 0xfb; pop rax; mov ebp, 0xc5fc28f9; ret; 
0x00000000000bf14f: jns 0xbf17a; call 0x5987b31a; ret; 
0x00000000000bf1ef: jns 0xbf219; mov ebp, 0xc5c659fb; ret; 
0x00000000000bf3d1: jns 0xbf3fb; ret; 
0x00000000000bf7cb: jns 0xbf7f5; fcmovb st(0), st(5); ret; 
0x00000000000bfbac: jns 0xbfbd6; rol ch, 1; adc ebx, dword ptr [rax + rbp*8 - 0x3b]; sub dword ptr [rbx + rdx*8 - 0x3b], edx; ret; 
0x00000000000bfbf5: jns 0xbfc20; call 0x5987bdc0; ret; 
0x00000000000bfcde: jns 0xbfd09; mov ebp, 0xc5e858d3; fistp dword ptr [rbp + riz*8 - 0x3b]; ret; 
0x00000000000bfcf2: jns 0xbfd1d; rol ch, 0xf9; push rsp; ret; 
0x00000000000bfed9: jns 0xbff04; inc ebp; ret; 
0x00000000000bff11: jns 0xbff3c; inc ebp; ret; 
0x00000000000bfffe: jns 0xc0028; rol ebp, cl; sub ebx, dword ptr [rdi + rdx*8 - 0x3b]; ret; 
0x00000000000c01fd: jns 0xc0227; rol esp, 1; add ebx, dword ptr [r9 + rdi*8 - 0x3b]; ret; 
0x00000000000c0371: jns 0xc039b; faddp st(5); ret; 
0x00000000000c03c4: jns 0xc03ee; ret 0xc1c4; 
0x00000000000c0408: jns 0xc0432; mov ch, 0x39; push rsp; ret; 
0x00000000000c0ae9: jns 0xc0b13; fcmovb st(0), st(5); ret; 
0x00000000000c0eca: jns 0xc0ef4; rol ch, 1; adc ebx, dword ptr [rax + rbp*8 - 0x3b]; sub dword ptr [rbx + rdx*8 - 0x3b], edx; ret; 
0x00000000000c0f13: jns 0xc0f3e; call 0x5987d0de; ret; 
0x00000000000c1015: jns 0xc1040; rol ch, 0xf9; push rsp; ret; 
0x00000000000c13b0: jns 0xc13da; ret 0xc3c5; 
0x00000000000c14c7: jns 0xc14f1; ret 0xc1c4; 
0x00000000000c187d: jns 0xc18a7; ret 0xc1c4; 
0x00000000000c18b3: jns 0xc18de; ret; 
0x00000000000c19ec: jns 0xc1a16; ret; 
0x00000000000c1a3c: jns 0xc1a66; ret; 
0x00000000000c1d7c: jns 0xc1da6; ret; 
0x00000000000c1df1: jns 0xc1e1b; ret 0x41c4; 
0x00000000000c20aa: jns 0xc20d4; ret 0x41c4; 
0x00000000000c20dd: jns 0xc2108; ret; 
0x00000000000c2712: jns 0xc273c; ret 0xc1c4; 
0x00000000000c2941: jns 0xc296b; ret; 
0x00000000000c3ee7: jns 0xc3edd; jmp qword ptr [rsi + 0xf]; 
0x00000000000d7c64: jns 0xd7cbd; pop rsi; cmp al, 0x63; ret; 
0x00000000000ddd1b: jns 0xddd13; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x00000000000df573: jns 0xdf5af; ret 0x3fe5; 
0x000000000000dfdf: jns 0xe029; add esp, 0x18; ret; 
0x00000000000e09e9: jns 0xe0a0e; ret; 
0x00000000000e569b: jns 0xe5716; ret 0xbc01; 
0x00000000000e9b2c: jns 0xe9b17; cmp edi, dword ptr [rip + 0x16c7998]; scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x00000000000f4104: jns 0xf415d; pop rsi; cmp al, 0x63; ret; 
0x00000000000fa1bb: jns 0xfa1b3; push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x00000000000fba13: jns 0xfba4f; ret 0x3fe5; 
0x00000000000fde72: jns 0xfde8c; sub eax, 0xb03ff37c; jnp 0xfde72; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000011845d: jo 0x11845b; mov ebx, 0xc1abdcd; ret; 
0x000000000011f5d9: jo 0x11f61a; add eax, 0x3d053c47; stosd dword ptr [rdi], eax; out dx, eax; adc al, 0x3c; ret 0x445c; 
0x00000000001309c6: jo 0x130987; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x0000000000131759: jo 0x1317b5; ret; 
0x0000000000134859: jo 0x134896; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x0000000000013949: jo 0x139a6; ret; 
0x0000000000140ffa: jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x0000000000146dfd: jo 0x146dfb; mov ebx, 0xc1abdcd; ret; 
0x000000000014de39: jo 0x14de7a; add eax, 0x3d053c47; stosd dword ptr [rdi], eax; out dx, eax; adc al, 0x3c; ret 0x445c; 
0x000000000015f106: jo 0x15f0c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000015fe99: jo 0x15fef5; ret; 
0x0000000000162f99: jo 0x162fd6; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x000000000016f53a: jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x0000000000174d3d: jo 0x174d3b; mov ebx, 0xc1abdcd; ret; 
0x0000000000017618: jo 0x175f8; stc; faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x0000000000017af1: jo 0x17ad1; stc; faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x0000000000017c9b: jo 0x17c75; loope 0x17c7d; ret 0xe1de; 
0x0000000000017c85: jo 0x17ccf; add esp, 0x60; pop rbx; fsubp st(1); ret; 
0x000000000018e0ba: jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x0000000000190571: jo 0x190573; add byte ptr [rax], cl; mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x0000000000195d30: jo 0x195d36; in al, dx; jmp qword ptr [rcx]; 
0x0000000000196dc0: jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x0000000000040a6c: jo 0x40a85; or eax, 0x540f6600; ret; 
0x0000000000043beb: jo 0x43c48; pop rbp; pop r12; ret; 
0x0000000000050e5c: jo 0x50e32; or al, byte ptr [rax]; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000063c78: jo 0x63cd5; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000070860: jo 0x70867; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000007262d: jo 0x72634; add byte ptr [rax - 0x7b], cl; sar byte ptr [rcx + 0x3b], 0x66; movq mm0, qword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000073fb8: jo 0x73fa2; ret 0x538; 
0x0000000000078e69: jo 0x78ec6; ret; 
0x000000000007b42a: jo 0x7b414; sal byte ptr [rbp - 1], 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000085ed4: jo 0x85f07; add byte ptr [rcx + rcx*4 + 0x38], ah; ret; 
0x0000000000085ee4: jo 0x85f17; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000009186a: jo 0x9186c; add cl, ch; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000009e570: jo 0x9e536; ret; 
0x00000000000a0427: jo 0xa03ed; ret; 
0x00000000000a3f07: jo 0xa3ecd; ret; 
0x00000000000a42cf: jo 0xa4295; ret; 
0x00000000000a7879: jo 0xa7840; ret; 
0x00000000000a7f2b: jo 0xa7ef1; ret; 
0x00000000000a7f3f: jo 0xa7f06; xor ebx, dword ptr [rsi + rcx*8 - 0x3c]; ret; 
0x00000000000a8928: jo 0xa88ef; ret; 
0x00000000000aa45b: jo 0xaa4be; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000000c9b16: jo 0xc9b00; mov bl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d0206: jo 0xd01c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x00000000000d0f99: jo 0xd0ff5; ret; 
0x00000000000d4099: jo 0xd40d6; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000e449d: jo 0xe449b; mov ebx, 0xc1abdcd; ret; 
0x00000000000eb659: jo 0xeb69a; add eax, 0x3d053c47; stosd dword ptr [rdi], eax; out dx, eax; adc al, 0x3c; ret 0x445c; 
0x00000000000fd31a: jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x0000000000114680: jp 0x1146c2; sub ebp, dword ptr [rsp + rsi*4 - 0x52f1463b]; fld dword ptr [rbx]; ret; 
0x00000000001148b7: jp 0x1148f4; cmpsd dword ptr [rsi], dword ptr [rdi]; jae 0x1148d7; ret; 
0x000000000011708a: jp 0x1170ee; ret 0x2f24; 
0x0000000000011b87: jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x0000000000011c07: jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000012123: jp 0x12127; je 0x12180; add rsp, 0x18; ret; 
0x0000000000012384: jp 0x12388; je 0x12390; add rsp, 0x18; ret; 
0x00000000000127a7: jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000127e79: jp 0x127e67; out 0x7b, eax; ret; 
0x0000000000128c8d: jp 0x128c63; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x000000000012b291: jp 0x12b2d2; mov esp, 0x3c0a0e9b; ret; 
0x000000000012e0fa: jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000138219: jp 0x138207; out 0x7b, eax; ret; 
0x000000000013902d: jp 0x139003; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x000000000013b631: jp 0x13b672; mov esp, 0x3c0a0e9b; ret; 
0x000000000013e49a: jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000145a6a: jp 0x145ace; ret 0x2f24; 
0x0000000000156699: jp 0x156687; out 0x7b, eax; ret; 
0x00000000001574ad: jp 0x157483; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x0000000000159ab1: jp 0x159af2; mov esp, 0x3c0a0e9b; ret; 
0x000000000015c91a: jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000166959: jp 0x166947; out 0x7b, eax; ret; 
0x000000000016776d: jp 0x167743; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x0000000000169d71: jp 0x169db2; mov esp, 0x3c0a0e9b; ret; 
0x000000000016cbda: jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001739aa: jp 0x173a0e; ret 0x2f24; 
0x000000000017a739: jp 0x17a727; out 0x7b, eax; ret; 
0x000000000017b54d: jp 0x17b523; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x000000000017db51: jp 0x17db92; mov esp, 0x3c0a0e9b; ret; 
0x00000000001809ba: jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001854d9: jp 0x1854c7; out 0x7b, eax; ret; 
0x00000000001862ed: jp 0x1862c3; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x00000000001888f1: jp 0x188932; mov esp, 0x3c0a0e9b; ret; 
0x000000000018b75a: jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018fc2d: jp 0x18fc18; jmp qword ptr [rax]; 
0x000000000018ffad: jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x000000000019045d: jp 0x19044b; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x0000000000190465: jp 0x190453; jmp rax; 
0x0000000000190721: jp 0x190723; add byte ptr [rax + 0x50], bh; out dx, al; call rax; 
0x0000000000199b2d: jp 0x199b20; call rsi; 
0x000000000001a0f6: jp 0x1a0c6; jne 0x1a0c6; mov rax, qword ptr [rip + 0x382eb7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000001a0c0: jp 0x1a0d0; jne 0x1a0d0; fadd st(0); add rsp, 8; ret; 
0x000000000002082a: jp 0x20831; fcmovb st(0), st(1); fstp st(1); ret; 
0x0000000000020833: jp 0x2083f; test byte ptr [rsp + 0xf], 0x40; je 0x2084f; fstp st(1); ret; 
0x0000000000020843: jp 0x2084f; test byte ptr [rsp + 0x1f], 0x40; je 0x2084f; fstp st(1); ret; 
0x000000000002086a: jp 0x20871; fcmovnb st(0), st(1); fstp st(1); ret; 
0x0000000000020873: jp 0x2087f; test byte ptr [rsp + 0xf], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000020883: jp 0x2088f; test byte ptr [rsp + 0x1f], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000020ac6: jp 0x20a96; jne 0x20a96; mov rax, qword ptr [rip + 0x37c4e7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000020a90: jp 0x20aa0; jne 0x20aa0; fadd st(0); add rsp, 8; ret; 
0x0000000000030d70: jp 0x30d7a; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x0000000000031d10: jp 0x31d1a; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000032008: jp 0x32048; jne 0x32048; movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000032440: jp 0x3244a; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x000000000003cd10: jp 0x3cd1a; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000003d200: jp 0x3d20a; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x0000000000043306: jp 0x43310; jne 0x43310; addsd xmm0, xmm0; ret; 
0x0000000000044ff4: jp 0x44f2c; jne 0x44f2c; andpd xmm1, xmmword ptr [rip + 0x862d8]; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000044fc4: jp 0x45018; ucomisd xmm3, qword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000045aa4: jp 0x45abc; jne 0x45abc; ret; 
0x00000000000478d9: jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x0000000000048988: jp 0x48994; ucomisd xmm1, qword ptr [rip + 0x82936]; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x0000000000049510: jp 0x4951c; ucomisd xmm1, qword ptr [rip + 0x81dae]; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000049640: jp 0x49654; movsd qword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049658: jp 0x49668; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049680: jp 0x49694; movsd qword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x0000000000049698: jp 0x496a8; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000049856: jp 0x49860; jne 0x49860; addsd xmm0, xmm0; ret; 
0x0000000000049890: jp 0x498a2; jne 0x498a2; mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004f07b: jp 0x4f080; add dh, dh; jp 0x4f08a; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000004f080: jp 0x4f08a; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000004fe50: jp 0x4fe5a; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004ff0f: jp 0x50058; jne 0x50058; movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x0000000000050430: jp 0x5043a; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x0000000000050675: jp 0x5066a; addps xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x00000000000507c0: jp 0x507ca; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050ba0: jp 0x50baa; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x0000000000051152: jp 0x51160; jne 0x51160; addss xmm0, xmm0; ret; 
0x000000000005118c: jp 0x5119e; jne 0x5119e; mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000056dbe: jp 0x56dd2; movss dword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056dd5: jp 0x56de5; movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056dfe: jp 0x56e12; movss dword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e15: jp 0x56e25; movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000056fd2: jp 0x56fe0; jne 0x56fe0; addss xmm0, xmm0; ret; 
0x000000000005700c: jp 0x5701e; jne 0x5701e; mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000073e4b: jp 0x73e46; jmp qword ptr [rsi - 0x70]; 
0x000000000007755b: jp 0x7755c; jmp qword ptr [rsi + 0xf]; 
0x0000000000079fc2: jp 0x79fb1; std; jmp qword ptr [rsi + 0xf]; 
0x000000000007d750: jp 0x7d75a; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4e8; 
0x000000000007d7e3: jp 0x7d7ed; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d804: jp 0x7d80e; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x50e8; 
0x000000000007d833: jp 0x7d83d; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000080279: jp 0x8023b; pxor xmm2, xmm2; je 0x8023b; movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000009c176: jp 0x9c17e; je 0x9c409; vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000000ce2b: jp 0xce2f; je 0xce38; add rsp, 8; ret; 
0x000000000000cebb: jp 0xcebf; je 0xcec8; add rsp, 8; ret; 
0x00000000000d7d39: jp 0xd7d27; out 0x7b, eax; ret; 
0x00000000000d8b4d: jp 0xd8b23; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x00000000000db151: jp 0xdb192; mov esp, 0x3c0a0e9b; ret; 
0x00000000000ddfba: jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000000df0b: jp 0xdf0f; je 0xdf18; add rsp, 8; ret; 
0x00000000000e26aa: jp 0xe270e; ret 0x2f24; 
0x000000000000e56b: jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x000000000000e5eb: jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000eb45: jp 0xeb49; je 0xebb0; add rsp, 0x18; ret; 
0x000000000000edc6: jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000f22b: jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x00000000000f41d9: jp 0xf41c7; out 0x7b, eax; ret; 
0x00000000000f4fed: jp 0xf4fc3; mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x00000000000f75f1: jp 0xf7632; mov esp, 0x3c0a0e9b; ret; 
0x00000000000fa45a: jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001012ba: js 0x10132f; int 0x29; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000102192: js 0x10215f; ret 0xf9f3; 
0x00000000001074e2: js 0x10753b; cld; ret 0xc883; 
0x000000000010cc1d: js 0x10cc2b; push 0x7d; and r15d, edx; ret 0x6adc; 
0x000000000010e742: js 0x10e707; ret 0x30e7; 
0x00000000001142c2: js 0x1142a3; ret; 
0x000000000011dc01: js 0x11dbd3; ret; 
0x000000000012340d: js 0x12341d; mov edi, 0x99164000; jbe 0x1233a3; ret; 
0x00000000001271d8: js 0x12720b; ret 0x234a; 
0x000000000012d173: js 0x12d153; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000135712: js 0x1356be; lahf; ret 0x3ff4; 
0x0000000000137578: js 0x1375ab; ret 0x234a; 
0x000000000013d513: js 0x13d4f3; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000140e8c: js 0x140e96; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000001436f: js 0x143cc; pop rbp; ret; 
0x000000000014c461: js 0x14c433; ret; 
0x0000000000014f9c: js 0x14ff9; pop rbp; ret; 
0x0000000000151c6d: js 0x151c7d; mov edi, 0x99164000; jbe 0x151c03; ret; 
0x00000000000153f6: js 0x15403; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000001559f8: js 0x155a2b; ret 0x234a; 
0x000000000015b993: js 0x15b973; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000163e52: js 0x163dfe; lahf; ret 0x3ff4; 
0x0000000000165cb8: js 0x165ceb; ret 0x234a; 
0x000000000016bc53: js 0x16bc33; stosb byte ptr [rdi], al; ret 0x223f; 
0x000000000016f3cc: js 0x16f3d6; sar dword ptr [rdi], cl; ret 0xd82b; 
0x0000000000179a98: js 0x179acb; ret 0x234a; 
0x000000000017fa33: js 0x17fa13; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000184838: js 0x18486b; ret 0x234a; 
0x00000000000186fb: js 0x18740; faddp st(1); pop rbx; ret; 
0x000000000018a7d3: js 0x18a7b3; stosb byte ptr [rdi], al; ret 0x223f; 
0x000000000018df4c: js 0x18df56; sar dword ptr [rdi], cl; ret 0xd82b; 
0x00000000001906d1: js 0x1906d3; add byte ptr [rax], cl; cmp dh, ch; jmp rax; 
0x0000000000190724: js 0x190776; out dx, al; call rax; 
0x00000000001909e4: js 0x190a0d; out dx, eax; jmp rsp; 
0x000000000003740b: js 0x3740e; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000003cb9a: js 0x3cc28; addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x00000000000448d6: js 0x448ae; pop rbx; pop rbp; ret; 
0x00000000000471ef: js 0x471fc; add byte ptr [rsi + 0xf], ah; sub dl, al; movapd xmm1, xmm9; ret; 
0x000000000004a2a2: js 0x4a2e0; movss xmm2, dword ptr [rip + 0xb6130]; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000050674: js 0x506f0; addss xmm1, xmm2; movaps xmm0, xmm1; pop rbx; ret; 
0x0000000000052195: js 0x520af; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086526: js 0x86580; not rdx; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000086712: js 0x86730; mov edx, 0x3f800000; cmovne eax, edx; movd xmm0, eax; ret; 
0x0000000000092e1b: js 0x92e1e; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000009b914: js 0x9b920; add bl, dh; movups xmmword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000009b935: js 0x9b941; add bl, dh; movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x00000000000a945b: js 0xa945e; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000b9f61: js 0xb9f28; ret; 
0x00000000000ba2ee: js 0xba2b5; sti; pop rcx; ret 0xf9c5; 
0x00000000000bd7fb: js 0xbd7fe; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000cee32: js 0xcee57; ret; 
0x00000000000cf1b4: js 0xcf179; ret 0xc0e7; 
0x00000000000d4f52: js 0xd4efe; lahf; ret 0x3ff4; 
0x00000000000d7098: js 0xd70cb; ret 0x234a; 
0x00000000000dd033: js 0xdd013; stosb byte ptr [rdi], al; ret 0x223f; 
0x000000000000e0ff: js 0xe15c; pop rbp; ret; 
0x00000000000e9c81: js 0xe9c53; ret; 
0x00000000000ef48d: js 0xef49d; mov edi, 0x99164000; jbe 0xef423; ret; 
0x00000000000f3538: js 0xf356b; ret 0x234a; 
0x00000000000f94d3: js 0xf94b3; stosb byte ptr [rdi], al; ret 0x223f; 
0x00000000000fc7b9: js 0xfc749; sbb eax, 0x3fcc71c5; push rdx; fist word ptr ds:[rdx]; int1; ret 0x9f3f; 
0x00000000000fd1ac: js 0xfd1b6; sar dword ptr [rdi], cl; ret 0xd82b; 
0x00000000000fe69b: js 0xfe68f; ret; 
0x00000000000cd48a: lahf; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x0000000000087fbd: lahf; add dword ptr [rax], eax; add ch, al; ret; 
0x00000000000fe3b1: lahf; add dword ptr [rdi], ebp; xor al, 0x62; movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x000000000006af78: lahf; add eax, 0xc4834800; xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a7c2d: lahf; add rax, 0x2ef9c500; ret; 
0x0000000000105b82: lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x00000000000d8640: lahf; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000001055a3: lahf; iretd; ret; 
0x0000000000131758: lahf; jo 0x1317b5; ret; 
0x000000000015fe98: lahf; jo 0x15fef5; ret; 
0x00000000000d0f98: lahf; jo 0xd0ff5; ret; 
0x00000000000d7463: lahf; mov esp, 0x1cbc5f88; pop rsp; sti; ret; 
0x000000000004d699: lahf; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x00000000000fd969: lahf; movsd dword ptr [rdi], dword ptr [rsi]; add bl, byte ptr [rcx - 0x40c01d33]; sbb dword ptr [rdx + 0x70], edx; ret 0xfb3a; 
0x0000000000011b84: lahf; or eax, dword ptr [rax]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x0000000000112310: lahf; out dx, eax; test al, 0x22; ret 0xefeb; 
0x00000000000fd3cb: lahf; pop rsi; ret 0x3fd7; 
0x00000000000dda80: lahf; push rbx; xchg edi, eax; xchg ebx, eax; std; call rsp; 
0x00000000000d3be8: lahf; ret 0x292b; 
0x00000000000d4f54: lahf; ret 0x3ff4; 
0x00000000000d0bdd: lahf; ret 0x813f; 
0x0000000000042278: lahf; ret 0xd109; 
0x00000000000502ba: lahf; ret 0xd284; 
0x0000000000018efd: lahf; ret 0xf209; 
0x00000000000d4e89: lahf; ret; 
0x00000000000f13fb: lahf; sahf; cmp eax, 0; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x000000000009c0c9: lahf; vmulss xmm0, xmm1, xmm1; ret; 
0x00000000000804b0: lea eax, [rax + rax - 1]; ret; 
0x0000000000087d6f: lea eax, [rax + rax]; add ch, al; ret; 
0x0000000000190a69: lea eax, [rax]; add al, bl; pop rcx; out dx, eax; call rax; 
0x0000000000007198: lea eax, [rcx]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000002e91b: lea eax, [rdx - 0x3ff]; ret; 
0x000000000006ac2c: lea eax, [rdx - 0x3fff]; ret; 
0x000000000004e633: lea eax, [rdx - 0x7f]; ret; 
0x0000000000076b56: lea eax, [rdx]; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x0000000000050ba3: lea eax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507c3: lea eax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050433: lea eax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe53: lea eax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f083: lea eax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d203: lea eax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd13: lea eax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000005058f: lea eax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bcf: lea eax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0af: lea eax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x0000000000032443: lea eax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d13: lea eax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d73: lea eax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000004a7bf: lea eax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d27f: lea eax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d71f: lea eax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x00000000000c8355: lea eax, [rip - 0x76b80000]; ret 0x8949; 
0x00000000000e4a01: lea ebp, [rdi + 0x44019029]; mov edi, 0xa4df0dfd; ret 0x7f48; 
0x00000000000fd1b8: lea ebx, [rdi]; sbb al, 0x14; ret; 
0x00000000000dfb92: lea ecx, [rax - 0x2e]; ret; 
0x0000000000087e45: lea ecx, [rax]; add ch, al; jns 0x87e73; ffreep st(5); ret; 
0x000000000008022c: lea ecx, [rdx + rdx]; cmovne edx, ecx; cmp edx, 0x22; jle 0x803c2; movapd xmm0, xmm2; ret; 
0x00000000000b017c: lea ecx, [rdx + rdx]; cmovne edx, ecx; cmp edx, 0x22; jle 0xb0290; vmovapd xmm0, xmm2; ret; 
0x0000000000015dc7: lea ecx, [rip + 0xb5ce3]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015daf: lea ecx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x0000000000015d17: lea ecx, [rip + 0xb5d93]; fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000015d93: lea ecx, [rip + 0xb73c7]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000042e20: lea ecx, [rsi - 0x433]; shl rdx, cl; imul rax, rdx; ret; 
0x0000000000050dc0: lea ecx, [rsi - 0x96]; shl rdx, cl; imul rax, rdx; ret; 
0x0000000000102c32: lea edi, [r14 + 0x3a]; ret; 
0x0000000000071024: lea edi, [rdi + 0xf]; xchg edi, eax; ret; 
0x00000000001037be: lea edi, [rdi]; add al, dh; add r12b, r9b; xlatb; ret 0xffbb; 
0x000000000010377e: lea edi, [rdi]; add byte ptr [rax], al; test esi, ebp; ret; 
0x00000000000d7d38: lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000102c33: lea edi, [rsi + 0x3a]; ret; 
0x00000000000d9cb6: lea edi, [rsp + rbp*8]; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x0000000000049759: lea edx, [rax + 0x7fffffff]; cmp edx, -3; ja 0x49770; add rsp, 8; ret; 
0x0000000000056ed9: lea edx, [rax + 0x7fffffff]; cmp edx, -3; ja 0x56ef0; add rsp, 8; ret; 
0x000000000007c639: lea edx, [rax + 0x7fffffff]; cmp edx, -3; ja 0x7c650; add rsp, 8; ret; 
0x00000000000510f9: lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000050b98: lea edx, [rip + 0x35f82]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507b8: lea edx, [rip + 0x363a2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050428: lea edx, [rip + 0x36712]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe48: lea edx, [rip + 0x36cb2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f078: lea edx, [rip + 0x37a62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d1f8: lea edx, [rip + 0x49912]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd08: lea edx, [rip + 0x49e42]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x0000000000032438: lea edx, [rip + 0x546f2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d08: lea edx, [rip + 0x54de2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d68: lea edx, [rip + 0x55d62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000004a8d3: lea edx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000006c4d8: lea edx, [rip + 0x9f936]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006c406: lea edx, [rip + 0x9f9e4]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064436: lea edx, [rip + 0xa3c44]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c999: lea edx, [rip + 0xb3dcd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c894: lea edx, [rip + 0xb3eb6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000015631: lea edx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000153f3: lea edx, [rip + 0xb78ef]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000016089: lea edx, [rip + 0xb7fa1]; fld qword ptr [rdx + rax]; ret; 
0x000000000002a84d: lea edx, [rip + 0xb9669]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000027e76: lea edx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x00000000000c6eb6: lea edx, [rip + 0xc8528]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000001b59: lea edx, [rsi + rdx*8 + 0x53]; ret 0x98a3; 
0x00000000000e20e9: lea esi, [rsi + rbx - 0x72]; ret 0xbe2e; 
0x00000000000d78a8: lea esi, [rsi - 0x42]; sti; ret; 
0x00000000000e3449: lea esp, [rax + rbx - 0x74]; ret; 
0x00000000000965e7: lea esp, [rbp - 0x10]; pop r13; ret; 
0x0000000000097362: lea esp, [rdx - 8]; ret; 
0x00000000000e4a00: lea r13d, [r15 + 0x44019029]; mov edi, 0xa4df0dfd; ret 0x7f48; 
0x0000000000050ba2: lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507c2: lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050432: lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe52: lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f082: lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d202: lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd12: lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000005058e: lea rax, [rip + 0x4a3db]; cmove rax, rdx; ret; 
0x0000000000050bce: lea rax, [rip + 0x4a9db]; cmove rax, rdx; ret; 
0x000000000004f0ae: lea rax, [rip + 0x4beeb]; cmove rax, rdx; ret; 
0x0000000000032442: lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d12: lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d72: lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000004a7be: lea rax, [rip - 0x135]; cmove rax, rdx; ret; 
0x000000000004d27e: lea rax, [rip - 0x165]; cmove rax, rdx; ret; 
0x000000000004d71e: lea rax, [rip - 0x3a5]; cmove rax, rdx; ret; 
0x0000000000015dc6: lea rcx, [rip + 0xb5ce3]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015dae: lea rcx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x0000000000015d16: lea rcx, [rip + 0xb5d93]; fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000015d92: lea rcx, [rip + 0xb73c7]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000050b97: lea rdx, [rip + 0x35f82]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507b7: lea rdx, [rip + 0x363a2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050427: lea rdx, [rip + 0x36712]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe47: lea rdx, [rip + 0x36cb2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f077: lea rdx, [rip + 0x37a62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d1f7: lea rdx, [rip + 0x49912]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd07: lea rdx, [rip + 0x49e42]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x0000000000032437: lea rdx, [rip + 0x546f2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d07: lea rdx, [rip + 0x54de2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d67: lea rdx, [rip + 0x55d62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000004a8d2: lea rdx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000006c4d7: lea rdx, [rip + 0x9f936]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006c405: lea rdx, [rip + 0x9f9e4]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064435: lea rdx, [rip + 0xa3c44]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c998: lea rdx, [rip + 0xb3dcd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c893: lea rdx, [rip + 0xb3eb6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000015630: lea rdx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000153f2: lea rdx, [rip + 0xb78ef]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000016088: lea rdx, [rip + 0xb7fa1]; fld qword ptr [rdx + rax]; ret; 
0x000000000002a84c: lea rdx, [rip + 0xb9669]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000027e75: lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x00000000000c6eb5: lea rdx, [rip + 0xc8528]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000097361: lea rsp, [r10 - 8]; ret; 
0x00000000000965e6: lea rsp, [r13 - 0x10]; pop r13; ret; 
0x00000000000aaedb: leave; adc al, 0; add ah, al; pop r12; ret; 
0x000000000002de43: leave; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc33: leave; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000001beb9: leave; add rsp, 0x18; fchs; fxch st(1); ret; 
0x000000000001e3c1: leave; add rsp, 0x58; ret; 
0x000000000001f25f: leave; add rsp, 0x78; ret; 
0x0000000000043291: leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x000000000004ac02: leave; addss xmm2, xmm4; movaps xmm0, xmm1; divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x00000000000471e4: leave; andpd xmm2, xmm1; orpd xmm9, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x00000000000128db: leave; call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x000000000010c513: leave; clc; xor al, 0xdb; cmp al, 0xb9; ret; 
0x0000000000108089: leave; cmc; jmp qword ptr [rax]; 
0x000000000001bace: leave; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000010e380: leave; cwde; pop rdi; ret; 
0x0000000000020b91: leave; faddp st(1); add rsp, 0x28; ret; 
0x0000000000012bb5: leave; faddp st(1); ret; 
0x00000000000189af: leave; fdiv st(0); ret; 
0x0000000000012ba9: leave; fld xword ptr [rip + 0xb8f50]; fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x00000000000134c1: leave; fld xword ptr [rsp - 0x68]; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x0000000000016caf: leave; fld1; faddp st(1); ret; 
0x0000000000016ea3: leave; fmul st(1); faddp st(1); ret; 
0x0000000000012905: leave; fpatan; ret; 
0x00000000000128ff: leave; fsqrt; fabs; fxch st(1); fpatan; ret; 
0x0000000000013151: leave; fstp st(0); add rsp, 0x40; pop rbx; ret; 
0x000000000001706f: leave; fstp st(0); ret; 
0x0000000000016ca7: leave; fsub dword ptr [rip + 0xb451e]; fmulp st(1); fld1; faddp st(1); ret; 
0x0000000000020b81: leave; fucomi st(1); fcmovbe st(0), st(1); fstp st(1); add rsp, 0x28; ret; 
0x000000000001cf50: leave; fxch st(1); ret; 
0x0000000000012e76: leave; fxch st(2); add rsp, 0x18; fdivp st(1); faddp st(1); ret; 
0x00000000000a7e13: leave; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000da93d: leave; in al, 0x3f; wait; cmc; jmp qword ptr [rax - 0x35]; 
0x0000000000118992: leave; jae 0x118963; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000147332: leave; jae 0x147303; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000175272: leave; jae 0x175243; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e49d2: leave; jae 0xe49a3; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000001e960: leave; leave; ret; 
0x0000000000087269: leave; mov ebp, 0x90e501d; add ch, al; ret; 
0x0000000000091037: leave; mov ecx, 0xa9e2c4e1; cdq; ret; 
0x000000000009170f: leave; mov ecx, 0xa9e2c4e9; cdq; ret; 
0x000000000009baf4: leave; mov qword ptr [rsp - 0x10], rax; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000518f3: leave; movabs eax, dword ptr [0x7a1d20d2e0f0007]; add byte ptr [rdi + 0x28], dh; movd xmm0, eax; ret; 
0x00000000000270f2: leave; movapd xmm0, xmm1; ret; 
0x000000000004a5b8: leave; movaps xmm0, xmm1; ret; 
0x00000000000d7e48: leave; movsd dword ptr [rdi], dword ptr [rsi]; nop; ret; 
0x0000000000049738: leave; movsd qword ptr [rbx], xmm1; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000056eb7: leave; movss dword ptr [rbx], xmm1; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000001cc7a: leave; nop dword ptr [rax + rax]; fxch st(1); ret; 
0x000000000001fae3: leave; or al, byte ptr [rax]; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x00000000000bd924: leave; out dx, eax; test ch, 0xfb; pop rcx; ret 0xfbc5; 
0x00000000000aa42a: leave; outsd dx, dword ptr [rsi]; call qword ptr [rax - 0x3b]; 
0x00000000000ab866: leave; outsd dx, dword ptr [rsi]; ret; 
0x000000000011a249: leave; pop rdx; jno 0x11a27e; cdq; jb 0x11a20c; ret 0x1c5e; 
0x0000000000148be9: leave; pop rdx; jno 0x148c1e; cdq; jb 0x148bac; ret 0x1c5e; 
0x0000000000176b29: leave; pop rdx; jno 0x176b5e; cdq; jb 0x176aec; ret 0x1c5e; 
0x00000000000e6289: leave; pop rdx; jno 0xe62be; cdq; jb 0xe624c; ret 0x1c5e; 
0x00000000000dd0b2: leave; push -0x12; pop rcx; ret; 
0x00000000000273f3: leave; ret 0xb; 
0x0000000000016198: leave; ret; 
0x00000000000d43d2: leave; sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x0000000000105566: leave; scasb al, byte ptr [rdi]; ret; 
0x000000000008046f: leave; setne al; neg eax; ret; 
0x000000000007bc92: leave; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000ca770: leave; stosd dword ptr [rdi], eax; sbb al, 0x1c; ret; 
0x00000000000cdf51: leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x0000000000031af1: leave; subsd xmm0, xmm1; ret; 
0x000000000004fc4d: leave; subss xmm0, xmm1; ret; 
0x000000000000eeb3: leave; ucomisd xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000012463: leave; ucomiss xmm1, xmm0; ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x000000000009b9f7: leave; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c96e: leave; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000098de5: leave; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x00000000000fd2e0: leave; xchg eax, esi; idiv edi; call rsp; 
0x000000000010c5d9: leave; xchg edx, eax; ret 0x32be; 
0x0000000000018fea: lock add byte ptr [rax], al; add al, bl; ret 0xacdb; 
0x000000000007719d: lock add byte ptr [rax], al; add al, ch; pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000195c3: lock add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x000000000001900c: lock add byte ptr [rax], al; add dh, bl; loope 0x18ff1; ret 0xc9d9; 
0x000000000007264d: lock or byte ptr [rax], al; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000004069c: lock or dword ptr [rax], eax; add byte ptr [rdi], cl; test edx, ebp; or dword ptr [rax], eax; add dh, dh; ret; 
0x00000000000489ac: lock xor byte ptr [rax], cl; add dl, dh; movups xmm0, xmmword ptr [rip + 0x828d8]; ret; 
0x0000000000058f25: lodsb al, byte ptr [rsi]; add byte ptr [rdx - 0x77000000], dh; ret; 
0x000000000009a811: lodsb al, byte ptr [rsi]; and al, 0x70; add eax, 0x31450000; jmp qword ptr [rsi + 0xf]; 
0x000000000007399c: lodsb al, byte ptr [rsi]; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000019182: lodsb al, byte ptr [rsi]; and al, 0xe0; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; wait; ret 0xf41; 
0x00000000000193ee: lodsb al, byte ptr [rsi]; and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; wait; ret 0x450f; 
0x0000000000018fe8: lodsb al, byte ptr [rsi]; and al, 0xf0; add byte ptr [rax], al; add al, bl; ret 0xacdb; 
0x000000000001900a: lodsb al, byte ptr [rsi]; and al, 0xf0; add byte ptr [rax], al; add dh, bl; loope 0x18ff1; ret 0xc9d9; 
0x00000000000dd17b: lodsb al, byte ptr [rsi]; clc; pop rdi; ret 0xca3f; 
0x00000000000b0c74: lodsb al, byte ptr [rsi]; cmc; jmp qword ptr [rsi + 0xf]; 
0x00000000000122bc: lodsb al, byte ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x00000000000ca76b: lodsb al, byte ptr [rsi]; inc byte ptr [rax - 0x5436c011]; sbb al, 0x1c; ret; 
0x0000000000133c88: lodsb al, byte ptr [rsi]; jae 0x133c89; pop rdx; ret; 
0x00000000001623c8: lodsb al, byte ptr [rsi]; jae 0x1623c9; pop rdx; ret; 
0x00000000000d34c8: lodsb al, byte ptr [rsi]; jae 0xd34c9; pop rdx; ret; 
0x000000000012f6b2: lodsb al, byte ptr [rsi]; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa52: lodsb al, byte ptr [rsi]; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015ded2: lodsb al, byte ptr [rsi]; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e192: lodsb al, byte ptr [rsi]; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f72: lodsb al, byte ptr [rsi]; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd12: lodsb al, byte ptr [rsi]; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df572: lodsb al, byte ptr [rsi]; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba12: lodsb al, byte ptr [rsi]; jns 0xfba4f; ret 0x3fe5; 
0x0000000000114683: lodsb al, byte ptr [rsi]; mov ah, 0xc5; mov ecx, 0x3d9ad0e; ret; 
0x000000000002fa30: lodsb al, byte ptr [rsi]; mov eax, 0xf660009; push rsi; ret; 
0x00000000000ed876: lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x00000000000ca4cc: lodsb al, byte ptr [rsi]; mov esp, 0x900f3fea; push rbp; ret; 
0x000000000007454b: lodsb al, byte ptr [rsi]; nop dword ptr [rax]; pxor xmm0, xmm0; ret; 
0x0000000000103bf6: lodsb al, byte ptr [rsi]; nop; ret; 
0x0000000000058ac6: lodsb al, byte ptr [rsi]; or byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000029188: lodsb al, byte ptr [rsi]; or eax, dword ptr [rax]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000045af0: lodsb al, byte ptr [rsi]; pop rdi; or byte ptr [rax], al; ret; 
0x00000000000ece15: lodsb al, byte ptr [rsi]; ret 0xa8bf; 
0x00000000000d3902: lodsb al, byte ptr [rsi]; ret 0xbe6d; 
0x000000000007c8a0: lodsb al, byte ptr [rsi]; ret 4; 
0x0000000000087480: lodsb al, byte ptr [rsi]; ret 5; 
0x000000000000ef18: lodsb al, byte ptr [rsi]; ret; 
0x00000000000712a2: lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000071280: lodsb al, byte ptr [rsi]; stosb byte ptr [rdi], al; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000dc062: lodsb al, byte ptr [rsi]; sub byte ptr [rcx + 0x29], bl; cmp al, 0x43; int1; sub dword ptr [rax], esp; ret; 
0x000000000019a13c: lodsb al, byte ptr [rsi]; xchg ecx, eax; add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; bnd call rax; 
0x0000000000032100: lodsb al, byte ptr [rsi]; xchg ecx, eax; or dword ptr [rax], eax; divsd xmm0, xmm1; ret; 
0x0000000000052370: lodsb al, byte ptr [rsi]; xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000ecd4d: lodsd eax, dword ptr [rsi]; adc al, 0xbf; add byte ptr [rax - 0x74c161fe], al; ret; 
0x00000000000c6ddf: lodsd eax, dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rsi + 0x41], ah; cmp eax, 0x89497fff; ret; 
0x000000000006c06a: lodsd eax, dword ptr [rsi]; add eax, 0xe8bbeb00; sub al, 0xf8; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000dfda9: lodsd eax, dword ptr [rsi]; and al, 0xee; ret; 
0x000000000019a141: lodsd eax, dword ptr [rsi]; bnd call rax; 
0x000000000010f813: lodsd eax, dword ptr [rsi]; clc; and al, 0x83; ret 0xbfbc; 
0x00000000000ecd3d: lodsd eax, dword ptr [rsi]; cmp bh, byte ptr [rip]; add byte ptr [rdx + rsi*8 - 0x41d1fbc1], ah; cmp eax, 0xbf14ad94; add byte ptr [rax - 0x74c161fe], al; ret; 
0x0000000000114688: lodsd eax, dword ptr [rsi]; fld dword ptr [rbx]; ret; 
0x000000000012eb5b: lodsd eax, dword ptr [rsi]; ja 0x12ebc8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000013eefb: lodsd eax, dword ptr [rsi]; ja 0x13ef68; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000015d37b: lodsd eax, dword ptr [rsi]; ja 0x15d3e8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000016d63b: lodsd eax, dword ptr [rsi]; ja 0x16d6a8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000018141b: lodsd eax, dword ptr [rsi]; ja 0x181488; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000018c1bb: lodsd eax, dword ptr [rsi]; ja 0x18c228; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000dea1b: lodsd eax, dword ptr [rsi]; ja 0xdea88; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000faebb: lodsd eax, dword ptr [rsi]; ja 0xfaf28; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000001795: lodsd eax, dword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x00000000000d564d: lodsd eax, dword ptr [rsi]; mov ch, 0xbf; ret; 
0x0000000000075c1f: lodsd eax, dword ptr [rsi]; mov cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d410e: lodsd eax, dword ptr [rsi]; mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x00000000000183af: lodsd eax, dword ptr [rsi]; or eax, dword ptr fs:[rax]; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000075aef: lodsd eax, dword ptr [rsi]; pop rbp; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000eaa48: lodsd eax, dword ptr [rsi]; ret 0xd64e; 
0x00000000000b3ea7: lodsd eax, dword ptr [rsi]; ret; 
0x00000000000d0ac8: lodsd eax, dword ptr [rsi]; retf 0xb151; pop rdx; xchg ebp, eax; ret; 
0x00000000000d0ac2: lodsd eax, dword ptr [rsi]; sbb byte ptr [rdx - 0x49], ah; mov edi, 0x51caad3f; mov cl, 0x5a; xchg ebp, eax; ret; 
0x0000000000070b72: lodsd eax, dword ptr [rsi]; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000680cf: lodsd eax, dword ptr [rsi]; test dword ptr [rip + 0x6f0f6600], 0x6f0f66d8; ret; 
0x0000000000001794: lodsq rax, qword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x0000000000106bce: loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x00000000001125a4: loope 0x11255f; int 0x3f; ret 0xcc6f; 
0x0000000000011287: loope 0x11288; jmp qword ptr [rsi + 0xf]; 
0x0000000000118181: loope 0x118157; cmp eax, 0xbf65873c; ret; 
0x000000000011834e: loope 0x11838b; mov eax, 0xffecb9b3; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000118990: loope 0x118942; leave; jae 0x118963; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000011b14: loope 0x11b09; movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x000000000011da3b: loope 0x11d9c4; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x000000000011daeb: loope 0x11dabf; call qword ptr [rdx]; 
0x000000000011dbab: loope 0x11db6a; call qword ptr [rsi]; 
0x00000000000122b5: loope 0x1232a; pop rax; mov rax, qword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000123359: loope 0x1232df; ret 0xc2a; 
0x0000000000012424: loope 0x12419; movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000125c99: loope 0x125d11; stosb byte ptr [rdi], al; ret; 
0x0000000000012664: loope 0x12659; movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x00000000000126fb: loope 0x126f0; movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x0000000000012903: loope 0x128de; leave; fpatan; ret; 
0x00000000001298ee: loope 0x12992f; cmp ch, ch; ret; 
0x000000000012996e: loope 0x1299af; ret; 
0x000000000012d23c: loope 0x12d24c; ret; 
0x000000000012eb1e: loope 0x12eb5f; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000012eb56: loope 0x12eb97; ja 0x12eb85; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000013277e: loope 0x1327bf; in eax, 0xe4; ret 0x25e7; 
0x0000000000136039: loope 0x1360b1; stosb byte ptr [rdi], al; ret; 
0x0000000000139c8e: loope 0x139ccf; cmp ch, ch; ret; 
0x0000000000139d0e: loope 0x139d4f; ret; 
0x000000000013d5dc: loope 0x13d5ec; ret; 
0x000000000013eebe: loope 0x13eeff; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000013eef6: loope 0x13ef37; ja 0x13ef25; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x0000000000141666: loope 0x1416a7; ret 0xa67; 
0x0000000000146b21: loope 0x146af7; cmp eax, 0xbf65873c; ret; 
0x0000000000146cee: loope 0x146d2b; mov eax, 0xffecb9b3; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000147330: loope 0x1472e2; leave; jae 0x147303; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000014b99: loope 0x14b74; ret 0xe1d9; 
0x000000000014c29b: loope 0x14c224; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x000000000014c34b: loope 0x14c31f; call qword ptr [rdx]; 
0x000000000014c40b: loope 0x14c3ca; call qword ptr [rsi]; 
0x0000000000151bb9: loope 0x151b3f; ret 0xc2a; 
0x00000000001544b9: loope 0x154531; stosb byte ptr [rdi], al; ret; 
0x000000000015810e: loope 0x15814f; cmp ch, ch; ret; 
0x000000000015818e: loope 0x1581cf; ret; 
0x0000000000015a61: loope 0x15a40; fstpnce st(1), st(0); stc; ret; 
0x0000000000015aac: loope 0x15a8b; fstpnce st(1), st(0); stc; ret; 
0x0000000000015af5: loope 0x15ad4; fstpnce st(1), st(0); stc; ret; 
0x0000000000015b3c: loope 0x15b1b; fstpnce st(1), st(0); stc; ret; 
0x000000000015ba5c: loope 0x15ba6c; ret; 
0x000000000015d33e: loope 0x15d37f; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000015d376: loope 0x15d3b7; ja 0x15d3a5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x0000000000160ebe: loope 0x160eff; in eax, 0xe4; ret 0x25e7; 
0x0000000000164779: loope 0x1647f1; stosb byte ptr [rdi], al; ret; 
0x00000000001683ce: loope 0x16840f; cmp ch, ch; ret; 
0x000000000016844e: loope 0x16848f; ret; 
0x000000000016bd1c: loope 0x16bd2c; ret; 
0x0000000000016c52: loope 0x16c2f; sub al, 0x11; fsubrp st(1); faddp st(1); ret; 
0x000000000016d5fe: loope 0x16d63f; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000016d636: loope 0x16d677; ja 0x16d665; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000016fba6: loope 0x16fbe7; ret 0xa67; 
0x0000000000017038: loope 0x170ae; or eax, 0x1f0f05eb; add ch, bl; fpatan; ret; 
0x0000000000174a61: loope 0x174a37; cmp eax, 0xbf65873c; ret; 
0x0000000000174c2e: loope 0x174c6b; mov eax, 0xffecb9b3; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000175270: loope 0x175222; leave; jae 0x175243; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000178559: loope 0x1785d1; stosb byte ptr [rdi], al; ret; 
0x000000000017c1ae: loope 0x17c1ef; cmp ch, ch; ret; 
0x000000000017c22e: loope 0x17c26f; ret; 
0x0000000000017c9d: loope 0x17c7d; ret 0xe1de; 
0x000000000017fafc: loope 0x17fb0c; ret; 
0x00000000001813de: loope 0x18141f; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x0000000000181416: loope 0x181457; ja 0x181445; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000182d8: loope 0x182da; or byte ptr [rcx], 0xcf; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001832f9: loope 0x183371; stosb byte ptr [rdi], al; ret; 
0x0000000000186f4e: loope 0x186f8f; cmp ch, ch; ret; 
0x0000000000186fce: loope 0x18700f; ret; 
0x00000000000186cf: loope 0x18737; test ebx, ebx; jns 0x186d7; fchs; pop rbx; ret; 
0x0000000000018741: loope 0x1879e; ret; 
0x000000000018a89c: loope 0x18a8ac; ret; 
0x0000000000018ab5: loope 0x18a94; fstpnce st(1), st(0); stc; ret; 
0x0000000000018afc: loope 0x18adb; fstpnce st(1), st(0); stc; ret; 
0x000000000018c17e: loope 0x18c1bf; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000018c1b6: loope 0x18c1f7; ja 0x18c1e5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018e726: loope 0x18e767; ret 0xa67; 
0x0000000000019011: loope 0x18ff1; ret 0xc9d9; 
0x0000000000190ba4: loope 0x190b76; out dx, eax; call qword ptr [rax]; 
0x0000000000198371: loope 0x198361; jmp qword ptr [rdx]; 
0x000000000019aef8: loope 0x19aefb; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx], ah; add byte ptr [rax], al; ret 1; 
0x000000000001a380: loope 0x1a35b; ret; 
0x000000000001ae18: loope 0x1adf5; jl 0x1ae40; fcomp st(1); ret 0xc5d8; 
0x000000000001ae50: loope 0x1ae2a; ret; 
0x000000000001c4d7: loope 0x1c4b2; ret; 
0x000000000001d7dd: loope 0x1d7b8; ret 0xe1d9; 
0x000000000002695a: loope 0x2695b; jmp qword ptr [rsi + 0xf]; 
0x00000000000321d4: loope 0x321f6; or r9, rax; mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000034500: loope 0x34501; jmp qword ptr [rsi + 0xf]; 
0x000000000003d139: loope 0x3d143; add dl, dh; divps xmm0, xmm1; ret; 
0x000000000004d94b: loope 0x4d954; add bh, dh; fmul dword ptr [rdi]; push rdi; retf 0x570f; ret 0xff3; 
0x0000000000066209: loope 0x6620a; jmp qword ptr [rsi + 0xf]; 
0x0000000000066c7b: loope 0x66c7c; jmp qword ptr [rsi + 0xf]; 
0x0000000000072d9b: loope 0x72e07; add eax, 0xc0854800; setne al; movzx eax, al; add rsp, 0x28; ret; 
0x000000000007b440: loope 0x7b43f; jmp qword ptr [rsi + 0xf]; 
0x0000000000085ed3: loope 0x85f45; xor dword ptr [rax], eax; mov dword ptr fs:[rax], edi; ret; 
0x000000000008679c: loope 0x867dd; movq rax, xmm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000086805: loope 0x86826; and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x000000000008bf58: loope 0x8bef3; vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x000000000008ce62: loope 0x8ce28; jns 0x8ce95; fmul qword ptr [rdi]; xchg byte ptr [rdi + rdx + 0x41c40000], al; jnp 0x8cece; ret 0x3bc5; 
0x000000000008e582: loope 0x8e549; ret; 
0x000000000008e744: loope 0x8e70b; jnp 0x8e758; xor r13b, al; ret; 
0x000000000008e7c9: loope 0x8e790; and dword ptr [rcx + rbx*8 - 0x3b], edx; jnp 0x8e7e1; push rcx; and ch, al; ret; 
0x0000000000090907: loope 0x908cd; fstp dword ptr [rbp + 0x28f9c5e2]; out 0xc4, eax; ret 0x99a9; 
0x0000000000090a5f: loope 0x90a26; cmp ebx, dword ptr [rax + 4]; ret 0xc2c4; 
0x0000000000092dab: loope 0x92dac; jmp qword ptr [rsi - 0x70]; 
0x0000000000093746: loope 0x936e5; ret 0xe2c4; 
0x00000000000950a4: loope 0x950a5; jmp qword ptr [rsi + 0xf]; 
0x0000000000095970: loope 0x95937; xor ebx, dword ptr [rcx + 0xc]; and al, 0xc4; ret 0x99b1; 
0x0000000000099233: loope 0x991f9; ret 0x99b1; 
0x00000000000997c3: loope 0x99789; ret 0x99b1; 
0x000000000009a450: loope 0x9a44d; sub al, 4; ret 0x894c; 
0x000000000009c066: loope 0x9c06a; add bl, dh; ret; 
0x000000000009c7cb: loope 0x9c837; or al, byte ptr [rax]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c890: loope 0x9c83b; add eax, 0xa6691; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c899: loope 0x9c844; add eax, 0xa6a10; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c8a2: loope 0x9c84d; add eax, 0x2ea17; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c971: loope 0x9c92c; rol ebp, 1; sti; pop rcx; ret 0xfbc5; 
0x000000000009ce51: loope 0x9ce67; rol ch, 0xf9; pop rcx; ret 0xf9c5; 
0x000000000009cf4b: loope 0x9cee5; ret; 
0x000000000009cf71: loope 0x9cf87; rol ebp, 0xf9; pop rcx; ret 0xf9c5; 
0x00000000000a0b32: loope 0xa0b1d; ret; 
0x00000000000a1f74: loope 0xa1fe1; ret 0xc500; 
0x00000000000a22ca: loope 0xa2337; ret 0xc500; 
0x00000000000a3148: loope 0xa310e; jns 0xa317b; fmul qword ptr [rdi]; xchg byte ptr [rax - 0x3bffffe6], dl; jnp 0xa31b4; ret 0x3bc5; 
0x00000000000a3cda: loope 0xa3ca0; ret; 
0x00000000000a4b54: loope 0xa4b1b; ret; 
0x00000000000a4d36: loope 0xa4cfd; jnp 0xa4d4a; xor r13b, al; ret; 
0x00000000000a4db9: loope 0xa4d80; and dword ptr [rcx + rbx*8 - 0x3b], edx; jnp 0xa4dd1; push rcx; and ch, al; ret; 
0x00000000000a5ded: loope 0xa5e5a; ret; 
0x00000000000a7644: loope 0xa76b1; ret 0xc400; 
0x00000000000a7821: loope 0xa788e; add eax, 0x54fff; add ch, 0x3b; pop rcx; ret; 
0x00000000000a784f: loope 0xa78bc; rcl dword ptr [rax + 0x585bc1c4]; ret 0x5bc5; 
0x00000000000a7d15: loope 0xa7d82; ret 0xc400; 
0x00000000000a93df: loope 0xa93e0; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ab6ab: loope 0xab6ac; jmp qword ptr [rsi - 0x70]; 
0x00000000000ab6c4: loope 0xab6c5; jmp qword ptr [rsi + 0xf]; 
0x00000000000af525: loope 0xaf596; ret 0xc530; 
0x00000000000af847: loope 0xaf80e; jnp 0xaf8a4; fld st(4); ret; 
0x00000000000afa85: loope 0xafaf6; ret 0xc530; 
0x00000000000afda7: loope 0xafd6e; jnp 0xafe04; fld st(4); ret; 
0x00000000000b0a40: loope 0xb0a3d; sub al, 4; ret 0x894c; 
0x00000000000bcfde: loope 0xbcfa5; ret; 
0x00000000000bd18b: loope 0xbd18d; add ch, al; jns 0xbd1ba; ret; 
0x00000000000bfe53: loope 0xbfe54; jmp qword ptr [rsi + 0x2e]; 
0x000000000000c5da: loope 0xc5ba; ret 0xccd9; 
0x000000000000c600: loope 0xc5e0; ret 0xccd9; 
0x00000000000c5e7b: loope 0xc5e66; ret; 
0x000000000000c622: loope 0xc602; ret 0xccd9; 
0x000000000000c646: loope 0xc626; ret 0xccd9; 
0x000000000000c802: loope 0xc7e2; ret 0xcad9; 
0x000000000000c898: loope 0xc878; ret 0xccd9; 
0x00000000000c8b96: loope 0xc8b97; jg 0xc8b9a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000000d1fbe: loope 0xd1fff; in eax, 0xe4; ret 0x25e7; 
0x00000000000d5b59: loope 0xd5bd1; stosb byte ptr [rdi], al; ret; 
0x00000000000d97ae: loope 0xd97ef; cmp ch, ch; ret; 
0x00000000000d982e: loope 0xd986f; ret; 
0x00000000000dd0fc: loope 0xdd10c; ret; 
0x00000000000de9de: loope 0xdea1f; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x00000000000dea16: loope 0xdea57; ja 0xdea45; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000e41c1: loope 0xe4197; cmp eax, 0xbf65873c; ret; 
0x00000000000e438e: loope 0xe43cb; mov eax, 0xffecb9b3; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x00000000000e49d0: loope 0xe4982; leave; jae 0xe49a3; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x000000000000e4ec: loope 0xe554; ucomiss xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x00000000000e9abb: loope 0xe9a44; dec dword ptr [rsi]; mov edi, 0xf0000000; ret; 
0x00000000000e9b6b: loope 0xe9b3f; call qword ptr [rdx]; 
0x00000000000e9c2b: loope 0xe9bea; call qword ptr [rsi]; 
0x000000000000ee6c: loope 0xeed4; ucomiss xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x00000000000ef3d9: loope 0xef35f; ret 0xc2a; 
0x000000000000f0dc: loope 0xf144; ucomiss xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f183: loope 0xf1eb; ucomiss xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x00000000000f1ff9: loope 0xf2071; stosb byte ptr [rdi], al; ret; 
0x00000000000f5c4e: loope 0xf5c8f; cmp ch, ch; ret; 
0x00000000000f5cce: loope 0xf5d0f; ret; 
0x00000000000f959c: loope 0xf95ac; ret; 
0x00000000000fae7e: loope 0xfaebf; movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x00000000000faeb6: loope 0xfaef7; ja 0xfaee5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000fd986: loope 0xfd9c7; ret 0xa67; 
0x0000000000049939: maxps xmm0, xmm1; ret; 
0x0000000000049938: maxsd xmm0, xmm1; ret; 
0x00000000000570b0: maxss xmm0, xmm1; ret; 
0x00000000000499d1: minps xmm0, xmm1; ret; 
0x00000000000499d0: minsd xmm0, xmm1; ret; 
0x0000000000057150: minss xmm0, xmm1; ret; 
0x0000000000031b5a: mov ah, 0x36; add dl, dh; movups xmm0, xmmword ptr [rip + 0xae513]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000010f7b4: mov ah, 0x37; ret 0xbd86; 
0x00000000000e985e: mov ah, 0x3c; idiv byte ptr [rdi + 0xd]; add dh, ch; jmp rdi; 
0x00000000000dc0de: mov ah, 0x3f; ret; 
0x00000000000d4844: mov ah, 0x40; ret 0x7940; 
0x0000000000095219: mov ah, 0x41; adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab815: mov ah, 0x41; adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x00000000000d8665: mov ah, 0x53; cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x0000000000196f44: mov ah, 0x5f; add byte ptr [rax], al; pop rax; fsubr st(5); jmp qword ptr [rbx + 1]; 
0x000000000010e372: mov ah, 0x60; jns 0x10e38b; mov al, 0xed; fbld tbyte ptr [rdi - 0xa02eebc]; add eax, 0x5f98c940; ret; 
0x0000000000012e0d: mov ah, 0x66; cmp eax, 0xc67f3fbb; fld1; add rsp, 0x18; ret; 
0x00000000001909e0: mov ah, 0x88; add byte ptr [rax], al; js 0x190a0d; out dx, eax; jmp rsp; 
0x0000000000032018: mov ah, 0x92; or dword ptr [rax], eax; ret; 
0x000000000019a344: mov ah, 0x93; add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000190d50: mov ah, 0x9e; add byte ptr [rax], al; cmp byte ptr [rdi - 0xf], bl; jmp rax; 
0x00000000000fd3ca: mov ah, 0x9f; pop rsi; ret 0x3fd7; 
0x00000000000d8633: mov ah, 0xa1; sbb dword ptr [rbp + 0x3c], esi; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x0000000000191b44: mov ah, 0xb; add byte ptr [rax], al; cwde; shl edi, cl; call rax; 
0x000000000012851e: mov ah, 0xbf; jb 0x128549; ret; 
0x00000000001388be: mov ah, 0xbf; jb 0x1388e9; ret; 
0x0000000000156d3e: mov ah, 0xbf; jb 0x156d69; ret; 
0x0000000000166ffe: mov ah, 0xbf; jb 0x167029; ret; 
0x000000000017adde: mov ah, 0xbf; jb 0x17ae09; ret; 
0x0000000000185b7e: mov ah, 0xbf; jb 0x185ba9; ret; 
0x00000000000d83de: mov ah, 0xbf; jb 0xd8409; ret; 
0x00000000000f487e: mov ah, 0xbf; jb 0xf48a9; ret; 
0x00000000000943fd: mov ah, 0xc1; jnp 0x9445a; ret 0xbbc5; 
0x0000000000094fc1: mov ah, 0xc1; jnp 0x9501e; ret 0xbbc5; 
0x00000000000b40d5: mov ah, 0xc1; jnp 0xb4132; ret 0x23c5; 
0x00000000000b9a94: mov ah, 0xc1; jnp 0xb9af1; ret; 
0x00000000000bea99: mov ah, 0xc1; jnp 0xbeafa; ret 0xfbc5; 
0x0000000000114684: mov ah, 0xc5; mov ecx, 0x3d9ad0e; ret; 
0x00000000000ecced: mov ah, 0xd2; add byte ptr ds:[rax], ah; cdq; movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x00000000000fd0d4: mov ah, 0xdd; or eax, 0x60278f40; or al, 0x86; mov edx, 0x42c1bbdc; idiv di; call rax; 
0x0000000000195631: mov ah, 0xeb; jmp qword ptr [rbp]; 
0x00000000001003fc: mov ah, 0xf1; iretd; ret 0x8ecf; 
0x00000000000e8ee1: mov ah, 0xfe; insd dword ptr [rdi], dx; ret 0xb440; 
0x00000000000c9989: mov ah, 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x30; pop rbx; ret; 
0x0000000000073a44: mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000009fe6e: mov ah, 2; add ch, al; jns 0x9fe9c; ret; 
0x000000000005069f: mov ah, 7; add byte ptr [rbx + 0xf], bl; sub cl, al; ret; 
0x0000000000049242: mov ah, bl; or dword ptr [rax], eax; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000001c0c: mov ah, byte ptr [rsi + 0x6d]; jne 0x417cb2ca; ret; 
0x00000000000d6bdd: mov ah, cl; mov edi, 0x7604b95a; ret; 
0x00000000000e8c8c: mov ah, dh; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x00000000000fdfbd: mov ah, dl; cmp eax, dword ptr [rbx]; ret 0x498; 
0x000000000001498a: mov al, 0; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d8809: mov al, 0x13; sahf; movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x00000000000d4a92: mov al, 0x15; in eax, 0x77; and byte ptr [rax + 0x66], al; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d6044: mov al, 0x1e; xchg dword ptr [rsp + rbx*2], edi; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x00000000000df5f3: mov al, 0x35; rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x0000000000197430: mov al, 0x3c; out dx, al; call rsi; 
0x00000000000d53ee: mov al, 0x3f; ret 0xf2c5; 
0x00000000000dd5e6: mov al, 0x3f; ret; 
0x00000000000ebe91: mov al, 0x4e; mov al, 0x66; call rdx; 
0x0000000000045eac: mov al, 0x59; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000045dac: mov al, 0x5a; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000cc952: mov al, 0x5b; ret 0xd832; 
0x0000000000044fdc: mov al, 0x62; or byte ptr [rax], al; ret; 
0x00000000000ebe93: mov al, 0x66; call rdx; 
0x0000000000197840: mov al, 0x68; add byte ptr [rax], al; insb byte ptr [rdi], dx; pop rcx; out dx, al; call qword ptr [rax]; 
0x0000000000190458: mov al, 0x69; add byte ptr [rax], al; or byte ptr [rdx - 0x14], bh; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x000000000011251d: mov al, 0x76; cmp al, 0x12; ret; 
0x00000000001906d0: mov al, 0x78; add byte ptr [rax], al; or byte ptr [rax], bh; out dx, al; jmp rax; 
0x0000000000108c85: mov al, 0x7f; cli; ret; 
0x00000000000dedd9: mov al, 0x83; ret; 
0x000000000005b1b6: mov al, 0xa; add al, ch; ret 0x69c; 
0x000000000005b2b5: mov al, 0xa; add al, ch; ret; 
0x000000000002c4e9: mov al, 0xb; add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x9edbc; divsd xmm0, xmm1; ret; 
0x0000000000117088: mov al, 0xbf; jp 0x1170ee; ret 0x2f24; 
0x0000000000145a68: mov al, 0xbf; jp 0x145ace; ret 0x2f24; 
0x00000000001739a8: mov al, 0xbf; jp 0x173a0e; ret 0x2f24; 
0x00000000000e26a8: mov al, 0xbf; jp 0xe270e; ret 0x2f24; 
0x00000000000a6462: mov al, 0xc4; ret; 
0x00000000000aba5a: mov al, 0xc5; and ebx, dword ptr [rcx + 0x1c]; and al, 0xc4; ret; 
0x00000000000a6ee7: mov al, 0xc5; sub ebx, dword ptr [rsp + rdx*8 - 0x3c]; ret; 
0x0000000000118991: mov al, 0xc9; jae 0x118963; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000147331: mov al, 0xc9; jae 0x147303; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x0000000000175271: mov al, 0xc9; jae 0x175243; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e49d1: mov al, 0xc9; jae 0xe49a3; add dword ptr [rbp - 0x41], 0x61414697; ret 0xdda0; 
0x00000000000e83b8: mov al, 0xcf; adc eax, 0xbd2092e2; out dx, eax; sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x000000000001d4af: mov al, 0xdb; insd dword ptr [rdi], dx; movabs al, byte ptr [0x24b840f906ddb]; add dh, bl; ret 0x6ddb; 
0x0000000000197070: mov al, 0xe3; in eax, dx; call qword ptr [rcx]; 
0x000000000010e376: mov al, 0xed; fbld tbyte ptr [rdi - 0xa02eebc]; add eax, 0x5f98c940; ret; 
0x000000000009b6d9: mov al, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000009b6b5: mov al, 1; movss dword ptr [rsi], xmm0; ret; 
0x00000000000a1860: mov al, 5; add ah, al; ret; 
0x0000000000050109: mov al, 7; add bl, dh; subps xmm0, xmm1; ret; 
0x000000000007a241: mov al, 8; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000703bc: mov al, ah; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000007c45d: mov al, byte ptr [rax + rax]; add rsp, 0x28; ret; 
0x0000000000199a0d: mov al, byte ptr [rax]; add al, al; outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x0000000000190a19: mov al, byte ptr [rax]; add byte ptr [rax + 0x37], bl; out dx, eax; call qword ptr [rax]; 
0x000000000004ff10: mov al, byte ptr [rbx + 1]; add byte ptr [rax], al; jne 0x50058; movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x00000000000fd2dc: mov al, byte ptr [rdi - 0x31]; cmp ecx, ecx; xchg eax, esi; idiv edi; call rsp; 
0x00000000000c2a38: mov al, byte ptr [rip + 0x3b41c400]; pop rax; ret 0x7bc5; 
0x00000000000f11ec: mov bh, 0; xor edi, dword ptr [rdi]; add al, dl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000001a0fd: mov bh, 0x2e; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000d9500: mov bh, 0x3f; add dword ptr [rax], eax; movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x0000000000058bb5: mov bh, 0x3f; jg 0x58c30; movdqa xmm0, xmmword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x00000000000fcb4e: mov bh, 0x3f; jmp qword ptr [rdx - 0x1b]; 
0x00000000000edc12: mov bh, 0x58; ret 0x9b5c; 
0x00000000000eed4a: mov bh, 0x6c; ret 0x227e; 
0x00000000000d8ae0: mov bh, 0x87; sbb eax, 0x1569aa83; cmp al, 0x36; mov esp, 0xdabe0f10; ret; 
0x00000000000cdc7c: mov bh, 0x95; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x00000000000dc152: mov bh, 0xb4; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x00000000000d52ee: mov bh, 0xbf; cmp ebx, dword ptr [rdx + 0x71c6e512]; mov esp, 0x3f76033f; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x0000000000105a4b: mov bh, 0xc; ret; 
0x0000000000108afc: mov bh, 0xcb; and al, byte ptr [rax - 0x71]; ret; 
0x0000000000107d2a: mov bh, 0xd8; mov ch, byte ptr [rsi]; add al, 0x40; ret; 
0x0000000000195789: mov bh, 0xeb; call qword ptr [rdx]; 
0x0000000000195759: mov bh, 0xeb; jmp qword ptr [rcx]; 
0x00000000000e46ab: mov bh, 0xf5; ret 0xbbf1; 
0x0000000000080164: mov bh, 0xf8; jmp qword ptr [rsi + 0xf]; 
0x00000000000cec37: mov bh, 0xfe; mov edi, 0; add byte ptr [rax], al; ret 0x1ba9; 
0x00000000000737f2: mov bh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000000e0f8: mov bh, 1; add byte ptr [rax], al; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000e0e29: mov bh, 3; ret; 
0x00000000000b4a4d: mov bh, 7; add ch, al; ret; 
0x000000000000c371: mov bh, 7; and esi, 0x3d; and eax, esi; ret; 
0x00000000000d9cb2: mov bh, al; cmp eax, 0xec3c8d6d; mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x0000000000052de3: mov bh, bl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000113afe: mov bh, byte ptr [rdi]; out 0x2e, eax; or esi, esp; ret; 
0x00000000000cdc74: mov bh, byte ptr [rsi - 0x15]; add byte ptr [rsi], dh; mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x0000000000048b55: mov bh, dh; add al, 0; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000100c7b: mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x00000000001054e6: mov bl, 0x2a; ret 0x2bb6; 
0x00000000000e33aa: mov bl, 0x33; ret; 
0x0000000000051bc0: mov bl, 0x34; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000dcc8e: mov bl, 0x3f; ret 0x71ac; 
0x00000000000f0c94: mov bl, 0x53; sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x0000000000017f93: mov bl, 0x68; or eax, dword ptr [rax]; fyl2x; ret; 
0x00000000000ed5eb: mov bl, 0x82; ret; 
0x000000000010d317: mov bl, 0x91; push -0x24; add ebp, esi; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x00000000000d7943: mov bl, 0xab; ret 0x3c63; 
0x0000000000130914: mov bl, 0xb8; jne 0x1308d7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x000000000015f054: mov bl, 0xb8; jne 0x15f017; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000d0154: mov bl, 0xb8; jne 0xd0117; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000e4391: mov bl, 0xb9; in al, dx; jmp rsp; 
0x0000000000028668: mov bl, 0xb; add dl, dh; divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000e498e: mov bl, 0xbb; pop rsp; and eax, 0x822883a1; mov r15d, 0x8152093a; ret; 
0x00000000000e7404: mov bl, 0xbe; out 0x3f, eax; ret; 
0x00000000000cd468: mov bl, 0xe7; ret; 
0x00000000000d7d84: mov bl, 0xf3; mov ch, 0xbf; ret 0x455c; 
0x0000000000105ea0: mov bl, 0xf4; jnp 0x105ebf; pop rdx; rcr dword ptr [rdi], 0xd9; ret 0x6a2b; 
0x0000000000070d09: mov bl, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000073c49: mov bl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000affa7: mov bl, 1; add ch, al; stc; push rdi; ret 0xf1c5; 
0x0000000000052b2a: mov bl, 2; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x0000000000079ad3: mov bl, 4; add al, ch; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000091525: mov bl, 6; add ch, al; ret; 
0x000000000007239a: mov bl, 9; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xbae8; 
0x00000000000fc61c: mov bx, 0x1c3f; fst qword ptr [rcx + 0x6b]; ret 0x8bed; 
0x0000000000042690: mov byte ptr [r10 + rax*8 + 0xf661a74], 0x2e; ret; 
0x00000000000e46a8: mov byte ptr [rax + 0xa], al; mov bh, 0xf5; ret 0xbbf1; 
0x000000000007c502: mov byte ptr [rax + r8], 0x48; test eax, eax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007cdad: mov byte ptr [rax + rax], 0x48; test eax, eax; jg 0x7cdc0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007c503: mov byte ptr [rax + rax], 0x48; test eax, eax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000037453: mov byte ptr [rax + rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x000000000018ff24: mov byte ptr [rax - 0x15], dl; call rax; 
0x000000000003cb9b: mov byte ptr [rax - 0xe000000], cl; addps xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x00000000001909d9: mov byte ptr [rax], al; add byte ptr [rax + 0x23], bl; out dx, eax; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x00000000001909e1: mov byte ptr [rax], al; add byte ptr [rax + 0x27], bh; out dx, eax; jmp rsp; 
0x000000000003cb9c: mov byte ptr [rax], al; add byte ptr [rax], al; addsd xmm1, xmm2; movapd xmm0, xmm1; pop rbx; ret; 
0x000000000006959d: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000018fe48: mov byte ptr [rax], dl; add byte ptr [rax], ch; cmp ebx, ebp; call rax; 
0x00000000000e3303: mov byte ptr [rbp + riz - 0x3e45c00c], ah; in al, 0xf9; ret; 
0x000000000018f86c: mov byte ptr [rbp - 0x18], bl; call rax; 
0x0000000000015e2c: mov byte ptr [rbx + rcx], bl; fchs; ret; 
0x00000000000e4db3: mov byte ptr [rbx - 1], cl; xor bh, byte ptr [rdi]; ret; 
0x00000000000d58ca: mov byte ptr [rbx], bh; shr dword ptr [rax - 0x46], 0xbf; adc al, 0x93; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x00000000001900e0: mov byte ptr [rbx], bl; add byte ptr [rax], bl; ret; 
0x0000000000013b7d: mov byte ptr [rbx], cl; add al, bl; ret 0xcad8; 
0x0000000000013ba5: mov byte ptr [rbx], cl; add dh, bl; ret 0xf1de; 
0x0000000000001796: mov byte ptr [rbx], cl; ret 0x7358; 
0x0000000000190e24: mov byte ptr [rbx], dl; bnd call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x0000000000199918: mov byte ptr [rcx + 0x61040000], cl; int1; call qword ptr [rbp + 5]; 
0x0000000000194c78: mov byte ptr [rcx - 0x15], cl; jmp qword ptr [rdi]; 
0x0000000000018ef4: mov byte ptr [rcx - 0x7f], 0xf8; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x00000000000e8c89: mov byte ptr [rcx], ch; sub ecx, dword ptr [rax - 0x6643070c]; mov ebx, dword ptr [rdi + 0x1a]; ret 0x2e01; 
0x00000000000e8c88: mov byte ptr [rcx], r13b; sub ecx, dword ptr [rax - 0x6643070c]; mov ebx, dword ptr [rdi + 0x1a]; ret 0x2e01; 
0x00000000000d7465: mov byte ptr [rdi - 0x44], bl; sbb al, 0x5c; sti; ret; 
0x0000000000195d98: mov byte ptr [rdi], cl; in al, dx; call qword ptr [rsi]; 
0x00000000000d0d7c: mov byte ptr [rdx + 0xbf23fce], al; and r8b, byte ptr [r9 + 0x30]; ret; 
0x0000000000042691: mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x00000000000ec209: mov byte ptr [rdx - 0x1d], dh; div esp; fnstcw word ptr [rsi + 0xeb9e000]; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x0000000000103b94: mov byte ptr [rdx - 0x2014567e], ch; call rax; 
0x0000000000108c80: mov byte ptr [rdx - 0x4f475dd0], dh; jg 0x108c82; ret; 
0x0000000000108c7f: mov byte ptr [rdx - 0x4f475dd0], sil; jg 0x108c82; ret; 
0x00000000000d0860: mov byte ptr [rdx], 0x67; ret 0x1769; 
0x0000000000190e3c: mov byte ptr [rdx], bl; inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x00000000000cd480: mov byte ptr [rdx], dl; pushfq; add byte ptr [rbx + 0x2e007b20], ch; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000000ea6f3: mov byte ptr [rip + 0x2f3f341f], dh; cld; ret; 
0x000000000000bcf8: mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x00000000000dde5b: mov byte ptr [rsi + 0x78], dh; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000d7d34: mov byte ptr [rsi + rsi*2 - 0x138572c4], bl; out 0x7b, eax; ret; 
0x00000000000d4a99: mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000018f8c4: mov byte ptr [rsi - 0x18], ch; call qword ptr [rax + 0x32]; 
0x00000000000e1829: mov byte ptr [rsi - 0x50], ch; ret; 
0x0000000000031ab5: mov byte ptr [rsi], ah; add al, byte ptr [rax]; add bl, dh; ret; 
0x00000000001901d4: mov byte ptr [rsi], al; in al, dx; call qword ptr [rax]; 
0x000000000006a82d: mov byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000001060e4: mov ch, 0x16; xchg ecx, eax; cmc; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x00000000000ccd53: mov ch, 0x1a; ret; 
0x00000000000948c6: mov ch, 0x39; push rsp; ret 0x41c4; 
0x00000000000c040a: mov ch, 0x39; push rsp; ret; 
0x00000000000babee: mov ch, 0x3b; pop rsp; ret; 
0x00000000000ba217: mov ch, 0x3b; pop rsp; rol ah, 0xc1; jnp 0xba279; ret 0x3bc5; 
0x000000000012c41e: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7be: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac3e: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016aefe: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ecde: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a7e: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2de: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f877e: mov ch, 0x3f; adc r13, qword ptr [r14]; adc al, 0x54; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x00000000000dc55e: mov ch, 0x3f; in eax, dx; popfq; mov cl, 0xf5; scasd eax, dword ptr [rdi]; ret; 
0x000000000012fee6: mov ch, 0x3f; jge 0x12fe97; and al, 0xee; ret; 
0x0000000000140286: mov ch, 0x3f; jge 0x140237; and al, 0xee; ret; 
0x000000000015e706: mov ch, 0x3f; jge 0x15e6b7; and al, 0xee; ret; 
0x000000000016e9c6: mov ch, 0x3f; jge 0x16e977; and al, 0xee; ret; 
0x00000000001827a6: mov ch, 0x3f; jge 0x182757; and al, 0xee; ret; 
0x000000000018d546: mov ch, 0x3f; jge 0x18d4f7; and al, 0xee; ret; 
0x00000000000dfda6: mov ch, 0x3f; jge 0xdfd57; and al, 0xee; ret; 
0x00000000000fc246: mov ch, 0x3f; jge 0xfc1f7; and al, 0xee; ret; 
0x00000000000d6d16: mov ch, 0x3f; ret 0x5a22; 
0x00000000000e0046: mov ch, 0x3f; ret 0x95e6; 
0x00000000001125a2: mov ch, 0x5f; loope 0x11255f; int 0x3f; ret 0xcc6f; 
0x00000000000d6f09: mov ch, 0x6e; or eax, 0x3fa1e9bc; ret 0x4749; 
0x00000000000efeb8: mov ch, 0x78; ret; 
0x00000000000447ff: mov ch, 0x87; xor eax, 0xc76400; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000001c11: mov ch, 0x96; jl 0x1c56; ret; 
0x00000000000cd489: mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000000d99fe: mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e9e: mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b3e: mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ede: mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x000000000015835e: mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x000000000016861e: mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3fe: mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x000000000018719e: mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000de95e: mov ch, 0xbf; in eax, dx; retfq; cmp edi, edi; jmp rdx; 
0x00000000000d94fe: mov ch, 0xbf; mov bh, 0x3f; add dword ptr [rax], eax; movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x00000000000d7d86: mov ch, 0xbf; ret 0x455c; 
0x00000000000d564e: mov ch, 0xbf; ret; 
0x00000000000d68dd: mov ch, 0xce; mov edi, 0xa3ef610f; retf; retf 0xbc64; xchg ebp, eax; ret 0xc4e2; 
0x00000000000f0894: mov ch, 0xd4; sar dword ptr [rdi], 1; ret 0x97ba; 
0x0000000000092880: mov ch, 0xdb; ret 0x2c3; 
0x00000000000dd07c: mov ch, 0xdc; ret 0xfb3f; 
0x00000000001148b3: mov ch, 0xde; add al, 0x8f; jp 0x1148f4; cmpsd dword ptr [rsi], dword ptr [rdi]; jae 0x1148d7; ret; 
0x000000000007dabe: mov ch, 0xeb; mov ebp, eax; fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b977d: mov ch, 0xf9; push rsp; ret; 
0x0000000000107c6a: mov ch, 0xf; ret 0x37a; 
0x00000000000b1680: mov ch, 0xfb; pop rax; ret; 
0x00000000000b3765: mov ch, 0xfb; pop rcx; ret; 
0x000000000007b7d2: mov ch, 4; add al, ch; xchg esi, eax; in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000079d3f: mov ch, 8; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000a4bdc: mov ch, 8; add cl, ch; mov ebx, 0xc4ffffee; push r11; pop rax; ret 0x41c4; 
0x00000000001904c5: mov ch, ah; jmp qword ptr [rax + 0x6b]; 
0x00000000000e8f58: mov ch, ah; ret; 
0x000000000018f92d: mov ch, al; jmp qword ptr [rax + 0x35]; 
0x0000000000017692: mov ch, byte ptr [rbp + 0xb]; add al, bl; ret 0xcad8; 
0x0000000000107d2c: mov ch, byte ptr [rsi]; add al, 0x40; ret; 
0x00000000000cfbb4: mov cl, 0x32; idiv byte ptr [rdi]; ret 0x1bf3; 
0x0000000000051e20: mov cl, 0x34; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000010d2c3: mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x0000000000112306: mov cl, 0x3f; movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x00000000000e8f78: mov cl, 0x40; ret 0xf792; 
0x00000000001003fa: mov cl, 0x42; mov ah, 0xf1; iretd; ret 0x8ecf; 
0x00000000000e4534: mov cl, 0x46; pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x00000000000fc674: mov cl, 0x4c; pop rsp; ret 0xc69a; 
0x00000000000d0acb: mov cl, 0x5a; xchg ebp, eax; ret; 
0x00000000000abea9: mov cl, 0x6b; int 0x80; 
0x00000000000fe0fc: mov cl, 0x72; ret 0x28bb; 
0x00000000000a57fb: mov cl, 0x7b; jmp qword ptr [rax - 0x3b]; 
0x00000000000a57ef: mov cl, 0x7b; jmp rax; 
0x000000000011bcb0: mov cl, 0x8f; insd dword ptr [rdi], dx; ja 0x11bd2b; ret 0x3f41; 
0x000000000014a510: mov cl, 0x8f; insd dword ptr [rdi], dx; ja 0x14a58b; ret 0x3f41; 
0x00000000000e7d30: mov cl, 0x8f; insd dword ptr [rdi], dx; ja 0xe7dab; ret 0x3f41; 
0x000000000008b2dc: mov cl, 0x9d; ret 0x7bc5; 
0x00000000000d5bfc: mov cl, 0xb0; ret; 
0x00000000000de25e: mov cl, 0xbf; ret 0x34bb; 
0x00000000000dde99: mov cl, 0xdb; ret 0xcc23; 
0x0000000000191231: mov cl, 0xe7; jmp qword ptr [rcx]; 
0x0000000000191181: mov cl, 0xe7; jmp qword ptr [rdx]; 
0x00000000000dcd03: mov cl, 0xf1; ret; 
0x0000000000105b78: mov cl, 0xf4; shl ebx, 0x24; sbb eax, 0xcfc73fdd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x00000000000dc562: mov cl, 0xf5; scasd eax, dword ptr [rdi]; ret; 
0x00000000000edd49: mov cl, 0xfc; ret 0x5e0f; 
0x0000000000075c20: mov cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000008013d: mov cl, 4; add byte ptr [rsi + 0xf], ah; push rdi; ret 0xf66; 
0x00000000000e9e92: mov cl, 5; pop rsi; jmp qword ptr [rcx]; 
0x0000000000091706: mov cl, 6; add ch, al; fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x0000000000073017: mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000007c818: mov cl, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x3ce8; 
0x000000000007c78e: mov cl, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc6e8; 
0x000000000010bb48: mov cl, byte ptr [rax]; ret 0x45ea; 
0x00000000000cf914: mov cl, byte ptr [rbp - 0x7c]; call 0xdb932; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x8d1; 
0x00000000000138f1: mov cl, byte ptr [rbx]; add al, bl; ret 0xcad8; 
0x0000000000048d45: mov cl, byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xfffd6587; jmp qword ptr [rsi + 0xf]; 
0x000000000001fae2: mov cl, cl; or al, byte ptr [rax]; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000105614: mov cs, ebp; push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000dd0b1: mov cs, ecx; push -0x12; pop rcx; ret; 
0x0000000000100401: mov cs, esi; ret 0xbba; 
0x0000000000099b96: mov cs, word ptr [rax]; add dword ptr [rax], eax; add ch, al; stc; sub dl, al; ret; 
0x000000000008690e: mov cs, word ptr [rdi - 8]; jmp qword ptr [rsi + 0x2e]; 
0x000000000010b453: mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x0000000000113b56: mov cs, word ptr [rdx]; ret; 
0x00000000000e474b: mov dh, 0x20; sahf; fnstsw word ptr [rbx - 0x25b1c714]; pop rbp; ret; 
0x000000000004c896: mov dh, 0x3e; or eax, dword ptr [rax]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d4084: mov dh, 0x3e; pop rcx; int1; ret 0xad8c; 
0x00000000000d6c16: mov dh, 0x3f; pop rdi; ret; 
0x00000000000e5e06: mov dh, 0x3f; push 0x1b; ret 0x458e; 
0x00000000000c3ee6: mov dh, 0x79; hlt; jmp qword ptr [rsi + 0xf]; 
0x0000000000081ee6: mov dh, 0x99; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000f0c2b: mov dh, 0x9c; ret; 
0x00000000000e2c39: mov dh, 0xaf; xchg edi, eax; ret 0xf256; 
0x00000000000fd01e: mov dh, 0xbb; push rsp; ret; 
0x0000000000072da6: mov dh, 0xc0; add rsp, 0x28; ret; 
0x0000000000042f60: mov dh, 0xc0; ret; 
0x00000000001104e1: mov dh, 0xd7; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x00000000000e8942: mov dh, 0xe0; ret; 
0x00000000001934b9: mov dh, 0xe8; call qword ptr [rax]; 
0x000000000006d681: mov dh, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000eaa8a: mov dh, 0xfe; ret; 
0x00000000000017a7: mov dh, 0xff; call qword ptr [rdi - 0x71]; 
0x00000000000442be: mov dh, 1; add byte ptr [rax], al; neg rax; pop rbx; pop rbp; ret; 
0x000000000009b006: mov dh, 2; add eax, dword ptr [rax]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004eb05: mov dh, 7; add bl, dh; subps xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x00000000000cccf9: mov dh, ah; inc eax; mov dh, ah; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000cccfd: mov dh, ah; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000ccd01: mov dh, ah; jmp qword ptr [rax]; 
0x00000000000ccd11: mov dh, ah; jmp qword ptr [rsi]; 
0x0000000000092e24: mov dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000044560: mov dh, byte ptr [rip + 0xc76400]; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007dbc2: mov dh, byte ptr [rsi + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000cec36: mov dil, 0xfe; mov edi, 0; add byte ptr [rax], al; ret 0x1ba9; 
0x000000000003ff2a: mov dl, 0x22; or eax, 0x580ff200; ret; 
0x00000000000cff20: mov dl, 0x2e; call qword ptr [rdi]; 
0x00000000000db24b: mov dl, 0x2f; stc; sar byte ptr [rdi + 0x3e5d3d61], cl; mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000481ea: mov dl, 0x36; cld; jmp qword ptr [rsi - 0x70]; 
0x00000000001271d6: mov dl, 0x3f; js 0x12720b; ret 0x234a; 
0x0000000000137576: mov dl, 0x3f; js 0x1375ab; ret 0x234a; 
0x00000000001559f6: mov dl, 0x3f; js 0x155a2b; ret 0x234a; 
0x0000000000165cb6: mov dl, 0x3f; js 0x165ceb; ret 0x234a; 
0x0000000000179a96: mov dl, 0x3f; js 0x179acb; ret 0x234a; 
0x0000000000184836: mov dl, 0x3f; js 0x18486b; ret 0x234a; 
0x00000000000d7096: mov dl, 0x3f; js 0xd70cb; ret 0x234a; 
0x00000000000f3536: mov dl, 0x3f; js 0xf356b; ret 0x234a; 
0x00000000000454ea: mov dl, 0x63; cld; jmp qword ptr [rsi - 0x70]; 
0x00000000000e37fd: mov dl, 0x65; jle 0xe379d; ret; 
0x000000000004fe4a: mov dl, 0x6c; add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x00000000000cf576: mov dl, 0x85; ret 0x3f; 
0x00000000000cf556: mov dl, 0x85; ret 0xbf; 
0x00000000000d5df8: mov dl, 0xbb; xchg ebx, eax; pop rdi; push rsp; push rax; ret 0xc83f; 
0x000000000010ea92: mov dl, 0xbc; jb 0x10ea3b; ret 0x576; 
0x00000000000e28ea: mov dl, 0xc; pop rsi; mov esi, 0x38000000; sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x00000000000f0c08: mov dl, 0xd3; ret 0xf481; 
0x000000000010bed8: mov dl, 0xd4; and al, 0x2c; ret; 
0x00000000001955c9: mov dl, 0xeb; call rbx; 
0x0000000000190575: mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x0000000000050642: mov dl, 0xfb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000041a36: mov dl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000b008d: mov dl, 1; add ch, al; stc; push rdi; ret 0xf1c5; 
0x0000000000080047: mov dl, 4; add byte ptr [rsi + 0xf], ah; push rdi; ret 0xf66; 
0x00000000000724e8: mov dl, 9; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x6ce8; 
0x0000000000002505: mov dl, dh; mov esp, 0x14843efa; ret; 
0x00000000000d8d60: mov dl, dl; sbb al, bh; xchg esi, eax; ret 0x3c4b; 
0x000000000004ecc3: mov ds, eax; add dword ptr [rax], eax; add bl, dh; movups xmm0, xmmword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x0000000000049c47: mov ds, esp; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000c7aa2: mov ds, word ptr [rcx]; or byte ptr [rax], al; add byte ptr [rax + 9], cl; fmul dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000001df1c: mov ds, word ptr [rdi]; add al, byte ptr [rax]; add cl, bl; ret; 
0x00000000000cca82: mov ds, word ptr [rdi]; ret; 
0x0000000000105822: mov ds, word ptr [rdx]; ret; 
0x00000000000fc7ba: mov ds, word ptr [rip + 0x3fcc71c5]; push rdx; fist word ptr ds:[rdx]; int1; ret 0x9f3f; 
0x000000000007c433: mov dword ptr [rax + rax], 0x75c08548; sub eax, 0x446f0f66; and al, 0x10; add rsp, 0x28; ret; 
0x000000000007ccaa: mov dword ptr [rax + rax], 0x7ec08548; or ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x000000000007c52d: mov dword ptr [rax + rax], eax; add rsp, 0x28; ret; 
0x00000000000dbf33: mov dword ptr [rax - 0x35c37bfa], esp; and al, 0x54; ret; 
0x00000000000b952b: mov dword ptr [rax - 0x43afffd], eax; pop rcx; ret 0x7bc5; 
0x000000000007c5d4: mov dword ptr [rax], 0x21; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000009b2cf: mov dword ptr [rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009c8df: mov dword ptr [rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009cd4f: mov dword ptr [rax], 0x21; vsubss xmm1, xmm0, xmm0; vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000001b469: mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x000000000000ecff: mov dword ptr [rax], 0x22; add rsp, 0x18; ret; 
0x0000000000072d44: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x000000000004334c: mov dword ptr [rax], 0x22; add rsp, 0x28; ret; 
0x000000000007ceea: mov dword ptr [rax], 0x22; add rsp, 0x38; ret; 
0x000000000001a102: mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x00000000000207c2: mov dword ptr [rax], 0x22; ret; 
0x00000000000a57e1: mov dword ptr [rax], 0x597bc1c4; ret; 
0x0000000000074cf5: mov dword ptr [rax], 0x85480000; ror byte ptr [rdi], 0x95; ret 0xd284; 
0x000000000010d2b3: mov dword ptr [rax], 0xb1fbf3be; add dword ptr [rdx], 0x1a508451; adc byte ptr [rbp + 0x77], al; mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x00000000001909f9: mov dword ptr [rax], eax; add al, ch; sub ebp, edi; call rax; 
0x00000000001909f1: mov dword ptr [rax], eax; add al, cl; sub ch, bh; inc dword ptr [rax - 0x17ffff77]; sub ebp, edi; call rax; 
0x0000000000199955: mov dword ptr [rax], eax; add byte ptr [rax + 0x67], ch; int1; jmp qword ptr [rbx + 2]; 
0x0000000000199919: mov dword ptr [rax], eax; add byte ptr [rcx + riz*2], al; int1; call qword ptr [rbp + 5]; 
0x0000000000085ed8: mov dword ptr [rax], edi; ret; 
0x00000000000d5e4c: mov dword ptr [rax], esi; ret 0x6fbf; 
0x00000000000c580f: mov dword ptr [rbx], 0xfffbe6e9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000100210: mov dword ptr [rbx], eax; jmp qword ptr [rdi]; 
0x00000000000ddc63: mov dword ptr [rdi + 0x27], esi; ret 0x11bf; 
0x00000000000ea1ab: mov dword ptr [rdi + 0xbf2a3e], esp; add byte ptr [rax], al; ret 0x3f53; 
0x00000000000bb62b: mov dword ptr [rdi + 3], ebx; add ch, al; sti; pop rcx; ret 0xfbc5; 
0x0000000000080fd9: mov dword ptr [rdi + 8], 0; ret; 
0x000000000006999d: mov dword ptr [rdi + rdi*8 - 1], edx; jmp qword ptr [rsi + 0xf]; 
0x0000000000043296: mov dword ptr [rdi], ecx; ret; 
0x000000000001a03a: mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000051106: mov dword ptr [rdi], edx; ret; 
0x000000000000bdca: mov dword ptr [rdi], esi; jne 0xbdd5; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000044bb9: mov dword ptr [rdx + 0x5b000000], ebp; pop rbp; ret; 
0x0000000000020994: mov dword ptr [rdx], 0x21; divss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000050363: mov dword ptr [rdx], 0x22; movd xmm0, eax; ret; 
0x0000000000050250: mov dword ptr [rdx], 0x22; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x000000000005d9b6: mov dword ptr [rdx], ecx; add al, ch; ret 0x674; 
0x0000000000058c58: mov dword ptr [rdx], ecx; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x1ce8; 
0x0000000000069951: mov dword ptr [rip - 0x3b7cb800], 0x415d5b30; pop rsp; ret; 
0x00000000000e76e0: mov dword ptr [rsi + 0x1c7711a0], edx; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x0000000000052475: mov dword ptr [rsi + 0x5b000000], ebx; pop rbp; pop r12; ret; 
0x0000000000081d63: mov dword ptr [rsi + 8], 0; ret; 
0x00000000000805b9: mov dword ptr [rsi + rax*8 + 8], edx; pop rbx; ret; 
0x00000000000fe3c0: mov dword ptr [rsi + rcx + 0x63], edx; ret 0xc374; 
0x0000000000070409: mov dword ptr [rsi + rdi*8 - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000586dd: mov dword ptr [rsi], 0x44290f00; and al, 0x20; add rsp, 0x30; pop rbx; ret; 
0x000000000010c5d5: mov dword ptr [rsi], ebp; cmpsb byte ptr [rsi], byte ptr [rdi]; ror cl, 1; xchg edx, eax; ret 0x32be; 
0x0000000000019e85: mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000070153: mov dword ptr [rsp + 0x10], edx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006c1a0: mov dword ptr [rsp + 0x18], eax; movq xmm2, qword ptr [rsp]; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000006c0f7: mov dword ptr [rsp + 0x18], edi; movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x00000000000700f8: mov dword ptr [rsp + 8], eax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000044e3e: mov dword ptr [rsp + 8], eax; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000072bfe: mov dword ptr [rsp + 8], edx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb44: mov dword ptr [rsp + 8], edx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001b0be: mov dword ptr [rsp - 0x10], eax; fild qword ptr [rsp - 0x10]; ret; 
0x0000000000019f96: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000019f54: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019ee2: mov dword ptr [rsp - 0x10], eax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000c8ecb: mov dword ptr [rsp - 0x10], eax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000009baf6: mov dword ptr [rsp - 0x10], eax; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000001b1cc: mov dword ptr [rsp - 0x10], eax; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000001b230: mov dword ptr [rsp - 0x10], ecx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000018c10: mov dword ptr [rsp - 0x10], ecx; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af60: mov dword ptr [rsp - 0x10], ecx; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000182e2: mov dword ptr [rsp - 0x10], edi; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b331: mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x000000000001b178: mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000006ee62: mov dword ptr [rsp - 0x10], edx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000004d612: mov dword ptr [rsp - 0x10], edx; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000009c042: mov dword ptr [rsp - 0x10], edx; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000001b271: mov dword ptr [rsp - 0x10], edx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000018c0f: mov dword ptr [rsp - 0x10], r9d; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af5f: mov dword ptr [rsp - 0x10], r9d; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af65: mov dword ptr [rsp - 0x14], eax; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b26c: mov dword ptr [rsp - 0x14], ecx; mov word ptr [rsp - 0x10], dx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000018c15: mov dword ptr [rsp - 0x14], edx; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000018c14: mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af64: mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019f4b: mov dword ptr [rsp - 0x18], 0; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000180f3: mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; pop rbx; pop rbp; ret; 
0x0000000000018c19: mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000323c3: mov dword ptr [rsp - 0x18], eax; mov qword ptr [rsp - 0x20], rax; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000001af69: mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000074740: mov dword ptr [rsp - 0x18], edx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007466b: mov dword ptr [rsp - 0x18], esi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000323c8: mov dword ptr [rsp - 0x20], eax; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000032357: mov dword ptr [rsp - 0x20], edi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000007286c: mov dword ptr [rsp - 0x20], edx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000019b69: mov dword ptr [rsp - 0xc], eax; fldcw word ptr [rsp - 0xc]; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x000000000001b32d: mov dword ptr [rsp - 0xc], edx; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x000000000001b32c: mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x0000000000031a8a: mov dword ptr [rsp - 8], eax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000001b328: mov dword ptr [rsp - 8], ecx; mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x00000000000321da: mov dword ptr [rsp - 8], ecx; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000032217: mov dword ptr [rsp - 8], ecx; movsd xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f73: mov dword ptr [rsp - 8], esi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000001b327: mov dword ptr [rsp - 8], r9d; mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x00000000000c8d6f: mov dword ptr [rsp], eax; call 0xc4df0; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ff3: mov dword ptr [rsp], eax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8bc1: mov dword ptr [rsp], eax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000006eee1: mov dword ptr [rsp], edx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000070be8: mov dword ptr [rsp], esi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000007482c: mov dword ptr [rsp], esi; movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x000000000007c5d3: mov dword ptr fs:[rax], 0x21; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000009b2ce: mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009c8de: mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009cd4e: mov dword ptr fs:[rax], 0x21; vsubss xmm1, xmm0, xmm0; vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000001b468: mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000000ecfe: mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000072d43: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x000000000004334b: mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000007cee9: mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000001a101: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000207c1: mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ed7: mov dword ptr fs:[rax], edi; ret; 
0x0000000000020993: mov dword ptr fs:[rdx], 0x21; divss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000050362: mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000005024f: mov dword ptr fs:[rdx], 0x22; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000072740: mov eax, 0; add byte ptr [rax + 0x31480000], al; ret 0x8948; 
0x00000000000c7e73: mov eax, 0; add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x00000000000c8ca1: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000000c9969: mov eax, 0; add byte ptr [rax - 0x7ab80000], al; ret; 
0x00000000000720e9: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax - 0x14717], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000072438: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax - 0x8c17], al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000059a5d: mov eax, 0; add byte ptr [rax], al; and byte ptr [rip + 0x48d48949], 1; ret; 
0x000000000003d039: mov eax, 0; xchg bl, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000190210: mov eax, 0x18000060; adc ah, ch; call rax; 
0x0000000000199348: mov eax, 0x34000083; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x00000000000fcb4b: mov eax, 0x3fb70fe4; jmp qword ptr [rdx - 0x1b]; 
0x00000000000e2243: mov eax, 0x3fe7df9a; pop rbx; ret; 
0x00000000000cbc07: mov eax, 0x3fff; add byte ptr [rax], al; add byte ptr [rax], al; and dl, bh; out dx, al; ret 0x705f; 
0x00000000000d0cbb: mov eax, 0x423ff0a4; mov ecx, 0xd6a68f6b; ret; 
0x00000000000d8b50: mov eax, 0x51eb851e; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x00000000001006d6: mov eax, 0x59567e3a; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000060e1f: mov eax, 0x5b000000; pop rbp; ret; 
0x00000000000f0c25: mov eax, 0x64073fe7; mov sil, 0x9c; ret; 
0x000000000018fdb0: mov eax, 0x6800004d; xor edx, ebp; call rax; 
0x00000000001908d0: mov eax, 0x68000083; fsub st(6), st(0); jmp rax; 
0x0000000000190720: mov eax, 0x7800007a; push rax; out dx, al; call rax; 
0x0000000000050ec4: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000086a88: mov eax, 0x7fffff; sar eax, cl; not eax; and eax, edx; movd xmm0, eax; ret; 
0x0000000000016ae7: mov eax, 0x7fffffff; ret; 
0x0000000000016aef: mov eax, 0x80000000; ret; 
0x0000000000190b38: mov eax, 0x8000090; ja 0x190b2e; call rax; 
0x000000000007dbed: mov eax, 0x85480004; sar byte ptr [rdi + 0xb], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012f6a0: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa40: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015dec0: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e180: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f60: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd00: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df560: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba00: mov eax, 0x85adbb9; sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xfba4f; ret 0x3fe5; 
0x00000000000fc8ce: mov eax, 0xa454de39; ret 0x42d8; 
0x000000000018f7b0: mov eax, 0xa800002a; xor ch, al; jmp rax; 
0x00000000001906a0: mov eax, 0xa8000077; xor ebp, esi; call rax; 
0x0000000000075dde: mov eax, 0xaae80008; syscall; 
0x00000000000d0155: mov eax, 0xbf75; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000866a0: mov eax, 0xbf800000; cmovne edx, eax; movd xmm0, edx; ret; 
0x0000000000027e79: mov eax, 0xc148000b; call 0x101270c2; add al, 0xc2; ret; 
0x0000000000087f14: mov eax, 0xc5000433; ret; 
0x00000000000f0c05: mov eax, 0xd3b23fe7; ret 0xf481; 
0x000000000009102e: mov eax, 0xd3c50006; pop rsp; out 0xc4, eax; ret 0xb9c9; 
0x00000000000e81d9: mov eax, 0xd473fad0; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c159: mov eax, 0xd473fad0; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9b9: mov eax, 0xd473fad0; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000001126a5: mov eax, 0xd8073fd2; cdq; cmp byte ptr [rbp + 0x61], dl; cmp al, 0x83; int 0xa7; ret; 
0x0000000000190b9c: mov eax, 0xd8ffefcf; xchg edx, eax; add byte ptr [rax], al; loope 0x190b76; out dx, eax; call qword ptr [rax]; 
0x0000000000106bc7: mov eax, 0xdc6b02bc; xchg edi, eax; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x0000000000013ba4: mov eax, 0xde000b88; ret 0xf1de; 
0x00000000000d8b55: mov eax, 0xe2a53c5e; in al, dx; ret; 
0x0000000000112441: mov eax, 0xee285e4a; ret 0x583f; 
0x0000000000050f04: mov eax, 0xf000aff; push rsp; ret; 
0x000000000002fa31: mov eax, 0xf660009; push rsi; ret; 
0x00000000001902f8: mov eax, 0xf8000063; sbb al, 0xec; call rax; 
0x0000000000190ae8: mov eax, 0xf800008f; jae 0x190ade; call rax; 
0x00000000000e4390: mov eax, 0xffecb9b3; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000019e51: mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000001a134: mov eax, 0xffffffff; ret; 
0x000000000007c59d: mov eax, 1; je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x000000000001b22a: mov eax, 1; mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000745d0: mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000044069: mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000519c0: mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000004459e: mov eax, 1; shl rax, cl; sub rax, 1; ret; 
0x0000000000190a21: mov eax, dword ptr [rax]; add byte ptr [rax], cl; cmp bh, ch; jmp qword ptr [rax - 0x75]; 
0x0000000000199b29: mov eax, dword ptr [rax]; add byte ptr [rdx + rdi*2], al; int1; call rsi; 
0x000000000001c361: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x000000000006ab45: mov eax, dword ptr [rdi]; add byte ptr [rsi + 0xf], ah; out dx, eax; ret 0xf66; 
0x000000000009c17a: mov eax, dword ptr [rdx]; add byte ptr [rax], al; vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000009c8d8: mov eax, dword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c8: mov eax, dword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x0000000000085ee1: mov eax, dword ptr [rip + 0x3170d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ed1: mov eax, dword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x000000000007dd1e: mov eax, dword ptr [rip + 0x31f294]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000057011: mov eax, dword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000056e75: mov eax, dword ptr [rip + 0x34613d]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000056d5c: mov eax, dword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000005236d: mov eax, dword ptr [rip + 0x34ac45]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000520cd: mov eax, dword ptr [rip + 0x34aee5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000051191: mov eax, dword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004fdb9: mov eax, dword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000049895: mov eax, dword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x00000000000496f5: mov eax, dword ptr [rip + 0x3538bd]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000495e1: mov eax, dword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000044aad: mov eax, dword ptr [rip + 0x358505]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000447fd: mov eax, dword ptr [rip + 0x3587b5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000004455d: mov eax, dword ptr [rip + 0x358a55]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000442dd: mov eax, dword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000030d61: mov eax, dword ptr [rip + 0x36c269]; lea rdx, [rip + 0x55d62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x0000000000020acb: mov eax, dword ptr [rip + 0x37c4e7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000208ed: mov eax, dword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000207bb: mov eax, dword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001bb82: mov eax, dword ptr [rip + 0x381430]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b8e2: mov eax, dword ptr [rip + 0x3816d0]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b6a2: mov eax, dword ptr [rip + 0x381910]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001a0fb: mov eax, dword ptr [rip + 0x382eb7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000122b9: mov eax, dword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000ecf8: mov eax, dword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000bca9: mov eax, dword ptr [rip + 0x391339]; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000000bc58: mov eax, dword ptr [rip + 0x391352]; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000b7f5: mov eax, dword ptr [rip + 0x3917cd]; test rax, rax; je 0xb802; call rax; 
0x000000000008890a: mov eax, dword ptr [rsi]; add ah, al; shl dword ptr [rbx], 0x59; ret 0xf3c5; 
0x0000000000019e60: mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x000000000001a3b6: mov eax, dword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x0000000000049b89: mov eax, dword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x0000000000072861: mov eax, dword ptr [rsp - 0x10]; and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000016b54: mov eax, dword ptr [rsp - 0x10]; test eax, eax; jne 0x16c60; fstp st(0); fld1; ret; 
0x0000000000019b7a: mov eax, dword ptr [rsp - 0x18]; ret; 
0x0000000000016ae0: mov eax, dword ptr [rsp - 4]; ret; 
0x0000000000015e7f: mov eax, dword ptr [rsp - 8]; mov edx, dword ptr [rsp - 4]; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x0000000000019a8a: mov eax, dword ptr [rsp - 8]; ret; 
0x00000000000c8d77: mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c998d: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbx; ret; 
0x00000000000c9638: mov eax, dword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c8bca: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007014c: mov eax, dword ptr [rsp]; and rdx, rax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000448d4: mov eax, eax; js 0x448ae; pop rbx; pop rbp; ret; 
0x000000000002a5ee: mov eax, eax; movsd qword ptr [rsp + 0x10], xmm3; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c89a: mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001931d9: mov eax, ebp; jmp qword ptr [rax + 2]; 
0x00000000000ca398: mov eax, ebx; fbld tbyte ptr [rax]; adc bl, dl; call 0xffffffffd64445e2; ret; 
0x00000000000758d2: mov eax, ebx; movaps xmmword ptr [rbx + 0x10], xmm0; jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x000000000007babe: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000075aea: mov eax, ebx; pop rbx; ret; 
0x0000000000027e73: mov eax, ecx; lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x000000000000f395: mov eax, edi; movapd xmm2, xmm0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000075447: mov eax, edi; movaps xmmword ptr [rdi], xmm0; movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000086ab8: mov eax, edx; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000020954: mov eax, edx; fstp xword ptr [rbx]; add rsp, 0x10; pop rbx; ret; 
0x0000000000052193: mov eax, edx; js 0x520af; pop rbx; pop rbp; pop r12; ret; 
0x000000000004a8d0: mov eax, edx; lea rdx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000001ba29: mov eax, edx; neg rax; pop rbx; pop rbp; ret; 
0x0000000000020949: mov eax, edx; pop rbx; ret; 
0x000000000004a8cf: mov eax, r10d; lea rdx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x00000000000f137f: mov ebp, 0; add al, al; out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x00000000000f0d1f: mov ebp, 0; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x00000000000edd3f: mov ebp, 0; add byte ptr [rax + rsi*8 + 0x3f], al; hlt; mov cl, 0xfc; ret 0x5e0f; 
0x00000000000ea6e7: mov ebp, 0x1bd46fed; imul ebx, dword ptr [rsi], 0x34; mov edi, 0x88800000; xor eax, 0x2f3f341f; cld; ret; 
0x00000000000e2b2f: mov ebp, 0x1c000000; ret; 
0x00000000000e9b8f: mov ebp, 0x1f3f63c; pushfq; call qword ptr [rbx]; 
0x00000000001003f1: mov ebp, 0x33bb; xor byte ptr [rcx], 0x17; jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x00000000000f1374: mov ebp, 0x383fd5d1; ret 0xc9c7; 
0x0000000000110618: mov ebp, 0x3f; add byte ptr [rax], al; add ch, bl; jmp rsp; 
0x000000000010f937: mov ebp, 0x3fbc; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfc3b; 
0x00000000000dcf4e: mov ebp, 0x45adfc3f; ret; 
0x000000000007dcbf: mov ebp, 0x480004bb; test eax, eax; je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000001562c: mov ebp, 0x48fffffc; lea edx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e847f: mov ebp, 0x52b89211; xchg edi, eax; ret 0x3f39; 
0x00000000000e9e8f: mov ebp, 0x5b1ccc0; pop rsi; jmp qword ptr [rcx]; 
0x00000000000e0e1f: mov ebp, 0x5c000000; push -0x46c00ffd; mov bh, 3; ret; 
0x0000000000092b52: mov ebp, 0x5c23c5c5; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000496f7: mov ebp, 0x64003538; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x00000000000c8ff8: mov ebp, 0x8b48ffff; add al, 0x24; add rsp, 0x28; ret; 
0x000000000008726a: mov ebp, 0x90e501d; add ch, al; ret; 
0x000000000005a37f: mov ebp, 0xb1e90006; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000f137c: mov ebp, 0xbd38d6; add byte ptr [rax], al; add byte ptr [rax], al; shl dh, 0x3f; add byte ptr [rsi], bh; ret; 
0x00000000001104d8: mov ebp, 0xbf; add byte ptr [rax], al; add al, dh; mov dh, 0xd7; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x00000000000e9b5f: mov ebp, 0xc1aca80c; movsd dword ptr [rdi], dword ptr [rsi]; call qword ptr [rdx]; 
0x000000000008fc99: mov ebp, 0xc4102444; ret 0x99a9; 
0x00000000000bfd70: mov ebp, 0xc5c45c3b; sti; pop rax; mov ebp, 0xc5fc28f9; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x00000000000bcad1: mov ebp, 0xc5c558fb; ret; 
0x00000000000bf1f1: mov ebp, 0xc5c659fb; ret; 
0x00000000000b3fad: mov ebp, 0xc5c72979; ret; 
0x00000000000bd63b: mov ebp, 0xc5cc28f9; ret; 
0x00000000000b35fd: mov ebp, 0xc5cf2879; adc ebx, dword ptr [rdi + rbp*8 - 0x3b]; ret; 
0x00000000000bea75: mov ebp, 0xc5d62879; rcl dword ptr [rbx + rbp*8 - 0x3b]; stc; push rsp; ret; 
0x00000000000b9089: mov ebp, 0xc5e05cdb; ret; 
0x00000000000bfce0: mov ebp, 0xc5e858d3; fistp dword ptr [rbp + riz*8 - 0x3b]; ret; 
0x00000000000b4a5f: mov ebp, 0xc5f358cb; sti; pop rax; ret; 
0x0000000000094061: mov ebp, 0xc5f758b3; stc; push rsp; ret 0xf9c5; 
0x00000000000aa672: mov ebp, 0xc5f758d3; stc; push rsp; ret 0x79c5; 
0x00000000000bea5f: mov ebp, 0xc5f828f9; ret; 
0x00000000000bec08: mov ebp, 0xc5fc28f9; ret; 
0x00000000000bfd78: mov ebp, 0xc5fc28f9; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x00000000000bec18: mov ebp, 0xc5fd28f9; ret; 
0x00000000000ba456: mov ebp, 0xc5fe28f9; ret; 
0x00000000000ba22b: mov ebp, 0xc5ff5903; jns 0xba25c; ffreep st(5); ret; 
0x00000000000eb287: mov ebp, 0xc6424907; test ebp, ecx; mov r15d, 0xd4600000; ret 0x41ce; 
0x00000000000158bf: mov ebp, 0xd8000b75; ret; 
0x0000000000090339: mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x00000000000e83bf: mov ebp, 0xdacd1cef; retf; ret 0x3f3a; 
0x00000000000d568e: mov ebp, 0xdff464bf; or cl, byte ptr [rsi + 0x233fb3ad]; ret 0x4159; 
0x00000000000de956: mov ebp, 0xe020e3f; pop rdi; sbb eax, 0xedbfb590; retfq; cmp edi, edi; jmp rdx; 
0x0000000000018ef8: mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x00000000000501cf: mov ebp, 0xf000b03; push rsp; or eax, 0x7b8e6; divss xmm0, xmm1; ret; 
0x00000000000dde5e: mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000e81df: mov ebp, 0xf1cc609a; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c15f: mov ebp, 0xf1cc609a; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9bf: mov ebp, 0xf1cc609a; push rdi; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x0000000000028667: mov ebp, 0xf2000bb3; divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000ea27f: mov ebp, 0xf69a05ed; imul edi, dword ptr [rsi + 0x2c], 0x800000bf; div dword ptr [rdi + rdi*2]; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000e9067: mov ebp, 0xf86394d; ret; 
0x00000000000e37f7: mov ebp, 0xfc379081; xchg esi, eax; mov dl, 0x65; jle 0xe379d; ret; 
0x000000000004e48a: mov ebp, 0xff30007; pop rsp; ret 0x280f; 
0x000000000007dac0: mov ebp, eax; fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000018fc65: mov ebp, ecx; call qword ptr [rax]; 
0x000000000018fc65: mov ebp, ecx; call qword ptr [rax]; add byte ptr [r8], r8b; cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x00000000000b2f04: mov ebp, esi; jmp qword ptr [rsi + 0xf]; 
0x000000000014165f: mov ebx, 0x1ce1140; add byte ptr [rax], ah; loope 0x1416a7; ret 0xa67; 
0x000000000016fb9f: mov ebx, 0x1ce1140; add byte ptr [rax], ah; loope 0x16fbe7; ret 0xa67; 
0x000000000018e71f: mov ebx, 0x1ce1140; add byte ptr [rax], ah; loope 0x18e767; ret 0xa67; 
0x00000000000fd97f: mov ebx, 0x1ce1140; add byte ptr [rax], ah; loope 0xfd9c7; ret 0xa67; 
0x00000000000e4d1f: mov ebx, 0x29a9723; pushfq; jmp qword ptr [rbx]; 
0x00000000001019b1: mov ebx, 0x2b60da9b; stosd dword ptr [rdi], eax; ret; 
0x0000000000100daf: mov ebx, 0x3d1151b3; ret 0xe31c; 
0x00000000000efeb3: mov ebx, 0x3fcbf601; mov ch, 0x78; ret; 
0x000000000010b4fd: mov ebx, 0x414cc009; and eax, dword ptr [rbp - 5]; ret; 
0x00000000000a973e: mov ebx, 0x41c4c058; jnp 0xa979d; ret; 
0x000000000008cc2e: mov ebx, 0x41c4e458; pop rbx; pop rax; ret; 
0x000000000000d4a1: mov ebx, 0x4800000b; add esp, 0x20; add rsp, 8; ret; 
0x00000000000e3418: mov ebx, 0x4e4f9474; ret 0xbe2f; 
0x00000000000d5df9: mov ebx, 0x50545f93; ret 0xc83f; 
0x00000000000e5565: mov ebx, 0x5b7b3f61; ret; 
0x000000000008c999: mov ebx, 0x5ccbc5fd; inc ebp; ret; 
0x0000000000105617: mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000474e1: mov ebx, 0x66000845; movaps xmm0, xmm2; ret; 
0x000000000019058d: mov ebx, 0x7108ffed; add byte ptr [rax], al; push 0x50ffedbf; jno 0x19059b; add al, bl; ret; 
0x00000000001003f2: mov ebx, 0x80000033; xor dword ptr [rdi], edx; jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x000000000007dcc0: mov ebx, 0x85480004; sal byte ptr [rax + rdx + 0x66], 0xf; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x000000000007dab7: mov ebx, 0x85480004; sar byte ptr [rcx - 0x4b], 0xeb; mov ebp, eax; fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000113b51: mov ebx, 0x8a53ff3c; mov cs, word ptr [rdx]; ret; 
0x00000000000e469f: mov ebx, 0x8ea9e07c; push rcx; test byte ptr [rdi - 0x41], dl; mov byte ptr [rax + 0xa], al; mov bh, 0xf5; ret 0xbbf1; 
0x00000000000cdc79: mov ebx, 0x95b70031; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x000000000011b710: mov ebx, 0x9d1b6399; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000149f70: mov ebx, 0x9d1b6399; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e7790: mov ebx, 0x9d1b6399; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x000000000010d51c: mov ebx, 0xa2400e65; xchg esp, eax; fadd dword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; sahf; ret; 
0x00000000000e4ccd: mov ebx, 0xa83abba3; cmpsb byte ptr [rsi], byte ptr [rdi]; add dh, cl; call qword ptr [rbx]; 
0x00000000000d43d6: mov ebx, 0xa8bc2240; ret; 
0x00000000000fdad5: mov ebx, 0xa9c23ff8; xlatb; sbb bl, byte ptr [rbx]; ret; 
0x00000000000e449f: mov ebx, 0xc1abdcd; ret; 
0x00000000000a4be0: mov ebx, 0xc4ffffee; push r11; pop rax; ret 0x41c4; 
0x0000000000089ba1: mov ebx, 0xc5000009; ret; 
0x00000000000a6ad9: mov ebx, 0xc500055d; ret; 
0x000000000010d001: mov ebx, 0xc5997330; ret 0xb9c5; 
0x000000000008d242: mov ebx, 0xcbc5f658; pop rax; out 0xc5, eax; ret; 
0x0000000000016c21: mov ebx, 0xd8000b75; retf 0x2ddb; ret; 
0x0000000000012e10: mov ebx, 0xd9c67f3f; call 0x18c5b162; ret; 
0x00000000000e474f: mov ebx, 0xda4e38ec; pop rbp; ret; 
0x000000000008e59c: mov ebx, 0xdbc5e458; pop rax; test ch, 0xcb; pop rax; out 0xc5, eax; ret; 
0x00000000001309c1: mov ebx, 0xe0fc2388; jo 0x130987; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000015f101: mov ebx, 0xe0fc2388; jo 0x15f0c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x00000000000d0201: mov ebx, 0xe0fc2388; jo 0xd01c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000007b7d1: mov ebx, 0xe80004b5; xchg esi, eax; in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000008f57a: mov ebx, 0xf1e2c4d8; cdq; fadd st(5), st(0); ret; 
0x000000000009ab71: mov ebx, 0xf2000a83; mulps xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000006c06e: mov ebx, 0xf9f82ce8; jmp qword ptr [rsi + 0x2e]; 
0x000000000008bf4a: mov ebx, 0xfbc5d858; pop rsp; ret; 
0x0000000000027bcd: mov ebx, 0xff2000b; ret 0x1cb; 
0x00000000000d9cba: mov ebx, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x000000000001e95c: mov ebx, dword ptr [rbp - 8]; fxch st(1); leave; ret; 
0x000000000001cf4d: mov ebx, dword ptr [rbp - 8]; leave; fxch st(1); ret; 
0x000000000001c9b4: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000000e8c91: mov ebx, dword ptr [rdi + 0x1a]; ret 0x2e01; 
0x00000000000d5e1d: mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000075274: mov ebx, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x95; ret 0xd284; 
0x00000000001105a0: mov ebx, edi; cmp ah, ch; ret 0x920c; 
0x0000000000019ae7: mov ecx, 0x1f; sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019c06: mov ecx, 0x1f; sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x000000000008fc81: mov ecx, 0x3b41c4eb; pop rcx; ret 0xc2c4; 
0x000000000009033e: mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x000000000008b7ed: mov ecx, 0x3bc5d899; pop rsp; ret; 
0x0000000000114686: mov ecx, 0x3d9ad0e; ret; 
0x000000000011fcec: mov ecx, 0x3f3882; xor byte ptr [rbx], dh; ja 0x11fd47; ret 0xbfd3; 
0x000000000014e54c: mov ecx, 0x3f3882; xor byte ptr [rbx], dh; ja 0x14e5a7; ret 0xbfd3; 
0x00000000000ebd6c: mov ecx, 0x3f3882; xor byte ptr [rbx], dh; ja 0xebdc7; ret 0xbfd3; 
0x00000000000d7c5d: mov ecx, 0x4097bfbf; pop rsp; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x000000000009126f: mov ecx, 0x43e7b3d; add ch, al; ret; 
0x00000000000559d3: mov ecx, 0x48000002; add esp, 0x50; pop rbx; ret; 
0x000000000008f0b5: mov ecx, 0x4bc1c4d7; pop rax; ret 0x4bc5; 
0x00000000000871cc: mov ecx, 0x58dbc5dc; ret; 
0x000000000009374c: mov ecx, 0x58fbc5da; ret 0xe3c5; 
0x000000000009c972: mov ecx, 0x59fbc5d1; ret 0xfbc5; 
0x000000000009c4b9: mov ecx, 0x59fbc5d9; ret; 
0x00000000000e4392: mov ecx, 0x61e4ffec; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x00000000001012b7: mov ecx, 0x7378a9e8; int 0x29; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000009312c: mov ecx, 0x7bc1c4c2; pop rax; ret; 
0x0000000000094000: mov ecx, 0x7bc1c4eb; pop rax; ret; 
0x000000000007db24: mov ecx, 0x85480004; sar byte ptr [rdi + 0x14], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007348d: mov ecx, 0x8be8ffff; pop rax; add eax, 0x8901a800; ret; 
0x00000000000cd124: mov ecx, 0x8f3fbf19; ret 0x28f5; 
0x000000000012e0ee: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000013e48e: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000015c90e: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000016cbce: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001809ae: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018b74e: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000ddfae: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fa44e: mov ecx, 0x91e92bf; and eax, 0x3fc73018; sub eax, dword ptr [rdx]; jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000123408: mov ecx, 0x98c8da04; js 0x12341d; mov edi, 0x99164000; jbe 0x1233a3; ret; 
0x0000000000151c68: mov ecx, 0x98c8da04; js 0x151c7d; mov edi, 0x99164000; jbe 0x151c03; ret; 
0x00000000000ef488: mov ecx, 0x98c8da04; js 0xef49d; mov edi, 0x99164000; jbe 0xef423; ret; 
0x000000000008f8f7: mov ecx, 0xa1e2c4e2; cdq; ret; 
0x0000000000091038: mov ecx, 0xa9e2c4e1; cdq; ret; 
0x0000000000091710: mov ecx, 0xa9e2c4e9; cdq; ret; 
0x00000000000e137d: mov ecx, 0xbe23; add byte ptr [rax + rax*8 - 0x27c00ffc], dh; wait; out dx, eax; ret; 
0x00000000000dd78b: mov ecx, 0xbfce4cbe; sbb al, 0x43; ret 0x8e90; 
0x000000000008db5f: mov ecx, 0xc1c2c4fb; cdq; ret; 
0x00000000000943cd: mov ecx, 0xc1c4c199; jnp 0x9442c; ret; 
0x0000000000094f91: mov ecx, 0xc1c4c199; jnp 0x94ff0; ret; 
0x000000000009068d: mov ecx, 0xc410245c; ret 0x9da1; 
0x000000000008fc61: mov ecx, 0xc450246c; ret 0xb999; 
0x00000000000a8b1f: mov ecx, 0xc4a0c97b; ret; 
0x00000000000a73c4: mov ecx, 0xc4b0c56b; ret; 
0x00000000000a8b92: mov ecx, 0xc4b0ed6b; ret; 
0x00000000000a88a8: mov ecx, 0xc4c0d26b; ret; 
0x00000000000ec212: mov ecx, 0xd0af660e; mov edi, 0xf528d80a; ret; 
0x00000000000d0cc1: mov ecx, 0xd6a68f6b; ret; 
0x000000000007b48c: mov ecx, 0xdce80004; out 0xfe, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000010f810: mov ecx, 0xf8ad1eee; and al, 0x83; ret 0xbfbc; 
0x0000000000090334: mov ecx, 0xf942c4de; mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x00000000000efeab: mov ecx, dword ptr [rcx - 0x43]; or eax, 0xe40003f; mov ebx, 0x3fcbf601; mov ch, 0x78; ret; 
0x0000000000051cf2: mov ecx, eax; sub rax, 1; neg rcx; test edx, edx; cmovs rax, rcx; ret; 
0x000000000004441a: mov ecx, eax; sub rax, 1; neg rcx; test rdx, rdx; cmovs rax, rcx; ret; 
0x000000000004459c: mov ecx, esi; mov eax, 1; shl rax, cl; sub rax, 1; ret; 
0x0000000000042dec: mov ecx, esi; sar rdx, cl; imul rax, rdx; ret; 
0x0000000000050d95: mov ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x00000000000d0157: mov edi, 0; add al, al; ret 0x93f; 
0x00000000000d0207: mov edi, 0; add al, al; ret; 
0x000000000010fbf9: mov edi, 0; add byte ptr [rax], al; adc eax, 0x94134a4b; sal bl, 1; ret 0x3ffd; 
0x000000000010fbd9: mov edi, 0; add byte ptr [rax], al; jmp rbx; 
0x00000000000cec39: mov edi, 0; add byte ptr [rax], al; ret 0x1ba9; 
0x00000000000cb199: mov edi, 0; add byte ptr [rax], al; xchg esi, eax; pop rdi; ret 0x65fc; 
0x000000000011b65f: mov edi, 0x11a09689; ja 0x11b682; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x0000000000149ebf: mov edi, 0x11a09689; ja 0x149ee2; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x00000000000e76df: mov edi, 0x11a09689; ja 0xe7702; sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x0000000000105eff: mov edi, 0x121a3180; ret 0x3f9; 
0x0000000000105c04: mov edi, 0x12f1a36c; xchg ebp, eax; in al, dx; add eax, 0x3fe815e6; add dl, bl; ret; 
0x00000000000e43b7: mov edi, 0x1315b191; ret; 
0x00000000000d94ff: mov edi, 0x13fb7; movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x00000000000dce27: mov edi, 0x1696cd7c; ret; 
0x0000000000101ccf: mov edi, 0x1c27bcce; test ch, dh; ret 0xe7fc; 
0x000000000010eabf: mov edi, 0x1dcbeca5; ret; 
0x00000000000fcce9: mov edi, 0x1e9dee74; ret 0x553f; 
0x000000000012fedf: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x12fe97; and al, 0xee; ret; 
0x000000000014027f: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x140237; and al, 0xee; ret; 
0x000000000015e6ff: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x15e6b7; and al, 0xee; ret; 
0x000000000016e9bf: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x16e977; and al, 0xee; ret; 
0x000000000018279f: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x182757; and al, 0xee; ret; 
0x000000000018d53f: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x18d4f7; and al, 0xee; ret; 
0x00000000000dfd9f: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xdfd57; and al, 0xee; ret; 
0x00000000000fc23f: mov edi, 0x1f3fbc2b; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xfc1f7; and al, 0xee; ret; 
0x00000000000e9e97: mov edi, 0x2000000; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000e9f57: mov edi, 0x2800000; pushfq; jmp qword ptr [rbx]; 
0x0000000000120def: mov edi, 0x2a49c000; jno 0x120e33; ret 0x5cbf; 
0x000000000014f64f: mov edi, 0x2a49c000; jno 0x14f693; ret 0x5cbf; 
0x00000000000ece6f: mov edi, 0x2a49c000; jno 0xeceb3; ret 0x5cbf; 
0x0000000000127d9f: mov edi, 0x2a5c4097; jns 0x127dfd; pop rsi; cmp al, 0x63; ret; 
0x000000000013813f: mov edi, 0x2a5c4097; jns 0x13819d; pop rsi; cmp al, 0x63; ret; 
0x00000000001565bf: mov edi, 0x2a5c4097; jns 0x15661d; pop rsi; cmp al, 0x63; ret; 
0x000000000016687f: mov edi, 0x2a5c4097; jns 0x1668dd; pop rsi; cmp al, 0x63; ret; 
0x000000000017a65f: mov edi, 0x2a5c4097; jns 0x17a6bd; pop rsi; cmp al, 0x63; ret; 
0x00000000001853ff: mov edi, 0x2a5c4097; jns 0x18545d; pop rsi; cmp al, 0x63; ret; 
0x00000000000d7c5f: mov edi, 0x2a5c4097; jns 0xd7cbd; pop rsi; cmp al, 0x63; ret; 
0x00000000000f40ff: mov edi, 0x2a5c4097; jns 0xf415d; pop rsi; cmp al, 0x63; ret; 
0x00000000000d638f: mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000e8c87: mov edi, 0x2b29884e; mov ah, dh; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x00000000000fe3af: mov edi, 0x2f019fa9; xor al, 0x62; movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000cdcc8: mov edi, 0x350039b5; ret 0xb; 
0x00000000000e4537: mov edi, 0x3717e5ee; ret 0xc2f9; 
0x00000000000db24f: mov edi, 0x3e5d3d61; mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ddd1f: mov edi, 0x41f35c4c; std; call rdi; 
0x00000000000d865f: mov edi, 0x4427c00b; pop rbx; mov ah, 0x53; cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x00000000000d5adf: mov edi, 0x4487f4b8; ret; 
0x00000000000e905f: mov edi, 0x46efc0ec; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x000000000007cabd: mov edi, 0x48000483; add esp, 0x48; ret; 
0x00000000000eae0f: mov edi, 0x4fc00000; sahf; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x00000000000d0ac6: mov edi, 0x51caad3f; mov cl, 0x5a; xchg ebp, eax; ret; 
0x00000000000fd3c5: mov edi, 0x52ed3fd6; mov ah, 0x9f; pop rsi; ret 0x3fd7; 
0x00000000000edc0f: mov edi, 0x58b70000; ret 0x9b5c; 
0x00000000000dda67: mov edi, 0x5aabc13c; ret 0xc5a4; 
0x00000000000d65cf: mov edi, 0x5b7f0ad0; ret 0x5732; 
0x00000000000d7c5e: mov edi, 0x5c4097bf; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x00000000000e49d7: mov edi, 0x61414697; ret 0xdda0; 
0x00000000000fe3bf: mov edi, 0x630e5489; ret 0xc374; 
0x00000000000de7c7: mov edi, 0x661df241; ret 0xc063; 
0x00000000000866a4: mov edi, 0x66d0450f; movd mm0, edx; ret; 
0x000000000010305f: mov edi, 0x691e3000; outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x00000000000e8edf: mov edi, 0x6dfeb485; ret 0xb440; 
0x00000000000ed877: mov edi, 0x6e09f5fe; ret; 
0x000000000012e747: mov edi, 0x736708ae; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae7: mov edi, 0x736708ae; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf67: mov edi, 0x736708ae; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d227: mov edi, 0x736708ae; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181007: mov edi, 0x736708ae; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda7: mov edi, 0x736708ae; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de607: mov edi, 0x736708ae; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa7: mov edi, 0x736708ae; jge 0xfaabc; ret 0x8d3f; 
0x00000000000d6bdf: mov edi, 0x7604b95a; ret; 
0x00000000000e779f: mov edi, 0x76830985; ret 0x3361; 
0x00000000000df5f7: mov edi, 0x7ab9110c; ret; 
0x000000000011477f: mov edi, 0x7d90e45f; ret 0xbab4; 
0x00000000000e9b37: mov edi, 0x80000000; xlatb; call qword ptr [rcx]; 
0x00000000000e9bf7: mov edi, 0x81000000; ret; 
0x00000000000e4997: mov edi, 0x8152093a; ret; 
0x0000000000125c8e: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x125d11; stosb byte ptr [rdi], al; ret; 
0x000000000013602e: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x1360b1; stosb byte ptr [rdi], al; ret; 
0x00000000001544ae: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x154531; stosb byte ptr [rdi], al; ret; 
0x000000000016476e: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x1647f1; stosb byte ptr [rdi], al; ret; 
0x000000000017854e: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x1785d1; stosb byte ptr [rdi], al; ret; 
0x00000000001832ee: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0x183371; stosb byte ptr [rdi], al; ret; 
0x00000000000d5b4e: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0xd5bd1; stosb byte ptr [rdi], al; ret; 
0x00000000000f1fee: mov edi, 0x821725bf; sbb eax, 0xbc35a199; xlatb; loope 0xf2071; stosb byte ptr [rdi], al; ret; 
0x000000000010224f: mov edi, 0x8273dbcd; push 0x5a1ac94d; ret 0x5d3a; 
0x00000000000bcced: mov edi, 0x830003fb; rol byte ptr [rcx], 0xa8; add al, ch; sti; pop rcx; ret; 
0x000000000007d759: mov edi, 0x85480004; ror byte ptr [rdi], 0x9e; ret; 
0x00000000000ea6ef: mov edi, 0x88800000; xor eax, 0x2f3f341f; cld; ret; 
0x000000000012df97: mov edi, 0x88c659e8; jbe 0x12e016; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000013e337: mov edi, 0x88c659e8; jbe 0x13e3b6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000015c7b7: mov edi, 0x88c659e8; jbe 0x15c836; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000016ca77: mov edi, 0x88c659e8; jbe 0x16caf6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000180857: mov edi, 0x88c659e8; jbe 0x1808d6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000018b5f7: mov edi, 0x88c659e8; jbe 0x18b676; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000dde57: mov edi, 0x88c659e8; jbe 0xdded6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000fa2f7: mov edi, 0x88c659e8; jbe 0xfa376; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000012dd9f: mov edi, 0x89f5fb1c; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13f: mov edi, 0x89f5fb1c; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5bf: mov edi, 0x89f5fb1c; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87f: mov edi, 0x89f5fb1c; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065f: mov edi, 0x89f5fb1c; ja 0x18068d; ret 0x11bf; 
0x000000000018b3ff: mov edi, 0x89f5fb1c; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5f: mov edi, 0x89f5fb1c; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0ff: mov edi, 0x89f5fb1c; ja 0xfa12d; ret 0x11bf; 
0x00000000000e757f: mov edi, 0x925b3d62; and al, 0x49; ret 0xfc3f; 
0x000000000010e99f: mov edi, 0x947c13a; ret; 
0x00000000000ece0f: mov edi, 0x95f6000; push rbp; lodsb al, byte ptr [rsi]; ret 0xa8bf; 
0x000000000012340f: mov edi, 0x99164000; jbe 0x1233a3; ret; 
0x0000000000151c6f: mov edi, 0x99164000; jbe 0x151c03; ret; 
0x00000000000ef48f: mov edi, 0x99164000; jbe 0xef423; ret; 
0x00000000000d8807: mov edi, 0x9e13b088; movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x0000000000018ef9: mov edi, 0x9f0f0000; ret 0xf209; 
0x00000000000d745f: mov edi, 0x9feebe6c; mov esp, 0x1cbc5f88; pop rsp; sti; ret; 
0x00000000000d68df: mov edi, 0xa3ef610f; retf; retf 0xbc64; xchg ebp, eax; ret 0xc4e2; 
0x00000000000e4a07: mov edi, 0xa4df0dfd; ret 0x7f48; 
0x00000000000d934f: mov edi, 0xa78e848c; ret; 
0x00000000000daf97: mov edi, 0xa9aaa5bb; ret 0x895b; 
0x00000000000dd177: mov edi, 0xac6ac8ad; clc; pop rdi; ret 0xca3f; 
0x00000000000e9047: mov edi, 0xb0286224; ret; 
0x00000000000ef4ef: mov edi, 0xb0ecc000; ret 0xc3df; 
0x00000000000dc14f: mov edi, 0xb4b7ae12; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x00000000000e46a7: mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x00000000000ebf37: mov edi, 0xb730e28b; ret 0x3210; 
0x00000000000fc8c8: mov edi, 0xc1984e1c; push rsi; mov eax, 0xa454de39; ret 0x42d8; 
0x00000000000e9ef7: mov edi, 0xc2000000; movsd dword ptr [rdi], dword ptr [rsi]; jmp qword ptr [rdx]; 
0x000000000010e73f: mov edi, 0xc3786045; ret 0x30e7; 
0x00000000000dd91f: mov edi, 0xc5210022; wait; ret; 
0x00000000000eb0af: mov edi, 0xc6a00000; in eax, dx; mov es, word ptr [rax + 0x3f]; ret; 
0x00000000000d8d5f: mov edi, 0xc71ad288; xchg esi, eax; ret 0x3c4b; 
0x000000000010218f: mov edi, 0xcb784785; ret 0xf9f3; 
0x0000000000120d4f: mov edi, 0xcbbc0000; ja 0x120d4c; ret 0xdbf; 
0x000000000014f5af: mov edi, 0xcbbc0000; ja 0x14f5ac; ret 0xdbf; 
0x00000000000ecdcf: mov edi, 0xcbbc0000; ja 0xecdcc; ret 0xdbf; 
0x00000000000ef64f: mov edi, 0xcd29c000; ret 0xc50b; 
0x000000000010335f: mov edi, 0xcf2bf000; insd dword ptr [rdi], dx; call qword ptr [rbx]; 
0x00000000000dca4f: mov edi, 0xcf979001; call qword ptr [rbx]; 
0x00000000001264c7: mov edi, 0xd35c8c33; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136867: mov edi, 0xd35c8c33; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce7: mov edi, 0xd35c8c33; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa7: mov edi, 0xd35c8c33; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d87: mov edi, 0xd35c8c33; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b27: mov edi, 0xd35c8c33; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6387: mov edi, 0xd35c8c33; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2827: mov edi, 0xd35c8c33; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000eb28f: mov edi, 0xd4600000; ret 0x41ce; 
0x000000000010306f: mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x000000000011499f: mov edi, 0xdc414efc; pop rdx; mov esi, 0x3e755449; xchg esi, eax; ret 0x65ae; 
0x00000000000d7d7f: mov edi, 0xde917e27; mov bl, 0xf3; mov ch, 0xbf; ret 0x455c; 
0x00000000000d8417: mov edi, 0xdee8421b; ret; 
0x00000000001142bf: mov edi, 0xdf781835; ret; 
0x00000000000e893f: mov edi, 0xe0b6e5f5; ret; 
0x00000000001139ff: mov edi, 0xe94658ca; push rbx; sbb eax, 0xbaf4f12c; sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x00000000000d8b4f: mov edi, 0xeb851eb8; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x00000000000f155f: mov edi, 0xebc3a3fc; and al, 0x49; ret 0x4a3f; 
0x00000000000d5e0f: mov edi, 0xebf8ae4b; movabs byte ptr [0xd7527f133b3fbade], al; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x00000000000e9abf: mov edi, 0xf0000000; ret; 
0x00000000000ddc3f: mov edi, 0xf02a83e4; sti; call rsi; 
0x000000000010be24: mov edi, 0xf3fff61c; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x00000000000ec217: mov edi, 0xf528d80a; ret; 
0x0000000000075731: mov edi, 0xf660008; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000ea287: mov edi, 0xf7800000; xor al, 0x7f; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000ef36f: mov edi, 0xf8200000; push rdx; xchg ebp, eax; ret 0xfc3f; 
0x000000000011c157: mov edi, 0xfad0b844; jae 0x11c132; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9b7: mov edi, 0xfad0b844; jae 0x14a992; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000e81d7: mov edi, 0xfad0b844; jae 0xe81b2; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000010308f: mov edi, 0xffbb9687; xchg esp, eax; ret 0x5106; 
0x00000000000e4397: mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x000000000010305e: mov edi, dword ptr [rdi + 0x691e3000]; outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x000000000011467e: mov edi, dword ptr [rdi]; jp 0x1146c2; sub ebp, dword ptr [rsp + rsi*4 - 0x52f1463b]; fld dword ptr [rbx]; ret; 
0x000000000000bce8: mov edi, dword ptr [rip + 0x391452]; call 0xba70; call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x000000000010305d: mov edi, dword ptr ds:[rdi + 0x691e3000]; outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x0000000000074cf4: mov edi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x95; ret 0xd284; 
0x00000000000736ca: mov edi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000049870: mov edi, esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000182ac: mov edi, gs; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x00000000000d4e2c: mov edi, ss; in eax, 0x40; ret 0x3b36; 
0x000000000009b405: mov edx, 0; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret 0x3148; 
0x000000000009ae05: mov edx, 0; add byte ptr [rax], al; add byte ptr [rax + 0x2c0f48f2], al; ret; 
0x000000000009ce75: mov edx, 0; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret 0x3148; 
0x000000000009c52d: mov edx, 0; add byte ptr [rax], al; add byte ptr [rax + 0x2cfbe1c4], al; ret; 
0x0000000000072574: mov edx, 0; cmovne rax, rdx; add rsp, 0x18; ret; 
0x0000000000019b83: mov edx, 0; cmovne rax, rdx; ret; 
0x0000000000080280: mov edx, 0x15100ff2; xchg edi, eax; xor al, 6; add byte ptr [rsi + 0xf], ah; sub dl, al; ret; 
0x00000000000b01d0: mov edx, 0x1510fbc5; xor eax, 0xf9c50003; sub dl, al; ret; 
0x00000000000db254: mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000108c7a: mov edx, 0x27e92462; mov byte ptr [rdx - 0x4f475dd0], sil; jg 0x108c82; ret; 
0x0000000000107a80: mov edx, 0x2a53e9c5; cld; rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x0000000000001785: mov edx, 0x35307c9a; sti; xchg ecx, eax; push rbx; ret; 
0x00000000000eb0bb: mov edx, 0x3d2e19bc; clc; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x0000000000086714: mov edx, 0x3f800000; cmovne eax, edx; movd xmm0, eax; ret; 
0x00000000000de7ab: mov edx, 0x3fe0657e; ret; 
0x00000000000e64ab: mov edx, 0x3ff008b4; sbb bh, cl; ret 0xa4a8; 
0x00000000000d318b: mov edx, 0x3ff5c276; ret; 
0x00000000001071eb: mov edx, 0x3ff8f095; ret 0x530d; 
0x00000000000fd0dd: mov edx, 0x42c1bbdc; idiv di; call rax; 
0x00000000000d9b6e: mov edx, 0x45db833f; ret 0x961a; 
0x000000000000ecfa: mov edx, 0x640038e2; mov dword ptr [rax], 0x22; add rsp, 0x18; ret; 
0x00000000000d085e: mov edx, 0x6702c63f; ret 0x1769; 
0x00000000000e5f65: mov edx, 0x67563fc4; ret; 
0x00000000000d5e16: mov edx, 0x7f133b3f; push rdx; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x000000000008669b: mov edx, 0x80000000; mov eax, 0xbf800000; cmovne edx, eax; movd xmm0, edx; ret; 
0x0000000000100436: mov edx, 0x83681345; jns 0x100475; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000109c0c: mov edx, 0x89bff1fa; call qword ptr [rax + 0x3a]; 
0x00000000000d6eb4: mov edx, 0xaabc7796; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000a0112: mov edx, 0xc5000009; ret; 
0x00000000000a09da: mov edx, 0xc50008f7; ret; 
0x0000000000105a48: mov edx, 0xcb7c5b8; ret; 
0x000000000007976b: mov edx, 0xf660008; outsd dx, dword ptr [rsi]; ret; 
0x00000000000c937e: mov edx, 0xf66ffff; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000043380: mov edx, 1; ucomisd xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x00000000000e88c3: mov edx, cs; and byte ptr [rdi + rdi*4], dh; ret 0x1de7; 
0x00000000000805b4: mov edx, dword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x000000000005035c: mov edx, dword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000004f885: mov edx, dword ptr [rip + 0xff3000b]; pop rcx; ret; 
0x0000000000015e83: mov edx, dword ptr [rsp - 4]; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x00000000000519fe: mov edx, eax; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x0000000000050b65: mov edx, eax; or edx, 0x3f800000; cmp ecx, -1; cmove eax, edx; movd xmm0, eax; ret; 
0x0000000000074513: mov edx, ecx; shl rdx, 0x30; or rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000003234d: mov edx, edx; shl rdi, 0x20; or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000101ad6: mov edx, esi; ret; 
0x00000000000eb0b5: mov es, word ptr [rax + 0x3f]; ret; 
0x00000000000724fd: mov es, word ptr [rax + 0x66000000]; movq mm0, mm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000800d0: mov es, word ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000008596c: mov es, word ptr [rbp + 0x590ff3c0]; ret 0xff3; 
0x0000000000100fc2: mov es, word ptr [rcx + 0x42]; je 0x100f86; ret 0xe6aa; 
0x0000000000080236: mov es, word ptr [rdi + 0x66000001]; movaps xmm0, xmm2; ret; 
0x00000000000dba30: mov es, word ptr [rdx - 0x779ca8d]; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000b0186: mov es, word ptr [rip - 0x3affffff]; stc; sub dl, al; ret; 
0x0000000000050d8e: mov esi, 0x17; sub esi, ecx; mov ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x00000000000df240: mov esi, 0x194098a4; ret 0x3fae; 
0x00000000000e974f: mov esi, 0x20061337; or al, byte ptr [rax]; ret 0x5bc; 
0x00000000000e28ef: mov esi, 0x38000000; sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x00000000000e9065: mov esi, 0x394dbd2a; xchg byte ptr [rdi], cl; ret; 
0x0000000000112309: mov esi, 0x3d32e6f3; pop rdi; mov esp, 0x22a8ef9f; ret 0xefeb; 
0x00000000001149a5: mov esi, 0x3e755449; xchg esi, eax; ret 0x65ae; 
0x00000000000e6e43: mov esi, 0x3fefeb0d; ret 0xf138; 
0x00000000000747d6: mov esi, 0x48000000; add esp, 0x18; ret; 
0x00000000000d0a6e: mov esi, 0x5fa9663f; test dword ptr [rdi + 0x31], edx; ret; 
0x00000000000421de: mov esi, 0x66fffc96; nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x0000000000020c7d: mov esi, 0x7d00003f; add eax, 0xc1dee8d9; ret; 
0x00000000000e981f: mov esi, 0x80000000; sti; call rdi; 
0x00000000000e32ff: mov esi, 0x88000000; movsb byte ptr [rdi], byte ptr [rsi]; and eax, 0xc1ba3ff4; in al, 0xf9; ret; 
0x0000000000018eef: mov esi, 0x970f407f; mov byte ptr [rcx - 0x7f], 0xf8; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x00000000000cd91d: mov esi, 0x97a40031; ret; 
0x00000000000e240f: mov esi, 0xbc000000; ret 0xe943; 
0x00000000000ea5e5: mov esi, 0xbf32; add byte ptr [rax + 0x50], 0xbf; xor bh, byte ptr [rdi]; ret; 
0x00000000000ef2eb: mov esi, 0xbf3814d3; add byte ptr [rax + 0xa], ah; sbb dword ptr [rdi + 0x26], ebp; ret 0xf63f; 
0x00000000000ecd6b: mov esi, 0xbf3bed61; add byte ptr [rax + 0x65fcb015], ah; ret; 
0x00000000000e984f: mov esi, 0xc0000000; stc; jmp rbx; 
0x0000000000140ff4: mov esi, 0xc4400733; push rcx; jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x000000000016f534: mov esi, 0xc4400733; push rcx; jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x000000000018e0b4: mov esi, 0xc4400733; push rcx; jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x00000000000fd314: mov esi, 0xc4400733; push rcx; jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x00000000000eaeed: mov esi, 0xc60d3f3e; outsb dx, byte ptr [rsi]; ret 0x9b31; 
0x00000000000dca4a: mov esi, 0xd01fff7e; mov edi, 0xcf979001; call qword ptr [rbx]; 
0x00000000000ddfbc: mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fd188: mov esi, 0xe4618faa; ret 0x3fd2; 
0x000000000002c39e: mov esi, 0xe8fffff1; stc; hlt; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000ec20f: mov esi, 0xeb9e000; scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x00000000000757eb: mov esi, 0xf660008; outsd dx, dword ptr [rsi]; ret 0x69e8; 
0x000000000000da5c: mov esi, 0xffff72e9; jmp qword ptr [rsi + 0xf]; 
0x00000000000d563b: mov esi, ecx; ret; 
0x00000000000ccd09: mov esi, esp; call ptr [rax]; mov esi, esp; inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x00000000000ccd0d: mov esi, esp; inc edi; mov dh, ah; jmp qword ptr [rsi]; 
0x00000000000c2dcf: mov esi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000002507: mov esp, 0x14843efa; ret; 
0x00000000000e8c8f: mov esp, 0x1a5f8b99; ret 0x2e01; 
0x00000000000d7464: mov esp, 0x1cbc5f88; pop rsp; sti; ret; 
0x000000000019164c: mov esp, 0x20000006; ret; 
0x000000000011230f: mov esp, 0x22a8ef9f; ret 0xefeb; 
0x00000000000d6347: mov esp, 0x26d69eeb; ret 0xc665; 
0x0000000000107a88: mov esp, 0x2aee8072; ret; 
0x000000000012fee1: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x12fe97; and al, 0xee; ret; 
0x0000000000140281: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x140237; and al, 0xee; ret; 
0x000000000015e701: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x15e6b7; and al, 0xee; ret; 
0x000000000016e9c1: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x16e977; and al, 0xee; ret; 
0x00000000001827a1: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x182757; and al, 0xee; ret; 
0x000000000018d541: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0x18d4f7; and al, 0xee; ret; 
0x00000000000dfda1: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0xdfd57; and al, 0xee; ret; 
0x00000000000fc241: mov esp, 0x2e6c1f3f; mov ch, 0x3f; jge 0xfc1f7; and al, 0xee; ret; 
0x00000000000d6067: mov esp, 0x36860504; add al, 0x60; ret 0x403f; 
0x00000000000d7447: mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000db153: mov esp, 0x3c0a0e9b; ret; 
0x00000000000d52f6: mov esp, 0x3f76033f; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x00000000000e73b3: mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x78148802; ret 0x4f00; 
0x000000000011b333: mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x7817c782; ret 0x4f00; 
0x0000000000149cd3: mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781ab122; ret 0x4f00; 
0x0000000000177c13: mov esp, 0x3fe87427; sbb byte ptr [rsi + 0x61861861], al; call 0x781d9062; ret 0x4f00; 
0x0000000000127a97: mov esp, 0x486ad2c8; jno 0x127ac5; ret 0xaebf; 
0x0000000000137e37: mov esp, 0x486ad2c8; jno 0x137e65; ret 0xaebf; 
0x00000000001562b7: mov esp, 0x486ad2c8; jno 0x1562e5; ret 0xaebf; 
0x0000000000166577: mov esp, 0x486ad2c8; jno 0x1665a5; ret 0xaebf; 
0x000000000017a357: mov esp, 0x486ad2c8; jno 0x17a385; ret 0xaebf; 
0x00000000001850f7: mov esp, 0x486ad2c8; jno 0x185125; ret 0xaebf; 
0x00000000000d7957: mov esp, 0x486ad2c8; jno 0xd7985; ret 0xaebf; 
0x00000000000f3df7: mov esp, 0x486ad2c8; jno 0xf3e25; ret 0xaebf; 
0x00000000000d58d7: mov esp, 0x538e939c; ret; 
0x00000000000e86c0: mov esp, 0x5be02a2; ret 0x3f36; 
0x000000000011243f: mov esp, 0x5e4ab88f; sub dh, ch; ret 0x583f; 
0x0000000000048820: mov esp, 0x6600082a; movaps xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000106bc8: mov esp, 0x67dc6b02; xchg edi, eax; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x00000000000d410f: mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x00000000000d81d7: mov esp, 0x6dd13675; ret 0xb79c; 
0x00000000000e584f: mov esp, 0x77333184; push rdx; ret 0xbfd3; 
0x000000000007d80d: mov esp, 0x85480004; sar byte ptr [rdi + 0xb], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000023f7: mov esp, 0x87919e45; ret; 
0x00000000000ca4cd: mov esp, 0x900f3fea; push rbp; ret; 
0x000000000013022f: mov esp, 0x92492492; and al, 0x49; ret 0x55bf; 
0x00000000000d52bf: mov esp, 0x92492492; and al, 0x49; ret 0x9abf; 
0x00000000001015d6: mov esp, 0x94f34f45; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000db447: mov esp, 0xa5abec2f; push rsi; ret 0xbfd2; 
0x00000000000d5b57: mov esp, 0xaa76e1d7; ret; 
0x00000000000d4f4f: mov esp, 0xaa786f36; lahf; ret 0x3ff4; 
0x00000000000d70e7: mov esp, 0xbd062535; xor ch, byte ptr [rcx - 0x5793c038]; ret; 
0x00000000000d4d00: mov esp, 0xbe9fd995; and eax, 0x33e63c7d; pop rbp; ret; 
0x000000000010fbf8: mov esp, 0xbf; add byte ptr [rax], al; add byte ptr [rip - 0x6becb5b5], dl; sal bl, 1; ret 0x3ffd; 
0x00000000000ebeb3: mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x00000000000c20d8: mov esp, 0xc5000009; jns 0xc2108; ret; 
0x00000000000bea58: mov esp, 0xc500032a; sti; pop rcx; mov ebp, 0xc5f828f9; ret; 
0x00000000000c27d9: mov esp, 0xc5ffffed; ret; 
0x00000000000d9b67: mov esp, 0xca629942; adc r15b, byte ptr [r10 + 0x45db833f]; ret 0x961a; 
0x00000000000d7077: mov esp, 0xcaf6121; rcl byte ptr [rbx + rbx*4 + 0x3f]; xchg edx, eax; movabs dword ptr [0xc31ebfc0a732485b], eax; push rax; ret 0x7477; 
0x00000000000d5bf7: mov esp, 0xd9fa3f20; mov cl, 0xb0; ret; 
0x00000000000d8ae9: mov esp, 0xdabe0f10; ret; 
0x00000000000dde96: mov esp, 0xdbb11bbf; ret 0xcc23; 
0x00000000000dba37: mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000734e6: mov esp, 0xf000000; test edx, edx; or byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x000000000002c4f0: mov esp, 0xf20009ed; divps xmm0, xmm1; ret; 
0x0000000000101cd1: mov esp, 0xf5841c27; ret 0xe7fc; 
0x0000000000050d20: mov esp, 0xf6fffffe; ret 0x7580; 
0x00000000000eb0bc: mov esp, 0xf83d2e19; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x00000000000cec34: mov esp, 0xfeb74ea1; mov edi, 0; add byte ptr [rax], al; ret 0x1ba9; 
0x00000000000ce9c3: mov esp, edx; ret; 
0x000000000007a0b0: mov esp, gs; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000031ae6: mov fs, ebp; or al, byte ptr [rax]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x0000000000049de6: mov fs, word ptr [rbp + 0xb]; add bl, dh; subps xmm0, xmm1; ret; 
0x000000000018fc6d: mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000110b15: mov gs, word ptr [rax + 0x41]; add byte ptr [rax], al; add al, al; xchg esp, eax; ret; 
0x00000000000c8080: mov gs, word ptr [rbx]; add al, 0; add byte ptr [rcx + 1], cl; fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x000000000010e736: mov gs, word ptr [rcx + 0x39]; cli; adc byte ptr [rcx + 0x41], cl; xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x0000000000080fd8: mov qword ptr [rdi + 8], 0; ret; 
0x0000000000081d62: mov qword ptr [rsi + 8], 0; ret; 
0x00000000000805b8: mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x0000000000070152: mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006c19f: mov qword ptr [rsp + 0x18], rax; movq xmm2, qword ptr [rsp]; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000006c0f6: mov qword ptr [rsp + 0x18], rdi; movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x00000000000700f7: mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000044e3d: mov qword ptr [rsp + 8], rax; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000072bfd: mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb43: mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001b0bd: mov qword ptr [rsp - 0x10], rax; fild qword ptr [rsp - 0x10]; ret; 
0x00000000000c8eca: mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000009baf5: mov qword ptr [rsp - 0x10], rax; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000006ee61: mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000019f4a: mov qword ptr [rsp - 0x18], 0; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000323c2: mov qword ptr [rsp - 0x18], rax; mov qword ptr [rsp - 0x20], rax; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000007473f: mov qword ptr [rsp - 0x18], rdx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007466a: mov qword ptr [rsp - 0x18], rsi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000323c7: mov qword ptr [rsp - 0x20], rax; movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000032356: mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000007286b: mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x00000000000321d9: mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000031a89: mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000032216: mov qword ptr [rsp - 8], rcx; movsd xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f72: mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000c8ff2: mov qword ptr [rsp], rax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8bc0: mov qword ptr [rsp], rax; call 0xc4df0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000006eee0: mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000070be7: mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000007482b: mov qword ptr [rsp], rsi; movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000108c79: mov r10d, 0x27e92462; mov byte ptr [rdx - 0x4f475dd0], sil; jg 0x108c82; ret; 
0x0000000000101ad5: mov r10d, esi; ret; 
0x0000000000113b50: mov r11d, 0x8a53ff3c; mov cs, word ptr [rdx]; ret; 
0x00000000000d9cb9: mov r11d, dword ptr [rbp + 0x3fe6c4e6]; ret 0xd04e; 
0x00000000000fdfbc: mov r12b, r10b; cmp eax, dword ptr [rbx]; ret 0x498; 
0x00000000000d58d6: mov r12d, 0x538e939c; ret; 
0x00000000000d4cff: mov r12d, 0xbe9fd995; and eax, 0x33e63c7d; pop rbp; ret; 
0x00000000000d99fd: mov r13b, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e9d: mov r13b, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b3d: mov r13b, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139edd: mov r13b, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x000000000015835d: mov r13b, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x000000000016861d: mov r13b, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3fd: mov r13b, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x000000000018719d: mov r13b, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000d52ed: mov r15b, 0xbf; cmp ebx, dword ptr [rdx + 0x71c6e512]; mov esp, 0x3f76033f; xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x0000000000107d29: mov r15b, 0xd8; mov ch, byte ptr [rsi]; add al, 0x40; ret; 
0x00000000000e49d6: mov r15d, 0x61414697; ret 0xdda0; 
0x00000000000e779e: mov r15d, 0x76830985; ret 0x3361; 
0x00000000000e4996: mov r15d, 0x8152093a; ret; 
0x00000000000eb28e: mov r15d, 0xd4600000; ret 0x41ce; 
0x00000000000a185f: mov r8b, 5; add ah, al; ret; 
0x00000000000abea8: mov r9b, 0x6b; int 0x80; 
0x0000000000105b77: mov r9b, 0xf4; shl ebx, 0x24; sbb eax, 0xcfc73fdd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x0000000000091705: mov r9b, 6; add ch, al; fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x00000000000a8b1e: mov r9d, 0xc4a0c97b; ret; 
0x00000000000a88a7: mov r9d, 0xc4c0d26b; ret; 
0x0000000000044730: mov rax, 0xffffffffffffffff; ret; 
0x000000000001c360: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x000000000009c8d7: mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009b2c7: mov rax, qword ptr [rip + 0x301cea]; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x0000000000085ee0: mov rax, qword ptr [rip + 0x3170d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ed0: mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x000000000007dd1d: mov rax, qword ptr [rip + 0x31f294]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000057010: mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000056e74: mov rax, qword ptr [rip + 0x34613d]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000056d5b: mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000005236c: mov rax, qword ptr [rip + 0x34ac45]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000520cc: mov rax, qword ptr [rip + 0x34aee5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000051190: mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004fdb8: mov rax, qword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000049894: mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x00000000000496f4: mov rax, qword ptr [rip + 0x3538bd]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000495e0: mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000044aac: mov rax, qword ptr [rip + 0x358505]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000447fc: mov rax, qword ptr [rip + 0x3587b5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000004455c: mov rax, qword ptr [rip + 0x358a55]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000442dc: mov rax, qword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000030d60: mov rax, qword ptr [rip + 0x36c269]; lea rdx, [rip + 0x55d62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x0000000000020aca: mov rax, qword ptr [rip + 0x37c4e7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000208ec: mov rax, qword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000207ba: mov rax, qword ptr [rip + 0x37c7f7]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000001bb81: mov rax, qword ptr [rip + 0x381430]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b8e1: mov rax, qword ptr [rip + 0x3816d0]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001b6a1: mov rax, qword ptr [rip + 0x381910]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000001a0fa: mov rax, qword ptr [rip + 0x382eb7]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000122b8: mov rax, qword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000ecf7: mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000bca8: mov rax, qword ptr [rip + 0x391339]; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000000bc57: mov rax, qword ptr [rip + 0x391352]; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000b7f4: mov rax, qword ptr [rip + 0x3917cd]; test rax, rax; je 0xb802; call rax; 
0x000000000001a3b5: mov rax, qword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x0000000000049b88: mov rax, qword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x0000000000072860: mov rax, qword ptr [rsp - 0x10]; and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000019b79: mov rax, qword ptr [rsp - 0x18]; ret; 
0x0000000000019a89: mov rax, qword ptr [rsp - 8]; ret; 
0x00000000000c8ffb: mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c998c: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; ret; 
0x00000000000c9637: mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c8bc9: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007014b: mov rax, qword ptr [rsp]; and rdx, rax; mov qword ptr [rsp + 0x10], rdx; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000052192: mov rax, r10; js 0x520af; pop rbx; pop rbp; pop r12; ret; 
0x00000000000448d3: mov rax, r8; js 0x448ae; pop rbx; pop rbp; ret; 
0x0000000000027e72: mov rax, r9; lea rdx, [rip + 0xbb8c4]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x00000000000758d1: mov rax, rbx; movaps xmmword ptr [rbx + 0x10], xmm0; jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x000000000007babd: mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000075ae9: mov rax, rbx; pop rbx; ret; 
0x0000000000075446: mov rax, rdi; movaps xmmword ptr [rdi], xmm0; movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x000000000001ba28: mov rax, rdx; neg rax; pop rbx; pop rbp; ret; 
0x000000000001e95b: mov rbx, qword ptr [rbp - 8]; fxch st(1); leave; ret; 
0x000000000001cf4c: mov rbx, qword ptr [rbp - 8]; leave; fxch st(1); ret; 
0x000000000001c9b3: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000051cf1: mov rcx, rax; sub rax, 1; neg rcx; test edx, edx; cmovs rax, rcx; ret; 
0x0000000000044419: mov rcx, rax; sub rax, 1; neg rcx; test rdx, rdx; cmovs rax, rcx; ret; 
0x000000000000bce7: mov rdi, qword ptr [rip + 0x391452]; call 0xba70; call 0xbc40; mov byte ptr [rip + 0x39144d], 1; pop rbp; ret; 
0x00000000000805b3: mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x000000000005035b: mov rdx, qword ptr [rip + 0x34cc56]; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x0000000000074512: mov rdx, rcx; shl rdx, 0x30; or rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000f0c2a: mov sil, 0x9c; ret; 
0x00000000001003fb: mov spl, 0xf1; iretd; ret 0x8ecf; 
0x0000000000103459: mov ss, edx; test byte ptr [rdx], bh; ret 0xbf8b; 
0x000000000010cc16: mov ss, esp; add ebp, edi; or eax, 0xc7806df; push 0x7d; and r15d, edx; ret 0x6adc; 
0x00000000000e46a3: mov ss, word ptr [rcx - 0x7c]; push rdi; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x0000000000040db3: mov word ptr [rax + rdx*4], fs; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x000000000003d622: mov word ptr [rax + riz*4], fs; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x000000000007719b: mov word ptr [rax + rsi*8], fs; add byte ptr [rax], al; add al, ch; pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000119658: mov word ptr [rbp + 0x2a], es; jns 0x1196d6; ret 0xbc01; 
0x0000000000147ff8: mov word ptr [rbp + 0x2a], es; jns 0x148076; ret 0xbc01; 
0x0000000000175f38: mov word ptr [rbp + 0x2a], es; jns 0x175fb6; ret 0xbc01; 
0x00000000000e5698: mov word ptr [rbp + 0x2a], es; jns 0xe5716; ret 0xbc01; 
0x00000000001264c9: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136869: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce9: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa9: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d89: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b29: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6389: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2829: mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000012f88: mov word ptr [rbx], cs; add cl, bl; ret 0xc9d8; 
0x000000000001c1a0: mov word ptr [rbx], cs; or eax, dword ptr [rax]; add rsp, 0x18; fxch st(1); ret; 
0x00000000000cc804: mov word ptr [rbx], ss; ret 0xf2a5; 
0x0000000000105564: mov word ptr [rcx + rcx*8], cs; scasb al, byte ptr [rdi]; ret; 
0x00000000000d6168: mov word ptr [rdi + 0xcd7497], ds; ret; 
0x000000000006aaf5: mov word ptr [rdi], es; add al, ch; xchg ebx, eax; ret 5; 
0x000000000006aa5b: mov word ptr [rdi], es; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000000bdc9: mov word ptr [rdi], si; jne 0xbdd5; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000106204: mov word ptr [rdx], ds; ret 0xaf45; 
0x000000000019597d: mov word ptr [rdx], es; add byte ptr [rax + rax], cl; add ah, dh; add byte ptr [r8], al; clc; ret; 
0x000000000001ed17: mov word ptr [rdx], es; add byte ptr [rax], al; fxch st(1); leave; ret; 
0x00000000000e1f8a: mov word ptr [rdx], ss; ret 0x29b3; 
0x00000000000ece0d: mov word ptr [rip + 0x5f6000bf], fs; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x0000000000076210: mov word ptr [rsi - 7], ss; jmp qword ptr [rsi + 0x2e]; 
0x0000000000019f95: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000019f53: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019ee1: mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b1cb: mov word ptr [rsp - 0x10], ax; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000001b22f: mov word ptr [rsp - 0x10], cx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x00000000000182e1: mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b177: mov word ptr [rsp - 0x10], dx; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000001b270: mov word ptr [rsp - 0x10], dx; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000018c0e: mov word ptr [rsp - 0x10], r9w; mov dword ptr [rsp - 0x14], r10d; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001af5e: mov word ptr [rsp - 0x10], r9w; mov dword ptr [rsp - 0x14], r8d; mov dword ptr [rsp - 0x18], edx; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000019b68: mov word ptr [rsp - 0xc], ax; fldcw word ptr [rsp - 0xc]; fistp qword ptr [rsp - 0x18]; fldcw word ptr [rsp - 0xa]; mov rax, qword ptr [rsp - 0x18]; ret; 
0x000000000001b326: mov word ptr [rsp - 8], r9w; mov dword ptr [rsp - 0xc], r10d; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x00000000000d9b65: movabs al, byte ptr [0x1247ca629942bc3a]; mov edx, 0x45db833f; ret 0x961a; 
0x00000000000586dc: movabs al, byte ptr [0x202444290f0006c7]; add rsp, 0x30; pop rbx; ret; 
0x00000000000a9182: movabs al, byte ptr [0x23c550c07b9943c4]; pop rsp; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x000000000001d4b2: movabs al, byte ptr [0x24b840f906ddb]; add dh, bl; ret 0x6ddb; 
0x000000000010d1d1: movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x00000000000d6dfd: movabs al, byte ptr [0x48fa484940dd3fa5]; sar dword ptr [rdi + 0x1737ca6d], 0xda; ret 0x3f9e; 
0x000000000006ba3c: movabs al, byte ptr [0x5b48c4834800095c]; pop rbp; ret; 
0x00000000000a78bb: movabs al, byte ptr [0x7b41c4c4597bc1c4]; pop rcx; fadd st(5), st(0); ret; 
0x00000000000d58d2: movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x000000000010bf3b: movabs al, byte ptr [0xa07c3b83400a2636]; ret; 
0x00000000000e6e39: movabs al, byte ptr [0xab7f3fefeb2d9543]; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x00000000000df3a1: movabs al, byte ptr [0xaeaebfaf5aee3a6c]; ret; 
0x0000000000190718: movabs al, byte ptr [0xb8ffee502800007a]; jp 0x190723; add byte ptr [rax + 0x50], bh; out dx, al; call rax; 
0x0000000000190ae0: movabs al, byte ptr [0xb8ffef738800008f]; pop qword ptr [rax]; add al, bh; jae 0x190ade; call rax; 
0x0000000000190b30: movabs al, byte ptr [0xb8ffef76f8000090]; nop; add byte ptr [rax], al; or byte ptr [rdi - 0x11], dh; call rax; 
0x000000000010bdf0: movabs al, byte ptr [0xc0fff614a0fff614]; adc dh, dh; jmp rax; 
0x00000000000a57dc: movabs al, byte ptr [0xc1c400c76ba1e3c4]; jnp 0xa5840; ret; 
0x00000000000a4843: movabs al, byte ptr [0xc1c480c76bf9e3c4]; jnp 0xa48a6; ret; 
0x00000000000eb0b2: movabs al, byte ptr [0xcd2c33f408eedc6]; mov edx, 0x3d2e19bc; clc; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x00000000000e8ed1: movabs byte ptr [0x3f2801200d80], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x00000000000507ba: movabs byte ptr [0x48087a40f6000363], al; lea eax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x00000000000d880c: movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x000000000010143b: movabs byte ptr [0xafc3bd9a4005a36c], al; ret 0x4712; 
0x000000000012f6a9: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa49: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015dec9: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e189: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f69: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd09: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df569: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba09: movabs byte ptr [0xd4803fe9e0016e60], al; lodsb al, byte ptr [rsi]; jns 0xfba4f; ret 0x3fe5; 
0x00000000000d5e14: movabs byte ptr [0xd7527f133b3fbade], al; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x000000000010be20: movabs byte ptr [0xf3fff61cbffff61e], al; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x00000000000324fb: movabs byte ptr [0xf66c8590ff2000c], al; sub cl, al; ret; 
0x0000000000104c1a: movabs dword ptr [0x3ffeffb405], eax; add byte ptr [rax], al; add byte ptr [rax], al; and al, 0x42; ret; 
0x00000000000ca4e0: movabs dword ptr [0x563feae4e53a9850], eax; ret 0xa61; 
0x000000000004c4e0: movabs dword ptr [0x5b20c48348000002], eax; pop rbp; pop r12; ret; 
0x000000000009d265: movabs dword ptr [0x5b28c48348000003], eax; pop rbp; ret; 
0x00000000000577d9: movabs dword ptr [0x5b50c483480006d6], eax; ret; 
0x000000000004dee9: movabs dword ptr [0x6f05100ff3000001], eax; sub eax, 0x2e0f000b; ret 0x870f; 
0x00000000000e4d3c: movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x00000000000ece2d: movabs dword ptr [0x8753bc11a0003f3f], eax; ret 0xe6bf; 
0x00000000000735b9: movabs dword ptr [0x8f0fc0854800055e], eax; ret 6; 
0x00000000000d8638: movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000000023e2: movabs dword ptr [0xa82bd3cf66dfcbd1], eax; psubd mm1, qword ptr [rdi + 0x21c70f1b]; call 0xffffffff82f4948d; mov esp, 0x87919e45; ret; 
0x0000000000060e18: movabs dword ptr [0xb8c48148000024], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000cf184: movabs dword ptr [0xc000fd238a], eax; add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x00000000000d7081: movabs dword ptr [0xc31ebfc0a732485b], eax; push rax; ret 0x7477; 
0x0000000000095964: movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000fe3b6: movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000324cd: movabs dword ptr [0xf66c8590ff2000c], eax; sub cl, al; ret; 
0x0000000000057013: movabs eax, dword ptr [0x2200c76400345f]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000000000df5ec: movabs eax, dword ptr [0x35b00437793fe333]; rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x00000000000b0a3b: movabs eax, dword ptr [0x42cfbe1c4000606]; ret 0x894c; 
0x000000000006ad63: movabs eax, dword ptr [0x5d5b30c483480005]; pop r12; ret; 
0x00000000000518f4: movabs eax, dword ptr [0x7a1d20d2e0f0007]; add byte ptr [rdi + 0x28], dh; movd xmm0, eax; ret; 
0x0000000000103774: movabs eax, dword ptr [0xa7eaeef1a9f78c71]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000000cec35: movabs eax, dword ptr [0xbffeb74e]; add byte ptr [rax], al; ret 0x1ba9; 
0x00000000000518fb: movabs eax, dword ptr [0xc06e0f6628770007]; ret; 
0x000000000009596e: movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000880cb: movabs eax, dword ptr [0xc5d928f9c5000933]; ret; 
0x00000000000d6041: movabs eax, dword ptr [0xe75c3c871eb08799]; outsb dx, byte ptr ss:[rsi]; fucompi st(1); ret; 
0x00000000001311d1: movabs eax, dword ptr [0xfe553fbe377d85ff]; or al, 0xea; jno 0x1311ae; ret 0xd33f; 
0x000000000015f911: movabs eax, dword ptr [0xfe553fbe377d85ff]; or al, 0xea; jno 0x15f8ee; ret 0xd33f; 
0x00000000000d0a11: movabs eax, dword ptr [0xfe553fbe377d85ff]; or al, 0xea; jno 0xd09ee; ret 0xd33f; 
0x00000000000d6040: movabs eax, dword ptr fs:[0xe75c3c871eb08799]; outsb dx, byte ptr ss:[rsi]; fucompi st(1); ret; 
0x0000000000112308: movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x00000000000e77f0: movabs rax, 0x3f454387b607; add dl, al; ret; 
0x00000000000e4986: movabs rdi, 0xbbb32d23a9b0178a; pop rsp; and eax, 0x822883a1; mov r15d, 0x8152093a; ret; 
0x00000000000c47da: movapd xmm0, xmm10; ret; 
0x0000000000028670: movapd xmm0, xmm13; ret; 
0x00000000000270a7: movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000283c9: movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000000ef56: movapd xmm0, xmm1; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000044db2: movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000032221: movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002e039: movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x0000000000028083: movapd xmm0, xmm1; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003cba4: movapd xmm0, xmm1; pop rbx; ret; 
0x0000000000020d77: movapd xmm0, xmm1; ret; 
0x000000000003193b: movapd xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x0000000000030f30: movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x0000000000048ce1: movapd xmm0, xmm2; andpd xmm7, xmmword ptr [rip + 0x825f3]; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x00000000000273aa: movapd xmm0, xmm2; jne 0x277ae; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000471f2: movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000002dfdc: movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000048824: movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000486b2: movapd xmm0, xmm2; pop rbx; ret; 
0x000000000002dec0: movapd xmm0, xmm2; ret; 
0x0000000000020e1c: movapd xmm0, xmm4; jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x0000000000047f81: movapd xmm0, xmm5; jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000021f4e: movapd xmm0, xmm7; jne 0x22e73; add rsp, 0x48; ret; 
0x0000000000027160: movapd xmm1, xmm0; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000020d6f: movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043f98: movapd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000486ae: movapd xmm1, xmm0; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000003d128: movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320f0: movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4e0: movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xbb0cc]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x000000000003208a: movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000002dfd3: movapd xmm1, xmm0; mulsd xmm2, xmm0; pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000045590: movapd xmm1, xmm0; ret; 
0x000000000003d018: movapd xmm1, xmm2; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000002a757: movapd xmm1, xmm2; pop r13; movapd xmm0, xmm1; ret; 
0x0000000000044db6: movapd xmm1, xmm2; ret; 
0x00000000000280ec: movapd xmm1, xmm3; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004582e: movapd xmm1, xmm4; jne 0x459fe; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000004882c: movapd xmm1, xmm4; ret; 
0x00000000000471f6: movapd xmm1, xmm9; ret; 
0x0000000000049619: movapd xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000044daa: movapd xmm2, xmm0; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x000000000002debc: movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000000f397: movapd xmm2, xmm0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000047545: movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045521: movapd xmm2, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x000000000002e9e1: movapd xmm7, xmm1; andpd xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045b14: movapd xmm7, xmm1; andpd xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000c47db: movaps xmm0, xmm10; ret; 
0x0000000000028671: movaps xmm0, xmm13; ret; 
0x00000000000270a8: movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000283ca: movaps xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000004ac07: movaps xmm0, xmm1; divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x0000000000012500: movaps xmm0, xmm1; jne 0x12638; add rsp, 0x28; ret; 
0x000000000000ef57: movaps xmm0, xmm1; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000044db3: movaps xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000032222: movaps xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002e03a: movaps xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000005027d: movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004d69a: movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x000000000004ddbf: movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x0000000000028084: movaps xmm0, xmm1; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004c7ed: movaps xmm0, xmm1; pop rbx; pop rbp; pop r12; ret; 
0x000000000003cba5: movaps xmm0, xmm1; pop rbx; ret; 
0x0000000000020d78: movaps xmm0, xmm1; ret; 
0x000000000003193c: movaps xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000004fb04: movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x0000000000030f31: movaps xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004f238: movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000048ce2: movaps xmm0, xmm2; andpd xmm7, xmmword ptr [rip + 0x825f3]; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x00000000000273ab: movaps xmm0, xmm2; jne 0x277ae; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004ee4a: movaps xmm0, xmm2; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x00000000000471f3: movaps xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000002dfdd: movaps xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000048825: movaps xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000486b3: movaps xmm0, xmm2; pop rbx; ret; 
0x000000000002dec1: movaps xmm0, xmm2; ret; 
0x0000000000020e1d: movaps xmm0, xmm4; jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x0000000000050144: movaps xmm0, xmm4; ret; 
0x0000000000047f82: movaps xmm0, xmm5; jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x0000000000028672: movaps xmm0, xmm5; ret; 
0x0000000000021f4f: movaps xmm0, xmm7; jne 0x22e73; add rsp, 0x48; ret; 
0x0000000000027161: movaps xmm1, xmm0; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004a610: movaps xmm1, xmm0; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000020d70: movaps xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000049e9f: movaps xmm1, xmm0; addss xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x0000000000043f99: movaps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000486af: movaps xmm1, xmm0; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000003d129: movaps xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320f1: movaps xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4e1: movaps xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xbb0cc]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x00000000000501c8: movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d348: movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000049ddf: movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x000000000003208b: movaps xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000002dfd4: movaps xmm1, xmm0; mulsd xmm2, xmm0; pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x000000000005004b: movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x00000000000503ca: movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x0000000000045591: movaps xmm1, xmm0; ret; 
0x00000000000471f8: movaps xmm1, xmm1; ret; 
0x000000000003d019: movaps xmm1, xmm2; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000002a758: movaps xmm1, xmm2; pop r13; movapd xmm0, xmm1; ret; 
0x0000000000044db7: movaps xmm1, xmm2; ret; 
0x000000000004cb1c: movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x00000000000528d6: movaps xmm1, xmm3; movss dword ptr [rsp + 0x20], xmm0; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000280ed: movaps xmm1, xmm3; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004e6dd: movaps xmm1, xmm3; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004582f: movaps xmm1, xmm4; jne 0x459fe; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000004882d: movaps xmm1, xmm4; ret; 
0x000000000004cae1: movaps xmm1, xmm6; movaps xmm0, xmm1; ret; 
0x000000000004e782: movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x00000000000471f7: movaps xmm1, xmm9; ret; 
0x000000000004961a: movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d98: movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x0000000000044dab: movaps xmm2, xmm0; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x000000000002debd: movaps xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000004a219: movaps xmm2, xmm0; movaps xmm0, xmm2; pop rbx; ret; 
0x000000000004dc92: movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000000f398: movaps xmm2, xmm0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004a228: movaps xmm2, xmm1; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000047546: movaps xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000045522: movaps xmm2, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000054d09: movaps xmm3, xmm0; movss dword ptr [rsp + 0x40], xmm2; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x000000000002e9e2: movaps xmm7, xmm1; andpd xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045b15: movaps xmm7, xmm1; andpd xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004eba5: movaps xmm7, xmm1; andps xmm0, xmm5; andps xmm7, xmmword ptr [rip + 0x7cf2e]; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x00000000000c9b62: movaps xmmword ptr [rbp + 0x10], xmm2; add rsp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000007b1ac: movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x000000000007b274: movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000758d4: movaps xmmword ptr [rbx + 0x10], xmm0; jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x0000000000075adf: movaps xmmword ptr [rbx + 0x10], xmm0; jne 0x75aee; add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x0000000000078916: movaps xmmword ptr [rbx + 0x10], xmm2; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000007ab44: movaps xmmword ptr [rbx + 0x10], xmm3; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000007b180: movaps xmmword ptr [rbx + 0x10], xmm4; add rsp, 0x10; pop rbx; ret; 
0x00000000000762d5: movaps xmmword ptr [rbx + 0x10], xmm4; jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x0000000000076b50: movaps xmmword ptr [rbx + 0x10], xmm5; jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x00000000000799bf: movaps xmmword ptr [rbx + 0x10], xmm6; jne 0x79cf4; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000079fa1: movaps xmmword ptr [rbx + 0x10], xmm6; jne 0x7a331; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000078e62: movaps xmmword ptr [rbx + 0x10], xmm7; add rsp, 0x70; pop rbx; ret; 
0x000000000007a44d: movaps xmmword ptr [rbx + 0x10], xmm7; jne 0x7a968; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000007b1a9: movaps xmmword ptr [rbx], xmm1; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x000000000007b271: movaps xmmword ptr [rbx], xmm1; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000007c623: movaps xmmword ptr [rbx], xmm2; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000007b17d: movaps xmmword ptr [rbx], xmm3; movaps xmmword ptr [rbx + 0x10], xmm4; add rsp, 0x10; pop rbx; ret; 
0x00000000000762d2: movaps xmmword ptr [rbx], xmm3; movaps xmmword ptr [rbx + 0x10], xmm4; jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x0000000000076b4d: movaps xmmword ptr [rbx], xmm4; movaps xmmword ptr [rbx + 0x10], xmm5; jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x0000000000078e5f: movaps xmmword ptr [rbx], xmm6; movaps xmmword ptr [rbx + 0x10], xmm7; add rsp, 0x70; pop rbx; ret; 
0x000000000007545a: movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000075449: movaps xmmword ptr [rdi], xmm0; movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x00000000000745d5: movaps xmmword ptr [rdi], xmm0; ret; 
0x00000000000729e1: movaps xmmword ptr [rdi], xmm4; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000586e0: movaps xmmword ptr [rsp + 0x20], xmm0; add rsp, 0x30; pop rbx; ret; 
0x000000000007c374: movaps xmmword ptr [rsp + 0x20], xmm3; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000006fa3a: movaps xmmword ptr [rsp], xmm0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000049610: movaps xmmword ptr [rsp], xmm1; call 0x43f10; movapd xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d8f: movaps xmmword ptr [rsp], xmm1; call 0x518d0; movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000006fa81: movaps xmmword ptr [rsp], xmm5; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000055dbd: movd dword ptr [rsp + 0x10], mm0; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e5c: movd dword ptr [rsp + 0x10], mm0; add rsp, 0x38; ret; 
0x00000000000526bf: movd dword ptr [rsp + 0x10], mm0; add rsp, 0x48; ret; 
0x00000000000528e6: movd dword ptr [rsp + 0x20], mm0; add rsp, 0x48; ret; 
0x0000000000055326: movd dword ptr [rsp + 0x30], mm0; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000559cc: movd dword ptr [rsp + 0x30], mm0; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x000000000005620b: movd dword ptr [rsp + 0x40], mm0; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d19: movd dword ptr [rsp + 0x40], mm0; add rsp, 0x58; ret; 
0x0000000000052b23: movd dword ptr [rsp + 0x40], mm0; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x00000000000556a5: movd dword ptr [rsp + 0x40], mm0; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x00000000000549f0: movd dword ptr [rsp + 0x50], mm0; add rsp, 0x68; ret; 
0x0000000000053576: movd dword ptr [rsp + 0x80], mm0; add rsp, 0xc0; pop rbx; ret; 
0x00000000000525b6: movd dword ptr [rsp - 0x10], mm0; ret; 
0x000000000007473a: movd dword ptr [rsp - 0x18], mm0; mov qword ptr [rsp - 0x18], rdx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000074665: movd dword ptr [rsp - 0x18], mm0; mov qword ptr [rsp - 0x18], rsi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000053342: movd dword ptr [rsp - 0x28], mm0; ret; 
0x0000000000031a8f: movd dword ptr [rsp - 8], mm0; ret; 
0x00000000000321df: movd dword ptr [rsp - 8], mm1; movapd xmm0, xmm1; ret; 
0x000000000006c1a5: movd dword ptr [rsp], mm2; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000004fc14: movd eax, mm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000004fda4: movd eax, mm0; add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x0000000000050ee1: movd eax, mm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000867a0: movd eax, mm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000042fec: movd eax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000051985: movd eax, mm0; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x0000000000044030: movd eax, mm0; pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x0000000000086801: movd eax, mm0; shl ecx, 0x1f; and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x000000000004fe03: movd eax, mm2; add eax, esi; movd xmm0, eax; ret; 
0x000000000004db50: movd eax, mm2; xor eax, ebx; pop rbx; movd xmm0, eax; pop rbp; ret; 
0x000000000004fc13: movd eax, xmm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000004fda3: movd eax, xmm0; add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x0000000000050ee0: movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000051984: movd eax, xmm0; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x0000000000086800: movd eax, xmm0; shl ecx, 0x1f; and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x000000000004fe02: movd eax, xmm2; add eax, esi; movd xmm0, eax; ret; 
0x000000000004db4f: movd eax, xmm2; xor eax, ebx; pop rbx; movd xmm0, eax; pop rbp; ret; 
0x0000000000050ec1: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000050ec0: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000051103: movd mm0, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000044066: movd mm0, eax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000519bd: movd mm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000004db57: movd mm0, eax; pop rbp; ret; 
0x0000000000027e62: movd mm0, eax; ret; 
0x000000000004fdaa: movd mm0, eax; subss xmm0, xmm5; ret; 
0x00000000000503c7: movd mm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x0000000000086530: movd mm0, edx; ret; 
0x00000000000440bc: movd mm0, edx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000051a01: movd mm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x0000000000050257: movd mm1, eax; movaps xmm0, xmm1; ret; 
0x00000000000430df: movd mm1, eax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430c0: movd mm1, eax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000050f76: movd mm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000050f5d: movd mm1, eax; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000324ac: movd mm1, edi; movapd xmm0, xmm1; ret; 
0x0000000000050ff9: movd mm1, edi; movaps xmm0, xmm1; ret; 
0x000000000005027a: movd mm1, edx; movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051102: movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000519bc: movd xmm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000004db56: movd xmm0, eax; pop rbp; ret; 
0x000000000004a983: movd xmm0, eax; ret; 
0x000000000004fda9: movd xmm0, eax; subss xmm0, xmm5; ret; 
0x00000000000503c6: movd xmm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x00000000000866a8: movd xmm0, edx; ret; 
0x0000000000051a00: movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x0000000000050256: movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000050f75: movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000050f5c: movd xmm1, eax; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000050ff8: movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x0000000000050279: movd xmm1, edx; movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000072c15: movdqa xmm0, xmm1; call 0xc4e80; add rsp, 0x20; pop rbx; ret; 
0x0000000000072650: movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006c100: movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x00000000000723b0: movdqa xmm0, xmm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000643f8: movdqa xmm0, xmm2; jne 0x678fa; add rsp, 0x50; pop rbx; ret; 
0x000000000006b7a4: movdqa xmm0, xmm2; pop rbp; pop r12; pop r13; ret; 
0x000000000006b6c4: movdqa xmm0, xmm2; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006c3c1: movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006b774: movdqa xmm0, xmm2; ret; 
0x00000000000742af: movdqa xmm0, xmm7; call 0xc4e80; add rsp, 0xf8; pop rbx; pop rbp; ret; 
0x0000000000074390: movdqa xmm0, xmmword ptr [rip + 0x5a518]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000072635: movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x000000000006ba38: movdqa xmm0, xmmword ptr [rip + 0x95ca0]; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000006f78c: movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006eb40: movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x0000000000058bb9: movdqa xmm0, xmmword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x00000000000577d0: movdqa xmm0, xmmword ptr [rip + 0xa9a18]; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000070157: movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006fea8: movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000007544c: movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000075460: movdqa xmm0, xmmword ptr [rsp + 0x18]; ret; 
0x000000000007c363: movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000007c986: movdqa xmm0, xmmword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x000000000007c938: movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x0000000000075470: movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x000000000006ee66: movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000072870: movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x0000000000072c02: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fa16: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb48: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000007ccb2: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0ea: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007c456: movdqa xmm0, xmmword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000069b80: movdqa xmm0, xmmword ptr [rsp]; call 0xc6d90; add rsp, 0x40; pop rbx; ret; 
0x0000000000071fa5: movdqa xmm0, xmmword ptr [rsp]; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x000000000007d984: movdqa xmm0, xmmword ptr [rsp]; jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007cee4: movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000074898: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x18; ret; 
0x000000000006b938: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb60: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000057d92: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x38; ret; 
0x0000000000069b40: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x40; pop rbx; ret; 
0x000000000006bc68: movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000057e39: movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x38; ret; 
0x00000000000589db: movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000057307: movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x50; pop rbx; ret; 
0x000000000006f770: movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000058c18: movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000057e30: movdqa xmm1, xmm0; call 0xc7880; movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x38; ret; 
0x0000000000072add: movdqa xmm1, xmmword ptr [rip + 0x8ebdb]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072b05: movdqa xmm1, xmmword ptr [rip + 0x8ec13]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072648: movdqa xmm1, xmmword ptr [rip + 0x8f020]; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fb7d: movdqa xmm1, xmmword ptr [rip + 0x91b3b]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fba5: movdqa xmm1, xmmword ptr [rip + 0x91b73]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072710: movdqa xmm1, xmmword ptr [rip + 0x92b38]; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000007c450: movdqa xmm1, xmmword ptr [rsp + 0x10]; movdqa xmm0, xmmword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000007c980: movdqa xmm1, xmmword ptr [rsp + 0x30]; movdqa xmm0, xmmword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x000000000007de82: movdqa xmm2, xmm0; add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006e757: movdqa xmm2, xmm0; add rsp, 0x30; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006c3b9: movdqa xmm2, xmm0; add rsp, 0x50; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006c451: movdqa xmm2, xmm0; add rsp, 0x50; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000007de41: movdqa xmm2, xmmword ptr [rsp]; add rsp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000007466f: movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000006eee4: movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000006c1a9: movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000006c0fb: movhps xmm2, qword ptr [rsp + 0x18]; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x000000000007482f: movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x0000000000072c30: movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000072c16: movq mm0, mm1; call 0xc4e80; add rsp, 0x20; pop rbx; ret; 
0x0000000000072651: movq mm0, mm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006c101: movq mm0, mm2; add rsp, 0x28; ret; 
0x00000000000723b1: movq mm0, mm2; call 0xc8fa0; add rsp, 0x18; ret; 
0x00000000000643f9: movq mm0, mm2; jne 0x678fa; add rsp, 0x50; pop rbx; ret; 
0x000000000006b7a5: movq mm0, mm2; pop rbp; pop r12; pop r13; ret; 
0x000000000006b6c5: movq mm0, mm2; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006c3c2: movq mm0, mm2; pop rbx; ret; 
0x000000000006b775: movq mm0, mm2; ret; 
0x00000000000742b0: movq mm0, mm7; call 0xc4e80; add rsp, 0xf8; pop rbx; pop rbp; ret; 
0x0000000000074391: movq mm0, qword ptr [rip + 0x5a518]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000072636: movq mm0, qword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x000000000006ba39: movq mm0, qword ptr [rip + 0x95ca0]; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000006f78d: movq mm0, qword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006eb41: movq mm0, qword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x0000000000058bba: movq mm0, qword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x00000000000577d1: movq mm0, qword ptr [rip + 0xa9a18]; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000070158: movq mm0, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006fea9: movq mm0, qword ptr [rsp + 0x10]; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000007544d: movq mm0, qword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000075461: movq mm0, qword ptr [rsp + 0x18]; ret; 
0x000000000007c364: movq mm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000007c987: movq mm0, qword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x000000000007c939: movq mm0, qword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x0000000000075471: movq mm0, qword ptr [rsp + 8]; ret; 
0x000000000006ee67: movq mm0, qword ptr [rsp - 0x18]; ret; 
0x0000000000072871: movq mm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000072c03: movq mm0, qword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fa17: movq mm0, qword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb49: movq mm0, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000007ccb3: movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0eb: movq mm0, qword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007c457: movq mm0, qword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000069b81: movq mm0, qword ptr [rsp]; call 0xc6d90; add rsp, 0x40; pop rbx; ret; 
0x0000000000071fa6: movq mm0, qword ptr [rsp]; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x000000000007d985: movq mm0, qword ptr [rsp]; jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007cee5: movq mm0, qword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000044065: movq mm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000027e61: movq mm0, rax; ret; 
0x000000000008652f: movq mm0, rdx; ret; 
0x00000000000440bb: movq mm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000074899: movq mm1, mm0; call 0xc4e80; add rsp, 0x18; ret; 
0x000000000006b939: movq mm1, mm0; call 0xc4e80; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb61: movq mm1, mm0; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000057d93: movq mm1, mm0; call 0xc4e80; add rsp, 0x38; ret; 
0x0000000000069b41: movq mm1, mm0; call 0xc4e80; add rsp, 0x40; pop rbx; ret; 
0x000000000006bc69: movq mm1, mm0; call 0xc4e80; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000057e3a: movq mm1, mm0; call 0xc6150; add rsp, 0x38; ret; 
0x00000000000589dc: movq mm1, mm0; call 0xc6150; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000057308: movq mm1, mm0; call 0xc6150; add rsp, 0x50; pop rbx; ret; 
0x000000000006f771: movq mm1, mm0; call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000058c19: movq mm1, mm0; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000057e31: movq mm1, mm0; call 0xc7880; movdqa xmm1, xmm0; call 0xc6150; add rsp, 0x38; ret; 
0x0000000000072ade: movq mm1, qword ptr [rip + 0x8ebdb]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072b06: movq mm1, qword ptr [rip + 0x8ec13]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072649: movq mm1, qword ptr [rip + 0x8f020]; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fb7e: movq mm1, qword ptr [rip + 0x91b3b]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fba6: movq mm1, qword ptr [rip + 0x91b73]; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072711: movq mm1, qword ptr [rip + 0x92b38]; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000007c451: movq mm1, qword ptr [rsp + 0x10]; movdqa xmm0, xmmword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000007c981: movq mm1, qword ptr [rsp + 0x30]; movdqa xmm0, xmmword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x00000000000430de: movq mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430bf: movq mm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000324ab: movq mm1, rdi; movapd xmm0, xmm1; ret; 
0x000000000007de83: movq mm2, mm0; add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006e758: movq mm2, mm0; add rsp, 0x30; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000006c3ba: movq mm2, mm0; add rsp, 0x50; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006c452: movq mm2, mm0; add rsp, 0x50; pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000007de42: movq mm2, qword ptr [rsp]; add rsp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x00000000000525c0: movq qword ptr [rsp - 8], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000525d0: movq qword ptr [rsp - 8], xmm0; movss xmm0, dword ptr [rsp - 8]; ret; 
0x000000000008679f: movq rax, mm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000042feb: movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000004402f: movq rax, mm0; pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x000000000008679e: movq rax, xmm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000042fea: movq rax, xmm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000004402e: movq rax, xmm0; pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x0000000000055dbc: movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e5b: movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000526be: movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000528e5: movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000055325: movq xmm0, qword ptr [rsp + 0x30]; jne 0x55538; add rsp, 0x50; pop rbx; ret; 
0x00000000000559cb: movq xmm0, qword ptr [rsp + 0x30]; jne 0x55c90; add rsp, 0x50; pop rbx; ret; 
0x000000000005620a: movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d18: movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000052b22: movq xmm0, qword ptr [rsp + 0x40]; jne 0x52de1; add rsp, 0x60; pop rbx; ret; 
0x00000000000556a4: movq xmm0, qword ptr [rsp + 0x40]; jne 0x558db; add rsp, 0x60; pop rbx; ret; 
0x00000000000549ef: movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x0000000000053575: movq xmm0, qword ptr [rsp + 0x80]; add rsp, 0xc0; pop rbx; ret; 
0x00000000000525b5: movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000074739: movq xmm0, qword ptr [rsp - 0x18]; mov qword ptr [rsp - 0x18], rdx; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000074664: movq xmm0, qword ptr [rsp - 0x18]; mov qword ptr [rsp - 0x18], rsi; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000053341: movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000031a8e: movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000044064: movq xmm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000027e60: movq xmm0, rax; ret; 
0x000000000008652e: movq xmm0, rdx; ret; 
0x00000000000440ba: movq xmm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000321de: movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000430dd: movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430be: movq xmm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000324aa: movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x000000000006c1a4: movq xmm2, qword ptr [rsp]; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000009e218: movsb byte ptr [rdi], byte ptr [rsi]; add eax, 0x3bc50000; pop rsp; ret; 
0x00000000000e3304: movsb byte ptr [rdi], byte ptr [rsi]; and eax, 0xc1ba3ff4; in al, 0xf9; ret; 
0x00000000000afc38: movsb byte ptr [rdi], byte ptr [rsi]; clts; add ch, al; ret; 
0x00000000000d7d7e: movsb byte ptr [rdi], byte ptr [rsi]; mov edi, 0xde917e27; mov bl, 0xf3; mov ch, 0xbf; ret 0x455c; 
0x000000000003d131: movsb byte ptr [rdi], byte ptr [rsi]; or al, byte ptr [rax]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000782c8: movsb byte ptr [rdi], byte ptr [rsi]; or dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000032010: movsb byte ptr [rdi], byte ptr [rsi]; push rbp; or eax, dword ptr [rax]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x00000000000fc8d2: movsb byte ptr [rdi], byte ptr [rsi]; ret 0x42d8; 
0x00000000000e4a0b: movsb byte ptr [rdi], byte ptr [rsi]; ret 0x7f48; 
0x00000000000e3a70: movsb byte ptr [rdi], byte ptr [rsi]; ret 0x82c8; 
0x0000000000078ea8: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000010d524: movsb byte ptr [rdi], byte ptr [rsi]; sahf; ret; 
0x00000000000cbf62: movsb byte ptr [rdi], byte ptr [rsi]; sal dword ptr [rsi], cl; ret; 
0x000000000010e56a: movsb byte ptr [rdi], byte ptr [rsi]; sbb spl, byte ptr [r15 + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x000000000010e561: movsb byte ptr [rdi], byte ptr [rsi]; sbb spl, byte ptr [r9 + rax*2 + 0x1a41a41a]; movsb byte ptr [rdi], byte ptr [rsi]; sbb spl, byte ptr [r15 + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x00000000000ddc38: movsb byte ptr [rdi], byte ptr [rsi]; test dword ptr [rbp - 0x6b3e65b8], ebx; mov edi, 0xf02a83e4; sti; call rsi; 
0x00000000000cd920: movsb byte ptr [rdi], byte ptr [rsi]; xchg edi, eax; ret; 
0x00000000000cbf61: movsb byte ptr [rdi], byte ptr cs:[rsi]; sal dword ptr [rsi], cl; ret; 
0x00000000000fd96a: movsd dword ptr [rdi], dword ptr [rsi]; add bl, byte ptr [rcx - 0x40c01d33]; sbb dword ptr [rdx + 0x70], edx; ret 0xfb3a; 
0x0000000000190e21: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; mov byte ptr [rbx], dl; bnd call qword ptr [rax - 0x57ffff5b]; adc al, 0xf2; jmp rax; 
0x0000000000190e29: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0x14; bnd jmp rax; 
0x0000000000074395: movsd dword ptr [rdi], dword ptr [rsi]; add eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e9b64: movsd dword ptr [rdi], dword ptr [rsi]; call qword ptr [rdx]; 
0x000000000001dec2: movsd dword ptr [rdi], dword ptr [rsi]; fstp st(0); fld xword ptr [rip + 0xb1b15]; add rsp, 0x58; fxch st(1); ret; 
0x00000000000e9efc: movsd dword ptr [rdi], dword ptr [rsi]; jmp qword ptr [rdx]; 
0x00000000001125a1: movsd dword ptr [rdi], dword ptr [rsi]; mov ch, 0x5f; loope 0x11255f; int 0x3f; ret 0xcc6f; 
0x000000000006fb5f: movsd dword ptr [rdi], dword ptr [rsi]; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x28; ret; 
0x00000000000d7e49: movsd dword ptr [rdi], dword ptr [rsi]; nop; ret; 
0x000000000005100b: movsd dword ptr [rdi], dword ptr [rsi]; or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000183b7: movsd dword ptr [rdi], dword ptr [rsi]; or eax, dword ptr fs:[rax]; fmulp st(1); ret; 
0x00000000001018c2: movsd dword ptr [rdi], dword ptr [rsi]; popfq; ret; 
0x00000000000db44b: movsd dword ptr [rdi], dword ptr [rsi]; push rsi; ret 0xbfd2; 
0x000000000010ea95: movsd dword ptr [rdi], dword ptr [rsi]; ret 0x576; 
0x000000000007aae7: movsd dword ptr [rdi], dword ptr [rsi]; ret 4; 
0x00000000000905f7: movsd dword ptr [rdi], dword ptr [rsi]; ret 6; 
0x00000000000d0ddd: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000000f227: movsd dword ptr [rdi], dword ptr [rsi]; ror byte ptr [rbx], 0; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x00000000000de9e0: movsd dword ptr [rdi], dword ptr [rsi]; sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x00000000000e5a43: movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x0000000000001635: movsd dword ptr [rdi], dword ptr [rsi]; xor eax, 0x9b39a10f; test al, 0x84; ret; 
0x0000000000049739: movsd qword ptr [rbx], xmm1; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000007e9ff: movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000007ff15: movsd qword ptr [rdi + 8], xmm6; ret; 
0x000000000007f453: movsd qword ptr [rdi + 8], xmm7; ret; 
0x000000000007e9f7: movsd qword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000007f44b: movsd qword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000043061: movsd qword ptr [rdi], xmm0; and rax, rdx; movq xmm0, rax; ret; 
0x000000000004406e: movsd qword ptr [rdi], xmm0; ret; 
0x000000000007ff0d: movsd qword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x00000000000430e2: movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430c3: movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000007e414: movsd qword ptr [rsi], xmm1; jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x000000000002a5f0: movsd qword ptr [rsp + 0x10], xmm3; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000049642: movsd qword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049682: movsd qword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x000000000004965a: movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x000000000004969a: movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000027e80: movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x000000000009b2a0: movsd xmm0, qword ptr [rip + 0x30018]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049538: movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x000000000004951c: movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000048ab9: movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000489b0: movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x0000000000048ec0: movsd xmm0, qword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x0000000000048994: movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x00000000000478f0: movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x00000000000474a9: movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x0000000000045b30: movsd xmm0, qword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000044fd8: movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000044fa0: movsd xmm0, qword ptr [rip + 0x862e8]; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000028f78: movsd xmm0, qword ptr [rip + 0xa2340]; ret; 
0x0000000000028458: movsd xmm0, qword ptr [rip + 0xa2e60]; ret; 
0x000000000003d12c: movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x0000000000031b5d: movsd xmm0, qword ptr [rip + 0xae513]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000320f4: movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x0000000000031ce0: movsd xmm0, qword ptr [rip + 0xb1d98]; ret; 
0x0000000000031c46: movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000003200c: movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x000000000002c4e4: movsd xmm0, qword ptr [rip + 0xbb0cc]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x0000000000037400: movsd xmm0, qword ptr [rsp + 0x18]; jne 0x37412; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x0000000000049940: movsd xmm0, qword ptr [rsp + 8]; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000044e42: movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000043ef5: movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000435ca: movsd xmm0, qword ptr [rsp - 0x18]; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000000323cc: movsd xmm0, qword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000003235b: movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000004964f: movsd xmm0, xmm1; ret; 
0x0000000000049530: movsd xmm1, qword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a8: movsd xmm1, qword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x00000000000474dd: movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000045aec: movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000044fd0: movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000042f00: movsd xmm1, qword ptr [rip + 0x920d8]; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x0000000000043160: movsd xmm1, qword ptr [rip + 0x9cf10]; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004318e: movsd xmm1, qword ptr [rip + 0xa0582]; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000027099: movsd xmm1, qword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000271cd: movsd xmm1, qword ptr [rip + 0xa48d3]; add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002710d: movsd xmm1, qword ptr [rip + 0xa4993]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000031ae2: movsd xmm1, qword ptr [rip + 0xae58e]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x00000000000270e3: movsd xmm1, qword ptr [rip + 0xb8f8d]; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000003221b: movsd xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042eeb: movsd xmm1, qword ptr [rsp]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000029228: movsd xmm13, qword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028708: movsd xmm13, qword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000080281: movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x0000000000032078: movsd xmm2, qword ptr [rip + 0xa2f60]; ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000002e05a: movsd xmm2, qword ptr [rsp]; add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x000000000000e6b1: movsd xmm4, qword ptr [rsp + 8]; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000056eb8: movss dword ptr [rbx], xmm1; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000050f43: movss dword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000050f8b: movss dword ptr [rdi], xmm0; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000519c5: movss dword ptr [rdi], xmm0; ret; 
0x000000000009b6b0: movss dword ptr [rdi], xmm0; shufps xmm0, xmm0, 1; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b917: movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x0000000000050f79: movss dword ptr [rdi], xmm1; ret; 
0x0000000000050f60: movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000009b938: movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b974: movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x000000000009b6b8: movss dword ptr [rsi], xmm0; ret; 
0x000000000009b6d4: movss dword ptr [rsi], xmm0; shufps xmm0, xmm0, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000009b91f: movss dword ptr [rsi], xmm1; ret; 
0x0000000000051247: movss dword ptr [rsi], xmm4; ret; 
0x000000000009b978: movss dword ptr [rsi], xmm7; ret; 
0x0000000000056994: movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b2: movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000055db0: movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e4f: movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000055db6: movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e55: movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000005699a: movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b8: movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000528d9: movss dword ptr [rsp + 0x20], xmm0; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000528df: movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000561fe: movss dword ptr [rsp + 0x40], xmm1; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d0c: movss dword ptr [rsp + 0x40], xmm2; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000056204: movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d12: movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x00000000000549e3: movss dword ptr [rsp + 0x50], xmm4; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000549e9: movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000525a9: movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005333b: movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000053335: movss dword ptr [rsp - 0x28], xmm1; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x00000000000525af: movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000056dc0: movss dword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056e00: movss dword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056dd7: movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e17: movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x00000000000c453a: movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000c4533: movss dword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000051980: movss xmm0, dword ptr [rdi]; movd eax, xmm0; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x000000000004a8dc: movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000004fd85: movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x000000000009b930: movss xmm0, dword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x0000000000051910: movss xmm0, dword ptr [rip + 0xaf804]; ret; 
0x00000000000501cb: movss xmm0, dword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004fdbf: movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004fe20: movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x000000000004ff1b: movss xmm0, dword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecc8: movss xmm0, dword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x000000000004eea0: movss xmm0, dword ptr [rip + 0xb1e60]; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x000000000004d34b: movss xmm0, dword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000049ea6: movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x0000000000049de2: movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x0000000000049d28: movss xmm0, dword ptr [rip + 0xb6644]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c16: movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x00000000000570b8: movss xmm0, dword ptr [rsp + 0xc]; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000004d616: movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000004d230: movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x00000000000525c6: movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000525d6: movss xmm0, dword ptr [rsp - 8]; ret; 
0x0000000000056dcd: movss xmm0, xmm1; ret; 
0x000000000004a5a8: movss xmm1, dword ptr [eip + 0xb5e03]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000005617c: movss xmm1, dword ptr [rip + 0x762ec]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000004f960: movss xmm1, dword ptr [rip + 0x7a898]; add rsp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004eb00: movss xmm1, dword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000004d6ac: movss xmm1, dword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a570: movss xmm1, dword ptr [rip + 0x7fc88]; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000004a674: movss xmm1, dword ptr [rip + 0x80b50]; add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5cc: movss xmm1, dword ptr [rip + 0x80bf8]; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000009b90f: movss xmm1, dword ptr [rip + 0xa78e9]; movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x0000000000051007: movss xmm1, dword ptr [rip + 0xaf3a5]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005102c: movss xmm1, dword ptr [rip + 0xaf3a8]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fc3e: movss xmm1, dword ptr [rip + 0xb076e]; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004faf8: movss xmm1, dword ptr [rip + 0xb08dc]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004a5a9: movss xmm1, dword ptr [rip + 0xb5e03]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000049ff8: movss xmm1, dword ptr [rip + 0xb63ac]; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x00000000000526ac: movss xmm1, dword ptr [rsp + 0x18]; movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000052e49: movss xmm1, dword ptr [rsp + 0x1c]; movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000525a3: movss xmm1, dword ptr [rsp - 8]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005003a: movss xmm2, dword ptr [rip + 0x7f98e]; ucomiss xmm2, xmm1; jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x000000000004a2a4: movss xmm2, dword ptr [rip + 0xb6130]; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000011b15: movss xmm2, dword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000012425: movss xmm2, dword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000012665: movss xmm2, dword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x00000000000126fc: movss xmm2, dword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x000000000004dde2: movss xmm2, dword ptr [rsp + 8]; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x0000000000011cd1: movss xmm4, dword ptr [rsp + 0xc]; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x00000000000d8aeb: movsx ebx, dl; ret; 
0x00000000000d9504: movsxd r10, dword ptr [rax - 0x41]; ret 0xe557; 
0x00000000000c6ebc: movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000000f39b: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006f754: movsxd rdi, edi; neg rdi; sub rdi, 0x3fff; call 0xc9110; add rsp, 0x18; ret; 
0x0000000000105d51: movsxd rsi, dword ptr [rdi]; ret 0xfb80; 
0x0000000000049650: movups xmm0, xmm1; ret; 
0x0000000000051981: movups xmm0, xmmword ptr [rdi]; movd eax, xmm0; pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x000000000004a8dd: movups xmm0, xmmword ptr [rdx + rax*4]; ret; 
0x0000000000027e81: movups xmm0, xmmword ptr [rdx + rax*8]; ret; 
0x000000000009b2a1: movups xmm0, xmmword ptr [rip + 0x30018]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004fd86: movups xmm0, xmmword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x0000000000049539: movups xmm0, xmmword ptr [rip + 0x81d50]; ret; 
0x000000000004951d: movups xmm0, xmmword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000048aba: movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000489b1: movups xmm0, xmmword ptr [rip + 0x828d8]; ret; 
0x0000000000048ec1: movups xmm0, xmmword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x0000000000048995: movups xmm0, xmmword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x00000000000478f1: movups xmm0, xmmword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x00000000000474aa: movups xmm0, xmmword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x0000000000045b31: movups xmm0, xmmword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000044fd9: movups xmm0, xmmword ptr [rip + 0x862b0]; ret; 
0x0000000000044fa1: movups xmm0, xmmword ptr [rip + 0x862e8]; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000028f79: movups xmm0, xmmword ptr [rip + 0xa2340]; ret; 
0x0000000000028459: movups xmm0, xmmword ptr [rip + 0xa2e60]; ret; 
0x000000000009b931: movups xmm0, xmmword ptr [rip + 0xa78c8]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000003d12d: movups xmm0, xmmword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x0000000000031b5e: movups xmm0, xmmword ptr [rip + 0xae513]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000051911: movups xmm0, xmmword ptr [rip + 0xaf804]; ret; 
0x00000000000501cc: movups xmm0, xmmword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004fdc0: movups xmm0, xmmword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004fe21: movups xmm0, xmmword ptr [rip + 0xb0768]; ret; 
0x000000000004ff1c: movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x000000000004ecc9: movups xmm0, xmmword ptr [rip + 0xb16ac]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x00000000000320f5: movups xmm0, xmmword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x0000000000031ce1: movups xmm0, xmmword ptr [rip + 0xb1d98]; ret; 
0x000000000004eea1: movups xmm0, xmmword ptr [rip + 0xb1e60]; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000031c47: movups xmm0, xmmword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000004d34c: movups xmm0, xmmword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x000000000003200d: movups xmm0, xmmword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000049ea7: movups xmm0, xmmword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x0000000000049de3: movups xmm0, xmmword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x0000000000049d29: movups xmm0, xmmword ptr [rip + 0xb6644]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c17: movups xmm0, xmmword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x000000000002c4e5: movups xmm0, xmmword ptr [rip + 0xbb0cc]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x0000000000037401: movups xmm0, xmmword ptr [rsp + 0x18]; jne 0x37412; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x00000000000570b9: movups xmm0, xmmword ptr [rsp + 0xc]; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000049941: movups xmm0, xmmword ptr [rsp + 8]; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000044e43: movups xmm0, xmmword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x000000000004d617: movups xmm0, xmmword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x0000000000043ef6: movups xmm0, xmmword ptr [rsp - 0x10]; ret; 
0x00000000000435cb: movups xmm0, xmmword ptr [rsp - 0x18]; fsub st(1), st(0); fdivp st(1); fstp qword ptr [rsi]; ret; 
0x00000000000323cd: movups xmm0, xmmword ptr [rsp - 0x18]; mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000003235c: movups xmm0, xmmword ptr [rsp - 0x20]; ret; 
0x000000000004d231: movups xmm0, xmmword ptr [rsp - 0xc]; ret; 
0x00000000000525c7: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x00000000000525d7: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x000000000005617d: movups xmm1, xmmword ptr [rip + 0x762ec]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000004f961: movups xmm1, xmmword ptr [rip + 0x7a898]; add rsp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004eb01: movups xmm1, xmmword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000004d6ad: movups xmm1, xmmword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a571: movups xmm1, xmmword ptr [rip + 0x7fc88]; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000004a675: movups xmm1, xmmword ptr [rip + 0x80b50]; add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5cd: movups xmm1, xmmword ptr [rip + 0x80bf8]; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049531: movups xmm1, xmmword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a9: movups xmm1, xmmword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x00000000000474de: movups xmm1, xmmword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000045aed: movups xmm1, xmmword ptr [rip + 0x85fac]; ret; 
0x0000000000044fd1: movups xmm1, xmmword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x0000000000042f01: movups xmm1, xmmword ptr [rip + 0x920d8]; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x0000000000043161: movups xmm1, xmmword ptr [rip + 0x9cf10]; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004318f: movups xmm1, xmmword ptr [rip + 0xa0582]; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002709a: movups xmm1, xmmword ptr [rip + 0xa421f]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000271ce: movups xmm1, xmmword ptr [rip + 0xa48d3]; add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002710e: movups xmm1, xmmword ptr [rip + 0xa4993]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000009b910: movups xmm1, xmmword ptr [rip + 0xa78e9]; movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x0000000000031ae3: movups xmm1, xmmword ptr [rip + 0xae58e]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x0000000000051008: movups xmm1, xmmword ptr [rip + 0xaf3a5]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005102d: movups xmm1, xmmword ptr [rip + 0xaf3a8]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fc3f: movups xmm1, xmmword ptr [rip + 0xb076e]; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004faf9: movups xmm1, xmmword ptr [rip + 0xb08dc]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004a5aa: movups xmm1, xmmword ptr [rip + 0xb5e03]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000049ff9: movups xmm1, xmmword ptr [rip + 0xb63ac]; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x00000000000270e4: movups xmm1, xmmword ptr [rip + 0xb8f8d]; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000526ad: movups xmm1, xmmword ptr [rsp + 0x18]; movss dword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000052e4a: movups xmm1, xmmword ptr [rsp + 0x1c]; movss dword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000003221c: movups xmm1, xmmword ptr [rsp - 8]; movapd xmm0, xmm1; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000525a4: movups xmm1, xmmword ptr [rsp - 8]; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042eec: movups xmm1, xmmword ptr [rsp]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000029229: movups xmm13, xmmword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028709: movups xmm13, xmmword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000080282: movups xmm2, xmmword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000005003b: movups xmm2, xmmword ptr [rip + 0x7f98e]; ucomiss xmm2, xmm1; jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x0000000000032079: movups xmm2, xmmword ptr [rip + 0xa2f60]; ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000004a2a5: movups xmm2, xmmword ptr [rip + 0xb6130]; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000011b16: movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000012426: movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000012666: movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x00000000000126fd: movups xmm2, xmmword ptr [rsp + 0xc]; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x000000000004dde3: movups xmm2, xmmword ptr [rsp + 8]; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x000000000002e05b: movups xmm2, xmmword ptr [rsp]; add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x0000000000011cd2: movups xmm4, xmmword ptr [rsp + 0xc]; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x000000000000e6b2: movups xmm4, xmmword ptr [rsp + 8]; ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x000000000002922a: movups xmm5, xmmword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002870a: movups xmm5, xmmword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004973a: movups xmmword ptr [rbx], xmm1; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000007ea00: movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000007ff16: movups xmmword ptr [rdi + 8], xmm6; ret; 
0x000000000007f454: movups xmmword ptr [rdi + 8], xmm7; ret; 
0x000000000007e9f8: movups xmmword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000007f44c: movups xmmword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000050f44: movups xmmword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000043062: movups xmmword ptr [rdi], xmm0; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000050f8c: movups xmmword ptr [rdi], xmm0; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x000000000004406f: movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009b6b1: movups xmmword ptr [rdi], xmm0; shufps xmm0, xmm0, 1; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b918: movups xmmword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000007ff0e: movups xmmword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x00000000000430e3: movups xmmword ptr [rdi], xmm1; ret; 
0x00000000000430c4: movups xmmword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000050f61: movups xmmword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000009b939: movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x000000000009b975: movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x000000000009b6b9: movups xmmword ptr [rsi], xmm0; ret; 
0x000000000009b6d5: movups xmmword ptr [rsi], xmm0; shufps xmm0, xmm0, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000007e415: movups xmmword ptr [rsi], xmm1; jne 0x7e44d; add rsp, 0x20; pop rbx; ret; 
0x000000000009b920: movups xmmword ptr [rsi], xmm1; ret; 
0x0000000000051248: movups xmmword ptr [rsi], xmm4; ret; 
0x000000000009b979: movups xmmword ptr [rsi], xmm7; ret; 
0x0000000000056995: movups xmmword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b3: movups xmmword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000055db1: movups xmmword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e50: movups xmmword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000002a5f1: movups xmmword ptr [rsp + 0x10], xmm3; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000055db7: movups xmmword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000052e56: movups xmmword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000005699b: movups xmmword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000526b9: movups xmmword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000528da: movups xmmword ptr [rsp + 0x20], xmm0; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000528e0: movups xmmword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000561ff: movups xmmword ptr [rsp + 0x40], xmm1; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d0d: movups xmmword ptr [rsp + 0x40], xmm2; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000056205: movups xmmword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d13: movups xmmword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x00000000000549e4: movups xmmword ptr [rsp + 0x50], xmm4; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000549ea: movups xmmword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000525aa: movups xmmword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005333c: movups xmmword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x0000000000053336: movups xmmword ptr [rsp - 0x28], xmm1; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x00000000000525b0: movups xmmword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000056dc1: movups xmmword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056e01: movups xmmword ptr [rsp - 4], xmm0; test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056dd8: movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e18: movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x00000000000c453b: movups xmmword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000049643: movups xmmword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049683: movups xmmword ptr [rsp - 8], xmm0; test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000c4535: movups xmmword ptr [rsp - 8], xmm1; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004965b: movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x000000000004969b: movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x00000000000c4534: movups xmmword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000072da5: movzx eax, al; add rsp, 0x28; ret; 
0x0000000000042f5f: movzx eax, al; ret; 
0x000000000000c370: movzx eax, word ptr [rdi]; and esi, 0x3d; and eax, esi; ret; 
0x00000000000fcb4d: movzx edi, word ptr [rdi]; jmp qword ptr [rdx - 0x1b]; 
0x00000000000d34c3: mul byte ptr [rbx]; rcr byte ptr [rsp + rdi + 0x5afe73ac], cl; ret; 
0x0000000000077776: mul byte ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0xf]; 
0x0000000000031b66: mulps xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000032226: mulps xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000050281: mulps xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000323d3: mulps xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000032111: mulps xmm0, xmm0; ret; 
0x000000000009afff: mulps xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ab7e: mulps xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000027e91: mulps xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x000000000004a805: mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000002deb9: mulps xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000004dc8f: mulps xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000002dfe1: mulps xmm0, xmm1; ret; 
0x000000000002df7a: mulps xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x000000000009b28d: mulps xmm0, xmm2; addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000511d5: mulps xmm0, xmm2; addsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac25: mulps xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004dded: mulps xmm0, xmm2; pop rbx; ret; 
0x000000000002e03e: mulps xmm0, xmm2; ret; 
0x000000000009aff3: mulps xmm0, xmm2; subsd xmm0, qword ptr [rip + 0xa7fda]; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031bfd: mulps xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000004fd35: mulps xmm0, xmm4; subss xmm0, xmm4; ret; 
0x000000000004ea48: mulps xmm0, xmm5; addss xmm0, xmm2; ret; 
0x0000000000050e59: mulps xmm0, xmmword ptr [rip + 0xad470]; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x000000000004dd1e: mulps xmm0, xmmword ptr [rip + 0xb2f3b]; add rsp, 0x10; pop rbx; ret; 
0x000000000004a005: mulps xmm0, xmmword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x000000000002dff9: mulps xmm0, xmmword ptr [rip + 0xc35d0]; add rsp, 0x10; pop rbx; ret; 
0x000000000004a72f: mulps xmm0, xmmword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031012: mulps xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000004a1b1: mulps xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000002711a: mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004a5d9: mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000031adf: mulps xmm1, xmm0; movsd xmm1, qword ptr [rip + 0xae58e]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000004fc3b: mulps xmm1, xmm0; movss xmm1, dword ptr [rip + 0xb076e]; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x0000000000032099: mulps xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x00000000000271da: mulps xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004a001: mulps xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x0000000000050101: mulps xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x000000000004a681: mulps xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000003208f: mulps xmm1, xmm0; ret; 
0x0000000000031b79: mulps xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x0000000000031fab: mulps xmm1, xmm0; subsd xmm7, xmm1; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000004fcf9: mulps xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x00000000000270f0: mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004a5b6: mulps xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000503ce: mulps xmm1, xmm1; ret; 
0x000000000004d4d8: mulps xmm1, xmm2; addsd xmm1, xmm0; pxor xmm0, xmm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x000000000004ea3c: mulps xmm1, xmm2; addss xmm0, xmm4; addss xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000004a1ad: mulps xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000009ab76: mulps xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23d: mulps xmm1, xmm3; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad7c: mulps xmm1, xmm3; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000050105: mulps xmm1, xmmword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x000000000003209d: mulps xmm1, xmmword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x000000000004923f: mulps xmm1, xmmword ptr [rip + 0x9e38a]; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000050165: mulps xmm1, xmmword ptr [rip + 0xb0cf4]; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000002c4cc: mulps xmm1, xmmword ptr [rip + 0xbb105]; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d4e4: mulps xmm1, xmmword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x000000000002dfd8: mulps xmm2, xmm0; pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000047782: mulps xmm2, xmm2; add rsp, 0x68; ret; 
0x000000000009b37a: mulps xmm2, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1d: mulps xmm2, xmm3; addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004e87d: mulps xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000031006: mulps xmm2, xmm5; addsd xmm2, xmm3; divsd xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000004d330: mulps xmm2, xmmword ptr [rip + 0xb354d]; add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000004eafd: mulps xmm3, xmm1; movss xmm1, dword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x00000000000471ca: mulps xmm3, xmm3; add rsp, 0x58; ret; 
0x000000000004e6d6: mulps xmm3, xmm5; subss xmm2, xmm4; movaps xmm1, xmm3; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000031fb3: mulps xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x0000000000050e58: mulsd xmm0, qword ptr [rip + 0xad470]; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x000000000002dff8: mulsd xmm0, qword ptr [rip + 0xc35d0]; add rsp, 0x10; pop rbx; ret; 
0x000000000004a72e: mulsd xmm0, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031b65: mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000032225: mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000323d2: mulsd xmm0, xmm0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000032110: mulsd xmm0, xmm0; ret; 
0x000000000009affe: mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ab7d: mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000027e90: mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x000000000002deb8: mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000002dfe0: mulsd xmm0, xmm1; ret; 
0x000000000002df79: mulsd xmm0, xmm2; add rsp, 0x10; pop rbx; ret; 
0x000000000009b28c: mulsd xmm0, xmm2; addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000511d4: mulsd xmm0, xmm2; addsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac24: mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002e03d: mulsd xmm0, xmm2; ret; 
0x000000000009aff2: mulsd xmm0, xmm2; subsd xmm0, qword ptr [rip + 0xa7fda]; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031bfc: mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000003209c: mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x000000000004923e: mulsd xmm1, qword ptr [rip + 0x9e38a]; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000002c4cb: mulsd xmm1, qword ptr [rip + 0xbb105]; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d4e3: mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x0000000000031011: mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x0000000000027119: mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000031ade: mulsd xmm1, xmm0; movsd xmm1, qword ptr [rip + 0xae58e]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x0000000000032098: mulsd xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x00000000000271d9: mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003208e: mulsd xmm1, xmm0; ret; 
0x0000000000031b78: mulsd xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x0000000000031faa: mulsd xmm1, xmm0; subsd xmm7, xmm1; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x00000000000270ef: mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004d4d7: mulsd xmm1, xmm2; addsd xmm1, xmm0; pxor xmm0, xmm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x000000000009ab75: mulsd xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23c: mulsd xmm1, xmm3; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad7b: mulsd xmm1, xmm3; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002dfd7: mulsd xmm2, xmm0; pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000047781: mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x000000000009b379: mulsd xmm2, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1c: mulsd xmm2, xmm3; addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031005: mulsd xmm2, xmm5; addsd xmm2, xmm3; divsd xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x00000000000471c9: mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x0000000000031fb2: mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000004dd1d: mulss xmm0, dword ptr [rip + 0xb2f3b]; add rsp, 0x10; pop rbx; ret; 
0x000000000004a004: mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x000000000004fdc7: mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000050280: mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000501c0: mulss xmm0, xmm0; ret; 
0x000000000004a804: mulss xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000004dc8e: mulss xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004d69d: mulss xmm0, xmm1; ret; 
0x000000000004ddec: mulss xmm0, xmm2; pop rbx; ret; 
0x000000000004aa1c: mulss xmm0, xmm2; ret; 
0x000000000004fd34: mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x000000000004ea47: mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x0000000000050104: mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x0000000000050164: mulss xmm1, dword ptr [rip + 0xb0cf4]; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000004a1b0: mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004a5d8: mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fc3a: mulss xmm1, xmm0; movss xmm1, dword ptr [rip + 0xb076e]; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004a000: mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x0000000000050100: mulss xmm1, xmm0; mulss xmm1, dword ptr [rip + 0x7b0c0]; subss xmm0, xmm1; ret; 
0x000000000004a680: mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005004e: mulss xmm1, xmm0; ret; 
0x000000000004fcf8: mulss xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004a5b5: mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000503cd: mulss xmm1, xmm1; ret; 
0x000000000004ea3b: mulss xmm1, xmm2; addss xmm0, xmm4; addss xmm0, xmm1; mulss xmm0, xmm5; addss xmm0, xmm2; ret; 
0x000000000004a1ac: mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004d32f: mulss xmm2, dword ptr [rip + 0xb354d]; add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000004e87c: mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004eafc: mulss xmm3, xmm1; movss xmm1, dword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000004e6d5: mulss xmm3, xmm5; subss xmm2, xmm4; movaps xmm1, xmm3; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000010c264: neg byte ptr [rax - 0x46]; ret 0x260f; 
0x00000000001092f5: neg byte ptr [rdx - 0x672fa601]; ret 0x2b9d; 
0x00000000000d6d01: neg dl; ret 0x7a2f; 
0x0000000000050ea5: neg eax; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000042f97: neg eax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000727b4: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000051ba2: neg eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000001b58b: neg eax; pop rbx; pop rbp; ret; 
0x0000000000080473: neg eax; ret; 
0x0000000000051cf9: neg ecx; test edx, edx; cmovs rax, rcx; ret; 
0x00000000000443e6: neg ecx; test rdx, rdx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044421: neg ecx; test rdx, rdx; cmovs rax, rcx; ret; 
0x000000000006f758: neg edi; sub rdi, 0x3fff; call 0xc9110; add rsp, 0x18; ret; 
0x00000000000441bf: neg edx; and rax, rdx; movq xmm0, rax; ret; 
0x000000000001b5c9: neg edx; test r10w, r10w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000001bac9: neg edx; test r9w, r9w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000071f62: neg edx; test rbx, rbx; cmovne rax, rdx; add rsp, 0x10; pop rbx; ret; 
0x0000000000051ac2: neg esi; and eax, esi; movd xmm0, eax; ret; 
0x0000000000042f96: neg rax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000727b3: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000051ba1: neg rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000001b58a: neg rax; pop rbx; pop rbp; ret; 
0x0000000000051cf8: neg rcx; test edx, edx; cmovs rax, rcx; ret; 
0x00000000000443e5: neg rcx; test rdx, rdx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044420: neg rcx; test rdx, rdx; cmovs rax, rcx; ret; 
0x000000000006f757: neg rdi; sub rdi, 0x3fff; call 0xc9110; add rsp, 0x18; ret; 
0x00000000000441be: neg rdx; and rax, rdx; movq xmm0, rax; ret; 
0x000000000001b5c8: neg rdx; test r10w, r10w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000001bac8: neg rdx; test r9w, r9w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000071f61: neg rdx; test rbx, rbx; cmovne rax, rdx; add rsp, 0x10; pop rbx; ret; 
0x000000000004ddf3: nop dword ptr [rax + rax]; add rsp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x000000000007c5ab: nop dword ptr [rax + rax]; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000001fae8: nop dword ptr [rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x00000000000131a3: nop dword ptr [rax + rax]; add rsp, 0x40; pop rbx; faddp st(1); ret; 
0x0000000000086a5b: nop dword ptr [rax + rax]; addsd xmm0, xmm0; ret; 
0x0000000000050b78: nop dword ptr [rax + rax]; addss xmm0, xmm0; ret; 
0x0000000000042ffb: nop dword ptr [rax + rax]; andpd xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000004749b: nop dword ptr [rax + rax]; cmp edx, 1; jbe 0x471d8; movsd xmm0, qword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x000000000003d1db: nop dword ptr [rax + rax]; cmp rcx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000042df8: nop dword ptr [rax + rax]; cvttsd2si rax, xmm0; ret; 
0x000000000001b398: nop dword ptr [rax + rax]; fadd st(0); pop rbx; ret; 
0x0000000000018c23: nop dword ptr [rax + rax]; fadd st(0); ret; 
0x0000000000015d28: nop dword ptr [rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001bdfb: nop dword ptr [rax + rax]; fld xword ptr [rsp + 0x18]; ret; 
0x000000000001a04b: nop dword ptr [rax + rax]; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x000000000001ae98: nop dword ptr [rax + rax]; fldz; ret; 
0x000000000000ccd3: nop dword ptr [rax + rax]; fstp st(0); add rsp, 0x28; ret; 
0x0000000000032363: nop dword ptr [rax + rax]; fstp st(0); fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000020b6b: nop dword ptr [rax + rax]; fstp st(0); fstp st(0); fstp st(1); add rsp, 0x28; ret; 
0x0000000000020c2b: nop dword ptr [rax + rax]; fstp st(1); add rsp, 0x28; ret; 
0x000000000001611b: nop dword ptr [rax + rax]; fstp st(1); fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x000000000001e3bb: nop dword ptr [rax + rax]; fxch st(1); add rsp, 0x58; ret; 
0x0000000000020c4b: nop dword ptr [rax + rax]; fxch st(1); faddp st(1); add rsp, 0x28; ret; 
0x000000000001cc7b: nop dword ptr [rax + rax]; fxch st(1); ret; 
0x0000000000080fd3: nop dword ptr [rax + rax]; mov qword ptr [rdi + 8], 0; ret; 
0x000000000004472b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000085edb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3170d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ec8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x000000000004fdb3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004992b: nop dword ptr [rax + rax]; movapd xmm0, xmm1; ret; 
0x0000000000043f83: nop dword ptr [rax + rax]; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003d123: nop dword ptr [rax + rax]; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320eb: nop dword ptr [rax + rax]; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000004558b: nop dword ptr [rax + rax]; movapd xmm1, xmm0; ret; 
0x00000000000570a3: nop dword ptr [rax + rax]; movaps xmm0, xmm1; ret; 
0x000000000004a60b: nop dword ptr [rax + rax]; movaps xmm1, xmm0; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000006eb3b: nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x000000000007c943: nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000007c933: nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x0000000000075468: nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x000000000006f76b: nop dword ptr [rax + rax]; movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x18; ret; 
0x0000000000048ebb: nop dword ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x00000000000478e8: nop dword ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x0000000000028f73: nop dword ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0xa2340]; ret; 
0x0000000000028453: nop dword ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0xa2e60]; ret; 
0x0000000000029223: nop dword ptr [rax + rax]; movsd xmm13, qword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028703: nop dword ptr [rax + rax]; movsd xmm13, qword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004fe18: nop dword ptr [rax + rax]; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x0000000000050ab8: nop dword ptr [rax + rax]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000027e88: nop dword ptr [rax + rax]; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000032093: nop dword ptr [rax + rax]; mulsd xmm1, xmm0; mulsd xmm1, qword ptr [rip + 0x99a04]; subsd xmm0, xmm1; ret; 
0x00000000000501b8: nop dword ptr [rax + rax]; mulss xmm0, xmm0; ret; 
0x0000000000044cd3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000421e4: nop dword ptr [rax + rax]; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x0000000000015d21: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001be07: nop dword ptr [rax + rax]; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000086ac6: nop dword ptr [rax + rax]; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x000000000000bc68: nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000057e48: nop dword ptr [rax + rax]; pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x000000000004d1e3: nop dword ptr [rax + rax]; pxor xmm0, xmm0; ret; 
0x0000000000086b48: nop dword ptr [rax + rax]; roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b08: nop dword ptr [rax + rax]; roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b28: nop dword ptr [rax + rax]; roundsd xmm0, xmm0, 4; ret; 
0x0000000000086ae8: nop dword ptr [rax + rax]; roundsd xmm0, xmm0, 9; ret; 
0x0000000000086ad8: nop dword ptr [rax + rax]; roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b58: nop dword ptr [rax + rax]; roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b18: nop dword ptr [rax + rax]; roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b38: nop dword ptr [rax + rax]; roundss xmm0, xmm0, 4; ret; 
0x0000000000086af8: nop dword ptr [rax + rax]; roundss xmm0, xmm0, 9; ret; 
0x000000000002e913: nop dword ptr [rax + rax]; sar edx, 0x14; lea eax, [rdx - 0x3ff]; ret; 
0x000000000006ac23: nop dword ptr [rax + rax]; sar rdx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x000000000002e0d8: nop dword ptr [rax + rax]; sqrtsd xmm0, xmm0; ret; 
0x000000000004de98: nop dword ptr [rax + rax]; sqrtss xmm0, xmm0; ret; 
0x000000000003cc23: nop dword ptr [rax + rax]; subsd xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000049c28: nop dword ptr [rax + rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000004fdd3: nop dword ptr [rax + rax]; subss xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fd2b: nop dword ptr [rax + rax]; subss xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x00000000000506eb: nop dword ptr [rax + rax]; subss xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000050bdb: nop dword ptr [rax + rax]; vfmadd213ss xmm0, xmm1, xmm2; ret; 
0x00000000000421f8: nop dword ptr [rax + rax]; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050be8: nop dword ptr [rax + rax]; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009bc68: nop dword ptr [rax + rax]; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000009bc1b: nop dword ptr [rax + rax]; vxorps xmm0, xmm0, xmm0; ret; 
0x000000000000bd1b: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000044cdb: nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x000000000002e069: nop dword ptr [rax]; add rsp, 0x10; addsd xmm0, xmm0; pop rbx; ret; 
0x000000000001c724: nop dword ptr [rax]; add rsp, 8; fxch st(1); ret; 
0x000000000002c4f9: nop dword ptr [rax]; addsd xmm0, xmm0; ret; 
0x000000000004a77d: nop dword ptr [rax]; addss xmm0, xmm0; ret; 
0x0000000000050f69: nop dword ptr [rax]; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x0000000000031ce9: nop dword ptr [rax]; andpd xmm0, xmmword ptr [rip + 0x995b8]; ret; 
0x000000000004fe29: nop dword ptr [rax]; andps xmm0, xmmword ptr [rip + 0x7bc89]; ret; 
0x0000000000017044: nop dword ptr [rax]; fchs; ret; 
0x000000000001629d: nop dword ptr [rax]; fld xword ptr [rsp + 8]; fsqrt; ret; 
0x00000000000183ec: nop dword ptr [rax]; fld xword ptr [rsp + 8]; fxtract; fstp st(1); ret; 
0x000000000000c379: nop dword ptr [rax]; fnstcw word ptr [rdi]; xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000000d311: nop dword ptr [rax]; fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x000000000000d8fc: nop dword ptr [rax]; fstp st(0); add rsp, 0x28; ret; 
0x00000000000503a5: nop dword ptr [rax]; fstp st(0); fstp dword ptr [rsp - 0xc]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000020b5c: nop dword ptr [rax]; fstp st(0); fstp st(0); fstp st(0); add rsp, 0x28; ret; 
0x0000000000043efc: nop dword ptr [rax]; fstp st(0); pxor xmm0, xmm0; ret; 
0x000000000001873c: nop dword ptr [rax]; fsubrp st(1); pop rbx; ret; 
0x0000000000020b8d: nop dword ptr [rax]; fxch st(1); faddp st(1); add rsp, 0x28; ret; 
0x0000000000042e1d: nop dword ptr [rax]; lea ecx, [rsi - 0x433]; shl rdx, cl; imul rax, rdx; ret; 
0x0000000000050dbd: nop dword ptr [rax]; lea ecx, [rsi - 0x96]; shl rdx, cl; imul rax, rdx; ret; 
0x0000000000049935: nop dword ptr [rax]; maxsd xmm0, xmm1; ret; 
0x00000000000570ac: nop dword ptr [rax]; maxss xmm0, xmm1; ret; 
0x00000000000499cd: nop dword ptr [rax]; minsd xmm0, xmm1; ret; 
0x000000000005714c: nop dword ptr [rax]; minss xmm0, xmm1; ret; 
0x0000000000019e5c: nop dword ptr [rax]; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000086ab5: nop dword ptr [rax]; mov eax, edx; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000044c9d: nop dword ptr [rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000001c35d: nop dword ptr [rax]; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x0000000000044ce9: nop dword ptr [rax]; movapd xmm0, xmm1; ret; 
0x0000000000043f95: nop dword ptr [rax]; movapd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000501c5: nop dword ptr [rax]; movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d344: nop dword ptr [rax]; movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x000000000004a221: nop dword ptr [rax]; movaps xmm2, xmm1; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000007c465: nop dword ptr [rax]; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000074894: nop dword ptr [rax]; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x18; ret; 
0x0000000000058c15: nop dword ptr [rax]; movdqa xmm1, xmm0; call 0xc6d90; add rsp, 0x28; ret; 
0x00000000000525bc: nop dword ptr [rax]; movq qword ptr [rsp - 8], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000525cd: nop dword ptr [rax]; movq qword ptr [rsp - 8], xmm0; movss xmm0, dword ptr [rsp - 8]; ret; 
0x0000000000086a65: nop dword ptr [rax]; movq xmm0, rax; ret; 
0x000000000009b29d: nop dword ptr [rax]; movsd xmm0, qword ptr [rip + 0x30018]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000045b29: nop dword ptr [rax]; movsd xmm0, qword ptr [rip + 0x85f68]; movapd xmm1, xmm0; ret; 
0x0000000000031cd9: nop dword ptr [rax]; movsd xmm0, qword ptr [rip + 0xb1d98]; ret; 
0x000000000004993d: nop dword ptr [rax]; movsd xmm0, qword ptr [rsp + 8]; addsd xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000049529: nop dword ptr [rax]; movsd xmm1, qword ptr [rip + 0x82568]; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489a1: nop dword ptr [rax]; movsd xmm1, qword ptr [rip + 0x830f0]; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x0000000000042efd: nop dword ptr [rax]; movsd xmm1, qword ptr [rip + 0x920d8]; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000005190d: nop dword ptr [rax]; movss xmm0, dword ptr [rip + 0xaf804]; ret; 
0x000000000004ee9d: nop dword ptr [rax]; movss xmm0, dword ptr [rip + 0xb1e60]; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000049d24: nop dword ptr [rax]; movss xmm0, dword ptr [rip + 0xb6644]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x00000000000570b5: nop dword ptr [rax]; movss xmm0, dword ptr [rsp + 0xc]; addss xmm0, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000002dff5: nop dword ptr [rax]; mulsd xmm0, qword ptr [rip + 0xc35d0]; add rsp, 0x10; pop rbx; ret; 
0x0000000000032109: nop dword ptr [rax]; mulsd xmm0, xmm0; ret; 
0x0000000000031b71: nop dword ptr [rax]; mulsd xmm1, xmm0; subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x0000000000042f1d: nop dword ptr [rax]; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004fcf4: nop dword ptr [rax]; mulss xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x00000000000432cc: nop dword ptr [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000004a785: nop dword ptr [rax]; pxor xmm0, xmm0; ret; 
0x000000000004e629: nop dword ptr [rax]; sar edx, 0x17; lea eax, [rdx - 0x7f]; ret; 
0x000000000002c505: nop dword ptr [rax]; subsd xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000031bf1: nop dword ptr [rax]; subsd xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000002de3c: nop dword ptr [rax]; subsd xmm1, xmm1; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000003201d: nop dword ptr [rax]; subsd xmm6, xmm4; subsd xmm0, xmm6; ret; 
0x0000000000049f15: nop dword ptr [rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000004dc2c: nop dword ptr [rax]; subss xmm1, xmm1; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000000421ec: nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000009ba55: nop dword ptr [rax]; vxorps xmm0, xmm0, xmm0; ret; 
0x0000000000051a5c: nop dword ptr [rax]; xor eax, eax; movd xmm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x0000000000044135: nop dword ptr [rax]; xor eax, eax; movq xmm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000208d5: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004328d: nop dword ptr [rax]; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x000000000001fae7: nop dword ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000042df7: nop dword ptr cs:[rax + rax]; cvttsd2si rax, xmm0; ret; 
0x000000000001b397: nop dword ptr cs:[rax + rax]; fadd st(0); pop rbx; ret; 
0x0000000000015d27: nop dword ptr cs:[rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001ae97: nop dword ptr cs:[rax + rax]; fldz; ret; 
0x00000000000478e7: nop dword ptr cs:[rax + rax]; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x000000000004fe17: nop dword ptr cs:[rax + rax]; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x0000000000050ab7: nop dword ptr cs:[rax + rax]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000027e87: nop dword ptr cs:[rax + rax]; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000044cd2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000421e3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000001be06: nop dword ptr cs:[rax + rax]; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000086ac5: nop dword ptr cs:[rax + rax]; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x000000000000bc67: nop dword ptr cs:[rax + rax]; pop rbp; ret; 
0x000000000004de97: nop dword ptr cs:[rax + rax]; sqrtss xmm0, xmm0; ret; 
0x00000000000421f7: nop dword ptr cs:[rax + rax]; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050be7: nop dword ptr cs:[rax + rax]; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009bc67: nop dword ptr cs:[rax + rax]; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000004ddf2: nop word ptr [rax + rax]; add rsp, 0x10; addss xmm0, xmm0; pop rbx; ret; 
0x000000000007c5aa: nop word ptr [rax + rax]; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000131a2: nop word ptr [rax + rax]; add rsp, 0x40; pop rbx; faddp st(1); ret; 
0x0000000000051af2: nop word ptr [rax + rax]; addss xmm0, xmm0; ret; 
0x0000000000042ffa: nop word ptr [rax + rax]; andpd xmm0, xmmword ptr [rip + 0x882a8]; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000003d1da: nop word ptr [rax + rax]; cmp rcx, 0x400; jne 0x3d1b1; addsd xmm0, xmm0; ret; 
0x0000000000018c22: nop word ptr [rax + rax]; fadd st(0); ret; 
0x000000000001a04a: nop word ptr [rax + rax]; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000032362: nop word ptr [rax + rax]; fstp st(0); fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000001611a: nop word ptr [rax + rax]; fstp st(1); fstp st(1); add rsp, 0x10; pop rbx; ret; 
0x000000000001e3ba: nop word ptr [rax + rax]; fxch st(1); add rsp, 0x58; ret; 
0x0000000000080fd2: nop word ptr [rax + rax]; mov qword ptr [rdi + 8], 0; ret; 
0x0000000000051fda: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000004fdb2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x34d1f9]; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004992a: nop word ptr [rax + rax]; movapd xmm0, xmm1; ret; 
0x0000000000043f82: nop word ptr [rax + rax]; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003d122: nop word ptr [rax + rax]; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320ea: nop word ptr [rax + rax]; movapd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000004558a: nop word ptr [rax + rax]; movapd xmm1, xmm0; ret; 
0x00000000000570a2: nop word ptr [rax + rax]; movaps xmm0, xmm1; ret; 
0x000000000006eb3a: nop word ptr [rax + rax]; movdqa xmm0, xmmword ptr [rip + 0x97d58]; add rsp, 0x30; pop rbx; ret; 
0x0000000000075467: nop word ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x0000000000048eba: nop word ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0x82bd8]; movapd xmm1, xmm0; ret; 
0x0000000000028f72: nop word ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0xa2340]; ret; 
0x0000000000028452: nop word ptr [rax + rax]; movsd xmm0, qword ptr [rip + 0xa2e60]; ret; 
0x0000000000029222: nop word ptr [rax + rax]; movsd xmm13, qword ptr [rip + 0xbab87]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028702: nop word ptr [rax + rax]; movsd xmm13, qword ptr [rip + 0xbb30f]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000501b7: nop word ptr [rax + rax]; mulss xmm0, xmm0; ret; 
0x000000000000bcb7: nop word ptr [rax + rax]; pop rbp; ret; 
0x0000000000057e47: nop word ptr [rax + rax]; pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x000000000004d1e2: nop word ptr [rax + rax]; pxor xmm0, xmm0; ret; 
0x0000000000086b47: nop word ptr [rax + rax]; roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b07: nop word ptr [rax + rax]; roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b27: nop word ptr [rax + rax]; roundsd xmm0, xmm0, 4; ret; 
0x0000000000086ae7: nop word ptr [rax + rax]; roundsd xmm0, xmm0, 9; ret; 
0x0000000000086ad7: nop word ptr [rax + rax]; roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b57: nop word ptr [rax + rax]; roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b17: nop word ptr [rax + rax]; roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b37: nop word ptr [rax + rax]; roundss xmm0, xmm0, 4; ret; 
0x0000000000086af7: nop word ptr [rax + rax]; roundss xmm0, xmm0, 9; ret; 
0x000000000006ac22: nop word ptr [rax + rax]; sar rdx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x0000000000049c27: nop word ptr [rax + rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000004fd2a: nop word ptr [rax + rax]; subss xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x0000000000050bda: nop word ptr [rax + rax]; vfmadd213ss xmm0, xmm1, xmm2; ret; 
0x000000000000bd1a: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000001fae6: nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000042df6: nop word ptr cs:[rax + rax]; cvttsd2si rax, xmm0; ret; 
0x000000000001b396: nop word ptr cs:[rax + rax]; fadd st(0); pop rbx; ret; 
0x0000000000015d26: nop word ptr cs:[rax + rax]; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001ae96: nop word ptr cs:[rax + rax]; fldz; ret; 
0x00000000000478e6: nop word ptr cs:[rax + rax]; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x000000000004fe16: nop word ptr cs:[rax + rax]; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x0000000000050ab6: nop word ptr cs:[rax + rax]; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000027e86: nop word ptr cs:[rax + rax]; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x0000000000044cd1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000421e2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000001be05: nop word ptr cs:[rax + rax]; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000086ac4: nop word ptr cs:[rax + rax]; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x000000000000bc66: nop word ptr cs:[rax + rax]; pop rbp; ret; 
0x000000000004de96: nop word ptr cs:[rax + rax]; sqrtss xmm0, xmm0; ret; 
0x00000000000421f6: nop word ptr cs:[rax + rax]; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050be6: nop word ptr cs:[rax + rax]; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009bc66: nop word ptr cs:[rax + rax]; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000195f20: nop; adc ebp, esp; call qword ptr [rsi + 0xa]; 
0x00000000000c9d4a: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x00000000000764ef: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000c67ff: nop; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x0000000000040db5: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x0000000000190b39: nop; add byte ptr [rax], al; or byte ptr [rdi - 0x11], dh; call rax; 
0x00000000000e8edc: nop; add byte ptr [rax], ch; mov edi, 0x6dfeb485; ret 0xb440; 
0x000000000004d35f: nop; addss xmm0, xmm0; ret; 
0x000000000005025f: nop; addss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000019b7f: nop; cmp edi, -1; mov edx, 0; cmovne rax, rdx; ret; 
0x000000000008677f: nop; cmp edx, 0x400; jne 0x8677c; addsd xmm0, xmm0; ret; 
0x000000000007256f: nop; cmp rsi, -1; mov edx, 0; cmovne rax, rdx; add rsp, 0x18; ret; 
0x0000000000050d9f: nop; cvttss2si rax, xmm0; ret; 
0x000000000001bdef: nop; fld xword ptr [rsp + 0x18]; fchs; fld xword ptr [rsp + 8]; ret; 
0x0000000000019a7f: nop; fld xword ptr [rsp + 8]; fistp qword ptr [rsp - 8]; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x000000000001826f: nop; fld xword ptr [rsp + 8]; frndint; ret; 
0x000000000001be0f: nop; fld xword ptr [rsp + 8]; ret; 
0x000000000000bfff: nop; fnstenv [rdi]; fldenv [rdi]; stmxcsr dword ptr [rdi + 0x1c]; xor eax, eax; ret; 
0x000000000001a12f: nop; fstp st(0); fstp st(0); mov eax, 0xffffffff; ret; 
0x00000000000ddee1: nop; in al, 0xf3; add al, byte ptr [rax]; fidivr dword ptr [rdi]; add byte ptr [rbp + 0x1a], al; ret 0xb24f; 
0x00000000000ffee0: nop; jmp rbx; 
0x00000000000de95d: nop; mov ch, 0xbf; in eax, dx; retfq; cmp edi, edi; jmp rdx; 
0x000000000010e99e: nop; mov edi, 0x947c13a; ret; 
0x0000000000050edf: nop; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000007545f: nop; movdqa xmm0, xmmword ptr [rsp + 0x18]; ret; 
0x0000000000072c2f: nop; movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000190e28: nop; movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; test al, 0x14; bnd jmp rax; 
0x000000000004d22f: nop; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000000c36f: nop; movzx eax, word ptr [rdi]; and esi, 0x3d; and eax, esi; ret; 
0x000000000001b395: nop; nop word ptr cs:[rax + rax]; fadd st(0); pop rbx; ret; 
0x0000000000044e4c: nop; or byte ptr fs:[rax], al; add rsp, 0x18; ret; 
0x00000000000b4de3: nop; out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000005111f: nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000008083f: nop; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ca4d1: nop; push rbp; ret; 
0x000000000018ff20: nop; push rbx; add byte ptr [rax], al; mov byte ptr [rax - 0x15], dl; call rax; 
0x0000000000049f3f: nop; pxor xmm0, xmm0; ret; 
0x000000000007c36f: nop; pxor xmm3, xmm3; movaps xmmword ptr [rsp + 0x20], xmm3; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000f13b1: nop; ret 0x7b20; 
0x0000000000003ab8: nop; ret; 
0x0000000000086acf: nop; roundsd xmm0, xmm0, 0xa; ret; 
0x00000000000a3150: nop; sbb al, byte ptr [rax]; add ah, al; jnp 0xa31b4; ret 0x3bc5; 
0x000000000012dd9a: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13a: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5ba: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87a: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065a: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18068d; ret 0x11bf; 
0x000000000018b3fa: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5a: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0fa: nop; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xfa12d; ret 0x11bf; 
0x000000000009c0cf: nop; test esi, esi; jns 0x9c069; vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009c8af: nop; vmovsd xmm0, qword ptr [rip + 0x2ea08]; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009bd4f: nop; vxorps xmm0, xmm0, xmm0; ret; 
0x00000000000dca51: nop; xchg edi, eax; iretd; call qword ptr [rbx]; 
0x00000000000e9523: nop; xor al, 0; or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x00000000000b74b8: not byte ptr [rax + rax]; add ch, al; and ebx, dword ptr [rax + rbx*8 - 0x3c]; jns 0xb74ec; ret; 
0x00000000000ddd1c: not byte ptr [rbx - 0x62]; mov edi, 0x41f35c4c; std; call rdi; 
0x0000000000001be3: not dword ptr [rcx - 0x21]; adc eax, 0xd16fa95; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x0000000000001be2: not dword ptr cs:[rcx - 0x21]; adc eax, 0xd16fa95; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x0000000000019e0d: not eax; and eax, ecx; ret; 
0x0000000000086a8f: not eax; and eax, edx; movd xmm0, eax; ret; 
0x0000000000042fa0: not eax; and eax, edx; ret; 
0x00000000000700f2: not eax; and rax, rdx; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000086a42: not eax; and rax, rdx; or rax, rsi; movq xmm0, rax; ret; 
0x0000000000050f58: not edx; and eax, edx; movd xmm1, eax; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000430b9: not edx; and rax, rdx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000086529: not edx; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000007df13: not edx; shr edx, 0x1f; test ecx, 0x7fff; cmove eax, edx; ret; 
0x00000000000700f1: not rax; and rax, rdx; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000086a41: not rax; and rax, rdx; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000430b8: not rdx; and rax, rdx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000086528: not rdx; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000008db5b: or ah, al; ret 0xb9a9; 
0x0000000000032397: or ah, bl; and al, 0xe0; fstp qword ptr [rsp - 0x20]; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000049511: or ah, byte ptr [rsi + 0xf]; or eax, 0x81dae; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000048989: or ah, byte ptr [rsi + 0xf]; or eax, 0x82936; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x000000000007ccb1: or ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x00000000000cd0a2: or ah, cl; ret 0x1291; 
0x00000000000c7e6f: or al, 0; add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x9480000], al; ret 0xb848; 
0x000000000002dffe: or al, 0; add rsp, 0x10; pop rbx; ret; 
0x000000000004d1ce: or al, 0; addsd xmm0, qword ptr [rdx + 8]; addsd xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000c6eba: or al, 0; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x00000000000324ce: or al, 0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000008022d: or al, 0x12; cmovne edx, ecx; cmp edx, 0x22; jle 0x803c2; movapd xmm0, xmm2; ret; 
0x00000000000b017d: or al, 0x12; cmovne edx, ecx; cmp edx, 0x22; jle 0xb0290; vmovapd xmm0, xmm2; ret; 
0x00000000001058f8: or al, 0x15; xchg dword ptr [rdx], eax; ret 0xf90d; 
0x0000000000192e9c: or al, 0x1f; add byte ptr [rax], al; xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x0000000000042eee: or al, 0x24; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004961c: or al, 0x24; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d9a: or al, 0x24; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x0000000000049612: or al, 0x24; call 0x43f10; movapd xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d91: or al, 0x24; call 0x518d0; movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x0000000000072c13: or al, 0x24; movdqa xmm0, xmm1; call 0xc4e80; add rsp, 0x20; pop rbx; ret; 
0x000000000000bfd6: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c26c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2d0: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000010cc1e: or al, 0x40; push 0x7d; and r15d, edx; ret 0x6adc; 
0x00000000000d4e86: or al, 0x40; std; lahf; ret; 
0x0000000000011cdb: or al, 0x48; add esp, 0x18; ret; 
0x000000000007c5a3: or al, 0x48; add esp, 0x20; pop rbx; ret; 
0x0000000000023017: or al, 0x48; add esp, 0x800; pop rbx; pop rbp; pop r12; ret; 
0x0000000000049763: or al, 0x48; add esp, 8; ret; 
0x000000000000bcb3: or al, 0x5d; jmp rax; 
0x000000000006f790: or al, 0x71; or dword ptr [rax], eax; call 0xc6150; add rsp, 0x18; ret; 
0x0000000000051153: or al, 0x75; or dh, bl; addps xmm0, xmm0; ret; 
0x00000000000fd0db: or al, 0x86; mov edx, 0x42c1bbdc; idiv di; call rax; 
0x00000000000fd1b3: or al, 0x88; out 0xa, al; lea ebx, [rdi]; sbb al, 0x14; ret; 
0x00000000001083a5: or al, 0x91; push rbx; ret; 
0x0000000000050169: or al, 0xb; add bl, dh; addps xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000001a552: or al, 0xb; add cl, bl; ret; 
0x00000000000eb0ba: or al, 0xba; mov esp, 0xf83d2e19; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x0000000000105565: or al, 0xc9; scasb al, byte ptr [rdi]; ret; 
0x0000000000198a84: or al, 0xe5; out dx, eax; call qword ptr [rdx + 4]; 
0x00000000001311da: or al, 0xea; jno 0x1311ae; ret 0xd33f; 
0x000000000015f91a: or al, 0xea; jno 0x15f8ee; ret 0xd33f; 
0x00000000000d0a1a: or al, 0xea; jno 0xd09ee; ret 0xd33f; 
0x0000000000198e01: or al, 0xf0; jmp qword ptr [rbx + 2]; 
0x00000000000570bd: or al, 0xf3; addps xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000004a803: or al, 0xf3; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x000000000004fe13: or al, 0xf3; ret; 
0x0000000000011b1a: or al, 0xf; fdiv qword ptr cs:[rdx + 8]; add rsp, 0x18; ret; 
0x0000000000012701: or al, 0xf; fdiv qword ptr cs:[rdx + 9]; add rsp, 0x18; ret; 
0x000000000007812e: or al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000bfa17: or al, 8; add byte ptr [rdi], cl; xchg dl, cl; sub byte ptr [rax], al; add ch, al; ret; 
0x000000000009c7c3: or al, byte ptr [eax]; vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6ae1]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000027112: or al, byte ptr [r8]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007ce42: or al, byte ptr [rax + rcx + 0x6f0f6600]; ret 0x290f; 
0x00000000000c564e: or al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000c1fa2: or al, byte ptr [rax]; add ch, al; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x0000000000027113: or al, byte ptr [rax]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000271d3: or al, byte ptr [rax]; add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000001f95c: or al, byte ptr [rax]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x0000000000058bbf: or al, byte ptr [rax]; add rsp, 0x28; ret; 
0x000000000001e526: or al, byte ptr [rax]; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x0000000000020da7: or al, byte ptr [rax]; add rsp, 8; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000031ae8: or al, byte ptr [rax]; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000003d132: or al, byte ptr [rax]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x0000000000050e5e: or al, byte ptr [rax]; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000057778: or al, byte ptr [rax]; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000020384: or al, byte ptr [rax]; fmulp st(2); add rsp, 0x28; ret; 
0x00000000000fd603: or al, byte ptr [rax]; fstp xword ptr [rdi]; push rbp; add ebp, esp; ret; 
0x000000000001cdd8: or al, byte ptr [rax]; fxch st(1); ret; 
0x000000000002709f: or al, byte ptr [rax]; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000006443a: or al, byte ptr [rax]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009b915: or al, byte ptr [rax]; movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000009b936: or al, byte ptr [rax]; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm0; ret; 
0x0000000000031b63: or al, byte ptr [rax]; mulsd xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000009affc: or al, byte ptr [rax]; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b28a: or al, byte ptr [rax]; mulsd xmm0, xmm2; addsd xmm0, qword ptr [rip + 0x30028]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ab73: or al, byte ptr [rax]; mulsd xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23a: or al, byte ptr [rax]; mulsd xmm1, xmm3; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad79: or al, byte ptr [rax]; mulsd xmm1, xmm3; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b377: or al, byte ptr [rax]; mulsd xmm2, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1a: or al, byte ptr [rax]; mulsd xmm2, xmm3; addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000051014: or al, byte ptr [rax]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000001fae4: or al, byte ptr [rax]; nop word ptr cs:[rax + rax]; add rsp, 0x30; pop rbx; ret; 
0x0000000000026ffe: or al, byte ptr [rax]; orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x0000000000043194: or al, byte ptr [rax]; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324c6: or al, byte ptr [rax]; orpd xmm0, xmmword ptr [rip + 0xca320]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000051032: or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005100d: or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504d2: or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xb09c5]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504ad: or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xb09fa]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000e9754: or al, byte ptr [rax]; ret 0x5bc; 
0x000000000001fa3f: or al, byte ptr [rax]; ret; 
0x000000000003207e: or al, byte ptr [rax]; ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000009c189: or al, byte ptr [rax]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000009c3d6: or al, byte ptr [rax]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c305: or al, byte ptr [rax]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c857: or al, byte ptr [rax]; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c655: or al, byte ptr [rax]; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c41a: or al, byte ptr [rax]; vfmadd213sd xmm0, xmm2, qword ptr [rip + 0xa6e7b]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c89e: or al, byte ptr [rax]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c88c: or al, byte ptr [rax]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6691]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c895: or al, byte ptr [rax]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c7c4: or al, byte ptr [rax]; vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6ae1]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c2fc: or al, byte ptr [rax]; vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6fa9]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c84e: or al, byte ptr [rax]; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6a57]; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c648: or al, byte ptr [rax]; vmulsd xmm0, xmm3, xmm1; vfmadd132sd xmm0, xmm5, qword ptr [rip + 0xa6979]; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c969: or al, byte ptr [rax]; vmulsd xmm1, xmm2, xmm1; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c423: or al, byte ptr [rax]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000743a6: or al, byte ptr [rip - 0x3b7cb800]; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002845d: or al, byte ptr cs:[rax]; ret; 
0x0000000000191f59: or al, ch; call rsp; 
0x000000000001e524: or al, ch; or al, byte ptr [rax]; add rsp, 0x58; fld st(0); fxch st(1); ret; 
0x000000000000edc2: or al, ch; or eax, dword ptr [rax]; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000008b668: or al, ch; ret 0xd4; 
0x0000000000049d2d: or ax, word ptr [rax]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049d35: or ax, word ptr [rax]; ret; 
0x00000000000209b3: or bh, bh; je 0x209db; sbb bh, bh; je 0x209df; sbb al, ch; jmp qword ptr [rax - 1]; 
0x0000000000019a83: or bh, bl; jl 0x19aab; clc; wait; mov rax, qword ptr [rsp - 8]; ret; 
0x00000000000dd032: or bh, byte ptr [rax - 0x22]; stosb byte ptr [rdi], al; ret 0x223f; 
0x00000000000d65d1: or bh, byte ptr [rdi + 0x5b]; ret 0x5732; 
0x00000000001060e2: or bh, byte ptr [rdx]; mov ch, 0x16; xchg ecx, eax; cmc; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x00000000000dd030: or bh, byte ptr fs:[eax - 0x22]; stosb byte ptr [rdi], al; ret 0x223f; 
0x00000000000dd031: or bh, byte ptr fs:[rax - 0x22]; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000078b64: or bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000ec218: or bl, al; sub ch, dh; ret; 
0x0000000000012c73: or bl, bl; insb byte ptr [rdi], dx; and al, 0x18; fpatan; ret; 
0x0000000000104bab: or bl, byte ptr [rax + 0x3ffeff]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop r13; ret; 
0x000000000000db0d: or bl, cl; cli; add rsp, 8; ret; 
0x00000000000128d7: or bl, dh; cvtps2pd xmm1, xmm1; call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000011cd0: or bl, dh; movups xmm4, xmmword ptr [rsp + 0xc]; ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x0000000000048eb7: or bl, dh; ret; 
0x00000000000e0e1c: or byte ptr [r8 + 0xbd], r14b; pop rsp; push -0x46c00ffd; mov bh, 3; ret; 
0x0000000000081a92: or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x00000000000478f5: or byte ptr [r8], al; movapd xmm1, xmm0; ret; 
0x00000000000474e2: or byte ptr [r8], r8b; movapd xmm0, xmm2; ret; 
0x00000000000474ae: or byte ptr [r8], r8b; movapd xmm1, xmm0; ret; 
0x00000000000d4e83: or byte ptr [r9], dil; or al, 0x40; std; lahf; ret; 
0x00000000000430d9: or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000001012be: or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ea6f2: or byte ptr [rax + 0x3f341f35], 0x2f; cld; ret; 
0x000000000007dfed: or byte ptr [rax + 0x63], cl; ret 0x8141; 
0x00000000000e0e1d: or byte ptr [rax + 0xbd], dh; pop rsp; push -0x46c00ffd; mov bh, 3; ret; 
0x0000000000070171: or byte ptr [rax - 0x39], 4; and al, 0; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x000000000006fb38: or byte ptr [rax - 0x3f], 0xe0; xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x0000000000050ba1: or byte ptr [rax - 0x73], cl; add eax, 0x35d77; cmovne rax, rdx; ret; 
0x00000000000507c1: or byte ptr [rax - 0x73], cl; add eax, 0x362a7; cmovne rax, rdx; ret; 
0x0000000000050431: or byte ptr [rax - 0x73], cl; add eax, 0x36377; cmovne rax, rdx; ret; 
0x000000000004fe51: or byte ptr [rax - 0x73], cl; add eax, 0x367e7; cmovne rax, rdx; ret; 
0x000000000004f081: or byte ptr [rax - 0x73], cl; add eax, 0x37637; cmovne rax, rdx; ret; 
0x000000000003d201: or byte ptr [rax - 0x73], cl; add eax, 0x49617; cmovne rax, rdx; ret; 
0x000000000003cd11: or byte ptr [rax - 0x73], cl; add eax, 0x49ce7; cmovne rax, rdx; ret; 
0x0000000000032441: or byte ptr [rax - 0x73], cl; add eax, 0x542f7; cmovne rax, rdx; ret; 
0x0000000000031d11: or byte ptr [rax - 0x73], cl; add eax, 0x547d7; cmovne rax, rdx; ret; 
0x0000000000030d71: or byte ptr [rax - 0x73], cl; add eax, 0x55827; cmovne rax, rdx; ret; 
0x0000000000015dad: or byte ptr [rax - 0x73], cl; or eax, 0xb5cfb; fld qword ptr [rcx + rax]; ret; 
0x000000000000b7f3: or byte ptr [rax - 0x75], cl; add eax, 0x3917cd; test rax, rax; je 0xb802; call rax; 
0x00000000000632fe: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000006c35d: or byte ptr [rax - 0x77], cl; ret; 
0x00000000000c9408: or byte ptr [rax - 0x7b], cl; ret 0xf66; 
0x0000000000084097: or byte ptr [rax - 0x7d], cl; ret 0xf208; 
0x00000000000734ed: or byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000c7aa4: or byte ptr [rax], al; add byte ptr [rax + 9], cl; fmul dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000002ae2f: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc089; 
0x00000000000c9313: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x8b48; 
0x000000000002301c: or byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000c4fdc: or byte ptr [rax], al; add byte ptr [rcx - 0x48], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000000c1b35: or byte ptr [rax], al; add ch, al; ret; 
0x000000000004a5d2: or byte ptr [rax], al; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a67a: or byte ptr [rax], al; add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004aa95: or byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm1; ret; 
0x000000000004aa55: or byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; movaps xmm0, xmm2; ret; 
0x0000000000044e4e: or byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000007263b: or byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000048ceb: or byte ptr [rax], al; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x0000000000048abf: or byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000058ac7: or byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000043006: or byte ptr [rax], al; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000044fa6: or byte ptr [rax], al; andpd xmm7, xmmword ptr [rip + 0x86330]; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000003d13a: or byte ptr [rax], al; divsd xmm0, xmm1; ret; 
0x000000000004ae73: or byte ptr [rax], al; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000048990: or byte ptr [rax], al; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x0000000000049518: or byte ptr [rax], al; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000044fcc: or byte ptr [rax], al; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000478d7: or byte ptr [rax], al; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x0000000000049b86: or byte ptr [rax], al; mov rax, qword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x0000000000048822: or byte ptr [rax], al; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000474e3: or byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x0000000000045b36: or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x000000000007264e: or byte ptr [rax], al; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000049536: or byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x00000000000489ae: or byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x0000000000044fd6: or byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000474db: or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x0000000000045aea: or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x000000000004315e: or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x9cf10]; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004318c: or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0xa0582]; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004300e: or byte ptr [rax], al; orpd xmm0, xmm1; ret; 
0x0000000000045ae2: or byte ptr [rax], al; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000044fae: or byte ptr [rax], al; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004a4e8: or byte ptr [rax], al; orps xmm0, xmm6; add rsp, 0x28; ret; 
0x000000000003cbd1: or byte ptr [rax], al; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000072ae3: or byte ptr [rax], al; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000045006: or byte ptr [rax], al; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000044ce6: or byte ptr [rax], al; ret; 
0x000000000004a8d7: or byte ptr [rax], al; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x0000000000191646: or byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x00000000001906d4: or byte ptr [rax], bh; out dx, al; jmp rax; 
0x0000000000190a24: or byte ptr [rax], bh; out dx, eax; jmp qword ptr [rax - 0x75]; 
0x0000000000080468: or byte ptr [rbp + 0x15], dh; xor eax, eax; test rcx, rcx; setne al; neg eax; ret; 
0x0000000000080467: or byte ptr [rbp + 0x15], r14b; xor eax, eax; test rcx, rcx; setne al; neg eax; ret; 
0x0000000000190a68: or byte ptr [rbp + 0x59d80000], 0xef; call rax; 
0x0000000000199238: or byte ptr [rbp + 0xb], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax - 0x23ffff7e], dh; xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x0000000000043307: or byte ptr [rbp + 6], dh; addsd xmm0, xmm0; ret; 
0x00000000000d0b04: or byte ptr [rbp - 0x1117c010], cl; xor al, 0x4f; sbb dword ptr [rax], esp; ret 0xde3f; 
0x000000000018fc64: or byte ptr [rbx + 0x4710ffe9], cl; add byte ptr [rax], al; cwde; mov gs, ecx; jmp qword ptr [rax + 0x47]; 
0x0000000000081098: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000018fb90: or byte ptr [rbx], al; add al, bh; adc ebp, ecx; jmp qword ptr [rax]; 
0x000000000004fafd: or byte ptr [rbx], cl; add bl, dh; addps xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x00000000001909f8: or byte ptr [rcx + 0x2be80000], 0xef; call rax; 
0x00000000000dbf32: or byte ptr [rcx + 0x3c8406a0], 0xca; and al, 0x54; ret; 
0x000000000004964c: or byte ptr [rcx + rbx - 0xe], dh; movups xmm0, xmm1; ret; 
0x000000000004a7fb: or byte ptr [rcx - 0x7fffff01], al; jg 0x4a881; or al, 0xf3; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x0000000000079cc4: or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000182da: or byte ptr [rcx], 0xcf; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000c951f: or byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000099b97: or byte ptr [rcx], al; add byte ptr [rax], al; vmovapd xmm0, xmm2; ret; 
0x00000000000d4e84: or byte ptr [rcx], bh; or al, 0x40; std; lahf; ret; 
0x0000000000190590: or byte ptr [rcx], dh; add byte ptr [rax - 0x41], ch; in eax, dx; call qword ptr [rax + 0x71]; 
0x000000000012e749: or byte ptr [rdi + 0x73], ah; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae9: or byte ptr [rdi + 0x73], ah; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf69: or byte ptr [rdi + 0x73], ah; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d229: or byte ptr [rdi + 0x73], ah; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181009: or byte ptr [rdi + 0x73], ah; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda9: or byte ptr [rdi + 0x73], ah; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de609: or byte ptr [rdi + 0x73], ah; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa9: or byte ptr [rdi + 0x73], ah; jge 0xfaabc; ret 0x8d3f; 
0x0000000000045b4c: or byte ptr [rdi + 0xf66000b], cl; push rsp; ret 0xf66; 
0x0000000000190b3c: or byte ptr [rdi - 0x11], dh; call rax; 
0x00000000000b1384: or byte ptr [rdi - 0xc3affff], bl; ret 0x1c8; 
0x0000000000190198: or byte ptr [rdi], bl; add al, bh; imul bl; jmp qword ptr [rax]; 
0x000000000002e1de: or byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x389; 
0x00000000000e8ed0: or byte ptr [rdx + 0x1200d80], ah; sub byte ptr [rdi], bh; add byte ptr [rax], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x000000000005b524: or byte ptr [rdx + 0x53e8000a], ah; ret; 
0x000000000019045c: or byte ptr [rdx - 0x14], bh; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x000000000004b9b0: or byte ptr [rdx], al; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000e8ed2: or byte ptr [rip + 0x3f280120], 0; add byte ptr [rax + 0x28009004], al; mov edi, 0x6dfeb485; ret 0xb440; 
0x00000000000e8baa: or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x0000000000199341: or byte ptr [rsi + 0xb], al; cmp byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x34000083; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x0000000000072c01: or byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb47: or byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000006ea9c: or byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000044e47: or byte ptr [rsi + 0xf], ah; push rdi; or eax, 0x86490; add rsp, 0x18; ret; 
0x00000000000474da: or byte ptr ds:[rax], al; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x000000000002ae2e: or byte ptr es:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc089; 
0x0000000000044e4d: or byte ptr fs:[rax], al; add rsp, 0x18; ret; 
0x0000000000044ce5: or byte ptr gs:[rax], al; ret; 
0x00000000000fdeb9: or ch, al; cli; clc; cmpsb byte ptr [rsi], byte ptr [rdi]; cmp esi, esp; ret 0xfe9e; 
0x00000000000c293f: or ch, al; jns 0xc296b; ret; 
0x00000000000b1bc8: or ch, al; ret; 
0x00000000000b16d3: or ch, al; sti; pop rcx; ret; 
0x000000000001c710: or ch, bl; fcomp st(1); add eax, 0xb32db; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000001c160: or ch, bl; fcomp st(3); sub eax, 0xb3877; add rsp, 0x18; fldz; ret; 
0x0000000000018304: or ch, bl; fcomp st(3); sub eax, 0xb6573; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x00000000000e6960: or ch, byte ptr [rax]; call qword ptr [rcx]; 
0x00000000000e4d09: or ch, byte ptr [rdi - 0x6ef19988]; cmp esi, dword ptr [rax]; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000acbe2: or ch, ch; cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ef333: or ch, ch; pop rbp; ret 0x493f; 
0x0000000000018273: or cl, bl; cld; ret; 
0x00000000000162a3: or cl, bl; cli; ret; 
0x0000000000017fb3: or cl, bl; hlt; fstp st(0); ret; 
0x00000000000183f3: or cl, bl; hlt; fstp st(1); ret; 
0x000000000001c6c3: or cl, bl; leave; ret; 
0x0000000000019fdb: or cl, bl; std; fstp st(1); ret; 
0x00000000000d409c: or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000d5693: or cl, byte ptr [rsi + 0x233fb3ad]; ret 0x4159; 
0x000000000001bddf: or cl, ch; imul ecx, dword ptr [rsi], -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000020a31: or cl, ch; sub dword ptr [rbp - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000108088: or cl, cl; cmc; jmp qword ptr [rax]; 
0x00000000000d745d: or dh, al; mov edi, 0x9feebe6c; mov esp, 0x1cbc5f88; pop rsp; sti; ret; 
0x0000000000077d1f: or dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000051155: or dh, bl; addps xmm0, xmm0; ret; 
0x0000000000012bb3: or dh, bl; leave; faddp st(1); ret; 
0x0000000000050397: or dh, bl; rcr ecx, 0x5c; and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000020844: or dh, dh; and al, 0x1f; je 0x2084f; fstp st(1); ret; 
0x0000000000020884: or dh, dh; and al, 0x1f; je 0x2088f; fstp st(1); ret; 
0x0000000000020834: or dh, dh; and al, 0xf; je 0x2084f; fstp st(1); ret; 
0x0000000000020874: or dh, dh; and al, 0xf; je 0x2088f; fstp st(1); ret; 
0x0000000000078b63: or dil, r14b; jmp qword ptr [rsi + 0xf]; 
0x00000000000cc800: or dl, byte ptr [rbx + 0x138cb2f6]; ret 0xf2a5; 
0x000000000009c8b4: or dl, ch; add al, byte ptr [rax]; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000004d1d4: or dl, dh; addps xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049945: or dl, dh; addps xmm0, xmmword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000020dac: or dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000044e41: or dl, dh; movups xmm0, xmmword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000050e57: or dl, dh; mulps xmm0, xmmword ptr [rip + 0xad470]; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000031fb7: or dl, dh; subps xmm0, xmm7; ret; 
0x000000000012dd9d: or dl, dl; mov edi, 0x89f5fb1c; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13d: or dl, dl; mov edi, 0x89f5fb1c; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5bd: or dl, dl; mov edi, 0x89f5fb1c; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87d: or dl, dl; mov edi, 0x89f5fb1c; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065d: or dl, dl; mov edi, 0x89f5fb1c; ja 0x18068d; ret 0x11bf; 
0x000000000018b3fd: or dl, dl; mov edi, 0x89f5fb1c; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5d: or dl, dl; mov edi, 0x89f5fb1c; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0fd: or dl, dl; mov edi, 0x89f5fb1c; ja 0xfa12d; ret 0x11bf; 
0x000000000004d1d3: or dl, sil; addps xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000007b1a6: or dword ptr [r8], eax; movaps xmmword ptr [rbx], xmm1; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000ac00e: or dword ptr [r8], r8d; and ch, al; sti; pop rax; ret; 
0x0000000000034687: or dword ptr [rax + rax], 0x590f41f2; ret; 
0x00000000001068c5: or dword ptr [rax - 0x6342fe18], ecx; imul ecx, dword ptr [rbp + 0x2e], 0xd4a23ffb; ret; 
0x000000000010e17e: or dword ptr [rax - 0x6d], eax; jle 0x10e161; ret 0x2234; 
0x000000000004315d: or dword ptr [rax], 0x100ff200; or eax, 0x9cf10; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004318b: or dword ptr [rax], 0x100ff200; or eax, 0xa0582; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007d12c: or dword ptr [rax], 0x6f0f6600; ret 0x28e8; 
0x000000000007d0b8: or dword ptr [rax], 0x6f0f6600; ret 0x290f; 
0x000000000007d0d9: or dword ptr [rax], 0x6f0f6600; ret 0x7be8; 
0x000000000004069d: or dword ptr [rax], eax; add byte ptr [rdi], cl; test edx, ebp; or dword ptr [rax], eax; add dh, dh; ret; 
0x00000000000c20d9: or dword ptr [rax], eax; add ch, al; jns 0xc2108; ret; 
0x0000000000089ba2: or dword ptr [rax], eax; add ch, al; ret; 
0x00000000000406a3: or dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000049244: or dword ptr [rax], eax; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000006afb6: or dword ptr [rax], eax; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000006eb46: or dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000031776: or dword ptr [rax], eax; add rsp, 0x30; pop rbx; subsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000006ba3e: or dword ptr [rax], eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000a98be: or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x000000000006f792: or dword ptr [rax], eax; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006eb6b: or dword ptr [rax], eax; call 0xc7880; add rsp, 0x30; pop rbx; ret; 
0x000000000002c4f2: or dword ptr [rax], eax; divsd xmm0, xmm1; ret; 
0x000000000006e4fb: or dword ptr [rax], eax; jle 0x6e800; add rsp, 0x30; movdqa xmm0, xmm2; pop rbx; ret; 
0x000000000006c40a: or dword ptr [rax], eax; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000007b1a7: or dword ptr [rax], eax; movaps xmmword ptr [rbx], xmm1; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x0000000000072716: or dword ptr [rax], eax; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000042f06: or dword ptr [rax], eax; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000002e9ef: or dword ptr [rax], eax; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000043166: or dword ptr [rax], eax; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000006f786: or dword ptr [rax], eax; pand xmm1, xmm0; movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006fb83: or dword ptr [rax], eax; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000031945: or dword ptr [rax], eax; ret; 
0x00000000000320a2: or dword ptr [rax], eax; subsd xmm0, xmm1; ret; 
0x00000000000a9d7c: or dword ptr [rax], eax; xor ch, al; sti; pop rax; ret 0xe3c5; 
0x000000000004a8d6: or dword ptr [rax], ecx; add cl, al; call 0x10149bfe; add al, 0x82; ret; 
0x000000000010bb46: or dword ptr [rax], edi; mov cl, byte ptr [rax]; ret 0x45ea; 
0x00000000000ece13: or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x0000000000109c06: or dword ptr [rbx + 0x781fe0e1], eax; mov edx, 0x89bff1fa; call qword ptr [rax + 0x3a]; 
0x0000000000016f83: or dword ptr [rbx + 0xb], esi; add dh, bl; ret 0xc9dc; 
0x000000000007cf43: or dword ptr [rbx + 0xf660008], eax; outsd dx, dword ptr [rsi]; ret 0x10e8; 
0x0000000000100e1a: or dword ptr [rbx - 0x32], eax; xor eax, 0xc275419d; int1; ret; 
0x0000000000012e4d: or dword ptr [rbx], 0; add rsp, 0x18; ret; 
0x000000000004ff20: or dword ptr [rbx], ecx; add bl, dh; divps xmm0, xmmword ptr [rip + 0x7bba9]; ret; 
0x00000000000504b3: or dword ptr [rbx], ecx; add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000085af4: or dword ptr [rcx + riz - 0x7d], esi; ret 0xf30a; 
0x000000000007c343: or dword ptr [rdi + 0xf660008], ecx; outsd dx, dword ptr [rsi]; ret 0x10e8; 
0x00000000000121a5: or dword ptr [rdi], 0x280fcc28; ret 0x7abf; 
0x000000000003cc22: or dword ptr [rdi], 0x441f; subsd xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000031533: or dword ptr [rdx + 0xff2000c], esi; pop rsp; ret 0x24eb; 
0x00000000000e4999: or dword ptr [rdx - 0x7f], edx; ret; 
0x000000000009ab72: or dword ptr [rdx], 0; mulsd xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac19: or dword ptr [rdx], 0; mulsd xmm2, xmm3; addsd xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad78: or dword ptr [rdx], 0x590ff200; retf; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000012e0f2: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000013e492: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000015c912: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000016cbd2: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001809b2: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018b752: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000ddfb2: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fa452: or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000e8900: or dword ptr [rsi], 0x1a; xchg cl, al; xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x0000000000064558: or dword ptr [rsi], eax; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000017336: or dword ptr [rsp - 0x18], eax; fldenv [rsp - 0x1c]; ret; 
0x0000000000102d45: or eax, 0x13e; add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x000000000000e4f2: or eax, 0x18c48348; ret; 
0x000000000012e0ed: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000013e48d: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000015c90d: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000016cbcd: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001809ad: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018b74d: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000ddfad: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fa44d: or eax, 0x1e92bfb9; or dword ptr [rip + 0x3fc73018], esp; sub eax, dword ptr [rdx]; jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000001703a: or eax, 0x1f0f05eb; add ch, bl; fpatan; ret; 
0x00000000000e9526: or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x000000000009c0d7: or eax, 0x2e124; vdivss xmm0, xmm1, xmm0; ret; 
0x00000000000ed938: or eax, 0x2e4ec4d9; ret 0x3d30; 
0x0000000000100c71: or eax, 0x3a50; adc byte ptr [rdx], al; add byte ptr [rax], al; mov bl, 0; add byte ptr [rax], ch; ret 0; 
0x00000000000510fd: or eax, 0x3f000000; movd xmm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000e8ed3: or eax, 0x3f280120; add byte ptr [rax], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x00000000000e951e: or eax, 0x3f; nop; xor al, 0; or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x00000000000d6f0b: or eax, 0x3fa1e9bc; ret 0x4749; 
0x000000000001a035: or eax, 0x3ffe; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000069f51: or eax, 0x48000001; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000230c8: or eax, 0x4800003e; add esp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000033638: or eax, 0x540f6600; ret; 
0x000000000003ff2c: or eax, 0x580ff200; ret; 
0x000000000003cbcf: or eax, 0x5b0008e7; movapd xmm0, xmm1; ret; 
0x00000000000752ca: or eax, 0x5dc0315b; pop r12; ret; 
0x00000000000fd0d6: or eax, 0x60278f40; or al, 0x86; mov edx, 0x42c1bbdc; idiv di; call rax; 
0x000000000000bc62: or eax, 0x66e0ff5d; nop dword ptr cs:[rax + rax]; pop rbp; ret; 
0x0000000000056d54: or eax, 0x74d77; ja 0x56d74; mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000010c84d: or eax, 0x75043ff3; push 0x32969b54; add eax, 0x2583811e; ret; 
0x000000000005617f: or eax, 0x762ec; movss dword ptr [rsp - 0x10], xmm1; movss dword ptr [rsp - 0xc], xmm0; movq xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000009bbff: or eax, 0x77834; vfmadd231sd xmm3, xmm0, qword ptr [rip + 0x77813]; vfmadd231sd xmm1, xmm0, xmm3; vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x00000000000518f2: or eax, 0x7a1c9; ucomiss xmm1, dword ptr [rip + 0x7a1d2]; ja 0x51928; movd xmm0, eax; ret; 
0x00000000000518f9: or eax, 0x7a1d2; ja 0x51928; movd xmm0, eax; ret; 
0x000000000004f963: or eax, 0x7a898; add rsp, 0x20; subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000050107: or eax, 0x7b0c0; subss xmm0, xmm1; ret; 
0x000000000005069d: or eax, 0x7b43e; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004eb03: or eax, 0x7b6f8; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x00000000000501d5: or eax, 0x7b8e6; divss xmm0, xmm1; ret; 
0x000000000004d6af: or eax, 0x7cb4c; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004d355: or eax, 0x7e766; divss xmm0, xmm1; ret; 
0x0000000000051a4a: or eax, 0x7f800000; mov edx, eax; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x00000000000519f9: or eax, 0x7fc00000; mov edx, eax; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x000000000004a573: or eax, 0x7fc88; jg 0x4a620; movaps xmm0, xmm1; add rsp, 0x18; ret; 
0x000000000004ae70: or eax, 0x80373; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a677: or eax, 0x80b50; add rsp, 0x18; mulss xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5cf: or eax, 0x80bf8; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004b844: or eax, 0x81447; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049515: or eax, 0x81dae; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x0000000000049533: or eax, 0x82568; movsd xmm0, qword ptr [rip + 0x81d50]; ret; 
0x000000000004898d: or eax, 0x82936; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x00000000000489ab: or eax, 0x830f0; movsd xmm0, qword ptr [rip + 0x828d8]; ret; 
0x00000000000474e0: or eax, 0x845bb; movapd xmm0, xmm2; ret; 
0x0000000000045a67: or eax, 0x85874; ret; 
0x0000000000045aef: or eax, 0x85fac; ret; 
0x00000000000bf93c: or eax, 0x860f0008; shr byte ptr [rcx], 0; add ch, al; ret; 
0x0000000000045003: or eax, 0x862d8; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000044e4b: or eax, 0x86490; add rsp, 0x18; ret; 
0x0000000000044ce3: or eax, 0x865f8; ret; 
0x0000000000044fd3: or eax, 0x86ac8; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x000000000004300b: or eax, 0x882d0; orpd xmm0, xmm1; ret; 
0x000000000008b07d: or eax, 0x897fe083; ret 0xe2c1; 
0x000000000003d137: or eax, 0x8e174; divsd xmm0, xmm1; ret; 
0x000000000003cbce: or eax, 0x8e70d; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000072ae0: or eax, 0x8ebdb; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072b08: or eax, 0x8ec13; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000007264b: or eax, 0x8f020; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fb80: or eax, 0x91b3b; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fba8: or eax, 0x91b73; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000042f03: or eax, 0x920d8; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000003d01f: or eax, 0x92a5c; subsd xmm0, xmm1; ret; 
0x0000000000072713: or eax, 0x92b38; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x00000000000320ff: or eax, 0x991ac; divsd xmm0, xmm1; ret; 
0x000000000003209f: or eax, 0x99a04; subsd xmm0, xmm1; ret; 
0x0000000000043163: or eax, 0x9cf10; orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000049241: or eax, 0x9e38a; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000002c4ef: or eax, 0x9edbc; divsd xmm0, xmm1; ret; 
0x0000000000043191: or eax, 0xa0582; orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002709c: or eax, 0xa421f; jg 0x27178; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000271d0: or eax, 0xa48d3; add rsp, 0x18; mulsd xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000027110: or eax, 0xa4993; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000009c7c1: or eax, 0xa6762; vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6ae1]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c7ca: or eax, 0xa6ae1; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c302: or eax, 0xa6fa9; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009b912: or eax, 0xa78e9; movss dword ptr [rdi], xmm0; subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000009ab70: or eax, 0xa83bb; mulsd xmm1, xmm3; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000031ae5: or eax, 0xae58e; addsd xmm1, xmm0; subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000005100a: or eax, 0xaf3a5; orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005102f: or eax, 0xaf3a8; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fc41: or eax, 0xb076e; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004fafb: or eax, 0xb08dc; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x0000000000050167: or eax, 0xb0cf4; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x0000000000015dc8: or eax, 0xb5ce3; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015db0: or eax, 0xb5cfb; fld qword ptr [rcx + rax]; ret; 
0x0000000000015d18: or eax, 0xb5d93; fld qword ptr [rcx + rdx*4]; ret; 
0x000000000004a5ac: or eax, 0xb5e03; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004a1a7: or eax, 0xb621c; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000049ffb: or eax, 0xb63ac; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x0000000000015d94: or eax, 0xb73c7; fld qword ptr [rcx + rdx*8]; ret; 
0x00000000000471ed: or eax, 0xb787e; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000012e4b: or eax, 0xb837c; add rsp, 0x18; ret; 
0x00000000000270e6: or eax, 0xb8f8d; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004500f: or eax, 0xb9a5c; ret; 
0x000000000002c4ce: or eax, 0xbb105; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x00000000000e8bab: or eax, 0xbf304084; cli; ret; 
0x000000000010cc1a: or eax, 0xc7806df; push 0x7d; and r15d, edx; ret 0x6adc; 
0x000000000001fa3a: or eax, 0xca2f05d9; or al, byte ptr [rax]; ret; 
0x0000000000001bed: or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000000efeae: or eax, 0xe40003f; mov ebx, 0x3fcbf601; mov ch, 0x78; ret; 
0x000000000003287d: or eax, 0xf446600; push rsp; ret; 
0x0000000000044da7: or eax, 0xf660000; sub al, dl; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x00000000000e568e: or eax, 0xfef35f3c; xchg ebp, eax; scasb al, byte ptr [rdi]; sbb dword ptr [rdi + rdi - 0x74], esp; sub r15b, byte ptr [r9 + 0x79]; ret 0xbc01; 
0x0000000000019e64: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000049c1b: or eax, dword ptr [eax]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000049c23: or eax, dword ptr [eax]; ret; 
0x00000000001959bd: or eax, dword ptr [r10]; ror byte ptr [rsi], 8; ret; 
0x000000000010d1ce: or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x000000000019a464: or eax, dword ptr [rax]; add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax], al; fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x0000000000091ea2: or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe06], al; ret; 
0x0000000000042274: or eax, dword ptr [rax]; add byte ptr [rdi], cl; lahf; ret 0xd109; 
0x0000000000012d68: or eax, dword ptr [rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000002c4d1: or eax, dword ptr [rax]; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004d335: or eax, dword ptr [rax]; add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000001c167: or eax, dword ptr [rax]; add rsp, 0x18; fldz; ret; 
0x000000000001c1a2: or eax, dword ptr [rax]; add rsp, 0x18; fxch st(1); ret; 
0x00000000000270e9: or eax, dword ptr [rax]; add rsp, 0x18; mulsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004a5af: or eax, dword ptr [rax]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000012e4e: or eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x000000000001dec9: or eax, dword ptr [rax]; add rsp, 0x58; fxch st(1); ret; 
0x000000000001c71d: or eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000031935: or eax, dword ptr [rax]; addsd xmm0, xmm1; movapd xmm0, xmm1; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000004ecce: or eax, dword ptr [rax]; addss xmm0, dword ptr [rip + 0xb16a0]; ret; 
0x0000000000049d2e: or eax, dword ptr [rax]; addss xmm0, dword ptr [rip + 0xb6638]; ret; 
0x0000000000049c1c: or eax, dword ptr [rax]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x000000000004fafe: or eax, dword ptr [rax]; addss xmm0, xmm1; movaps xmm0, xmm1; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004a00a: or eax, dword ptr [rax]; addss xmm0, xmm1; ret; 
0x000000000005016a: or eax, dword ptr [rax]; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000004fc44: or eax, dword ptr [rax]; addss xmm1, xmm0; subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004a2aa: or eax, dword ptr [rax]; addss xmm2, dword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x00000000000320fa: or eax, dword ptr [rax]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4ea: or eax, dword ptr [rax]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x00000000000501d1: or eax, dword ptr [rax]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d351: or eax, dword ptr [rax]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000032012: or eax, dword ptr [rax]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000028669: or eax, dword ptr [rax]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004ff21: or eax, dword ptr [rax]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x0000000000018722: or eax, dword ptr [rax]; faddp st(1); fld xword ptr [rsp + 0x10]; pop rbx; fmulp st(1); ret; 
0x0000000000015e2e: or eax, dword ptr [rax]; fchs; ret; 
0x0000000000015e39: or eax, dword ptr [rax]; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015e28: or eax, dword ptr [rax]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x000000000001c717: or eax, dword ptr [rax]; fld dword ptr [rip + 0xb0611]; add rsp, 8; ret; 
0x000000000001c19c: or eax, dword ptr [rax]; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x0000000000015db3: or eax, dword ptr [rax]; fld qword ptr [rcx + rax]; ret; 
0x0000000000015d1b: or eax, dword ptr [rax]; fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000015d97: or eax, dword ptr [rax]; fld qword ptr [rcx + rdx*8]; ret; 
0x000000000001608d: or eax, dword ptr [rax]; fld qword ptr [rdx + rax]; ret; 
0x000000000001830b: or eax, dword ptr [rax]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000013748: or eax, dword ptr [rax]; fld xword ptr [rsp + 0x18]; add rsp, 0x10; fdivp st(1); ret; 
0x0000000000012bae: or eax, dword ptr [rax]; fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x0000000000016cac: or eax, dword ptr [rax]; fmulp st(1); fld1; faddp st(1); ret; 
0x0000000000018311: or eax, dword ptr [rax]; fmulp st(1); ret; 
0x0000000000016e9e: or eax, dword ptr [rax]; fsubp st(1); fmulp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000012c5e: or eax, dword ptr [rax]; fsubp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000012bdb: or eax, dword ptr [rax]; fsubrp st(1); jns 0x12b49; fchs; ret; 
0x0000000000015c6b: or eax, dword ptr [rax]; fucompi st(1); je 0x15c74; faddp st(1); ret; 
0x0000000000017f95: or eax, dword ptr [rax]; fyl2x; ret; 
0x00000000000183b1: or eax, dword ptr [rax]; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000011b85: or eax, dword ptr [rax]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x0000000000011c05: or eax, dword ptr [rax]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000012382: or eax, dword ptr [rax]; jp 0x12388; je 0x12390; add rsp, 0x18; ret; 
0x00000000000127a5: or eax, dword ptr [rax]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000032006: or eax, dword ptr [rax]; jp 0x32048; jne 0x32048; movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x000000000000e569: or eax, dword ptr [rax]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x000000000000e5e9: or eax, dword ptr [rax]; jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000edc4: or eax, dword ptr [rax]; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000f229: or eax, dword ptr [rax]; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x000000000002a5ec: or eax, dword ptr [rax]; mov eax, eax; movsd qword ptr [rsp + 0x10], xmm3; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004c898: or eax, dword ptr [rax]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000f393: or eax, dword ptr [rax]; mov eax, edi; movapd xmm2, xmm0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000471f0: or eax, dword ptr [rax]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000047543: or eax, dword ptr [rax]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000153f7: or eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000031c4c: or eax, dword ptr [rax]; mulsd xmm0, xmm1; ret; 
0x000000000004316e: or eax, dword ptr [rax]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004fdc5: or eax, dword ptr [rax]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000504b4: or eax, dword ptr [rax]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049ffe: or eax, dword ptr [rax]; mulss xmm1, xmm0; mulss xmm0, dword ptr [rip + 0xb63a4]; addss xmm0, xmm1; ret; 
0x000000000004a1aa: or eax, dword ptr [rax]; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004e87a: or eax, dword ptr [rax]; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000324f4: or eax, dword ptr [rax]; orpd xmm0, xmmword ptr [rip + 0xca2e2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004a2b2: or eax, dword ptr [rax]; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000015cd8: or eax, dword ptr [rax]; ret; 
0x0000000000027e7a: or eax, dword ptr [rax]; shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x000000000004eea6: or eax, dword ptr [rax]; subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000049de8: or eax, dword ptr [rax]; subss xmm0, xmm1; ret; 
0x000000000004a09f: or eax, dword ptr [rax]; subss xmm0, xmm1; test edx, edx; jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x00000000000cd47c: or eax, dword ptr [rbp - 0xd]; add byte ptr [rax - 0x54ff63ee], cl; and byte ptr [rbx], bh; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x0000000000016085: or eax, dword ptr [rcx]; ror byte ptr [rax - 0x73], 1; adc eax, 0xb7fa1; fld qword ptr [rdx + rax]; ret; 
0x0000000000105b41: or eax, dword ptr [rdx + rbp*8 + 0x61d24412]; outsd dx, dword ptr [rsi]; ret; 
0x000000000019a2f2: or eax, dword ptr [rdx]; ret 0xe0a; 
0x00000000001959be: or eax, dword ptr [rdx]; ror byte ptr [rsi], 8; ret; 
0x00000000000742b5: or eax, dword ptr [rip - 0x3b7eb800]; clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000004c897: or eax, dword ptr ds:[rax]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000049f36: or eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x00000000000183b8: or eax, dword ptr fs:[rax]; fmulp st(1); ret; 
0x00000000000183b0: or eax, dword ptr fs:[rax]; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000049eab: or eax, dword ptr fs:[rax]; subss xmm0, xmm1; ret; 
0x000000000001830a: or eax, dword ptr gs:[rax]; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000049de7: or eax, dword ptr gs:[rax]; subss xmm0, xmm1; ret; 
0x000000000010b4fe: or eax, eax; and eax, dword ptr [r13 - 5]; ret; 
0x000000000004a981: or eax, ebx; movd xmm0, eax; ret; 
0x000000000008680c: or eax, ecx; movd xmm0, eax; ret; 
0x000000000005048f: or eax, ecx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000027e5e: or eax, ecx; movq xmm0, rax; ret; 
0x0000000000050ea7: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000042f9a: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000c8f7a: or eax, edi; and rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c8ec2: or eax, edi; and rax, rdx; or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c8df9: or eax, edi; jne 0xc8d6a; add rsp, 0x28; ret; 
0x0000000000027e5b: or eax, edi; or rax, r9; movq xmm0, rax; ret; 
0x0000000000019e83: or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000c91d1: or eax, edx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000031a87: or eax, edx; mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043285: or eax, edx; movq xmm0, rax; ret; 
0x000000000004a97e: or eax, edx; or eax, r11d; movd xmm0, eax; ret; 
0x00000000000727b7: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000c91cb: or eax, esi; and rax, rcx; or rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c92bc: or eax, esi; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ec8: or eax, esi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000086a48: or eax, esi; movq xmm0, rax; ret; 
0x000000000004a97d: or eax, r10d; or eax, r11d; movd xmm0, eax; ret; 
0x000000000004a980: or eax, r11d; movd xmm0, eax; ret; 
0x00000000001126b0: or ebp, 0xffffffa7; ret; 
0x0000000000103bf2: or ebp, dword ptr [rax + riz*8 - 0x1b]; lodsb al, byte ptr [rsi]; nop; ret; 
0x0000000000012fc6: or ebp, dword ptr [rcx + 0x200]; je 0x12fd2; fstp st(0); fldz; ret; 
0x0000000000019d76: or ebp, dword ptr [rcx + 0x200]; je 0x19d82; fstp st(0); fldz; ret; 
0x0000000000015e8a: or ebp, ebx; add eax, 0xb72d7; ret; 
0x0000000000015cd1: or ebp, ebx; fcomp st(5); add eax, 0xb55e6; ret; 
0x00000000000bd458: or ebx, dword ptr [rax + rsi*8 - 0x3b]; ret; 
0x0000000000017054: or ebx, ebp; fstpnce st(1), st(0); call 0xfffffffff1e05136; ret; 
0x000000000013548a: or ebx, esp; je 0x13545e; pop rsp; and al, 0x82; ret; 
0x0000000000163bca: or ebx, esp; je 0x163b9e; pop rsp; and al, 0x82; ret; 
0x00000000000d4cca: or ebx, esp; je 0xd4c9e; pop rsp; and al, 0x82; ret; 
0x00000000000503c3: or ecx, 1; movd xmm0, ecx; movaps xmm1, xmm0; mulss xmm1, xmm1; ret; 
0x0000000000106524: or ecx, dword ptr [rax + 0x39]; fnstcw word ptr [rcx - 0x39]; insb byte ptr [rdi], dx; and byte ptr [rsp + rdi*2 + 0x5a0e3ff4], dh; push rsi; ret; 
0x000000000019859f: or ecx, dword ptr [rax + rax]; add byte ptr [rsi + rsi*2], dl; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x00000000000c726c: or ecx, dword ptr [rcx - 0x7d]; ret 0x4904; 
0x000000000007b1ab: or ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000007b273: or ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000321d7: or ecx, eax; mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000199343: or edi, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 0x34000083], bh; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x00000000000182db: or edi, ecx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], di; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000032354: or edi, edx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000050ff6: or edi, edx; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x00000000000324a8: or edi, edx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000077a0c: or edi, esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000050b67: or edx, 0x3f800000; cmp ecx, -1; cmove eax, edx; movd xmm0, eax; ret; 
0x0000000000050276: or edx, 1; movd xmm1, edx; movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x000000000000d39e: or edx, dword ptr [rax + 0x6ebd8dd]; nop dword ptr [rax]; fstp st(0); add rsp, 0x10; pop rbx; ret; 
0x0000000000191643: or edx, dword ptr [rdi + 0xe]; or byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x000000000001aede: or edx, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x0000000000019e4f: or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000072bfb: or edx, eax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb41: or edx, eax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000007451a: or edx, eax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000072869: or edx, eax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x00000000000440b8: or edx, eax; movq xmm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000186e0: or edx, ecx; or edx, esi; fld xword ptr [rsp + 0x10]; jne 0x18698; pop rbx; ret; 
0x000000000002e908: or edx, ecx; setne al; add eax, 0x7fffffff; ret; 
0x00000000000186e2: or edx, esi; fld xword ptr [rsp + 0x10]; jne 0x18698; pop rbx; ret; 
0x000000000001aedb: or edx, esi; or r10d, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x000000000010da32: or esi, dword ptr [rdx + rdi - 0x2f28ea6d]; adc cl, byte ptr [rbx + 0xe5d5c9]; ror byte ptr [rax - 0x1c], 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x0000000000091219: or esi, dword ptr [rsi + 0x3bc50006]; pop rcx; ret; 
0x00000000000321f7: or esi, eax; je 0x3217f; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000070c71: or esi, eax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001b074: or esi, ebx; ret; 
0x0000000000077c03: or esi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000043f70: or esi, edx; mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000010be0d: or esi, esi; jmp qword ptr [rax + 7]; 
0x000000000010be09: or esi, esi; jmp qword ptr [rax + 9]; 
0x000000000010f9b5: or esi, esp; ret; 
0x00000000000321f6: or esi, r8d; je 0x3217f; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007cdb4: or esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000070f79: or esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add byte ptr [r14 + 0xf], r12b; out dx, eax; ret 0x290f; 
0x00000000000e137b: or esp, eax; mov ecx, 0xbe23; add byte ptr [rax + rax*8 - 0x27c00ffc], dh; wait; out dx, eax; ret; 
0x00000000000ab659: or qword ptr [r8], r8; and ch, al; sti; pop rax; ret; 
0x00000000000abaee: or qword ptr [rax], rax; and ch, al; sti; pop rax; ret; 
0x0000000000191642: or r10d, dword ptr [r15 + 0xe]; or byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x000000000001aedd: or r10d, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x000000000001aeda: or r10d, esi; or r10d, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x000000000008db5a: or r12b, al; ret 0xb9a9; 
0x0000000000199342: or r15d, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 0x34000083], bh; fcompi st(0); jmp qword ptr [rdx + 0x21]; 
0x00000000000c8df8: or r8, rdi; jne 0xc8d6a; add rsp, 0x28; ret; 
0x000000000019a2f1: or r8d, dword ptr [r10]; ret 0xe0a; 
0x0000000000016cab: or r8d, dword ptr [r8]; fmulp st(1); fld1; faddp st(1); ret; 
0x00000000000321d6: or r9, rax; mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000019a463: or rax, qword ptr [r8]; add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax], al; fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x0000000000027e5d: or rax, r9; movq xmm0, rax; ret; 
0x00000000000867a6: or rax, rcx; movq xmm0, rax; ret; 
0x0000000000042f99: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000c8f79: or rax, rdi; and rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c8ec1: or rax, rdi; and rax, rdx; or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000027e5a: or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x00000000000c91d0: or rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000031a86: or rax, rdx; mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043284: or rax, rdx; movq xmm0, rax; ret; 
0x00000000000727b6: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000c91ca: or rax, rsi; and rax, rcx; or rax, rdx; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x00000000000c92bb: or rax, rsi; mov qword ptr [rsp + 8], rax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c8ec7: or rax, rsi; mov qword ptr [rsp - 0x10], rax; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000086a47: or rax, rsi; movq xmm0, rax; ret; 
0x000000000019859e: or rcx, qword ptr [rax + r8]; add byte ptr [rsi + rsi*2], dl; add byte ptr [rax], al; cmp bh, ch; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000032353: or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x00000000000324a7: or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000072bfa: or rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb40: or rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000074519: or rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000072868: or rdx, rax; mov qword ptr [rsp - 0x20], rdx; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x00000000000440b7: or rdx, rax; movq xmm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x000000000006ac16: or rdx, rcx; setne al; add eax, 0x7fffffff; ret; 
0x0000000000070c70: or rsi, rax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000043f6f: or rsi, rdx; mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000006afb5: or word ptr [rax], ax; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043010: orpd xmm0, xmm1; ret; 
0x0000000000027000: orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x000000000002e9f1: orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045ae4: orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x000000000004753d: orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000043196: orpd xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043168: orpd xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324f6: orpd xmm0, xmmword ptr [rip + 0xca2e2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324c8: orpd xmm0, xmmword ptr [rip + 0xca320]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000045c4c: orpd xmm1, xmm5; ret; 
0x0000000000048cf2: orpd xmm1, xmm7; ret; 
0x000000000004500c: orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000044fb0: orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000048828: orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000471e9: orpd xmm9, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000043011: orps xmm0, xmm1; ret; 
0x0000000000027001: orps xmm0, xmm6; add rsp, 0x28; ret; 
0x000000000002e9f2: orps xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045ae5: orps xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000051034: orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000005100f: orps xmm0, xmmword ptr [rip + 0xafe9a]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504d4: orps xmm0, xmmword ptr [rip + 0xb09c5]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504af: orps xmm0, xmmword ptr [rip + 0xb09fa]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004753e: orps xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000043197: orps xmm0, xmmword ptr [rip + 0xb9642]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000043169: orps xmm0, xmmword ptr [rip + 0xb9680]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324f7: orps xmm0, xmmword ptr [rip + 0xca2e2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324c9: orps xmm0, xmmword ptr [rip + 0xca320]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000045c4d: orps xmm1, xmm5; ret; 
0x0000000000048cf3: orps xmm1, xmm7; ret; 
0x00000000000471eb: orps xmm1, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000004500d: orps xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000044fb1: orps xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000048829: orps xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000471ea: orps xmm9, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000000cd7a: out 0, al; add byte ptr [rax], al; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x00000000001047d8: out 0x11, al; ret 0xe30e; 
0x0000000000105c0c: out 0x15, al; call 0xffffffffda108a52; ret; 
0x0000000000050ff4: out 0x17, eax; or edi, edx; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x0000000000043f6d: out 0x20, al; or rsi, rdx; mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x0000000000032351: out 0x20, eax; or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x000000000010e43a: out 0x20, eax; push -0x37c00089; outsb dx, byte ptr [rsi]; ret 0x6b8e; 
0x00000000000591b6: out 0x26, al; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000010f9b2: out 0x2e, eax; or esi, esp; ret; 
0x000000000011230b: out 0x32, al; cmp eax, 0xef9fbc5f; test al, 0x22; ret 0xefeb; 
0x00000000000d4d08: out 0x33, al; pop rbp; ret; 
0x0000000000027e55: out 0x34, eax; add rax, rdx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x00000000000324a2: out 0x34, eax; and rdx, rax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000d6049: out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x000000000000c374: out 0x3d, al; and eax, esi; ret; 
0x00000000000f1386: out 0x3f, al; add byte ptr [rsi], bh; ret; 
0x00000000000d9ebe: out 0x3f, al; jmp qword ptr [rbx]; 
0x00000000000dba2e: out 0x3f, al; mov es, word ptr [rdx - 0x779ca8d]; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x00000000000d9cbe: out 0x3f, al; ret 0xd04e; 
0x00000000000d9d3e: out 0x3f, al; ret 0xd7f0; 
0x00000000000d33c6: out 0x3f, al; ret; 
0x000000000011b3ae: out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x11b3b4; ret 0x56ca; 
0x0000000000149d4e: out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x149d54; ret 0x56ca; 
0x0000000000177c8e: out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x177c94; ret 0x56ca; 
0x00000000000e742e: out 0x3f, eax; insd dword ptr [rdi], dx; jne 0xe7434; ret 0x56ca; 
0x00000000000ff44e: out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x000000000011b37e: out 0x3f, eax; jl 0x11b383; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000149d1e: out 0x3f, eax; jl 0x149d23; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x0000000000177c5e: out 0x3f, eax; jl 0x177c63; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x00000000000e73fe: out 0x3f, eax; jl 0xe7403; xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x00000000000f0c06: out 0x3f, eax; mov dl, 0xd3; ret 0xf481; 
0x00000000000e2246: out 0x3f, eax; pop rbx; ret; 
0x00000000000ca2ae: out 0x3f, eax; ret; 
0x00000000000de9e6: out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x00000000000dea1e: out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000cf4f5: out 0x47, eax; pushfq; ret 0x3f; 
0x00000000000cf4d5: out 0x47, eax; pushfq; ret 0xbf; 
0x000000000010cae5: out 0x49, al; out 0xd2, al; pop rbx; ret; 
0x0000000000015cd6: out 0x55, al; or eax, dword ptr [rax]; ret; 
0x000000000004882b: out 0x66, eax; movaps xmm1, xmm4; ret; 
0x000000000004fe55: out 0x67, eax; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000d7d3b: out 0x7b, eax; ret; 
0x00000000000dde51: out 0x84, al; in al, dx; jmp rdi; 
0x000000000002cf14: out 0x85, al; test byte ptr [rdi], -0x7b; ret; 
0x00000000000de74b: out 0x8c, al; ret 0xbfd4; 
0x00000000000dd041: out 0x91, al; sbb esp, dword ptr [rsi + 0x5f]; ret 0x2c3f; 
0x0000000000001beb: out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x000000000003cd15: out 0x9c, eax; add al, 0; cmovne rax, rdx; ret; 
0x00000000000fd1b5: out 0xa, al; lea ebx, [rdi]; sbb al, 0x14; ret; 
0x00000000000d8deb: out 0xa, al; stosd dword ptr [rdi], eax; ret 0xef3f; 
0x00000000000da772: out 0xb3, eax; ret; 
0x000000000010a227: out 0xb8, al; ret; 
0x00000000000d9cbc: out 0xc4, al; out 0x3f, al; ret 0xd04e; 
0x00000000000b9672: out 0xc4, eax; jns 0xb969f; ret; 
0x0000000000090910: out 0xc4, eax; ret 0x99a9; 
0x0000000000091034: out 0xc4, eax; ret 0xb9c9; 
0x00000000000bc243: out 0xc5, al; fistp dword ptr [rdi + riz*8 - 0x3b]; jns 0xbc274; inc ebp; ret; 
0x0000000000098ba8: out 0xc5, al; rcr dword ptr [rsp + rbx*8 - 0x3b], cl; jns 0x98bd8; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000b7d85: out 0xc5, al; ret; 
0x00000000000b9085: out 0xc5, al; sti; pop rax; mov ebp, 0xc5e05cdb; ret; 
0x00000000000bf31c: out 0xc5, al; sti; pop rsi; ret; 
0x000000000009595e: out 0xc5, eax; and ebx, dword ptr [rbp + rbx*8 - 0x3b]; movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000b86d2: out 0xc5, eax; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x00000000000bbf0b: out 0xc5, eax; jns 0xbbf38; ret; 
0x00000000000bc247: out 0xc5, eax; jns 0xbc274; inc ebp; ret; 
0x00000000000bcbbc: out 0xc5, eax; jns 0xbcbe9; inc ebp; ret; 
0x000000000008d248: out 0xc5, eax; ret; 
0x000000000010cae7: out 0xd2, al; pop rbx; ret; 
0x000000000012df95: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x12e016; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000013e335: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x13e3b6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000015c7b5: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x15c836; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000016ca75: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x16caf6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000180855: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x1808d6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000018b5f5: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0x18b676; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000dde55: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0xdded6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000fa2f5: out 0xd2, eax; mov edi, 0x88c659e8; jbe 0xfa376; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000addb6: out 0xda, al; cmc; jmp qword ptr [rsi + 0xf]; 
0x000000000018f5a5: out 0xe7, al; call qword ptr [rax + 0x22]; 
0x00000000000b4de1: out 0xe9, eax; nop; out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000190145: out 0xeb, al; call ptr [rax - 0x57ffffa3]; out 0xeb, eax; call rax; 
0x000000000019014d: out 0xeb, eax; call rax; 
0x00000000000ec013: out 0xf, eax; call rcx; 
0x0000000000190d0d: out 0xf0, al; call rax; 
0x000000000007a640: out 0xfd, al; jmp qword ptr [rsi + 0xf]; 
0x000000000007b491: out 0xfe, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000024a57: out 0xff, al; jmp qword ptr [rsi + 0x41]; 
0x000000000005bc46: out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000030b13: out 0xff, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000026bd6: out 0xff, eax; jmp qword ptr [rsi + 0x41]; 
0x00000000000b4de4: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000004d356: out 7, ax; add bl, dh; divps xmm0, xmm1; ret; 
0x000000000004d357: out 7, eax; add bl, dh; divps xmm0, xmm1; ret; 
0x000000000003cbd0: out 8, eax; add byte ptr [rbx + 0x66], bl; movaps xmm0, xmm1; ret; 
0x0000000000076ace: out 8, eax; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x86e8; 
0x0000000000083e8e: out dx, al; add eax, dword ptr [rbx - 0x17cfe1a]; add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx + 0x29]; ret 0x8341; 
0x00000000000c52b2: out dx, al; add esp, dword ptr [rsi + 0x41]; and eax, 0x21487fff; ret 0x8949; 
0x000000000019070e: out dx, al; call qword ptr [rax + 0x7a]; 
0x0000000000197846: out dx, al; call qword ptr [rax]; 
0x00000000001982f2: out dx, al; call qword ptr [rcx + 5]; 
0x000000000019766a: out dx, al; call qword ptr [rcx]; 
0x00000000001906a6: out dx, al; call rax; 
0x0000000000198422: out dx, al; call rdx; 
0x0000000000197432: out dx, al; call rsi; 
0x00000000000fda49: out dx, al; cmp al, 0xbf; out dx, eax; jmp rbx; 
0x000000000001fdc5: out dx, al; fchs; add rsp, 0x30; pop rbx; fxch st(1); ret; 
0x000000000001609b: out dx, al; fdiv st(0); ret; 
0x000000000000db09: out dx, al; fucompi st(1); ja 0xdb18; fsqrt; add rsp, 8; ret; 
0x0000000000016e1f: out dx, al; fucompi st(2); fstp st(1); jbe 0x16d23; fchs; ret; 
0x000000000000c1ae: out dx, al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000007237f: out dx, al; imul rax, rsi; add rsp, 0x18; ret; 
0x0000000000190936: out dx, al; inc dword ptr [rax - 0x7b]; add byte ptr [rax], al; pop rax; in al, 0xee; jmp qword ptr [rax - 0x7b]; 
0x00000000000d77d9: out dx, al; insb byte ptr [rdi], dx; add al, 0x12; push rax; ret; 
0x0000000000197462: out dx, al; jmp qword ptr [rax + 8]; 
0x000000000019093e: out dx, al; jmp qword ptr [rax - 0x7b]; 
0x00000000001908fe: out dx, al; jmp qword ptr [rax - 0x7c]; 
0x0000000000190816: out dx, al; jmp qword ptr [rax - 0x80]; 
0x000000000019067e: out dx, al; jmp qword ptr [rax]; 
0x00000000001983ea: out dx, al; jmp qword ptr [rbx]; 
0x0000000000197aba: out dx, al; jmp qword ptr [rdi + 0xa]; 
0x0000000000197e02: out dx, al; jmp qword ptr [rdi + 3]; 
0x00000000001985aa: out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000198372: out dx, al; jmp qword ptr [rdx]; 
0x000000000019769a: out dx, al; jmp qword ptr [rsi]; 
0x00000000001906d6: out dx, al; jmp rax; 
0x0000000000197b0a: out dx, al; jmp rbx; 
0x00000000000e9864: out dx, al; jmp rdi; 
0x00000000001979b2: out dx, al; jmp rsi; 
0x000000000001fa38: out dx, al; jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x000000000010c991: out dx, al; jns 0x10c99f; ret 0x9214; 
0x00000000000d7462: out dx, al; lahf; mov esp, 0x1cbc5f88; pop rsp; sti; ret; 
0x0000000000034686: out dx, al; or dword ptr [rax + rax], 0x590f41f2; ret; 
0x00000000000dd0b4: out dx, al; pop rcx; ret; 
0x00000000001906ce: out dx, al; push qword ptr [rax + 0x8000078]; cmp dh, ch; jmp rax; 
0x0000000000190676: out dx, al; push rax; jbe 0x19067b; add al, bl; out dx, al; jmp qword ptr [rax]; 
0x000000000019064e: out dx, al; push rax; jne 0x190653; add byte ptr [rax + 0x18], bl; out dx, al; call qword ptr [rax]; 
0x00000000000ec9cb: out dx, al; ret 0x25a8; 
0x00000000000d6394: out dx, al; ret 0x3fbb; 
0x0000000000112445: out dx, al; ret 0x583f; 
0x00000000000cbc12: out dx, al; ret 0x705f; 
0x0000000000012fd1: out dx, al; ret; 
0x00000000000d4a9b: out dx, al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000007d1e4: out dx, al; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000d0b09: out dx, al; xor al, 0x4f; sbb dword ptr [rax], esp; ret 0xde3f; 
0x00000000000eb661: out dx, eax; adc al, 0x3c; ret 0x445c; 
0x00000000000eb134: out dx, eax; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x00000000000182ad: out dx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x000000000007c3a3: out dx, eax; add eax, 0x67397; add rsp, 8; ret; 
0x000000000007c396: out dx, eax; add eax, 0x673a4; call 0x742d0; pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x0000000000075454: out dx, eax; add eax, 0x6e2e6; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x000000000006b924: out dx, eax; add eax, 0x77e16; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000058ac3: out dx, eax; add eax, 0x8ac77; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000ece6c: out dx, eax; call 0xffffffffc00f8d97; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000120dec: out dx, eax; call 0xffffffffc012cd17; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000014f64c: out dx, eax; call 0xffffffffc015b577; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000190a1e: out dx, eax; call qword ptr [rax]; 
0x0000000000190a1e: out dx, eax; call qword ptr [rax]; mov eax, dword ptr [rax]; add byte ptr [rax], cl; cmp bh, ch; jmp qword ptr [rax - 0x75]; 
0x0000000000198d9a: out dx, eax; call qword ptr [rbp + 3]; 
0x0000000000198a86: out dx, eax; call qword ptr [rdx + 4]; 
0x00000000001909fe: out dx, eax; call rax; 
0x000000000019878e: out dx, eax; call rsi; 
0x00000000000d1fb3: out dx, eax; cmp eax, 0xff3fdf66; fbld tbyte ptr [r10 + 0x3fe1dcbf]; in eax, 0xe4; ret 0x25e7; 
0x00000000000e3e70: out dx, eax; cmp edx, edi; inc byte ptr [rdx + 0x2e]; xchg byte ptr [rax + 0x7d], al; ret; 
0x00000000000c7287: out dx, eax; dec dword ptr [rax - 0x73]; xchg ecx, eax; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000c67fb: out dx, eax; dec dword ptr [rbp - 0x73]; nop; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x0000000000069e12: out dx, eax; dec dword ptr [rcx + 0x21]; ret; 
0x000000000007ad69: out dx, eax; fisttp dword ptr [rdi]; push rax; ret 0x8a8; 
0x000000000007c372: out dx, eax; fisttp dword ptr [rdi]; sub dword ptr [rsp + 0x20], ebx; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000001909f6: out dx, eax; inc dword ptr [rax - 0x17ffff77]; sub ebp, edi; call rax; 
0x0000000000190a66: out dx, eax; inc dword ptr [rax - 0x27ffff73]; pop rcx; out dx, eax; call rax; 
0x0000000000190a16: out dx, eax; inc eax; mov al, byte ptr [rax]; add byte ptr [rax + 0x37], bl; out dx, eax; call qword ptr [rax]; 
0x00000000000d99f8: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e98: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b38: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ed8: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x0000000000158358: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x0000000000168618: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3f8: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x0000000000187198: out dx, eax; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000d6d11: out dx, eax; int1; iretd; mov ch, 0x3f; ret 0x5a22; 
0x0000000000190a26: out dx, eax; jmp qword ptr [rax - 0x75]; 
0x0000000000190a06: out dx, eax; jmp qword ptr [rax]; 
0x0000000000198c0a: out dx, eax; jmp qword ptr [rcx + 3]; 
0x000000000003d52a: out dx, eax; jmp qword ptr [rsi + 0x41]; 
0x0000000000038543: out dx, eax; jmp qword ptr [rsi + 0x44]; 
0x000000000003b99e: out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000fda4c: out dx, eax; jmp rbx; 
0x00000000001909e6: out dx, eax; jmp rsp; 
0x0000000000117b99: out dx, eax; jne 0x117bc0; ret 0x314d; 
0x0000000000146579: out dx, eax; jne 0x1465a0; ret 0x314d; 
0x00000000001744b9: out dx, eax; jne 0x1744e0; ret 0x314d; 
0x00000000000e31b9: out dx, eax; jne 0xe31e0; ret 0x314d; 
0x00000000000153f5: out dx, eax; js 0x15403; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000000eeb2: out dx, eax; leave; ucomisd xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000012462: out dx, eax; leave; ucomiss xmm1, xmm0; ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x00000000000474ad: out dx, eax; or byte ptr [r8], r8b; movapd xmm1, xmm0; ret; 
0x000000000007263a: out dx, eax; or byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000102d44: out dx, eax; or eax, 0x13e; add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x00000000001985a9: out dx, eax; out dx, al; jmp qword ptr [rdx + 0xd]; 
0x0000000000198c09: out dx, eax; out dx, eax; jmp qword ptr [rcx + 3]; 
0x0000000000045c4a: out dx, eax; pop rbx; orpd xmm1, xmm5; ret; 
0x00000000001909de: out dx, eax; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x0000000000190af6: out dx, eax; push rax; pop qword ptr [rax]; add al, bl; jne 0x190aee; call qword ptr [rax]; 
0x0000000000070f81: out dx, eax; ret 0x290f; 
0x00000000000756c1: out dx, eax; ret 0x3de9; 
0x00000000000e8311: out dx, eax; ret 0x4b4c; 
0x0000000000063db6: out dx, eax; ret 0xf66; 
0x000000000005aa9d: out dx, eax; ret 6; 
0x00000000000e138a: out dx, eax; ret; 
0x0000000000044035: out dx, eax; ror byte ptr [rax + 0x21], 0xd0; cvtsi2sd xmm0, rax; ret; 
0x000000000006eedb: out dx, eax; ror byte ptr [rax + 0x21], 0xf2; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000073998: out dx, eax; ror byte ptr [rax - 0x73], 0xac; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000320db: out dx, eax; ror byte ptr [rax - 0x7f], 0xea; inc dword ptr [rbx]; add byte ptr [rax], al; cvtsi2sd xmm0, rdx; ret; 
0x0000000000083eb9: out dx, eax; ror byte ptr [rbx + riz*2 - 0x2e], 0x83; ret 0x8301; 
0x0000000000067a83: out dx, eax; ror byte ptr [rdi], 0x84; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000011c68: out dx, eax; ror byte ptr [rdi], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000006ef47: out dx, eax; sal byte ptr [rcx], 0xd2; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000008027d: out dx, eax; sal byte ptr [rdx + rdi*4 - 0xe], cl; movups xmm2, xmmword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000004d4e1: out dx, eax; sal dl, 0xf; pop rcx; and al, 0xf0; cvtsd2ss xmm0, xmm1; ret; 
0x000000000009a9cf: out dx, eax; sal dl, 0xf; pop rdx; ret; 
0x0000000000050cf2: out dx, eax; sal dl, 0xf; pop rdx; sal ebx, 0xf; pop rax; ret 0xa7eb; 
0x0000000000029ae2: out dx, eax; sal dl, 0xf; pop rsi; ret; 
0x00000000000745ce: out dx, eax; sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x000000000004d694: out dx, eax; sar byte ptr [rax], 0xc2; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x00000000000e83c0: out dx, eax; sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x000000000005198a: out dx, eax; shl byte ptr [rip + 0x3fffff], 0xf3; cvtpi2ps xmm0, mm0; ret; 
0x0000000000011332: out dx, eax; shl byte ptr [rsi + 0xf], 0x2e; ret 0x870f; 
0x000000000004500a: out dx, eax; shl byte ptr [rsi + 0xf], 0x56; or eax, 0xb9a5c; ret; 
0x000000000000e64b: out dx, eax; shl byte ptr [rsi + 0xf], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000841ae: out dx, eax; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000112311: out dx, eax; test al, 0x22; ret 0xefeb; 
0x000000000007c98d: out dx, eax; test byte ptr [rax + rax], al; add rsp, 0x48; ret; 
0x00000000000bd925: out dx, eax; test ch, 0xfb; pop rcx; ret 0xfbc5; 
0x000000000010d1cb: out dx, eax; xchg ebp, eax; pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x00000000000c96a7: out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x00000000000e9062: out dx, eax; xor r15d, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x00000000001298e8: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x12992f; cmp ch, ch; ret; 
0x0000000000139c88: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x139ccf; cmp ch, ch; ret; 
0x0000000000158108: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x15814f; cmp ch, ch; ret; 
0x00000000001683c8: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x16840f; cmp ch, ch; ret; 
0x000000000017c1a8: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x17c1ef; cmp ch, ch; ret; 
0x0000000000186f48: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0x186f8f; cmp ch, ch; ret; 
0x00000000000d97a8: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0xd97ef; cmp ch, ch; ret; 
0x00000000000f5c48: outsb dx, byte ptr [rsi]; add eax, 0x3cfbfb1b; loope 0xf5c8f; cmp ch, ch; ret; 
0x00000000000d604b: outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x0000000000199a11: outsb dx, byte ptr [rsi]; int1; jmp qword ptr [rdi + 3]; 
0x00000000000324ad: outsb dx, byte ptr [rsi]; iretd; movapd xmm0, xmm1; ret; 
0x0000000000050ffa: outsb dx, byte ptr [rsi]; iretd; movaps xmm0, xmm1; ret; 
0x000000000009c3d5: outsb dx, byte ptr [rsi]; or al, byte ptr [rax]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c422: outsb dx, byte ptr [rsi]; or al, byte ptr [rax]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000d6f0a: outsb dx, byte ptr [rsi]; or eax, 0x3fa1e9bc; ret 0x4749; 
0x00000000000d5dac: outsb dx, byte ptr [rsi]; pop rdi; ret 0x103f; 
0x00000000000179fe: outsb dx, byte ptr [rsi]; push 0xb; add dh, bl; ret 0xf1de; 
0x00000000001104e3: outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x000000000010e441: outsb dx, byte ptr [rsi]; ret 0x6b8e; 
0x00000000000eaef2: outsb dx, byte ptr [rsi]; ret 0x9b31; 
0x00000000000440bd: outsb dx, byte ptr [rsi]; ret 0xc031; 
0x0000000000086531: outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x00000000000cd9dd: outsb dx, byte ptr [rsi]; ret; 
0x00000000000d4108: outsb dx, byte ptr [rsi]; ror byte ptr [rbx], 0x2d; and ah, byte ptr [rcx - 0x53]; mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x0000000000044067: outsb dx, byte ptr [rsi]; sar byte ptr [rax + 1], 0xf2; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000519be: outsb dx, byte ptr [rsi]; sar byte ptr [rax + 1], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000034a5b: outsb dx, byte ptr [rsi]; std; jmp qword ptr [rsi - 0x70]; 
0x00000000000d9609: outsb dx, byte ptr [rsi]; test eax, 0x3fa67c7b; call rax; 
0x0000000000103064: outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x0000000000103064: outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x00000000000d604a: outsb dx, byte ptr ss:[rsi]; fucompi st(1); ret; 
0x000000000007de43: outsd dx, dword ptr [rsi]; adc al, 0x24; add rsp, 0x10; movdqa xmm0, xmm2; pop rbx; ret; 
0x00000000000d5ad9: outsd dx, dword ptr [rsi]; add al, 0x21; cli; test ebx, edx; mov edi, 0x4487f4b8; ret; 
0x0000000000072c04: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x000000000006fa18: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fb4a: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000007ccb4: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x000000000007d0ec: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x48; ret; 
0x000000000007c458: outsd dx, dword ptr [rsi]; add al, 0x24; call 0xc4e80; add rsp, 0x28; ret; 
0x0000000000069b82: outsd dx, dword ptr [rsi]; add al, 0x24; call 0xc6d90; add rsp, 0x40; pop rbx; ret; 
0x0000000000071fa7: outsd dx, dword ptr [rsi]; add al, 0x24; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x000000000007d986: outsd dx, dword ptr [rsi]; add al, 0x24; jne 0x7dac1; add rsp, 0x48; ret; 
0x000000000007cee6: outsd dx, dword ptr [rsi]; add al, 0x24; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000070f7c: outsd dx, dword ptr [rsi]; add byte ptr [r14 + 0xf], r12b; out dx, eax; ret 0x290f; 
0x0000000000074392: outsd dx, dword ptr [rsi]; add eax, 0x5a518; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000d4afd: outsd dx, dword ptr [rsi]; add eax, 0x747df340; ret; 
0x0000000000072637: outsd dx, dword ptr [rsi]; add eax, 0x8eff3; add rsp, 0x28; ret; 
0x000000000006ba3a: outsd dx, dword ptr [rsi]; add eax, 0x95ca0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000006f78e: outsd dx, dword ptr [rsi]; add eax, 0x9710c; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006eb42: outsd dx, dword ptr [rsi]; add eax, 0x97d58; add rsp, 0x30; pop rbx; ret; 
0x0000000000058bbb: outsd dx, dword ptr [rsi]; add eax, 0xa8a6f; add rsp, 0x28; ret; 
0x00000000000577d2: outsd dx, dword ptr [rsi]; add eax, 0xa9a18; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000070159: outsd dx, dword ptr [rsi]; and al, 0x10; add rsp, 0x28; ret; 
0x000000000006feaa: outsd dx, dword ptr [rsi]; and al, 0x10; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000007c452: outsd dx, dword ptr [rsi]; and al, 0x10; movdqa xmm0, xmmword ptr [rsp]; call 0xc4e80; add rsp, 0x28; ret; 
0x000000000007544e: outsd dx, dword ptr [rsi]; and al, 0x18; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000075462: outsd dx, dword ptr [rsi]; and al, 0x18; ret; 
0x000000000007c365: outsd dx, dword ptr [rsi]; and al, 0x20; add rsp, 0x48; ret; 
0x000000000007c988: outsd dx, dword ptr [rsi]; and al, 0x20; call 0xc4e80; add rsp, 0x48; ret; 
0x000000000007c93a: outsd dx, dword ptr [rsi]; and al, 0x30; add rsp, 0x48; ret; 
0x000000000007c982: outsd dx, dword ptr [rsi]; and al, 0x30; movdqa xmm0, xmmword ptr [rsp + 0x20]; call 0xc4e80; add rsp, 0x48; ret; 
0x0000000000072872: outsd dx, dword ptr [rsi]; and al, 0xd8; ret; 
0x000000000006ee68: outsd dx, dword ptr [rsi]; and al, 0xe8; ret; 
0x0000000000075472: outsd dx, dword ptr [rsi]; and al, 8; ret; 
0x00000000000a2f49: outsd dx, dword ptr [rsi]; call qword ptr [rax - 0x3b]; 
0x00000000000a2f49: outsd dx, dword ptr [rsi]; call qword ptr [rax - 0x3b]; retf; pop rsp; inc ebp; ret; 
0x00000000000a34e7: outsd dx, dword ptr [rsi]; ficom dword ptr [rax - 0x3b]; ret; 
0x000000000009f4fe: outsd dx, dword ptr [rsi]; fnstenv [rax + 0x5c73c1c4]; ret 0x19c5; 
0x00000000000680d5: outsd dx, dword ptr [rsi]; fsub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aba58: outsd dx, dword ptr [rsi]; hlt; mov al, 0xc5; and ebx, dword ptr [rcx + 0x1c]; and al, 0xc4; ret; 
0x00000000000a988b: outsd dx, dword ptr [rsi]; in eax, dx; and ch, al; ret; 
0x00000000000a4e18: outsd dx, dword ptr [rsi]; int 0x80; 
0x00000000000e9e34: outsd dx, dword ptr [rsi]; jmp qword ptr [rax]; 
0x0000000000135711: outsd dx, dword ptr [rsi]; js 0x1356be; lahf; ret 0x3ff4; 
0x0000000000163e51: outsd dx, dword ptr [rsi]; js 0x163dfe; lahf; ret 0x3ff4; 
0x00000000000d4f51: outsd dx, dword ptr [rsi]; js 0xd4efe; lahf; ret 0x3ff4; 
0x0000000000075ddd: outsd dx, dword ptr [rsi]; mov eax, 0xaae80008; syscall; 
0x00000000000c937d: outsd dx, dword ptr [rsi]; mov edx, 0xf66ffff; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000009c304: outsd dx, dword ptr [rsi]; or al, byte ptr [rax]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000072adf: outsd dx, dword ptr [rsi]; or eax, 0x8ebdb; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072b07: outsd dx, dword ptr [rsi]; or eax, 0x8ec13; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000007264a: outsd dx, dword ptr [rsi]; or eax, 0x8f020; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fb7f: outsd dx, dword ptr [rsi]; or eax, 0x91b3b; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fba7: outsd dx, dword ptr [rsi]; or eax, 0x91b73; por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000072712: outsd dx, dword ptr [rsi]; or eax, 0x92b38; movdqa xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x0000000000049f35: outsd dx, dword ptr [rsi]; or eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000197ab9: outsd dx, dword ptr [rsi]; out dx, al; jmp qword ptr [rdi + 0xa]; 
0x00000000000b4e2d: outsd dx, dword ptr [rsi]; push -0xb; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a3cce: outsd dx, dword ptr [rsi]; rcl byte ptr [rax + 0x4a107bc5]; sub ah, al; jns 0xa3d02; loope 0xa3ca0; ret; 
0x00000000000a3c54: outsd dx, dword ptr [rsi]; rcl dword ptr [rax - 0x3c]; ret; 
0x0000000000069569: outsd dx, dword ptr [rsi]; ret 0x10e8; 
0x000000000006bb74: outsd dx, dword ptr [rsi]; ret 0x15e8; 
0x0000000000086263: outsd dx, dword ptr [rsi]; ret 0x16e8; 
0x000000000007cc61: outsd dx, dword ptr [rsi]; ret 0x18e8; 
0x000000000006f35e: outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x0000000000058c5d: outsd dx, dword ptr [rsi]; ret 0x1ce8; 
0x000000000006a4fc: outsd dx, dword ptr [rsi]; ret 0x1de8; 
0x000000000007bc6a: outsd dx, dword ptr [rsi]; ret 0x1fe8; 
0x000000000007dc39: outsd dx, dword ptr [rsi]; ret 0x20e8; 
0x000000000005ea57: outsd dx, dword ptr [rsi]; ret 0x22e8; 
0x00000000000790d6: outsd dx, dword ptr [rsi]; ret 0x23e8; 
0x000000000007a665: outsd dx, dword ptr [rsi]; ret 0x24e8; 
0x0000000000078364: outsd dx, dword ptr [rsi]; ret 0x25e8; 
0x0000000000076333: outsd dx, dword ptr [rsi]; ret 0x26e8; 
0x000000000007d131: outsd dx, dword ptr [rsi]; ret 0x28e8; 
0x0000000000057a8e: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000072f50: outsd dx, dword ptr [rsi]; ret 0x29e8; 
0x000000000006f127: outsd dx, dword ptr [rsi]; ret 0x32e8; 
0x000000000006bf46: outsd dx, dword ptr [rsi]; ret 0x33e8; 
0x000000000007d025: outsd dx, dword ptr [rsi]; ret 0x34e8; 
0x000000000007db20: outsd dx, dword ptr [rsi]; ret 0x39e8; 
0x000000000007b11f: outsd dx, dword ptr [rsi]; ret 0x3ae8; 
0x000000000007c81d: outsd dx, dword ptr [rsi]; ret 0x3ce8; 
0x000000000006b376: outsd dx, dword ptr [rsi]; ret 0x3e8; 
0x0000000000073d4a: outsd dx, dword ptr [rsi]; ret 0x3fe8; 
0x000000000006b7a6: outsd dx, dword ptr [rsi]; ret 0x415d; 
0x0000000000075511: outsd dx, dword ptr [rsi]; ret 0x48e8; 
0x000000000007cb0f: outsd dx, dword ptr [rsi]; ret 0x4ae8; 
0x000000000005992e: outsd dx, dword ptr [rsi]; ret 0x4be8; 
0x0000000000072d0c: outsd dx, dword ptr [rsi]; ret 0x4de8; 
0x0000000000078185: outsd dx, dword ptr [rsi]; ret 0x4e8; 
0x000000000007de3a: outsd dx, dword ptr [rsi]; ret 0x4fe8; 
0x000000000007d809: outsd dx, dword ptr [rsi]; ret 0x50e8; 
0x000000000005ef38: outsd dx, dword ptr [rsi]; ret 0x51e8; 
0x000000000006bf26: outsd dx, dword ptr [rsi]; ret 0x53e8; 
0x000000000006eb05: outsd dx, dword ptr [rsi]; ret 0x54e8; 
0x000000000006f321: outsd dx, dword ptr [rsi]; ret 0x58e8; 
0x000000000007d5fe: outsd dx, dword ptr [rsi]; ret 0x5be8; 
0x00000000000640fd: outsd dx, dword ptr [rsi]; ret 0x5ce8; 
0x000000000006b6c6: outsd dx, dword ptr [rsi]; ret 0x5d5b; 
0x0000000000058dfb: outsd dx, dword ptr [rsi]; ret 0x5ee8; 
0x000000000007cdf9: outsd dx, dword ptr [rsi]; ret 0x60e8; 
0x0000000000063e28: outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x000000000006c1b4: outsd dx, dword ptr [rsi]; ret 0x66c3; 
0x00000000000754f2: outsd dx, dword ptr [rsi]; ret 0x67e8; 
0x000000000006a49a: outsd dx, dword ptr [rsi]; ret 0x688d; 
0x00000000000757f0: outsd dx, dword ptr [rsi]; ret 0x69e8; 
0x0000000000069b0f: outsd dx, dword ptr [rsi]; ret 0x6ae8; 
0x000000000006b70d: outsd dx, dword ptr [rsi]; ret 0x6ce8; 
0x000000000007691c: outsd dx, dword ptr [rsi]; ret 0x6de8; 
0x000000000006ae0a: outsd dx, dword ptr [rsi]; ret 0x6fe8; 
0x000000000007dbe9: outsd dx, dword ptr [rsi]; ret 0x70e8; 
0x0000000000076718: outsd dx, dword ptr [rsi]; ret 0x71e8; 
0x000000000007d6e2: outsd dx, dword ptr [rsi]; ret 0x77e8; 
0x000000000007d0de: outsd dx, dword ptr [rsi]; ret 0x7be8; 
0x000000000005e80d: outsd dx, dword ptr [rsi]; ret 0x7ce8; 
0x0000000000059dfa: outsd dx, dword ptr [rsi]; ret 0x7fe8; 
0x000000000006bef7: outsd dx, dword ptr [rsi]; ret 0x82e8; 
0x000000000006377a: outsd dx, dword ptr [rsi]; ret 0x8341; 
0x000000000006c102: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000058e30: outsd dx, dword ptr [rsi]; ret 0x850f; 
0x0000000000076ad3: outsd dx, dword ptr [rsi]; ret 0x86e8; 
0x000000000006a93a: outsd dx, dword ptr [rsi]; ret 0x880f; 
0x000000000007ced1: outsd dx, dword ptr [rsi]; ret 0x88e8; 
0x0000000000070340: outsd dx, dword ptr [rsi]; ret 0x8945; 
0x000000000005e781: outsd dx, dword ptr [rsi]; ret 0x8e8; 
0x000000000006c45c: outsd dx, dword ptr [rsi]; ret 0x90c3; 
0x0000000000057df8: outsd dx, dword ptr [rsi]; ret 0x91e8; 
0x000000000007dec6: outsd dx, dword ptr [rsi]; ret 0x93e8; 
0x0000000000072504: outsd dx, dword ptr [rsi]; ret 0x95e8; 
0x00000000000644e3: outsd dx, dword ptr [rsi]; ret 0x96e8; 
0x000000000007c2c0: outsd dx, dword ptr [rsi]; ret 0x99e8; 
0x000000000006e7eb: outsd dx, dword ptr [rsi]; ret 0x9ee8; 
0x0000000000068dd9: outsd dx, dword ptr [rsi]; ret 0xa0e8; 
0x000000000006bed7: outsd dx, dword ptr [rsi]; ret 0xa2e8; 
0x00000000000718d6: outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x00000000000740d4: outsd dx, dword ptr [rsi]; ret 0xa5e8; 
0x000000000007cfb1: outsd dx, dword ptr [rsi]; ret 0xa8e8; 
0x0000000000058aa0: outsd dx, dword ptr [rsi]; ret 0xa9e8; 
0x0000000000060dac: outsd dx, dword ptr [rsi]; ret 0xade8; 
0x000000000005c3ca: outsd dx, dword ptr [rsi]; ret 0xafe8; 
0x000000000007cda9: outsd dx, dword ptr [rsi]; ret 0xb0e8; 
0x000000000006aad7: outsd dx, dword ptr [rsi]; ret 0xb2e8; 
0x00000000000599c2: outsd dx, dword ptr [rsi]; ret 0xb7e8; 
0x000000000007239f: outsd dx, dword ptr [rsi]; ret 0xbae8; 
0x00000000000704be: outsd dx, dword ptr [rsi]; ret 0xbc41; 
0x000000000007d54e: outsd dx, dword ptr [rsi]; ret 0xbe8; 
0x00000000000d8814: outsd dx, dword ptr [rsi]; ret 0xbf95; 
0x00000000000697b9: outsd dx, dword ptr [rsi]; ret 0xc0e8; 
0x000000000006c3c3: outsd dx, dword ptr [rsi]; ret 0xc35b; 
0x0000000000075595: outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x00000000000af526: outsd dx, dword ptr [rsi]; ret 0xc530; 
0x00000000000653b4: outsd dx, dword ptr [rsi]; ret 0xc5e8; 
0x000000000007c793: outsd dx, dword ptr [rsi]; ret 0xc6e8; 
0x00000000000690af: outsd dx, dword ptr [rsi]; ret 0xcae8; 
0x00000000000596be: outsd dx, dword ptr [rsi]; ret 0xcbe8; 
0x00000000000708ab: outsd dx, dword ptr [rsi]; ret 0xcee8; 
0x0000000000075eba: outsd dx, dword ptr [rsi]; ret 0xcfe8; 
0x000000000006bd85: outsd dx, dword ptr [rsi]; ret 0xd4e8; 
0x0000000000072c82: outsd dx, dword ptr [rsi]; ret 0xd7e8; 
0x00000000000634ad: outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x0000000000072eab: outsd dx, dword ptr [rsi]; ret 0xdee8; 
0x000000000007db79: outsd dx, dword ptr [rsi]; ret 0xe0e8; 
0x000000000006bf98: outsd dx, dword ptr [rsi]; ret 0xe1e8; 
0x0000000000075576: outsd dx, dword ptr [rsi]; ret 0xe3e8; 
0x00000000000591a4: outsd dx, dword ptr [rsi]; ret 0xe5e8; 
0x000000000007607d: outsd dx, dword ptr [rsi]; ret 0xe5e9; 
0x0000000000059793: outsd dx, dword ptr [rsi]; ret 0xe6e8; 
0x00000000000723b2: outsd dx, dword ptr [rsi]; ret 0xe7e8; 
0x000000000007d859: outsd dx, dword ptr [rsi]; ret 0xe8; 
0x0000000000076b70: outsd dx, dword ptr [rsi]; ret 0xe9e8; 
0x000000000006aa7e: outsd dx, dword ptr [rsi]; ret 0xebe8; 
0x000000000007a26b: outsd dx, dword ptr [rsi]; ret 0xeee8; 
0x0000000000070e6a: outsd dx, dword ptr [rsi]; ret 0xefe8; 
0x000000000007ce69: outsd dx, dword ptr [rsi]; ret 0xf0e8; 
0x0000000000072f96: outsd dx, dword ptr [rsi]; ret 0xf3e8; 
0x0000000000061185: outsd dx, dword ptr [rsi]; ret 0xf4e8; 
0x0000000000072e94: outsd dx, dword ptr [rsi]; ret 0xf5e8; 
0x00000000000596f2: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000075763: outsd dx, dword ptr [rsi]; ret 0xf6e8; 
0x000000000007b162: outsd dx, dword ptr [rsi]; ret 0xf7e8; 
0x0000000000064380: outsd dx, dword ptr [rsi]; ret 0xf9e8; 
0x00000000000786fe: outsd dx, dword ptr [rsi]; ret 0xfbe8; 
0x000000000006b776: outsd dx, dword ptr [rsi]; ret 0xfc3; 
0x000000000007435b: outsd dx, dword ptr [rsi]; ret 0xfee8; 
0x000000000005850f: outsd dx, dword ptr [rsi]; ret; 
0x000000000009e5e2: outsd dx, dword ptr [rsi]; retf 0xc480; ret; 
0x000000000006f35a: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x000000000007bc66: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x1fe8; 
0x0000000000057a8a: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007de36: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x4fe8; 
0x000000000007c614: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x000000000006a496: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x688d; 
0x000000000005e809: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x7ce8; 
0x000000000007ab06: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x7fe8; 
0x000000000005e77d: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x8e8; 
0x0000000000057df4: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x91e8; 
0x000000000006e7e7: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x9ee8; 
0x000000000006aad3: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xb2e8; 
0x00000000000795c0: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xc5e8; 
0x00000000000634a9: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x0000000000072ea7: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xdee8; 
0x00000000000591a0: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xe5e8; 
0x000000000005978f: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xe6e8; 
0x0000000000072f92: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xf3e8; 
0x0000000000073021: outsd dx, dword ptr [rsi]; sbb esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000006455d: outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000069aca: outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000736c6: outsd dx, dword ptr [rsi]; shr eax, 0x13; mov edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000006a9b6: outsd dx, dword ptr [rsi]; shr eax, 0xd3; ret; 
0x000000000004def1: outsd dx, dword ptr [rsi]; sub eax, 0x2e0f000b; ret 0x870f; 
0x000000000007186d: outsd dx, dword ptr [rsi]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x0000000000079cbc: outsd dx, dword ptr [rsi]; test byte ptr [rax + riz*4], ah; add byte ptr [rax], al; add al, ch; or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000135710: outsd dx, dword ptr ss:[rsi]; js 0x1356be; lahf; ret 0x3ff4; 
0x0000000000163e50: outsd dx, dword ptr ss:[rsi]; js 0x163dfe; lahf; ret 0x3ff4; 
0x00000000000d4f50: outsd dx, dword ptr ss:[rsi]; js 0xd4efe; lahf; ret 0x3ff4; 
0x00000000000d3219: outsd dx, dword ptr ss:[rsi]; ret; 
0x000000000002b5c2: paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x000000000019020d: paddsb mm7, mm7; mov eax, 0x18000060; adc ah, ch; call rax; 
0x00000000000ff800: paddusw mm2, mm6; pop rbx; ret 0xebf2; 
0x000000000006f789: pand mm1, mm0; movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x000000000006f788: pand xmm1, xmm0; movdqa xmm0, xmmword ptr [rip + 0x9710c]; call 0xc6150; add rsp, 0x18; ret; 
0x0000000000099311: pextrw edi, mm3, 0x58; in eax, dx; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x00000000000432d1: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x0000000000051121: pmovmskb eax, mm0; and eax, 8; ret; 
0x00000000000432d0: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000051120: pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000dd044: pop di; ret 0x2c3f; 
0x0000000000070f8d: pop gs; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000007de7f: pop qword ptr [rax + rax]; movdqa xmm2, xmm0; add rsp, 0x10; pop rbx; movdqa xmm0, xmm2; ret; 
0x0000000000190ae9: pop qword ptr [rax]; add al, bh; jae 0x190ade; call rax; 
0x0000000000190af9: pop qword ptr [rax]; add al, bl; jne 0x190aee; call qword ptr [rax]; 
0x0000000000190ae1: pop qword ptr [rax]; add byte ptr [rax - 0x4700108d], cl; pop qword ptr [rax]; add al, bh; jae 0x190ade; call rax; 
0x00000000000758da: pop qword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x00000000000478dd: pop qword ptr [rcx]; add byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x00000000000161e2: pop r10; add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x0000000000190e74: pop r11; bnd jmp qword ptr [rax]; 
0x00000000000dd16a: pop r11; fsubr st(1); ret; 
0x00000000000a3353: pop r11; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x000000000008cc32: pop r11; pop rax; ret; 
0x00000000000a977a: pop r11; pop rcx; ret 0x2bc5; 
0x000000000008fe14: pop r11; pop rcx; ret; 
0x00000000000dbc2a: pop r11; ret; 
0x000000000003ceea: pop r12; divsd xmm0, xmm0; pop r13; ret; 
0x000000000002a66e: pop r12; divsd xmm1, xmm4; pop r13; movapd xmm0, xmm1; ret; 
0x00000000000b6b20: pop r12; inc ebp; ret; 
0x00000000000c1875: pop r12; inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc18a7; ret 0xc1c4; 
0x00000000000c270a: pop r12; inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc273c; ret 0xc1c4; 
0x000000000002a755: pop r12; movapd xmm1, xmm2; pop r13; movapd xmm0, xmm1; ret; 
0x00000000000280ea: pop r12; movapd xmm1, xmm3; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004cb08: pop r12; movaps xmm0, xmm1; ret; 
0x000000000004cb1a: pop r12; movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x000000000004cadf: pop r12; movaps xmm1, xmm6; movaps xmm0, xmm1; ret; 
0x000000000001545f: pop r12; pop r13; fabs; fld1; fdivrp st(1); ret; 
0x000000000006b770: pop r12; pop r13; movdqa xmm0, xmm2; ret; 
0x0000000000081ae6: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000000bc30: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000029b0f: pop r12; pop r13; pop r14; ret; 
0x00000000000965e1: pop r12; pop r13; pop rbp; lea rsp, [r13 - 0x10]; pop r13; ret; 
0x0000000000015306: pop r12; pop r13; ret; 
0x000000000008f107: pop r12; ret 0x13c5; 
0x00000000000931c4: pop r12; ret 0xfbc5; 
0x0000000000014990: pop r12; ret; 
0x00000000000b447f: pop r12; test ebp, 0xc5fb2979; ret; 
0x0000000000015461: pop r13; fabs; fld1; fdivrp st(1); ret; 
0x00000000000280f0: pop r13; movapd xmm0, xmm1; ret; 
0x000000000006b772: pop r13; movdqa xmm0, xmm2; ret; 
0x00000000000189a8: pop r13; pop r14; pop r15; fmulp st(1); fdiv st(0); ret; 
0x000000000009735a: pop r13; pop r14; pop r15; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081ae8: pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000000bc32: pop r13; pop r14; pop r15; ret; 
0x0000000000029b11: pop r13; pop r14; ret; 
0x00000000000965e3: pop r13; pop rbp; lea rsp, [r13 - 0x10]; pop r13; ret; 
0x00000000000db8c0: pop r13; ret 0x6eed; 
0x0000000000015308: pop r13; ret; 
0x00000000000189aa: pop r14; pop r15; fmulp st(1); fdiv st(0); ret; 
0x000000000009735c: pop r14; pop r15; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081aea: pop r14; pop r15; pop rbp; ret; 
0x000000000000bc34: pop r14; pop r15; ret; 
0x0000000000094959: pop r14; ret 0xabc5; 
0x0000000000029b13: pop r14; ret; 
0x0000000000049f11: pop r15; add byte ptr [rax], al; nop dword ptr [rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x00000000000189ac: pop r15; fmulp st(1); fdiv st(0); ret; 
0x000000000009735e: pop r15; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081aec: pop r15; pop rbp; ret; 
0x000000000000bc36: pop r15; ret; 
0x000000000008f325: pop r8; fadd st(4); ret 0xb9c1; 
0x00000000000ba63a: pop r8; inc ch; ret; 
0x00000000000b83f0: pop r8; inc ch; retf; pop rax; test ebp, 0xc5e72979; ret; 
0x00000000000beb4e: pop r8; inc ebp; ret; 
0x00000000000939b4: pop r8; int 0xc5; and dword ptr [rdx + rbx*8 - 0x3b], edx; stc; push rsp; ret 0x79c5; 
0x0000000000093f9f: pop r8; int 0xc5; stc; push rsp; ret 0x79c5; 
0x000000000008f0b9: pop r8; ret 0x4bc5; 
0x00000000000af38e: pop r8; ret 0xc1c4; 
0x000000000008db06: pop r8; ret 0xc1c5; 
0x0000000000098d53: pop r8; ret 0xf9c5; 
0x0000000000087d51: pop r8; ret 0xfbc5; 
0x0000000000088048: pop r8; ret; 
0x00000000000a97cc: pop r8; rol ch, 0xfb; pop rax; ret; 
0x00000000000a5b0d: pop r8; rol ch, 1; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; sub ebx, dword ptr [rax + rdx*8 - 0x3c]; ret; 
0x0000000000095969: pop r9; fld st(4); movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000b6458: pop r9; inc ebp; ret; 
0x00000000000c13ab: pop r9; inc esp; jns 0xc13da; ret 0xc3c5; 
0x00000000000161e0: pop r9; pop r10; add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000008e169: pop r9; ret 0x41c4; 
0x000000000008d066: pop r9; ret; 
0x000000000004a2ae: pop rax; adc eax, 0xb60f8; pop rbx; movaps xmm0, xmm2; ret; 
0x0000000000049948: pop rax; add al, 0x24; add rsp, 0x18; ret; 
0x0000000000196865: pop rax; add byte ptr [rax], al; xchg rcx, rax; in eax, dx; jmp rcx; 
0x00000000000cdc7e: pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x0000000000191dc8: pop rax; add ch, al; call qword ptr [rcx]; 
0x000000000001aacf: pop rax; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ebeaa: pop rax; add dword ptr [rsi - 0x80], edx; adc eax, 0xe120003f; mov esp, 0xbfd2e9e2; ret 0x8d1d; 
0x00000000000a7077: pop rax; add eax, 0x2879c500; ret; 
0x000000000009b292: pop rax; add eax, 0x30028; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b004: pop rax; add eax, 0x302b6; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000030d76: pop rax; add eax, 0x450f4800; ret 0x66c3; 
0x0000000000073492: pop rax; add eax, 0x8901a800; ret; 
0x000000000004ecd2: pop rax; add eax, 0xb16a0; ret; 
0x0000000000049f33: pop rax; add eax, 0xb646f; add rsp, 8; ret; 
0x0000000000049d32: pop rax; add eax, 0xb6638; ret; 
0x0000000000049c20: pop rax; add eax, 0xb6752; ret; 
0x00000000000570c0: pop rax; and al, 8; add rsp, 0x18; ret; 
0x00000000001909dc: pop rax; and ebp, edi; push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x000000000001f5e2: pop rax; call 0x12c70; fld xword ptr [rsp + 0x20]; add rsp, 0x20; add rsp, 0x28; ret; 
0x000000000002fca3: pop rax; call 0x28123e0f; sal edx, 0xf; pop rcx; ret; 
0x0000000000038f12: pop rax; call 0x2812d07e; ret 0xff2; 
0x000000000007f088: pop rax; call 0x281734f4; shl dword ptr [rsi + 0x44], 0xf; push rsp; ret 0x44f2; 
0x000000000003407a: pop rax; call 0x59128272; ret 0x44f2; 
0x00000000000ba6bb: pop rax; call 0x59876885; ret 0x3bc5; 
0x00000000000b8c73: pop rax; call 0x5da62; inc ebp; ret; 
0x00000000001907dc: pop rax; cdq; out dx, al; call qword ptr [rax]; 
0x00000000000d5636: pop rax; cmp al, 0x18; xchg esp, eax; push rsp; mov esi, ecx; ret; 
0x000000000018f7f4: pop rax; cmp al, ch; jmp rax; 
0x0000000000190d4c: pop rax; cmp cl, dh; push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x000000000012d9fc: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x12da03; call rdx; 
0x000000000013dd9c: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x13dda3; call rdx; 
0x000000000015c21c: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x15c223; call rdx; 
0x000000000016c4dc: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x16c4e3; call rdx; 
0x00000000001802bc: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x1802c3; call rdx; 
0x000000000018b05c: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0x18b063; call rdx; 
0x00000000000dd8bc: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xdd8c3; call rdx; 
0x00000000000f9d5c: pop rax; cmp dword ptr [rax + 0x67616a3f], ebx; jb 0xf9d63; call rdx; 
0x000000000008f326: pop rax; fadd st(4); ret 0xb9c1; 
0x00000000000b973a: pop rax; fadd st(5); jns 0xb9768; rol ah, 0xc1; jnp 0xb979c; ret; 
0x00000000000bdd22: pop rax; fadd st(5); jns 0xbdd4f; ret 0x39c5; 
0x00000000000bf14c: pop rax; fadd st(5); jns 0xbf17a; call 0x5987b31a; ret; 
0x00000000000bf3ce: pop rax; fadd st(5); jns 0xbf3fb; ret; 
0x00000000000bffd3: pop rax; fadd st(5); ret; 
0x000000000008bf4b: pop rax; fadd st(5); sti; pop rsp; ret; 
0x00000000000a3355: pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x000000000008809b: pop rax; fcmovb st(0), st(5); rcl dword ptr [rbx + rbp*8 - 0x3b]; ret; 
0x0000000000087d42: pop rax; fcmovb st(0), st(5); ret; 
0x000000000008b69e: pop rax; fcmovb st(0), st(5); sti; pop rsp; ret; 
0x00000000000afdfc: pop rax; fcmovnb st(0), st(4); ret; 
0x00000000000877f1: pop rax; fcmovnb st(0), st(5); imul ebx, dword ptr [rcx - 0x37], -0x3b; jns 0x87822; ret 0xe3c5; 
0x00000000000990c1: pop rax; fcmovnb st(0), st(5); jns 0x990ee; ffreep st(5); ret; 
0x0000000000099651: pop rax; fcmovnb st(0), st(5); jns 0x9967e; ffreep st(5); ret; 
0x000000000004ea8b: pop rax; fcomi st(3); subps xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x00000000000fd1aa: pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000008a480: pop rax; ffree st(5); ret; 
0x00000000000b7e45: pop rax; ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7e78; ret; 
0x00000000000b7f2b: pop rax; ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7f5e; ret; 
0x00000000000b8011: pop rax; ffreep st(4); sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb8044; ret; 
0x00000000000bfbf2: pop rax; ffreep st(5); jns 0xbfc20; call 0x5987bdc0; ret; 
0x00000000000c0f10: pop rax; ffreep st(5); jns 0xc0f3e; call 0x5987d0de; ret; 
0x00000000000b4a3e: pop rax; ffreep st(5); ret; 
0x000000000008712f: pop rax; fisttp dword ptr [rax - 0x77]; ret 0xfbc5; 
0x000000000001e52b: pop rax; fld st(0); fxch st(1); ret; 
0x00000000000b9643: pop rax; fld st(5); sti; pop rax; ret; 
0x00000000000b3987: pop rax; fld st(5); sti; pop rcx; ret; 
0x000000000008b62b: pop rax; fld st(5); sti; pop rsp; ret; 
0x000000000009b8d7: pop rax; fldenv [rsi + 0xf]; pop rdx; ret; 
0x00000000000993d0: pop rax; fldl2t; retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x000000000009b88b: pop rax; fsub qword ptr [rsi + 0xf]; pop rdx; ret; 
0x0000000000196f48: pop rax; fsubr st(5); jmp qword ptr [rbx + 1]; 
0x000000000001dece: pop rax; fxch st(1); ret; 
0x00000000000be8b6: pop rax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000008cc2f: pop rax; in al, 0xc4; pop r11; pop rax; ret; 
0x00000000000a4019: pop rax; in al, 0xc5; adc dword ptr [rcx + rbp*8 - 0x3c], edx; ret; 
0x0000000000099836: pop rax; in al, 0xc5; jns 0x99863; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x00000000000afe20: pop rax; in al, 0xc5; jns 0xafe4d; rol ebp, 0x39; push rsp; ret 0x41c4; 
0x0000000000089047: pop rax; in al, 0xc5; sti; pop rcx; ret 0x41c4; 
0x000000000019093c: pop rax; in al, 0xee; jmp qword ptr [rax - 0x7b]; 
0x00000000000a07cf: pop rax; in eax, 0xc5; add dword ptr [rcx + rdi*8 - 0x3c], edx; ret; 
0x00000000000b8689: pop rax; in eax, 0xc5; ret; 
0x00000000000a4ceb: pop rax; in eax, 0xf; xchg ah, al; add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000008e6f7: pop rax; in eax, 0xf; xchg dh, bh; add eax, dword ptr [rax]; add ch, al; ret; 
0x0000000000099314: pop rax; in eax, dx; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x00000000000878aa: pop rax; inc ch; ret; 
0x00000000000b83f1: pop rax; inc ch; retf; pop rax; test ebp, 0xc5e72979; ret; 
0x00000000000878a6: pop rax; inc ebp; ret; 
0x00000000000b645d: pop rax; inc ebp; retf; pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000bec13: pop rax; inc ebp; sti; pop rax; mov ebp, 0xc5fd28f9; ret; 
0x00000000000939b5: pop rax; int 0xc5; and dword ptr [rdx + rbx*8 - 0x3b], edx; stc; push rsp; ret 0x79c5; 
0x0000000000093fa0: pop rax; int 0xc5; stc; push rsp; ret 0x79c5; 
0x000000000008ea5b: pop rax; int 0xc5; xor ebx, dword ptr [rax + 0xd]; ret; 
0x000000000005f9b4: pop rax; ja 0x5f9c1; add al, ch; ret; 
0x000000000018f8fc: pop rax; jge 0x18f8e7; call qword ptr [rax]; 
0x0000000000091b21: pop rax; jl 0x91b48; and ah, al; ret 0xb9f9; 
0x000000000005eeb4: pop rax; jle 0x5eec1; add al, ch; ret; 
0x000000000002f09e: pop rax; jmp qword ptr [rsi + 0x44]; 
0x0000000000026569: pop rax; jmp qword ptr [rsi + 0x45]; 
0x0000000000039486: pop rax; jmp qword ptr [rsi + 0xf]; 
0x0000000000098de4: pop rax; leave; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000008e743: pop rax; loope 0x8e70b; jnp 0x8e758; xor r13b, al; ret; 
0x00000000000a0b31: pop rax; loope 0xa0b1d; ret; 
0x00000000000a4d35: pop rax; loope 0xa4cfd; jnp 0xa4d4a; xor r13b, al; ret; 
0x0000000000095218: pop rax; mov ah, 0x41; adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab814: pop rax; mov ah, 0x41; adc ebx, dword ptr [rdx + rdx*8 - 0x3c]; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x0000000000195788: pop rax; mov bh, 0xeb; call qword ptr [rdx]; 
0x00000000000b4a4c: pop rax; mov bh, 7; add ch, al; ret; 
0x00000000000b9088: pop rax; mov ebp, 0xc5e05cdb; ret; 
0x00000000000bec07: pop rax; mov ebp, 0xc5fc28f9; ret; 
0x00000000000bfd77: pop rax; mov ebp, 0xc5fc28f9; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x00000000000bec17: pop rax; mov ebp, 0xc5fd28f9; ret; 
0x00000000000122b7: pop rax; mov rax, qword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000001ba27: pop rax; mov rax, rdx; neg rax; pop rbx; pop rbp; ret; 
0x000000000007ff13: pop rax; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000086527: pop rax; not rdx; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000045a69: pop rax; or byte ptr [rax], al; ret; 
0x000000000004d1d2: pop rax; or dl, sil; addps xmm0, xmm1; addsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004b843: pop rax; or eax, 0x81447; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a1a6: pop rax; or eax, 0xb621c; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x00000000000c0fde: pop rax; out 0xc5, al; ret; 
0x00000000000b86d1: pop rax; out 0xc5, eax; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x000000000008d247: pop rax; out 0xc5, eax; ret; 
0x00000000000b4de0: pop rax; out 0xe9, eax; nop; out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000015f02: pop rax; pop rbx; pop rbp; ret; 
0x00000000001058f5: pop rax; push rbx; call 0x2976e08; ret 0xf90d; 
0x00000000000ba96c: pop rax; ret 0x1bc5; 
0x000000000008e338: pop rax; ret 0x1c5; 
0x000000000004f91b: pop rax; ret 0x1ee8; 
0x0000000000026a6a: pop rax; ret 0x1fe9; 
0x00000000000bed8b: pop rax; ret 0x21c5; 
0x0000000000088d7b: pop rax; ret 0x23c5; 
0x0000000000049e9d: pop rax; ret 0x280f; 
0x0000000000049b58: pop rax; ret 0x2c7e; 
0x00000000000b3bf6: pop rax; ret 0x33c5; 
0x0000000000053f1f: pop rax; ret 0x3ae8; 
0x00000000000c158f: pop rax; ret 0x3bc5; 
0x00000000000b889f: pop rax; ret 0x3ce9; 
0x000000000007e36e: pop rax; ret 0x4166; 
0x000000000008e5f5: pop rax; ret 0x41c4; 
0x000000000002493a: pop rax; ret 0x41f2; 
0x00000000000a6c97: pop rax; ret 0x43c4; 
0x000000000002f62b: pop rax; ret 0x4466; 
0x0000000000024022: pop rax; ret 0x44f2; 
0x0000000000053650: pop rax; ret 0x44f3; 
0x0000000000023f18: pop rax; ret 0x4566; 
0x0000000000023e89: pop rax; ret 0x45f2; 
0x000000000004a6d8: pop rax; ret 0x4866; 
0x000000000008f0ba: pop rax; ret 0x4bc5; 
0x0000000000046615: pop rax; ret 0x4e8; 
0x0000000000091252: pop rax; ret 0x5bc5; 
0x00000000000b89c8: pop rax; ret 0x5e9; 
0x00000000000298ba: pop rax; ret 0x5fe8; 
0x0000000000080c16: pop rax; ret 0x63e9; 
0x000000000004ea4d: pop rax; ret 0x66c3; 
0x00000000000467a9: pop rax; ret 0x70e8; 
0x0000000000088fe6: pop rax; ret 0x73c5; 
0x0000000000087d11: pop rax; ret 0x79c5; 
0x00000000000b483a: pop rax; ret 0x7bc5; 
0x000000000002548a: pop rax; ret 0x860f; 
0x000000000004b99e: pop rax; ret 0x8b48; 
0x00000000000b89e0: pop rax; ret 0x8e9; 
0x0000000000028d8a: pop rax; ret 0x8fe8; 
0x000000000008c8c2: pop rax; ret 0x8fe9; 
0x00000000000311b2: pop rax; ret 0x97e8; 
0x00000000000426b6: pop rax; ret 0x98e9; 
0x00000000000edc13: pop rax; ret 0x9b5c; 
0x000000000009528a: pop rax; ret 0x9c5; 
0x0000000000050cfa: pop rax; ret 0xa7eb; 
0x000000000004b4a9: pop rax; ret 0xb0e8; 
0x0000000000093db3: pop rax; ret 0xbbc5; 
0x00000000000b3a06: pop rax; ret 0xbc5; 
0x0000000000026a8a: pop rax; ret 0xbfe9; 
0x0000000000027bfb: pop rax; ret 0xc181; 
0x000000000008dc4f: pop rax; ret 0xc1c4; 
0x000000000008db07: pop rax; ret 0xc1c5; 
0x00000000000af330: pop rax; ret 0xc3c4; 
0x0000000000087cf1: pop rax; ret 0xc3c5; 
0x0000000000054095: pop rax; ret 0xc4e8; 
0x000000000009c599: pop rax; ret 0xcbc5; 
0x0000000000080cae: pop rax; ret 0xcbe9; 
0x00000000000925e3: pop rax; ret 0xd3c5; 
0x00000000000a97e8: pop rax; ret 0xdbc5; 
0x000000000004618b: pop rax; ret 0xdee8; 
0x000000000009beb9: pop rax; ret 0xe1c4; 
0x000000000004f458: pop rax; ret 0xe1e8; 
0x0000000000098cf7: pop rax; ret 0xe2c4; 
0x0000000000093750: pop rax; ret 0xe3c5; 
0x0000000000026bba: pop rax; ret 0xe5e9; 
0x00000000000b88be: pop rax; ret 0xebe9; 
0x0000000000026ba1: pop rax; ret 0xf0e9; 
0x000000000008c1ff: pop rax; ret 0xf3c5; 
0x0000000000046425: pop rax; ret 0xf4e8; 
0x000000000002ddb9: pop rax; ret 0xf4e9; 
0x000000000002f068: pop rax; ret 0xf66; 
0x0000000000098d54: pop rax; ret 0xf9c5; 
0x0000000000087d52: pop rax; ret 0xfbc5; 
0x000000000004d341: pop rax; ret 0xfc3; 
0x0000000000020ea5: pop rax; ret 0xff2; 
0x0000000000049d1d: pop rax; ret 0xff3; 
0x000000000001a3c8: pop rax; ret; 
0x0000000000087872: pop rax; retf 0x73c5; pop rax; ret; 
0x00000000000b4881: pop rax; retf 0xc1c4; jnp 0xb48df; rol esp, 0xc1; jnp 0xb48e4; ret; 
0x000000000003cba2: pop rax; retf 0xf66; sub cl, al; pop rbx; ret; 
0x000000000002714f: pop rax; retf 0xf66; sub cl, al; ret; 
0x00000000000be7a4: pop rax; retf 0xfbc5; pop rsp; ret 0x33c5; 
0x000000000007e9fd: pop rax; retf 0xff2; adc dword ptr [rdi + 8], ecx; ret; 
0x000000000007e36a: pop rax; retf 0xff2; pop rax; ret 0x4166; 
0x000000000008032c: pop rax; retf 0xff2; pop rax; shl dword ptr [rsi + 0xf], 0x2e; ret; 
0x000000000003849a: pop rax; retf 0xff2; pop rsp; ret 0x44f2; 
0x000000000004c978: pop rax; retf 0xff3; pop rcx; ret; 
0x00000000000a973f: pop rax; rol ah, 0x41; jnp 0xa979d; ret; 
0x000000000008cc51: pop rax; rol ah, 0x42; fstp dword ptr [rbx + 0x2879c5da]; int 0xc4; ret 0x99c1; 
0x000000000008b2d8: pop rax; rol ah, 0x62; mov cl, 0x9d; ret 0x7bc5; 
0x000000000008bf54: pop rax; rol ah, 0xe2; loope 0x8bef3; vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x0000000000093122: pop rax; rol ah, cl; rcr dword ptr [rbx - 0x3e3d3b23], 1; mov ecx, 0x7bc1c4c2; pop rax; ret; 
0x00000000000ac4b7: pop rax; rol ah, cl; ret; 
0x0000000000093ad2: pop rax; rol ch, 0x3b; pop rax; ret; 
0x00000000000a973b: pop rax; rol ch, 0xbb; pop rax; rol ah, 0x41; jnp 0xa979d; ret; 
0x00000000000afdf8: pop rax; rol ch, 0xf3; pop rax; fcmovnb st(0), st(4); ret; 
0x0000000000093453: pop rax; rol ch, 0xfb; pop rax; ret; 
0x00000000000bc6f0: pop rax; rol ch, 0xfb; pop rcx; ret; 
0x000000000008784e: pop rax; rol ch, 1; jns 0x8787b; ret 0x39c5; 
0x000000000009ddc9: pop rax; rol ch, 1; jns 0x9ddf6; ret 0x39c5; 
0x00000000000c0405: pop rax; rol ch, 1; jns 0xc0432; mov ch, 0x39; push rsp; ret; 
0x00000000000c10e4: pop rax; rol ch, 1; sti; pop rsp; ret 0xf9c5; 
0x00000000000a5b0e: pop rax; rol ch, 1; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; sub ebx, dword ptr [rax + rdx*8 - 0x3c]; ret; 
0x0000000000088097: pop rax; rol ebp, 1; ret; 
0x000000000009e22f: pop rax; rol ebp, cl; jae 0x9e28d; ret 0x6bc5; 
0x00000000000b48cf: pop rax; rol ebp, cl; ret; 
0x00000000000bf343: pop rax; rol ebp, cl; sti; pop rsp; ret; 
0x00000000000b4886: pop rax; rol esp, 0xc1; jnp 0xb48e4; ret; 
0x000000000008db97: pop rax; rol esp, 0xc1; jns 0x8dbcb; ret 0x8a0f; 
0x00000000000a3ab3: pop rax; rol esp, 0xc1; jns 0xa3ae7; ret 0x8a0f; 
0x00000000000b1f4c: pop rax; rol esp, cl; adc ebx, dword ptr [r10 + rbp*8 - 0x3c]; jns 0xb1f7f; ret 0x41c4; 
0x00000000000aa019: pop rax; rol esp, cl; ret; 
0x000000000004a22d: pop rax; ror byte ptr [rdi], 1; sub dl, al; ret; 
0x000000000004fb02: pop rax; ror dword ptr [rdi], 0x28; sal ebx, 0xf; pop rsp; add eax, 0x7a6f1; ret; 
0x0000000000085a4e: pop rax; ror dword ptr [rdi], 0x84; ret 0; 
0x0000000000031c9e: pop rax; sal dl, 0xf; pop rax; ret; 
0x00000000000361d1: pop rax; sal dl, 0xf; pop rcx; ret; 
0x0000000000085aee: pop rax; sal dword ptr [rsi + riz - 0x7d], 0xfb; or dword ptr [rcx + riz - 0x7d], esi; ret 0xf30a; 
0x000000000004d33d: pop rax; sal ebx, 0xf; pop rax; ret 0xfc3; 
0x0000000000049d19: pop rax; sal ebx, 0xf; pop rax; ret 0xff3; 
0x0000000000054e82: pop rax; sal ebx, 0xf; pop rsi; ret; 
0x00000000000867dd: pop rax; sal ebx, 0xf; pop rsp; sar dword ptr [rax + 0x1b], 0xf3; ret; 
0x0000000000080392: pop rax; sal edx, 0xf; pop rax; ret 0xf66; 
0x000000000004d1d7: pop rax; sal edx, 0xf; pop rax; ret 0xff2; 
0x0000000000080abb: pop rax; sal edx, 0xf; pop rsi; ret; 
0x0000000000086774: pop rax; sal edx, 0xf; pop rsp; sar dword ptr [rax + 0x14], 0xf3; ret; 
0x000000000009ad81: pop rax; sal edx, 1; mulps xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a9f9: pop rax; sal edx, 1; sqrtps xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x00000000000283c3: pop rax; sal edx, cl; divps xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000003100b: pop rax; sal edx, cl; divps xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x0000000000190654: pop rax; sbb dh, ch; call qword ptr [rax]; 
0x000000000002f26b: pop rax; shl byte ptr [rsi + 0xf], 0x28; ret 0xf66; 
0x0000000000031939: pop rax; shl dword ptr [rsi + 0xf], 0x28; sal edx, 0xf; pop rsp; add eax, 0x99979; ret; 
0x0000000000080330: pop rax; shl dword ptr [rsi + 0xf], 0x2e; ret; 
0x0000000000026bd2: pop rax; shr cl, 0xbf; out 0xff, eax; jmp qword ptr [rsi + 0x41]; 
0x00000000000ab6c0: pop rax; shr cl, 0xc; loope 0xab6c5; jmp qword ptr [rsi + 0xf]; 
0x0000000000030a2f: pop rax; shr ecx, 0x5a; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b4cdf: pop rax; shr ecx, 0xcf; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c2aab: pop rax; shr ecx, cl; idiv dil; jmp qword ptr [rsi + 0x2e]; 
0x000000000007f451: pop rax; stc; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000029185: pop rax; sub eax, 0xbac2d; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000095965: pop rax; test ah, 0x41; pop r9; fld st(4); movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x0000000000095f31: pop rax; test ch, 0xcb; pop rax; inc ebp; ret; 
0x000000000008d243: pop rax; test ch, 0xcb; pop rax; out 0xc5, eax; ret; 
0x00000000000c1f9d: pop rax; test dword ptr [rdi], 0xa6886; add ch, al; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x00000000000b4a46: pop rax; test ebp, 0x583d10fb; mov bh, 7; add ch, al; ret; 
0x000000000008def9: pop rax; test ebp, 0xc5c02879; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x00000000000b7bcd: pop rax; test ebp, 0xc5c15439; ret; 
0x00000000000b1dbb: pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000b83f5: pop rax; test ebp, 0xc5e72979; ret; 
0x00000000000eae1b: pop rax; xchg edx, eax; ret; 
0x0000000000030d6b: pop rbp; add eax, 0x7a40f600; or byte ptr [rax - 0x73], cl; add eax, 0x55827; cmovne rax, rdx; ret; 
0x0000000000050ba6: pop rbp; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x000000000004a9f6: pop rbp; addsd xmm2, xmm1; sqrtsd xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x000000000001e95d: pop rbp; clc; fxch st(1); leave; ret; 
0x000000000001cf4e: pop rbp; clc; leave; fxch st(1); ret; 
0x000000000001c9b5: pop rbp; clc; leave; ret; 
0x000000000006c33f: pop rbp; cmc; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000015462: pop rbp; fabs; fld1; fdivrp st(1); ret; 
0x000000000001543d: pop rbp; fdivrp st(1); pop r12; pop r13; ret; 
0x000000000000bc63: pop rbp; jmp rax; 
0x0000000000097360: pop rbp; lea rsp, [r10 - 8]; ret; 
0x00000000000965e5: pop rbp; lea rsp, [r13 - 0x10]; pop r13; ret; 
0x00000000000e4536: pop rbp; mov edi, 0x3717e5ee; ret 0xc2f9; 
0x00000000000db252: pop rbp; mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000280f1: pop rbp; movapd xmm0, xmm1; ret; 
0x000000000004aa9c: pop rbp; movaps xmm0, xmm1; ret; 
0x000000000004aa5c: pop rbp; movaps xmm0, xmm2; ret; 
0x000000000006b773: pop rbp; movdqa xmm0, xmm2; ret; 
0x000000000004aa1b: pop rbp; mulss xmm0, xmm2; ret; 
0x0000000000015d1a: pop rbp; or eax, dword ptr [rax]; fld qword ptr [rcx + rdx*4]; ret; 
0x0000000000102d43: pop rbp; out dx, eax; or eax, 0x13e; add byte ptr [rax], al; add byte ptr [rbp + rdi*8 + 0x3f], bl; ret 0xc450; 
0x000000000003cee9: pop rbp; pop r12; divsd xmm0, xmm0; pop r13; ret; 
0x000000000002a754: pop rbp; pop r12; movapd xmm1, xmm2; pop r13; movapd xmm0, xmm1; ret; 
0x00000000000280e9: pop rbp; pop r12; movapd xmm1, xmm3; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004cb07: pop rbp; pop r12; movaps xmm0, xmm1; ret; 
0x000000000004cb19: pop rbp; pop r12; movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x000000000004cade: pop rbp; pop r12; movaps xmm1, xmm6; movaps xmm0, xmm1; ret; 
0x000000000006b76f: pop rbp; pop r12; pop r13; movdqa xmm0, xmm2; ret; 
0x000000000000bc2f: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000029b0e: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000015305: pop rbp; pop r12; pop r13; ret; 
0x000000000001498f: pop rbp; pop r12; ret; 
0x00000000000189a9: pop rbp; pop r14; pop r15; fmulp st(1); fdiv st(0); ret; 
0x000000000009735b: pop rbp; pop r14; pop r15; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081ae9: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000000bc33: pop rbp; pop r14; pop r15; ret; 
0x0000000000029b12: pop rbp; pop r14; ret; 
0x00000000000965e4: pop rbp; pop rbp; lea rsp, [r13 - 0x10]; pop r13; ret; 
0x00000000000ef335: pop rbp; ret 0x493f; 
0x00000000000db8c1: pop rbp; ret 0x6eed; 
0x00000000000e3d32: pop rbp; ret 0xec71; 
0x000000000000bc70: pop rbp; ret; 
0x00000000000e6521: pop rbp; rol dl, cl; ret; 
0x0000000000075af0: pop rbp; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000001863f: pop rbp; xor bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000008e332: pop rbx; add eax, 0x3341c400; pop rax; ret 0x1c5; 
0x000000000004fd7c: pop rbx; addss xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x00000000000e5560: pop rbx; and byte ptr [rsi - 0x6f], al; adc eax, 0x7b3f61bb; pop rbx; ret; 
0x00000000000e77ea: pop rbx; and eax, esp; imul edi, dword ptr [rdi - 0x49f847b8], 0x3f454387; add byte ptr [rax], al; add dl, al; ret; 
0x000000000004aa14: pop rbx; andps xmm2, xmm0; andps xmm0, xmm1; pop rbp; mulss xmm0, xmm2; ret; 
0x0000000000190e75: pop rbx; bnd jmp qword ptr [rax]; 
0x0000000000051cc2: pop rbx; cmovs rax, rcx; pop rbp; pop r12; ret; 
0x0000000000074aee: pop rbx; cmovs rax, rdx; pop rbp; pop r12; ret; 
0x000000000002e030: pop rbx; divsd xmm3, xmm0; subsd xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000004f2f7: pop rbx; divss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x000000000004ddb6: pop rbx; divss xmm3, xmm0; subss xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004dd75: pop rbx; divss xmm5, xmm1; addss xmm0, xmm5; mulss xmm0, xmm2; ret; 
0x00000000000161f8: pop rbx; fadd st(0); ret; 
0x00000000000131ac: pop rbx; faddp st(1); ret; 
0x00000000000176cc: pop rbx; faddp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x00000000000161e8: pop rbx; fmulp st(1); ret; 
0x0000000000112985: pop rbx; fnstsw word ptr [rdi]; pushfq; ret 0xa75f; 
0x0000000000017c8a: pop rbx; fsubp st(1); ret; 
0x00000000000dd16b: pop rbx; fsubr st(1); ret; 
0x000000000001fdcc: pop rbx; fxch st(1); ret; 
0x0000000000023a57: pop rbx; idiv edi; jmp qword ptr [rsi + 0x41]; 
0x00000000001966d1: pop rbx; in eax, dx; jmp qword ptr [rbx + 1]; 
0x0000000000199909: pop rbx; int1; call qword ptr [rbp + 5]; 
0x000000000010da47: pop rbx; jne 0x10da0c; ret; 
0x00000000000d8664: pop rbx; mov ah, 0x53; cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x0000000000050641: pop rbx; mov dl, 0xfb; jmp qword ptr [rsi + 0x2e]; 
0x00000000000dba36: pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x000000000001a3b4: pop rbx; mov rax, qword ptr [rsp + 0x48]; xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000003cbd3: pop rbx; movapd xmm0, xmm1; ret; 
0x000000000002dfdb: pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x000000000004f970: pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004a2b4: pop rbx; movaps xmm0, xmm2; ret; 
0x000000000004db55: pop rbx; movd xmm0, eax; pop rbp; ret; 
0x000000000006b7a3: pop rbx; movdqa xmm0, xmm2; pop rbp; pop r12; pop r13; ret; 
0x000000000006c459: pop rbx; movdqa xmm0, xmm2; ret; 
0x000000000002e063: pop rbx; mulsd xmm0, xmm2; ret; 
0x00000000000d409b: pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000aaa8d: pop rbx; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x000000000010d1cd: pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x0000000000045c4b: pop rbx; orpd xmm1, xmm5; ret; 
0x0000000000048cf1: pop rbx; orpd xmm1, xmm7; ret; 
0x00000000000c9527: pop rbx; pop r14; ret; 
0x00000000000a3354: pop rbx; pop rax; fcmovb st(0), st(4); pop r9; ret; 
0x000000000008e742: pop rbx; pop rax; loope 0x8e70b; jnp 0x8e758; xor r13b, al; ret; 
0x00000000000a0b30: pop rbx; pop rax; loope 0xa0b1d; ret; 
0x00000000000a4d34: pop rbx; pop rax; loope 0xa4cfd; jnp 0xa4d4a; xor r13b, al; ret; 
0x00000000000c0fdd: pop rbx; pop rax; out 0xc5, al; ret; 
0x0000000000091251: pop rbx; pop rax; ret 0x5bc5; 
0x0000000000089b57: pop rbx; pop rax; ret; 
0x000000000004a9f5: pop rbx; pop rbp; addsd xmm2, xmm1; sqrtsd xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x000000000004aa9b: pop rbx; pop rbp; movaps xmm0, xmm1; ret; 
0x000000000004aa5b: pop rbx; pop rbp; movaps xmm0, xmm2; ret; 
0x000000000003cee8: pop rbx; pop rbp; pop r12; divsd xmm0, xmm0; pop r13; ret; 
0x000000000004cb06: pop rbx; pop rbp; pop r12; movaps xmm0, xmm1; ret; 
0x000000000004cb18: pop rbx; pop rbp; pop r12; movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x000000000004cadd: pop rbx; pop rbp; pop r12; movaps xmm1, xmm6; movaps xmm0, xmm1; ret; 
0x000000000006b76e: pop rbx; pop rbp; pop r12; pop r13; movdqa xmm0, xmm2; ret; 
0x0000000000029b0d: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000015304: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001498e: pop rbx; pop rbp; pop r12; ret; 
0x000000000000e100: pop rbx; pop rbp; ret; 
0x000000000008fe10: pop rbx; pop rcx; fadd st(4), st(0); pop r11; pop rcx; ret; 
0x00000000000a977b: pop rbx; pop rcx; ret 0x2bc5; 
0x000000000008fe15: pop rbx; pop rcx; ret; 
0x00000000001011a5: pop rbx; pop rsi; wait; and byte ptr [rdx + 0x1600003e], bl; ret; 
0x00000000000a78e3: pop rbx; pop rsp; fld st(4); ret; 
0x00000000000d65d3: pop rbx; ret 0x5732; 
0x00000000000cc953: pop rbx; ret 0xd832; 
0x00000000000ff803: pop rbx; ret 0xebf2; 
0x00000000000cc7b0: pop rbx; ret 0xf20c; 
0x000000000000c9d5: pop rbx; ret; 
0x0000000000055ea6: pop rbx; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000003177c: pop rbx; subsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003142e: pop rbx; subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000004f69c: pop rbx; subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x00000000000e7582: pop rbx; xchg edx, eax; and al, 0x49; ret 0xfc3f; 
0x0000000000068441: pop rbx; xor al, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fccd8: pop rbx; xor eax, 0x65530669; ret; 
0x0000000000074d22: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000d7082: pop rbx; xor spl, byte ptr [rdi - 0x3ce14040]; push rax; ret 0x7477; 
0x000000000004d331: pop rcx; adc eax, 0xb354d; add rsp, 0x18; addss xmm0, xmm1; addss xmm0, xmm2; ret; 
0x0000000000050e5a: pop rcx; add eax, 0xad470; call 0xba50; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x000000000004dd1f: pop rcx; add eax, 0xb2f3b; add rsp, 0x10; pop rbx; ret; 
0x000000000004a006: pop rcx; add eax, 0xb63a4; addss xmm0, xmm1; ret; 
0x000000000002dffa: pop rcx; add eax, 0xc35d0; add rsp, 0x10; pop rbx; ret; 
0x0000000000012126: pop rcx; add rsp, 0x18; ret; 
0x000000000004a730: pop rcx; and al, 0xf0; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004d4e5: pop rcx; and al, 0xf0; cvtsd2ss xmm0, xmm1; ret; 
0x000000000009b9ff: pop rcx; and al, 0xf0; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000bf4bb: pop rcx; and byte ptr [rbx], al; add ch, al; sti; pop rcx; ret; 
0x000000000002486a: pop rcx; call 0x59118e62; ret; 
0x0000000000025039: pop rcx; call 0x59119631; ret; 
0x000000000007fe20: pop rcx; call 0x59174018; ret; 
0x000000000007fce5: pop rcx; call 0x591741dd; ret; 
0x00000000000b6845: pop rcx; call 0x5946aa0f; ret; 
0x00000000000b6fb9: pop rcx; call 0x5946b183; ret; 
0x00000000000e3718: pop rcx; clc; ret 0x6e1f; 
0x0000000000045ead: pop rcx; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000020977: pop rcx; cmp edx, -3; pop rsi; ja 0x20988; add rsp, 8; ret; 
0x000000000008fe11: pop rcx; fadd st(4), st(0); pop r11; pop rcx; ret; 
0x00000000000912c2: pop rcx; fadd st(5), st(0); ret; 
0x00000000000b1693: pop rcx; fadd st(5); sti; pop rax; ret; 
0x00000000000bd9a5: pop rcx; faddp st(5); ret; 
0x00000000000bf489: pop rcx; faddp st(5); sti; pop rcx; ret; 
0x00000000000c199d: pop rcx; faddp st(5); sti; pop rsp; ret; 
0x00000000000bffb6: pop rcx; ffree st(5); ret; 
0x0000000000088fd4: pop rcx; ffree st(5); sti; pop rcx; ret 0xc1c4; 
0x00000000000bca2f: pop rcx; ffreep st(5); jns 0xbca5d; ffreep st(5); ret; 
0x00000000000bbf36: pop rcx; ffreep st(5); ret; 
0x00000000000bffdb: pop rcx; fisttp word ptr [rdi]; test bl, dh; sbb dword ptr [rax], eax; add ch, al; ret; 
0x000000000009596a: pop rcx; fld st(4); movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000af84a: pop rcx; fld st(4); ret; 
0x00000000000b1e2f: pop rcx; fld st(5); jns 0xb1e5c; ret; 
0x000000000009b8d3: pop rcx; fldenv [rsi + 0xf]; pop rax; fldenv [rsi + 0xf]; pop rdx; ret; 
0x000000000004eafe: pop rcx; fpatan; movups xmm1, xmmword ptr [rip + 0x7b6f8]; subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x000000000009b6aa: pop rcx; fsub qword ptr [rsi + 0xf]; pop rdx; ret; 
0x0000000000098d73: pop rcx; in al, 0xc4; ret 0xb9e1; 
0x00000000000b9d67: pop rcx; in al, 0xc5; ret; 
0x00000000000c1b06: pop rcx; in eax, 0xc5; ret; 
0x0000000000089001: pop rcx; in eax, 0xc5; sti; pop rcx; ret 0xc1c4; 
0x00000000000c260b: pop rcx; in eax, 0xc5; sti; pop rsp; ret 0xfbc5; 
0x00000000001966a9: pop rcx; in eax, dx; call qword ptr [rcx + 1]; 
0x00000000000bca37: pop rcx; inc ch; ret; 
0x00000000000ba22e: pop rcx; inc ebp; jns 0xba25c; ffreep st(5); ret; 
0x00000000000b6459: pop rcx; inc ebp; ret; 
0x00000000000c13ac: pop rcx; inc esp; jns 0xc13da; ret 0xc3c5; 
0x0000000000090138: pop rcx; inc esp; ret 0x99d1; 
0x00000000000bb1f0: pop rcx; int 0xc5; ret; 
0x00000000000b3754: pop rcx; int 0xc5; sti; pop rcx; ret; 
0x00000000000d4086: pop rcx; int1; ret 0xad8c; 
0x00000000000209c9: pop rcx; je 0x209e0; cmp eax, 0x7fffffff; je 0x20a08; add rsp, 8; ret; 
0x00000000000ec992: pop rcx; jmp qword ptr [rdx]; 
0x00000000000337fc: pop rcx; jmp qword ptr [rsi + 0x41]; 
0x000000000003b2cf: pop rcx; jmp qword ptr [rsi + 0x45]; 
0x00000000000388fd: pop rcx; jmp qword ptr [rsi + 0xf]; 
0x00000000000a645d: pop rcx; jnp 0xa64bc; and al, 0x20; mov al, 0xc4; ret; 
0x00000000000270f1: pop rcx; leave; movapd xmm0, xmm1; ret; 
0x000000000004a5b7: pop rcx; leave; movaps xmm0, xmm1; ret; 
0x00000000000503cf: pop rcx; leave; ret; 
0x000000000009b9f6: pop rcx; leave; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c96d: pop rcx; leave; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000099232: pop rcx; loope 0x991f9; ret 0x99b1; 
0x00000000000997c2: pop rcx; loope 0x99789; ret 0x99b1; 
0x00000000000bcfdd: pop rcx; loope 0xbcfa5; ret; 
0x00000000000b9a93: pop rcx; mov ah, 0xc1; jnp 0xb9af1; ret; 
0x00000000000babed: pop rcx; mov ch, 0x3b; pop rsp; ret; 
0x00000000000b167f: pop rcx; mov ch, 0xfb; pop rax; ret; 
0x00000000000bd63a: pop rcx; mov ebp, 0xc5cc28f9; ret; 
0x00000000000bea5e: pop rcx; mov ebp, 0xc5f828f9; ret; 
0x00000000000ba455: pop rcx; mov ebp, 0xc5fe28f9; ret; 
0x00000000000ba22a: pop rcx; mov ebp, 0xc5ff5903; jns 0xba25c; ffreep st(5); ret; 
0x000000000000ecf6: pop rcx; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000050106: pop rcx; or eax, 0x7b0c0; subss xmm0, xmm1; ret; 
0x000000000003209e: pop rcx; or eax, 0x99a04; subsd xmm0, xmm1; ret; 
0x0000000000049240: pop rcx; or eax, 0x9e38a; add rsp, 0x20; movapd xmm0, xmm2; pop rbx; ret; 
0x0000000000050166: pop rcx; or eax, 0xb0cf4; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000002c4cd: pop rcx; or eax, 0xbb105; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x0000000000197845: pop rcx; out dx, al; call qword ptr [rax]; 
0x000000000007d1e3: pop rcx; out dx, al; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000190a6d: pop rcx; out dx, eax; call rax; 
0x00000000000161e1: pop rcx; pop r10; add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x0000000000012e48: pop rcx; pop rsi; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x000000000002dfd9: pop rcx; rcr byte ptr [rbx + 0x66], 1; movaps xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x0000000000095603: pop rcx; ret 0x14e9; 
0x000000000002e5c9: pop rcx; ret 0x17eb; 
0x0000000000055d91: pop rcx; ret 0x1f0f; 
0x00000000000bb7e7: pop rcx; ret 0x23c5; 
0x000000000004a516: pop rcx; ret 0x280f; 
0x0000000000091b19: pop rcx; ret 0x2bc5; 
0x0000000000051353: pop rcx; ret 0x2e0f; 
0x000000000002aa17: pop rcx; ret 0x2e8; 
0x00000000000b8fef: pop rcx; ret 0x33c5; 
0x0000000000046e54: pop rcx; ret 0x35e9; 
0x0000000000055bc0: pop rcx; ret 0x36e9; 
0x0000000000080bf6: pop rcx; ret 0x3948; 
0x00000000000ba21f: pop rcx; ret 0x3bc5; 
0x00000000000468dd: pop rcx; ret 0x3ce8; 
0x00000000000abc18: pop rcx; ret 0x3fe9; 
0x0000000000033da3: pop rcx; ret 0x4166; 
0x0000000000089031: pop rcx; ret 0x41c4; 
0x0000000000033dc8: pop rcx; ret 0x41f2; 
0x00000000000234f5: pop rcx; ret 0x4466; 
0x00000000000234b5: pop rcx; ret 0x44f2; 
0x000000000002d15d: pop rcx; ret 0x4566; 
0x00000000000489d4: pop rcx; ret 0x45e8; 
0x0000000000023691: pop rcx; ret 0x45f2; 
0x000000000009acf2: pop rcx; ret 0x48f2; 
0x000000000004e146: pop rcx; ret 0x5be9; 
0x000000000002e03f: pop rcx; ret 0x66c3; 
0x0000000000087ca5: pop rcx; ret 0x6bc5; 
0x000000000003ba0a: pop rcx; ret 0x71e9; 
0x0000000000056108: pop rcx; ret 0x76e9; 
0x00000000000b55da: pop rcx; ret 0x79c5; 
0x00000000000b559b: pop rcx; ret 0x7bc5; 
0x0000000000112f98: pop rcx; ret 0x8073; 
0x000000000002a8c9: pop rcx; ret 0x80e8; 
0x000000000002df7b: pop rcx; ret 0x8348; 
0x000000000009519a: pop rcx; ret 0x840f; 
0x0000000000048a06: pop rcx; ret 0x872; 
0x0000000000095083: pop rcx; ret 0x94e9; 
0x00000000000c1a71: pop rcx; ret 0x9ae9; 
0x00000000000541b2: pop rcx; ret 0xa7e8; 
0x0000000000088fd8: pop rcx; ret 0xc1c4; 
0x000000000008fc86: pop rcx; ret 0xc2c4; 
0x000000000004ddee: pop rcx; ret 0xc35b; 
0x0000000000049556: pop rcx; ret 0xc3e8; 
0x000000000009101a: pop rcx; ret 0xcbc5; 
0x00000000000ab68b: pop rcx; ret 0xcce9; 
0x0000000000049586: pop rcx; ret 0xce72; 
0x000000000002a1b5: pop rcx; ret 0xceb; 
0x0000000000080ef2: pop rcx; ret 0xd089; 
0x000000000002aa47: pop rcx; ret 0xd2e8; 
0x000000000002ac75: pop rcx; ret 0xd4e8; 
0x0000000000045444: pop rcx; ret 0xd5e9; 
0x00000000000a625f: pop rcx; ret 0xe3c4; 
0x00000000000be066: pop rcx; ret 0xe3c5; 
0x0000000000089068: pop rcx; ret 0xe9c5; 
0x0000000000088910: pop rcx; ret 0xf3c5; 
0x0000000000020e95: pop rcx; ret 0xf66; 
0x000000000008f1c2: pop rcx; ret 0xf9c5; 
0x000000000002e51f: pop rcx; ret 0xfae8; 
0x000000000003d9c8: pop rcx; ret 0xfb81; 
0x000000000008905c: pop rcx; ret 0xfbc5; 
0x000000000002e066: pop rcx; ret 0xfc3; 
0x0000000000021a23: pop rcx; ret 0xff2; 
0x0000000000049e91: pop rcx; ret 0xff3; 
0x0000000000020f82: pop rcx; ret; 
0x00000000000bb7e3: pop rcx; retf 0x3bc5; pop rcx; ret 0x23c5; 
0x0000000000088914: pop rcx; retf 0xc1c4; jnp 0x88973; ret; 
0x000000000009ee94: pop rcx; retf 0xc1c4; jnp 0x9eef3; ret; 
0x00000000000280c0: pop rcx; retf 0xff2; pop rax; ret 0xff2; 
0x000000000004a70c: pop rcx; retf 0xff2; pop rcx; ret 0xff2; 
0x0000000000055bbc: pop rcx; retf 0xff3; pop rcx; ret 0x36e9; 
0x000000000009ab77: pop rcx; retf; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23e: pop rcx; retf; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad7d: pop rcx; retf; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000008f8c9: pop rcx; rol ah, 0x42; rcr dword ptr [rcx + 0x7bc1c4c2], 0x59; ret; 
0x000000000009e24b: pop rcx; rol byte ptr [rdi], cl; add ch, al; jns 0x9e27a; ffreep st(4); ret; 
0x00000000000be062: pop rcx; rol ebp, 1; sti; pop rcx; ret 0xe3c5; 
0x00000000000b22ae: pop rcx; rol ebp, cl; ret; 
0x00000000000c2440: pop rcx; rol ebp, cl; sti; pop rsp; ret 0xdbc5; 
0x00000000000bc6eb: pop rcx; rol esp, 0xc1; jnp 0xbc749; rol ch, 0xfb; pop rcx; ret; 
0x00000000000ba832: pop rcx; rol esp, cl; jns 0xba860; retf 0x41c4; jns 0xba865; ret 0x41c4; 
0x00000000000b39a8: pop rcx; rol esp, cl; xor ebx, dword ptr [r11 + rcx*8 - 0x3b]; ret; 
0x000000000004dc90: pop rcx; ror dword ptr [rdi], 0x28; ror byte ptr [rdi], 1; sub dl, al; ret; 
0x00000000000323d4: pop rcx; sal dl, 0xf; adc byte ptr [rsp - 0x20], al; ret; 
0x000000000009b000: pop rcx; sal edx, 0xf; pop rax; add eax, 0x302b6; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000426b2: pop rcx; sal edx, 0xf; pop rax; ret 0x98e9; 
0x000000000004a728: pop rcx; sal edx, 0xf; pop rax; ret; 
0x0000000000082a3a: pop rcx; sal edx, 0xf; pop rcx; ret 0xff2; 
0x0000000000029530: pop rcx; sal edx, 0xf; pop rsi; ret 0xd4eb; 
0x000000000009b37b: pop rcx; sal edx, cl; addps xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1e: pop rcx; sal edx, cl; addps xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000080435: pop rcx; sar byte ptr [rcx], 1; ret 0xf575; 
0x000000000002deba: pop rcx; shl dword ptr [rsi + 0xf], 0x28; shl byte ptr [rsi + 0xf], 1; sub dl, al; ret; 
0x000000000003ba00: pop rcx; shr cl, 0x7b; ret 0xffff; 
0x00000000000dc064: pop rcx; sub dword ptr [rsi + 0x3c], eax; int1; sub dword ptr [rax], esp; ret; 
0x00000000001006da: pop rcx; sub eax, 0x31ad6446; ret 0x9dff; 
0x000000000007cdf3: pop rcx; test byte ptr [rax], cl; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x60e8; 
0x00000000000c1b30: pop rcx; test dword ptr [rdi], 0x85384; add ch, al; ret; 
0x00000000000b1cef: pop rcx; test ebp, 0xc4c12979; jns 0xb1d21; ret 0xc1c4; 
0x0000000000196ecd: pop rdi; add byte ptr [rax], al; adc ch, dl; in eax, dx; jmp qword ptr [rcx]; 
0x0000000000190199: pop rdi; add byte ptr [rax], al; clc; imul bl; jmp qword ptr [rax]; 
0x00000000001901d1: pop rdi; add byte ptr [rax], al; mov byte ptr [rsi], al; in al, dx; call qword ptr [rax]; 
0x0000000000049f12: pop rdi; add byte ptr [rax], al; nop dword ptr [rax]; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x0000000000196f45: pop rdi; add byte ptr [rax], al; pop rax; fsubr st(5); jmp qword ptr [rbx + 1]; 
0x0000000000196f2d: pop rdi; add byte ptr [rax], al; push rax; xlatb; in eax, dx; call qword ptr [rdi]; 
0x0000000000050b9b: pop rdi; add eax, dword ptr [rax]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000189ad: pop rdi; fmulp st(1); fdiv st(0); ret; 
0x0000000000190d55: pop rdi; int1; jmp rax; 
0x00000000001125a3: pop rdi; loope 0x11255f; int 0x3f; ret 0xcc6f; 
0x000000000011230e: pop rdi; mov esp, 0x22a8ef9f; ret 0xefeb; 
0x0000000000045b35: pop rdi; or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x0000000000045ae9: pop rdi; or byte ptr [rax], al; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000045af1: pop rdi; or byte ptr [rax], al; ret; 
0x00000000000ece12: pop rdi; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x000000000005bc45: pop rdi; out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x00000000001979b1: pop rdi; out dx, al; jmp rsi; 
0x000000000009735f: pop rdi; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081aed: pop rdi; pop rbp; ret; 
0x00000000000d5dfb: pop rdi; push rsp; push rax; ret 0xc83f; 
0x00000000000d5dad: pop rdi; ret 0x103f; 
0x00000000000dd045: pop rdi; ret 0x2c3f; 
0x00000000000cb1a1: pop rdi; ret 0x65fc; 
0x00000000000dd17d: pop rdi; ret 0xca3f; 
0x00000000000ea290: pop rdi; ret 0xcae2; 
0x000000000005ab2d: pop rdi; ret 6; 
0x000000000000bc37: pop rdi; ret; 
0x00000000000de95b: pop rdi; sbb eax, 0xedbfb590; retfq; cmp edi, edi; jmp rdx; 
0x00000000000558dd: pop rdi; sti; call qword ptr [rbx + 0x48]; 
0x00000000000d0a72: pop rdi; test dword ptr [rdi + 0x31], edx; ret; 
0x00000000000d71a9: pop rdi; wait; std; div dword ptr [rdx - 0x2bbcc02e]; ret 0xcfc1; 
0x0000000000057014: pop rdi; xor al, 0; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000101876: pop rdi; xor eax, esp; iretd; ret 0x10f4; 
0x000000000010926c: pop rdi; xor esp, dword ptr [rsi]; jb 0x1092af; ret 0xe192; 
0x00000000000771a2: pop rdx; adc al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000934ba: pop rdx; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000161e3: pop rdx; add rsp, 0x10; pop rbx; fmulp st(1); ret; 
0x0000000000031c3d: pop rdx; addsd xmm0, xmm2; subsd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x0000000000045dad: pop rdx; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000003c438: pop rdx; idiv edi; dec dword ptr [rdi]; test dword ptr [rdi + rsi*8 - 1], edx; jmp qword ptr [rsi + 0x41]; 
0x0000000000030a32: pop rdx; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000012d11: pop rdx; jbe 0x12d28; add rsp, 0x10; fchs; pop rbx; ret; 
0x000000000011a24a: pop rdx; jno 0x11a27e; cdq; jb 0x11a20c; ret 0x1c5e; 
0x0000000000148bea: pop rdx; jno 0x148c1e; cdq; jb 0x148bac; ret 0x1c5e; 
0x0000000000176b2a: pop rdx; jno 0x176b5e; cdq; jb 0x176aec; ret 0x1c5e; 
0x00000000000e628a: pop rdx; jno 0xe62be; cdq; jb 0xe624c; ret 0x1c5e; 
0x00000000000128da: pop rdx; leave; call 0xf360; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x00000000001149a4: pop rdx; mov esi, 0x3e755449; xchg esi, eax; ret 0x65ae; 
0x00000000001978a5: pop rdx; out dx, al; call qword ptr [rax]; 
0x00000000000a9c22: pop rdx; push 9; add ch, al; ret; 
0x0000000000106531: pop rdx; push rsi; ret; 
0x0000000000105ea4: pop rdx; rcr dword ptr [rdi], 0xd9; ret 0x6a2b; 
0x00000000000d9750: pop rdx; ret 0x55ab; 
0x0000000000102258: pop rdx; ret 0x5d3a; 
0x00000000000dda6b: pop rdx; ret 0xc5a4; 
0x000000000004aa01: pop rdx; ret 0xfc3; 
0x000000000004c5c2: pop rdx; ret; 
0x000000000009cd2f: pop rdx; rol ch, 0xfa; adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000050cf6: pop rdx; sal ebx, 0xf; pop rax; ret 0xa7eb; 
0x00000000000799e2: pop rdx; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000073442: pop rdx; test cl, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000009cb27: pop rdx; vmovss dword ptr [rsi], xmm6; ret; 
0x00000000000d0acc: pop rdx; xchg ebp, eax; ret; 
0x00000000000dd7e1: pop rdx; xor al, 0x2d; std; call rcx; 
0x0000000000196dbd: pop rsi; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x00000000000a69ea: pop rsi; add eax, 0x5883c500; ret; 
0x000000000004ff25: pop rsi; add eax, 0x7bba9; ret; 
0x0000000000032016: pop rsi; add eax, 0x992b4; ret; 
0x00000000000e9c21: pop rsi; clc; ret 0xff7b; 
0x00000000000d7c66: pop rsi; cmp al, 0x63; ret; 
0x0000000000095fe7: pop rsi; fadd st(5), st(0); pop rbx; pop rcx; ret; 
0x00000000000c19e9: pop rsi; fadd st(5); jns 0xc1a16; ret; 
0x000000000002e033: pop rsi; fdiv st(2); subps xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000004ddb9: pop rsi; fdiv st(3); subps xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x0000000000012e49: pop rsi; fmul dword ptr [rip + 0xb837c]; add rsp, 0x18; ret; 
0x0000000000051241: pop rsi; fptan; cvtps2pd xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x00000000000dc273: pop rsi; in al, dx; ret 0xbc01; 
0x000000000002097b: pop rsi; ja 0x20988; add rsp, 8; ret; 
0x00000000000e9e94: pop rsi; jmp qword ptr [rcx]; 
0x000000000002de4a: pop rsi; leave; movapd xmm0, xmm1; ret; 
0x000000000004dc3a: pop rsi; leave; movaps xmm0, xmm1; ret; 
0x00000000000e28ec: pop rsi; mov esi, 0x38000000; sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x000000000003d01e: pop rsi; or eax, 0x92a5c; subsd xmm0, xmm1; ret; 
0x0000000000049c1a: pop rsi; or eax, dword ptr [eax]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x000000000004a5ae: pop rsi; or eax, dword ptr [rax]; add rsp, 0x18; mulss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000024a56: pop rsi; out 0xff, al; jmp qword ptr [rsi + 0x41]; 
0x00000000000189ab: pop rsi; pop r15; fmulp st(1); fdiv st(0); ret; 
0x000000000009735d: pop rsi; pop r15; pop rbp; lea rsp, [r10 - 8]; ret; 
0x0000000000081aeb: pop rsi; pop r15; pop rbp; ret; 
0x000000000000bc35: pop rsi; pop r15; ret; 
0x000000000004bf0a: pop rsi; ret 0x280f; 
0x000000000004bed2: pop rsi; ret 0x2de9; 
0x00000000000beb64: pop rsi; ret 0x3bc5; 
0x00000000000a6098: pop rsi; ret 0x3ee9; 
0x00000000000fd3cc: pop rsi; ret 0x3fd7; 
0x00000000000951b1: pop rsi; ret 0x41c4; 
0x0000000000091890: pop rsi; ret 0x41e9; 
0x0000000000038876: pop rsi; ret 0x44f2; 
0x000000000005386d: pop rsi; ret 0x44f3; 
0x000000000004b405: pop rsi; ret 0x54e9; 
0x0000000000028ce7: pop rsi; ret 0x5ae9; 
0x000000000004bea2: pop rsi; ret 0x5de9; 
0x00000000000ab7ac: pop rsi; ret 0x63c4; 
0x0000000000029942: pop rsi; ret 0x64e9; 
0x000000000008fab8: pop rsi; ret 0x6ee9; 
0x000000000004bb2a: pop rsi; ret 0x6fe9; 
0x0000000000029833: pop rsi; ret 0x73e9; 
0x000000000004bd97: pop rsi; ret 0x840f; 
0x0000000000031741: pop rsi; ret 0x8e0f; 
0x0000000000029912: pop rsi; ret 0x94e9; 
0x000000000009495a: pop rsi; ret 0xabc5; 
0x000000000002989c: pop rsi; ret 0xae9; 
0x000000000004e0f6: pop rsi; ret 0xaeeb; 
0x000000000002e345: pop rsi; ret 0xb0eb; 
0x000000000004b3aa: pop rsi; ret 0xb2eb; 
0x0000000000028c8a: pop rsi; ret 0xbaeb; 
0x0000000000028c7a: pop rsi; ret 0xcaeb; 
0x000000000004b48a: pop rsi; ret 0xcfe9; 
0x0000000000029534: pop rsi; ret 0xd4eb; 
0x0000000000028d6c: pop rsi; ret 0xd5e9; 
0x000000000002950a: pop rsi; ret 0xdb85; 
0x000000000004ba8a: pop rsi; ret 0xed85; 
0x000000000004c0bd: pop rsi; ret 0xf41; 
0x000000000002995a: pop rsi; ret 0xf66; 
0x0000000000048c4e: pop rsi; ret 0xff2; 
0x000000000004ac0c: pop rsi; ret 0xff3; 
0x00000000000289d3: pop rsi; ret; 
0x00000000000283c7: pop rsi; retf 0xf66; sub cl, al; addsd xmm0, xmm5; ret; 
0x0000000000049d15: pop rsi; retf; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x0000000000044aaa: pop rsi; ror byte ptr [rax - 0x75], 5; add eax, 0x64003585; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x0000000000056e72: pop rsi; ror byte ptr [rax - 0x75], 5; cmp eax, 0x64003461; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x00000000000496f2: pop rsi; ror byte ptr [rax - 0x75], 5; mov ebp, 0x64003538; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x00000000000508f6: pop rsi; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004db66: pop rsi; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000004a601: pop rsi; sal bl, 1; addps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000002714b: pop rsi; sal dl, 1; addps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x0000000000049e8d: pop rsi; sal ebx, 0xf; pop rcx; ret 0xff3; 
0x000000000002975b: pop rsi; sal edx, 0xf; pop rcx; ret 0xff2; 
0x00000000000ece69: pop rsi; sbb ebx, ebx; out dx, eax; call 0xffffffffc00f8d97; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000120de9: pop rsi; sbb ebx, ebx; out dx, eax; call 0xffffffffc012cd17; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000014f649: pop rsi; sbb ebx, ebx; out dx, eax; call 0xffffffffc015b577; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000075a6f: pop rsi; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000009e3ce: pop rsi; sub byte ptr [rdi], al; add ch, al; jns 0x9e3fd; ffreep st(5); ret; 
0x0000000000112443: pop rsi; sub dh, ch; ret 0x583f; 
0x00000000001011a6: pop rsi; wait; and byte ptr [rdx + 0x1600003e], bl; ret; 
0x0000000000107e01: pop rsi; xchg ebx, eax; sub dh, ah; ret; 
0x00000000000dbf28: pop rsi; xor dword ptr [rbp - 0x43], ebx; imul ecx, dword ptr [rdi + 0x37403fe7], -0x80; mov dword ptr [rax - 0x35c37bfa], esp; and al, 0x54; ret; 
0x00000000000cd638: pop rsp; adc al, byte ptr es:[rax]; insd dword ptr [rdi], dx; ret 0x4d; 
0x000000000004e876: pop rsp; adc eax, 0xb1b18; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000fc66c: pop rsp; adc esp, dword ptr [rdi - 0x40]; and ch, byte ptr [rax]; test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x000000000001f25a: pop rsp; add al, byte ptr [rax]; add cl, bl; leave; add rsp, 0x78; ret; 
0x000000000004fb09: pop rsp; add eax, 0x7a6f1; ret; 
0x0000000000031941: pop rsp; add eax, 0x99979; ret; 
0x000000000009aff8: pop rsp; add eax, 0xa7fda; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004eeaa: pop rsp; add eax, 0xb14cc; ret; 
0x000000000002a5f3: pop rsp; and al, 0x10; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a645f: pop rsp; and al, 0x20; mov al, 0xc4; ret; 
0x000000000007c376: pop rsp; and al, 0x20; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000056207: pop rsp; and al, 0x44; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbx; ret; 
0x0000000000054d15: pop rsp; and al, 0x44; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x00000000000d4cce: pop rsp; and al, 0x82; ret; 
0x000000000005333e: pop rsp; and al, 0xdc; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x000000000003236b: pop rsp; and al, 0xe0; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000043ef2: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005039b: pop rsp; and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000016adc: pop rsp; and al, 0xfc; wait; mov eax, dword ptr [rsp - 4]; ret; 
0x00000000000e4990: pop rsp; and eax, 0x822883a1; mov r15d, 0x8152093a; ret; 
0x00000000000b4d23: pop rsp; call 0x34212; jmp qword ptr [rsi + 0xf]; 
0x0000000000047982: pop rsp; call 0x5813bb7a; ret 0xff2; 
0x0000000000026807: pop rsp; call 0x5911adff; ret 0x4466; 
0x00000000000b8657: pop rsp; call 0x5946c821; ret 0x79c5; 
0x0000000000030a73: pop rsp; call 0xfffffffffffac762; jmp qword ptr [rsi + 0xf]; 
0x000000000003ceeb: pop rsp; divsd xmm0, xmm0; pop r13; ret; 
0x000000000002a66f: pop rsp; divsd xmm1, xmm4; pop r13; movapd xmm0, xmm1; ret; 
0x00000000000b74be: pop rsp; fadd st(4); jns 0xb74ec; ret; 
0x0000000000098bab: pop rsp; fadd st(5), st(0); jns 0x98bd8; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000af1ec: pop rsp; fadd st(5), st(0); jns 0xaf219; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000b4d32: pop rsp; fadd st(5), st(0); jns 0xb4d5f; ret; 
0x00000000000bde93: pop rsp; fadd st(5), st(0); jns 0xbdec0; ret; 
0x00000000000bac5a: pop rsp; fadd st(5); and ebx, dword ptr [rax + 0x1c]; ret 0x23c5; 
0x00000000000b7553: pop rsp; fcmovb st(0), st(4); jns 0xb7581; ret 0x41c4; 
0x000000000005013e: pop rsp; fdiv st(3); subps xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050006: pop rsp; fdiv st(3); subps xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000095961: pop rsp; ffree st(5); movabs dword ptr [0xc4d9594341c4f658], eax; movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x00000000000b4696: pop rsp; ffreep st(5); sti; pop rax; ret; 
0x00000000000a78e4: pop rsp; fld st(4); ret; 
0x00000000000bf7b6: pop rsp; fld st(5); ret; 
0x00000000000b98fc: pop rsp; fld st(5); sti; pop rsp; ret; 
0x0000000000050002: pop rsp; fpatan; subps xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x000000000005123d: pop rsp; fptan; divps xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x000000000009a9cb: pop rsp; fsub dword ptr [rsi + 0xf]; out dx, eax; sal dl, 0xf; pop rdx; ret; 
0x0000000000032022: pop rsp; hlt; subsd xmm0, xmm6; ret; 
0x00000000000335e2: pop rsp; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000030873: pop rsp; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000008f392: pop rsp; in eax, 0xc4; ret 0xbdf9; 
0x00000000000b5438: pop rsp; in eax, 0xc5; ret; 
0x0000000000092b56: pop rsp; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000a918b: pop rsp; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x000000000008a622: pop rsp; inc ch; ret; 
0x00000000000896ed: pop rsp; inc ch; sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x89725; fcmovb st(0), st(5); ret; 
0x000000000009fc6b: pop rsp; inc ch; sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x000000000008b7ac: pop rsp; inc ebp; ret; 
0x00000000000c1876: pop rsp; inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc18a7; ret 0xc1c4; 
0x00000000000c270b: pop rsp; inc ebp; xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc273c; ret 0xc1c4; 
0x000000000009298b: pop rsp; int 0xc4; ret 0x99b1; 
0x00000000000a8fb7: pop rsp; int 0xc4; ret; 
0x00000000000b8e6a: pop rsp; int 0xc5; ret; 
0x000000000009b91d: pop rsp; iretd; movss dword ptr [rsi], xmm1; ret; 
0x000000000003a0e7: pop rsp; jmp qword ptr [rsi + 0x44]; 
0x0000000000026a03: pop rsp; jmp qword ptr [rsi + 0x45]; 
0x000000000002fcc5: pop rsp; jmp qword ptr [rsi + 0xf]; 
0x000000000002de42: pop rsp; leave; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc32: pop rsp; leave; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000031af0: pop rsp; leave; subsd xmm0, xmm1; ret; 
0x000000000004fc4c: pop rsp; leave; subss xmm0, xmm1; ret; 
0x00000000000af846: pop rsp; loope 0xaf80e; jnp 0xaf8a4; fld st(4); ret; 
0x00000000000afda6: pop rsp; loope 0xafd6e; jnp 0xafe04; fld st(4); ret; 
0x00000000000b40d4: pop rsp; mov ah, 0xc1; jnp 0xb4132; ret 0x23c5; 
0x00000000000d7d33: pop rsp; mov byte ptr [rsi + rsi*2 - 0x138572c4], bl; out 0x7b, eax; ret; 
0x00000000000cf575: pop rsp; mov dl, 0x85; ret 0x3f; 
0x00000000000cf555: pop rsp; mov dl, 0x85; ret 0xbf; 
0x00000000000b4a5e: pop rsp; mov ebp, 0xc5f358cb; sti; pop rax; ret; 
0x000000000002a756: pop rsp; movapd xmm1, xmm2; pop r13; movapd xmm0, xmm1; ret; 
0x00000000000280eb: pop rsp; movapd xmm1, xmm3; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004cb09: pop rsp; movaps xmm0, xmm1; ret; 
0x000000000004cb1b: pop rsp; movaps xmm1, xmm3; movaps xmm0, xmm1; ret; 
0x000000000004cae0: pop rsp; movaps xmm1, xmm6; movaps xmm0, xmm1; ret; 
0x000000000006ba3d: pop rsp; or dword ptr [rax], eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000004ae6f: pop rsp; or eax, 0x80373; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000015e2d: pop rsp; or eax, dword ptr [rax]; fchs; ret; 
0x0000000000015db2: pop rsp; or eax, dword ptr [rax]; fld qword ptr [rcx + rax]; ret; 
0x0000000000015dca: pop rsp; or eax, dword ptr [rax]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015e3e: pop rsp; or eax, dword ptr [rax]; ret; 
0x00000000000d6048: pop rsp; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x0000000000091033: pop rsp; out 0xc4, eax; ret 0xb9c9; 
0x00000000000bc242: pop rsp; out 0xc5, al; fistp dword ptr [rdi + riz*8 - 0x3b]; jns 0xbc274; inc ebp; ret; 
0x00000000000bc246: pop rsp; out 0xc5, eax; jns 0xbc274; inc ebp; ret; 
0x00000000000bcbbb: pop rsp; out 0xc5, eax; jns 0xbcbe9; inc ebp; ret; 
0x0000000000015460: pop rsp; pop r13; fabs; fld1; fdivrp st(1); ret; 
0x000000000006b771: pop rsp; pop r13; movdqa xmm0, xmm2; ret; 
0x0000000000081ae7: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000000bc31: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000029b10: pop rsp; pop r13; pop r14; ret; 
0x00000000000965e2: pop rsp; pop r13; pop rbp; lea rsp, [r13 - 0x10]; pop r13; ret; 
0x0000000000015307: pop rsp; pop r13; ret; 
0x00000000000e0e23: pop rsp; push -0x46c00ffd; mov bh, 3; ret; 
0x00000000000dd06c: pop rsp; push rax; ret 0xaa3f; 
0x000000000009b972: pop rsp; push rbx; movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x00000000000d5da8: pop rsp; push rbx; sbb dl, byte ptr [rdi]; outsb dx, byte ptr [rsi]; pop rdi; ret 0x103f; 
0x00000000000b73be: pop rsp; ret 0x11c5; 
0x000000000008f108: pop rsp; ret 0x13c5; 
0x0000000000088f83: pop rsp; ret 0x19c5; 
0x00000000000ba1e7: pop rsp; ret 0x1bc5; 
0x0000000000031539: pop rsp; ret 0x24eb; 
0x0000000000049ddd: pop rsp; ret 0x280f; 
0x0000000000050975: pop rsp; ret 0x2e0f; 
0x00000000000be7a8: pop rsp; ret 0x33c5; 
0x000000000008ce71: pop rsp; ret 0x3bc5; 
0x000000000008ec19: pop rsp; ret 0x41c4; 
0x000000000002f611: pop rsp; ret 0x41f2; 
0x0000000000025471: pop rsp; ret 0x4466; 
0x0000000000033b72: pop rsp; ret 0x44f2; 
0x000000000007e5ff: pop rsp; ret 0x4566; 
0x0000000000038b17: pop rsp; ret 0x45f2; 
0x000000000002ce1d: pop rsp; ret 0x46f2; 
0x0000000000098ec4: pop rsp; ret 0x6348; 
0x000000000003ceb2: pop rsp; ret 0x6ba; 
0x00000000000b4b51: pop rsp; ret 0x79c5; 
0x00000000000ba979: pop rsp; ret 0x7bc5; 
0x000000000002db26: pop rsp; ret 0x87e9; 
0x0000000000096759: pop rsp; ret 0x8948; 
0x00000000000c458d: pop rsp; ret 0x9b0f; 
0x0000000000054ed0: pop rsp; ret 0xa; 
0x000000000008d1ab: pop rsp; ret 0xbbc5; 
0x00000000000508ab: pop rsp; ret 0xc083; 
0x000000000002c76b: pop rsp; ret 0xc189; 
0x000000000009558b: pop rsp; ret 0xc1c4; 
0x000000000003d11e: pop rsp; ret 0xc3f3; 
0x00000000000fc678: pop rsp; ret 0xc69a; 
0x00000000000b9404: pop rsp; ret 0xcbc5; 
0x000000000003ce49: pop rsp; ret 0xd089; 
0x00000000000bae83: pop rsp; ret 0xdbc5; 
0x00000000000c2274: pop rsp; ret 0xe3c5; 
0x000000000002dd99: pop rsp; ret 0xf0e9; 
0x00000000000fdd7b: pop rsp; ret 0xf127; 
0x000000000002e718: pop rsp; ret 0xf66; 
0x00000000000be956: pop rsp; ret 0xf9c5; 
0x000000000008bbdd: pop rsp; ret 0xfbc5; 
0x0000000000031c02: pop rsp; ret 0xfc3; 
0x00000000000220a8: pop rsp; ret 0xff2; 
0x000000000004b175: pop rsp; ret 0xff3; 
0x000000000000f6a0: pop rsp; ret 0xffff; 
0x0000000000014991: pop rsp; ret; 
0x000000000003cc2a: pop rsp; retf 0x665b; movaps xmm0, xmm1; ret; 
0x00000000000b3bf1: pop rsp; retf 0xc1c4; jnp 0xb3c4f; ret 0x33c5; 
0x00000000000506f2: pop rsp; retf 0xf5b; sub cl, al; ret; 
0x0000000000031431: pop rsp; retf 0xf66; sub cl, al; ret; 
0x000000000002e037: pop rsp; retf; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000004ddbd: pop rsp; retf; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004eb0a: pop rsp; retf; mulss xmm0, xmm1; ret; 
0x000000000008f339: pop rsp; rol ah, 0x41; and ebx, dword ptr [rax + rax*8 - 0x3c]; ret 0xb9f1; 
0x0000000000095222: pop rsp; rol ah, 0x41; jns 0x95256; ret 0x67a; 
0x00000000000ab81e: pop rsp; rol ah, 0x41; jns 0xab852; ret 0x67a; 
0x00000000000bc15a: pop rsp; rol ah, 0x41; jns 0xbc188; ret; 
0x00000000000ab6f3: pop rsp; rol ah, 0xc1; jnp 0xab751; ret; 
0x00000000000ba21a: pop rsp; rol ah, 0xc1; jnp 0xba279; ret 0x3bc5; 
0x00000000000a5b16: pop rsp; rol ah, 1; ret; 
0x000000000009521d: pop rsp; rol ah, cl; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab819: pop rsp; rol ah, cl; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x000000000008b7a8: pop rsp; rol ch, 1; retf; pop rsp; inc ebp; ret; 
0x000000000009cb23: pop rsp; rol ch, cl; retf; pop rdx; vmovss dword ptr [rsi], xmm6; ret; 
0x000000000009930c: pop rsp; rol ebp, 0xfb; adc dword ptr [rdi], ecx; vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x00000000000b3887: pop rsp; rol ebp, 1; ret; 
0x000000000009c595: pop rsp; rol ebp, cl; ret; 
0x000000000008bbd9: pop rsp; rol ebp, cl; retf; pop rsp; ret 0xfbc5; 
0x00000000000b8992: pop rsp; rol esp, 0xc1; jnp 0xb89f0; ret; 
0x0000000000087727: pop rsp; rol esp, cl; ret 0x9be1; 
0x00000000000c4558: pop rsp; ror byte ptr [rdi], 0x9b; ret 0x2e0f; 
0x000000000004ee48: pop rsp; ror dword ptr [rdi], 1; sub dl, al; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x000000000009c283: pop rsp; ror dword ptr [rdi], cl; test ebp, edi; add al, byte ptr [rax]; add ch, al; ret; 
0x000000000009c74e: pop rsp; ror dword ptr [rdi], cl; test edx, ebp; add al, byte ptr [rax]; add ch, al; ret; 
0x000000000007e9f5: pop rsp; sal dl, 1; movups xmmword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000004ea8f: pop rsp; sal ebx, cl; mulps xmm0, xmm2; ret; 
0x000000000007ff0b: pop rsp; sal edx, 0xf; adc dword ptr [rdi], ecx; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000031a6c: pop rsp; sal edx, 0xf; pop rax; ret; 
0x0000000000031c9a: pop rsp; sal edx, 0xf; pop rax; sal dl, 0xf; pop rax; ret; 
0x00000000000489d0: pop rsp; sal edx, 0xf; pop rcx; ret 0x45e8; 
0x0000000000049552: pop rsp; sal edx, 0xf; pop rcx; ret 0xc3e8; 
0x0000000000031bfa: pop rsp; sal edx, 0xf; pop rcx; ret 0xff2; 
0x000000000002dd95: pop rsp; sal edx, 0xf; pop rsp; ret 0xf0e9; 
0x000000000007f3f0: pop rsp; sal edx, 0xf; pop rsp; ret; 
0x0000000000086778: pop rsp; sar dword ptr [rax + 0x14], 0xf3; ret; 
0x00000000000867e1: pop rsp; sar dword ptr [rax + 0x1b], 0xf3; ret; 
0x00000000001264ca: pop rsp; sar dword ptr [rsi], cl; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x000000000013686a: pop rsp; sar dword ptr [rsi], cl; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154cea: pop rsp; sar dword ptr [rsi], cl; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164faa: pop rsp; sar dword ptr [rsi], cl; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d8a: pop rsp; sar dword ptr [rsi], cl; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b2a: pop rsp; sar dword ptr [rsi], cl; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d638a: pop rsp; sar dword ptr [rsi], cl; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f282a: pop rsp; sar dword ptr [rsi], cl; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x000000000003ceca: pop rsp; shl dword ptr [rsi + 0xf], 0x2e; ret 0xb273; 
0x000000000004fda1: pop rsp; shl dword ptr [rsi + 0xf], 0x7e; rol byte ptr [rcx], 0xf0; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000004fe00: pop rsp; shl dword ptr [rsi + 0xf], 1; jle 0x4fdd6; add eax, esi; movd xmm0, eax; ret; 
0x000000000003d016: pop rsp; shl dword ptr [rsi + 0xf], 1; sub dl, cl; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x0000000000031fb0: pop rsp; stc; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x00000000000ddd21: pop rsp; std; call rdi; 
0x0000000000055c92: pop rsp; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d7469: pop rsp; sti; ret; 
0x00000000000d7c62: pop rsp; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x00000000000cf180: pop rsp; sub byte ptr [rdi - 0x1f], bh; movabs dword ptr [0xc000fd238a], eax; add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x000000000003d020: pop rsp; sub cl, byte ptr [rcx]; add dl, dh; subps xmm0, xmm1; ret; 
0x0000000000028665: pop rsp; sub eax, 0xbb3bd; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004e77c: pop rsp; subss xmm2, xmm4; movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000087265: pop rsp; test ah, 0xe2; leave; mov ebp, 0x90e501d; add ch, al; ret; 
0x000000000009d7e2: pop rsp; test ah, 0xe3; jnp 0x9d806; shr byte ptr [rax - 0x3acffff9], cl; ret; 
0x0000000000095e2f: pop rsp; test ch, 0xcb; pop rsp; inc ebp; ret; 
0x00000000000b4480: pop rsp; test ebp, 0xc5fb2979; ret; 
0x00000000000dd168: pop rsp; xchg ecx, eax; pop r11; fsubr st(1); ret; 
0x000000000006b116: popf; add eax, 0xc4834800; pop rbx; pop rbp; pop r12; ret; 
0x00000000001083a2: popfq; adc al, 0xbc; or al, 0x91; push rbx; ret; 
0x000000000011b714: popfq; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000149f74: popfq; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e7794: popfq; add dword ptr [rbp + 0x3f], 0; add al, al; jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x000000000006b117: popfq; add eax, 0xc4834800; pop rbx; pop rbp; pop r12; ret; 
0x000000000009c185: popfq; and eax, 0xa6d6d; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x00000000000dcc8c: popfq; cmc; mov bl, 0x3f; ret 0x71ac; 
0x00000000000c844e: popfq; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000100e1e: popfq; jne 0x100de4; int1; ret; 
0x0000000000090906: popfq; loope 0x908cd; fstp dword ptr [rbp + 0x28f9c5e2]; out 0xc4, eax; ret 0x99a9; 
0x00000000000dc561: popfq; mov cl, 0xf5; scasd eax, dword ptr [rdi]; ret; 
0x0000000000100441: popfq; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000d9cbb: popfq; out 0xc4, al; out 0x3f, al; ret 0xd04e; 
0x000000000011260b: popfq; ret 0x79b8; 
0x000000000008b2dd: popfq; ret 0x7bc5; 
0x000000000010f7d6: popfq; ret 0xbfba; 
0x00000000000933ab: popfq; ret 0xe2c4; 
0x0000000000093263: popfq; ret 0xfbc5; 
0x000000000009047f: popfq; ret; 
0x000000000008db88: popfq; rol esp, 1; ret 0xb9c1; 
0x00000000001015d3: popfq; sbb eax, 0x4f45bca6; xchg esp, eax; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000111f78: popfq; stc; ret 0; 
0x00000000000ef64a: popfq; test al, 0x43; xor byte ptr [r15 - 0x32d64000], r15b; ret 0xc50b; 
0x000000000006fb86: por mm0, mm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000006fb85: por xmm0, xmm1; call 0xc6d90; add rsp, 0x28; ret; 
0x000000000007ff10: pslld mm1, qword ptr [rdi]; pop rax; movsd qword ptr [rdi + 8], xmm6; ret; 
0x00000000000b2e93: psubb mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000000023eb: psubd mm1, qword ptr [rdi + 0x21c70f1b]; call 0xffffffff82f4948d; mov esp, 0x87919e45; ret; 
0x000000000008a552: psubq mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e9c1b: psubsw mm6, qword ptr [rbp + 0x5eecbd12]; clc; ret 0xff7b; 
0x0000000000077d89: psubw mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000190a75: push -0x11; jmp qword ptr [rax]; 
0x00000000000dd0b3: push -0x12; pop rcx; ret; 
0x000000000002024c: push -0x12a117; jmp qword ptr [rsi + 0x2e]; 
0x00000000000647b4: push -0x17fff5b1; ret; 
0x00000000000ce6d4: push -0x21; ret 0x188; 
0x0000000000014614: push -0x21fff47a; ret 0xf1de; 
0x000000000010d319: push -0x24; add ebp, esi; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x000000000010e43c: push -0x37c00089; outsb dx, byte ptr [rsi]; ret 0x6b8e; 
0x00000000000a9d7b: push -0x3acffff7; sti; pop rax; ret 0xe3c5; 
0x00000000000c1fa1: push -0x3afffff6; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x00000000000cccf8: push -0x3f000b76; mov dh, ah; inc eax; mov dh, ah; jmp qword ptr [rax]; 
0x00000000000e8f53: push -0x40d93f7f; mov ch, ah; ret; 
0x00000000000e48e9: push -0x430fb598; ret 0xe33b; 
0x0000000000032a94: push -0x45417; jmp qword ptr [rsi + 0xf]; 
0x00000000000e0e24: push -0x46c00ffd; mov bh, 3; ret; 
0x00000000000dd17a: push -0x54; clc; pop rdi; ret 0xca3f; 
0x00000000000dcf49: push -0x64f7e4c8; mov ebp, 0x45adfc3f; ret; 
0x00000000000d58cd: push -0x6ceb4046; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x0000000000012d66: push -0x73; or eax, dword ptr [rax]; add rsp, 0x10; pop rbx; ret; 
0x00000000000d0bd8: push -0x790925b9; lahf; ret 0x813f; 
0x0000000000034743: push -0x9f117; jmp qword ptr [rsi + 0xf]; 
0x0000000000105611: push -0xb; cmpsd dword ptr [rsi], dword ptr [rdi]; mov cs, ebp; push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000b4e2e: push -0xb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000049534: push -0xdfff7db; movups xmm0, xmmword ptr [rip + 0x81d50]; ret; 
0x0000000000017f94: push -0xe26fff5; ret; 
0x000000000007a30d: push -1; jmp qword ptr [rsi + 0xf]; 
0x00000000001979ad: push 0; add byte ptr [rax], dh; pop rdi; out dx, al; jmp rsi; 
0x000000000007a332: push 0x15; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e5e08: push 0x1b; ret 0x458e; 
0x0000000000032a8f: push 0x2454ae0f; push -0x45417; jmp qword ptr [rsi + 0xf]; 
0x0000000000045fc1: push 0x280f4166; ret 0xf66; 
0x000000000018f54c: push 0x30ffe7dd; and byte ptr [rax], al; add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x0000000000092e5e: push 0x31000004; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x000000000010c852: push 0x32969b54; add eax, 0x2583811e; ret; 
0x0000000000100439: push 0x37794483; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000103059: push 0x3e1a3d5c; mov edi, dword ptr [rdi + 0x691e3000]; outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x000000000010f806: push 0x3ffd86; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x752e112], bh; and al, 0x83; ret 0xbfbc; 
0x000000000011095e: push 0x41; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000c9918: push 0x48; add esp, 0x30; pop rbx; ret; 
0x0000000000127a9a: push 0x48; jno 0x127ac5; ret 0xaebf; 
0x0000000000137e3a: push 0x48; jno 0x137e65; ret 0xaebf; 
0x00000000001562ba: push 0x48; jno 0x1562e5; ret 0xaebf; 
0x000000000016657a: push 0x48; jno 0x1665a5; ret 0xaebf; 
0x000000000017a35a: push 0x48; jno 0x17a385; ret 0xaebf; 
0x00000000001850fa: push 0x48; jno 0x185125; ret 0xaebf; 
0x00000000000d795a: push 0x48; jno 0xd7985; ret 0xaebf; 
0x00000000000f3dfa: push 0x48; jno 0xf3e25; ret 0xaebf; 
0x00000000000003c5: push 0x4bf2d869; ret 0x152; 
0x0000000000190594: push 0x50ffedbf; jno 0x19059b; add al, bl; ret; 
0x00000000000ca433: push 0x53; ret; 
0x00000000000913fa: push 0x5479c1c4; ret; 
0x0000000000197841: push 0x596c0000; out dx, al; call qword ptr [rax]; 
0x0000000000197871: push 0x59dc0000; out dx, al; call qword ptr [rax]; 
0x0000000000102254: push 0x5a1ac94d; ret 0x5d3a; 
0x00000000000dd7dd: push 0x5aaf3fa2; xor al, 0x2d; std; call rcx; 
0x0000000000083740: push 0x5b000005; pop rbp; pop r12; pop r13; ret; 
0x000000000004bfb4: push 0x5c415d5b; pop r13; ret; 
0x000000000012da00: push 0x61; jb 0x12da03; call rdx; 
0x000000000013dda0: push 0x61; jb 0x13dda3; call rdx; 
0x000000000015c220: push 0x61; jb 0x15c223; call rdx; 
0x000000000016c4e0: push 0x61; jb 0x16c4e3; call rdx; 
0x00000000001802c0: push 0x61; jb 0x1802c3; call rdx; 
0x000000000018b060: push 0x61; jb 0x18b063; call rdx; 
0x00000000000dd8c0: push 0x61; jb 0xdd8c3; call rdx; 
0x00000000000f9d60: push 0x61; jb 0xf9d63; call rdx; 
0x0000000000045b34: push 0x6600085f; movaps xmm1, xmm0; ret; 
0x000000000005986c: push 0x6f0f665b; ret; 
0x00000000000d0152: push 0x75b8b38a; mov edi, 0; add al, al; ret 0x93f; 
0x00000000000d28ca: push 0x77; ret; 
0x000000000010cc20: push 0x7d; and r15d, edx; ret 0x6adc; 
0x0000000000190194: push 0x8ffebf4; pop rdi; add byte ptr [rax], al; clc; imul bl; jmp qword ptr [rax]; 
0x00000000000ca4ac: push 0xb3fea87; push rsp; sbb byte ptr [rdi + 0x4f3fea94], r13b; ja 0xca4af; ret 0xa1fc; 
0x00000000000179cd: push 0xb; add al, bl; ret 0xcad8; 
0x0000000000017a87: push 0xb; add al, bl; ret; 
0x00000000000179ff: push 0xb; add dh, bl; ret 0xf1de; 
0x0000000000017ac3: push 0xb; add dh, bl; ret; 
0x0000000000020e22: push 0xe; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x00000000000a5d48: push 5; add ah, al; ret; 
0x00000000000a5d94: push 5; add ch, al; ret; 
0x0000000000044fd5: push 8; add dl, dh; movups xmm0, xmmword ptr [rip + 0x862b0]; ret; 
0x00000000000a9ba3: push 9; add ch, al; jns 0xa9bd1; ffreep st(4); ret; 
0x00000000000a9c3f: push 9; add ch, al; jns 0xa9c6d; ffreep st(5); ret; 
0x00000000000a9c23: push 9; add ch, al; ret; 
0x000000000018f717: push qword ptr [rax + 0x28000028]; sub al, ch; call rax; 
0x0000000000190457: push qword ptr [rax + 0x8000069]; jp 0x19044b; dec eax; imul eax, dword ptr [rax], 0xec7a1800; jmp rax; 
0x00000000001906cf: push qword ptr [rax + 0x8000078]; cmp dh, ch; jmp rax; 
0x00000000000182a6: push qword ptr [rax + 0xfffff3c]; mov edi, gs; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; call qword ptr [rax - 0x3d]; 
0x00000000001909df: push qword ptr [rax + rcx*4 + 0x27780000]; out dx, eax; jmp rsp; 
0x000000000019031f: push qword ptr [rax]; add byte ptr fs:[rax], al; test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x000000000018f54f: push qword ptr [rax]; and byte ptr [rax], al; add al, cl; fucom st(7); call qword ptr [rax + 0x20]; 
0x000000000019056f: push qword ptr [rax]; jo 0x190573; add byte ptr [rax], cl; mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x000000000018ffa7: push qword ptr [rax]; push rsi; add byte ptr [rax], al; clc; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x00000000000c9916: push qword ptr [rbp + 0x6a]; add rsp, 0x30; pop rbx; ret; 
0x00000000000d743b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fd6957a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000f38db: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fd85a1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000012757b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fdb96ba; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000013791b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fdc9a5a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000155d9b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fde7eda; mov esp, 0x3a49e254; ret 0xd0dc; 
0x000000000016605b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fdf819a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000179e3b: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fe0bf7a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000184bdb: push qword ptr [rbp - 0x1ac012fb]; xchg esi, eax; call 0xffffffff8fe16d1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000d45aa: push qword ptr [rcx + 0x4000a58d]; ret; 
0x0000000000059a1c: push qword ptr [rcx]; ror byte ptr [rax + 1], cl; ret; 
0x0000000000058bb4: push qword ptr [rdi + 0x66777f3f]; movq mm0, qword ptr [rip + 0xa8a6f]; add rsp, 0x28; ret; 
0x000000000004d60f: push qword ptr [rsi + 0x27]; mov dword ptr [rsp - 0x10], edx; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000009c03f: push qword ptr [rsi + 0x27]; mov dword ptr [rsp - 0x10], edx; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000000e499: push qword ptr [rsi + rbp*8 + 0x31]; jmp qword ptr [rsi + 0xf]; 
0x0000000000190d4f: push qword ptr [rsi + rbx*4 + 0x5f380000]; int1; jmp rax; 
0x00000000000fcb45: push qword ptr [rsi - 0x3ae415c1]; mov eax, 0x3fb70fe4; jmp qword ptr [rdx - 0x1b]; 
0x000000000008e5f3: push r11; pop rax; ret 0x41c4; 
0x00000000000a97e6: push r11; pop rax; ret 0xdbc5; 
0x000000000008e8ef: push r11; pop rsp; ret; 
0x00000000000e8479: push r11; xor esp, dword ptr [rdx + 0x48]; xor byte ptr [rbp + 0x52b89211], bh; xchg edi, eax; ret 0x3f39; 
0x00000000001149a6: push r12; jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x00000000000d7858: push r13; adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000f13f9: push rax; adc byte ptr [rdi + 0x3d2e9e43], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x00000000000e75b6: push rax; add byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x00000000000a77ee: push rax; add eax, 0x2ef9c500; ret; 
0x000000000008699c: push rax; add rsp, 0x48; ret; 
0x00000000000549f4: push rax; add rsp, 0x68; ret; 
0x0000000000192240: push rax; and al, ch; jmp qword ptr [rsi + 2]; 
0x00000000000ece0b: push rax; fisttp word ptr [rbp + riz + 0x5f6000bf]; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x00000000000d16d8: push rax; insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; ret; 
0x00000000001905cf: push rax; jb 0x1905d3; add al, bh; cmc; in eax, dx; jmp qword ptr [rax]; 
0x0000000000190677: push rax; jbe 0x19067b; add al, bl; out dx, al; jmp qword ptr [rax]; 
0x0000000000191d00: push rax; jmp rdi; 
0x000000000019064f: push rax; jne 0x190653; add byte ptr [rax + 0x18], bl; out dx, al; call qword ptr [rax]; 
0x0000000000190598: push rax; jno 0x19059b; add al, bl; ret; 
0x0000000000001c0b: push rax; mov ah, byte ptr [rsi + 0x6d]; jne 0x417cb2ca; ret; 
0x00000000000b008c: push rax; mov dl, 1; add ch, al; stc; push rdi; ret 0xf1c5; 
0x000000000007c52c: push rax; mov dword ptr [rax + rax], eax; add rsp, 0x28; ret; 
0x000000000007d80c: push rax; mov esp, 0x85480004; sar byte ptr [rdi + 0xb], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000006c3c0: push rax; movdqa xmm0, xmm2; pop rbx; ret; 
0x00000000000549e8: push rax; movss dword ptr [rsp + 0x54], xmm5; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x0000000000135489: push rax; or ebx, esp; je 0x13545e; pop rsp; and al, 0x82; ret; 
0x0000000000163bc9: push rax; or ebx, esp; je 0x163b9e; pop rsp; and al, 0x82; ret; 
0x00000000000d4cc9: push rax; or ebx, esp; je 0xd4c9e; pop rsp; and al, 0x82; ret; 
0x0000000000197669: push rax; out dx, al; call qword ptr [rcx]; 
0x0000000000190725: push rax; out dx, al; call rax; 
0x0000000000190af7: push rax; pop qword ptr [rax]; add al, bl; jne 0x190aee; call qword ptr [rax]; 
0x000000000006c458: push rax; pop rbx; movdqa xmm0, xmm2; ret; 
0x0000000000075626: push rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000002e310: push rax; pop rbx; ret; 
0x00000000000179cc: push rax; push 0xb; add al, bl; ret 0xcad8; 
0x000000000000ebfc: push rax; ret 0x1a8; 
0x0000000000075e50: push rax; ret 0x290f; 
0x00000000000d708a: push rax; ret 0x7477; 
0x00000000000769f0: push rax; ret 0x8a8; 
0x00000000000dd06d: push rax; ret 0xaa3f; 
0x00000000000d5dfd: push rax; ret 0xc83f; 
0x00000000000039b0: push rax; ret 1; 
0x0000000000090644: push rax; ret 6; 
0x0000000000005e28: push rax; ret; 
0x00000000000dd02d: push rax; sar byte ptr [rdi], 0x67; or bh, byte ptr fs:[rax - 0x22]; stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000045985: push rax; shl dword ptr [rsi + 0xf], 0x28; ret 0xf66; 
0x00000000000145ec: push rax; xchg byte ptr [rbx], cl; add al, bl; ret 0xcad8; 
0x0000000000196f30: push rax; xlatb; in eax, dx; call qword ptr [rdi]; 
0x00000000000b7668: push rbp; adc dword ptr [rax], eax; add ch, al; ret; 
0x00000000000d7859: push rbp; adc dword ptr [rdx], eax; in eax, dx; ret 0xa3bf; 
0x00000000000640f7: push rbp; adc dword ptr [rdx], ecx; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5ce8; 
0x000000000001e80f: push rbp; add al, byte ptr [rax]; add cl, bl; ret 0xe1d9; 
0x00000000000fd608: push rbp; add ebp, esp; ret; 
0x000000000012c426: push rbp; cmp al, 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c6: push rbp; cmp al, 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac46: push rbp; cmp al, 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af06: push rbp; cmp al, 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece6: push rbp; cmp al, 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a86: push rbp; cmp al, 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e6: push rbp; cmp al, 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8786: push rbp; cmp al, 0xcf; jno 0xf877e; ret 0x226; 
0x00000000001311d8: push rbp; dec byte ptr [rdx + rbp*8]; jno 0x1311ae; ret 0xd33f; 
0x000000000015f918: push rbp; dec byte ptr [rdx + rbp*8]; jno 0x15f8ee; ret 0xd33f; 
0x00000000000d0a18: push rbp; dec byte ptr [rdx + rbp*8]; jno 0xd09ee; ret 0xd33f; 
0x000000000011d795: push rbp; jne 0x11d7d4; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x000000000014bff5: push rbp; jne 0x14c034; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x00000000000e9815: push rbp; jne 0xe9854; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x00000000000ece14: push rbp; lodsb al, byte ptr [rsi]; ret 0xa8bf; 
0x00000000000e0045: push rbp; mov ch, 0x3f; ret 0x95e6; 
0x000000000004455f: push rbp; mov dh, byte ptr [rip + 0xc76400]; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000011243e: push rbp; mov esp, 0x5e4ab88f; sub dh, ch; ret 0x583f; 
0x000000000006bc59: push rbp; or dword ptr [rax], eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000032011: push rbp; or eax, dword ptr [rax]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000015cd7: push rbp; or eax, dword ptr [rax]; ret; 
0x00000000000e0043: push rbp; push rcx; push rbp; mov ch, 0x3f; ret 0x95e6; 
0x0000000000053411: push rbp; ret 0x560f; 
0x00000000000906c7: push rbp; ret 6; 
0x00000000000ca4d2: push rbp; ret; 
0x0000000000045b1e: push rbp; shl dword ptr [rsi + 0xf], cl; push rsi; xlatb; movapd xmm1, xmm2; ret; 
0x00000000000e9963: push rbp; xor eax, 0x5d3d0555; ret; 
0x000000000018ff21: push rbx; add byte ptr [rax], al; mov byte ptr [rax - 0x15], dl; call rax; 
0x0000000000049f30: push rbx; addps xmm0, xmmword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x00000000001058f6: push rbx; call 0x2976e08; ret 0xf90d; 
0x00000000000464b6: push rbx; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000d8666: push rbx; cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x000000000007daf9: push rbx; ja 0x7db04; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000e4d3b: push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x000000000004a5cb: push rbx; movups xmm1, xmmword ptr [rip + 0x80bf8]; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004dde1: push rbx; movups xmm2, xmmword ptr [rsp + 8]; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x000000000009b973: push rbx; movups xmmword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x00000000000c1b34: push rbx; or byte ptr [rax], al; add ch, al; ret; 
0x00000000000b8c72: push rbx; pop rax; call 0x5da62; inc ebp; ret; 
0x000000000008e5f4: push rbx; pop rax; ret 0x41c4; 
0x00000000000925e2: push rbx; pop rax; ret 0xd3c5; 
0x00000000000a97e7: push rbx; pop rax; ret 0xdbc5; 
0x00000000000b4d22: push rbx; pop rsp; call 0x34212; jmp qword ptr [rsi + 0xf]; 
0x00000000000b8656: push rbx; pop rsp; call 0x5946c821; ret 0x79c5; 
0x0000000000095092: push rbx; pop rsp; ret 0xfbc5; 
0x000000000008e8f0: push rbx; pop rsp; ret; 
0x00000000000d988b: push rbx; push rcx; ret; 
0x0000000000090812: push rbx; ret 0x2c7; 
0x0000000000001b5c: push rbx; ret 0x98a3; 
0x00000000000dcdeb: push rbx; ret 0xb978; 
0x0000000000108e2b: push rbx; ret 0xeaf; 
0x00000000000d06f0: push rbx; ret 0xeed9; 
0x000000000000178c: push rbx; ret; 
0x00000000000dfca9: push rbx; retf; ret 0x19cf; 
0x00000000000ddd1d: push rbx; sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x00000000000f0c95: push rbx; sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x0000000000001c08: push rbx; sbb cl, 0x50; mov ah, byte ptr [rsi + 0x6d]; jne 0x417cb2ca; ret; 
0x000000000010be27: push rbx; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x00000000000d5da9: push rbx; sbb dl, byte ptr [rdi]; outsb dx, byte ptr [rsi]; pop rdi; ret 0x103f; 
0x0000000000113a04: push rbx; sbb eax, 0xbaf4f12c; sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x0000000000107a83: push rbx; sub bh, ah; rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x0000000000073f29: push rbx; syscall; 
0x00000000000dda81: push rbx; xchg edi, eax; xchg ebx, eax; std; call rsp; 
0x00000000000e847a: push rbx; xor esp, dword ptr [rdx + 0x48]; xor byte ptr [rbp + 0x52b89211], bh; xchg edi, eax; ret 0x3f39; 
0x000000000001ebcb: push rcx; add al, byte ptr [rax]; add cl, bl; ret 0xe1d9; 
0x000000000018fe71: push rcx; add byte ptr [rax], al; cmp rbp, rbx; call qword ptr [rax + 0x51]; 
0x000000000001a3c4: push rcx; add rsp, 0x58; ret; 
0x000000000008e7d1: push rcx; and ch, al; ret; 
0x00000000000d2013: push rcx; and eax, 0xfe3fe25e; ret; 
0x00000000000466a4: push rcx; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000001be4: push rcx; fist word ptr [rip + 0xd16fa95]; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000000e49fd: push rcx; in eax, 0xbb; lea r13d, [r15 + 0x44019029]; mov edi, 0xa4df0dfd; ret 0x7f48; 
0x0000000000140ff9: push rcx; jo 0x140ff1; sub al, 0xc5; ret 0x66bb; 
0x000000000016f539: push rcx; jo 0x16f531; sub al, 0xc5; ret 0x66bb; 
0x000000000018e0b9: push rcx; jo 0x18e0b1; sub al, 0xc5; ret 0x66bb; 
0x00000000000fd319: push rcx; jo 0xfd311; sub al, 0xc5; ret 0x66bb; 
0x00000000000d0aca: push rcx; mov cl, 0x5a; xchg ebp, eax; ret; 
0x00000000000d8b54: push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x000000000004ff1f: push rcx; or dword ptr [rbx], ecx; add bl, dh; divps xmm0, xmmword ptr [rip + 0x7bba9]; ret; 
0x0000000000197699: push rcx; out dx, al; jmp qword ptr [rsi]; 
0x000000000011d794: push rcx; push rbp; jne 0x11d7d4; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x000000000014bff4: push rcx; push rbp; jne 0x14c034; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x00000000000e9814: push rcx; push rbp; jne 0xe9854; call ptr [rdi + 3]; add bh, dh; call rdi; 
0x00000000000e0044: push rcx; push rbp; mov ch, 0x3f; ret 0x95e6; 
0x00000000000d9b90: push rcx; ret 0xa5a5; 
0x0000000000058f8b: push rcx; ret 0xa; 
0x000000000010d851: push rcx; ret 0xea42; 
0x0000000000099c62: push rcx; ret 0xfbc5; 
0x00000000000d988c: push rcx; ret; 
0x000000000004a9fd: push rcx; sal dl, cl; cvtps2pd xmm0, xmm2; ret; 
0x000000000010d2bb: push rcx; test byte ptr [rax + 0x1a], dl; adc byte ptr [rbp + 0x77], al; mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x00000000000e46a4: push rcx; test byte ptr [rdi - 0x41], dl; mov byte ptr [rax + 0xa], al; mov bh, 0xf5; ret 0xbbf1; 
0x00000000000ef62a: push rcx; xchg ebx, eax; call rdx; 
0x0000000000105efa: push rcx; xor esi, ecx; add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x00000000001966cd: push rdi; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000001966a5: push rdi; add byte ptr [rax], al; fcomp dword ptr [rcx - 0x13]; call qword ptr [rcx + 1]; 
0x000000000004ee54: push rdi; add eax, 0x7cc86; ret; 
0x000000000004a0ae: push rdi; add eax, 0x81a2c; ret; 
0x000000000009e3e5: push rdi; add eax, dword ptr [rax]; add ch, al; ret; 
0x00000000000452f5: push rdi; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000001074e3: push rdi; cld; ret 0xc883; 
0x000000000010306d: push rdi; cmc; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x00000000000e81e4: push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000011c164: push rdi; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9c4: push rdi; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000c56aa: push rdi; dec dword ptr [rax + 0x21]; ret 0x7be9; 
0x00000000000c514c: push rdi; dec dword ptr [rax + 0x21]; ret 0x8948; 
0x00000000000c52ad: push rdi; dec dword ptr [rax - 0x3f]; out dx, al; add esp, dword ptr [rsi + 0x41]; and eax, 0x21487fff; ret 0x8949; 
0x0000000000019911: push rdi; idiv bh; jmp qword ptr [rsi - 0x7d]; 
0x000000000009287f: push rdi; mov ch, 0xdb; ret 0x2c3; 
0x00000000000e46a6: push rdi; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x00000000000ddfbb: push rdi; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000045ae1: push rdi; or byte ptr [rax], al; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x000000000005069c: push rdi; or eax, 0x7b43e; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000044e4a: push rdi; or eax, 0x86490; add rsp, 0x18; ret; 
0x0000000000044ce2: push rdi; or eax, 0x865f8; ret; 
0x000000000003cbcd: push rdi; or eax, 0x8e70d; pop rbx; movapd xmm0, xmm1; ret; 
0x00000000000d7c65: push rdi; pop rsi; cmp al, 0x63; ret; 
0x00000000000528d4: push rdi; ret 0x280f; 
0x0000000000052e1f: push rdi; ret 0x290f; 
0x0000000000085d89: push rdi; ret 0x570f; 
0x00000000000999bc: push rdi; ret 0xf1c5; 
0x000000000008004c: push rdi; ret 0xf66; 
0x0000000000103385: push rdi; ret 0xfac1; 
0x000000000004d884: push rdi; ret 0xff3; 
0x0000000000044f51: push rdi; ret; 
0x0000000000085d86: push rdi; retf 0x570f; ret 0x570f; 
0x000000000004d881: push rdi; retf 0x570f; ret 0xff3; 
0x00000000000b01cd: push rdi; sal byte ptr [rdx + rdi*4 - 0x3b], cl; sti; adc byte ptr [rip + 0x33547], dl; vmovapd xmm0, xmm2; ret; 
0x0000000000099bdd: push rdi; sal byte ptr [rdx + rdi*4 - 0x3b], cl; sti; adc byte ptr [rip + 0x49b37], dl; vmovapd xmm0, xmm2; ret; 
0x000000000002e852: push rdi; sal edx, 0xf; pop rcx; ret 0xf66; 
0x000000000009c0c4: push rdi; sar byte ptr [rax], 0xc2; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x000000000004552c: push rdi; shl byte ptr [rsi + 0xf], 1; sub cl, al; movapd xmm1, xmm2; ret; 
0x00000000000e76e9: push rdx; adc ah, byte ptr [rdi]; ret; 
0x0000000000050cb4: push rdx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000128e0: push rdx; cvtps2pd xmm0, xmm0; add rsp, 8; ret; 
0x00000000000fc7c1: push rdx; fist word ptr ds:[rdx]; int1; ret 0x9f3f; 
0x000000000010d37b: push rdx; jbe 0x10d39d; and al, byte ptr [rax - 0x39]; in al, 0xcf; adc byte ptr [rbp - 0xa], bl; ret; 
0x0000000000073e4a: push rdx; jp 0x73e46; jmp qword ptr [rsi - 0x70]; 
0x000000000007755a: push rdx; jp 0x7755c; jmp qword ptr [rsi + 0xf]; 
0x00000000000fd3c9: push rdx; mov ah, 0x9f; pop rsi; ret 0x3fd7; 
0x00000000000474a8: push rdx; movups xmm0, xmmword ptr [rip + 0x845ef]; movapd xmm1, xmm0; ret; 
0x000000000002710c: push rdx; movups xmm1, xmmword ptr [rip + 0xa4993]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042eea: push rdx; movups xmm1, xmmword ptr [rsp]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002e059: push rdx; movups xmm2, xmmword ptr [rsp]; add rsp, 0x10; pop rbx; mulsd xmm0, xmm2; ret; 
0x0000000000049c22: push rdx; or eax, dword ptr [eax]; ret; 
0x00000000001976c1: push rdx; out dx, al; jmp qword ptr [rsi]; 
0x000000000010c60b: push rdx; ret 0x512; 
0x00000000000e5854: push rdx; ret 0xbfd3; 
0x00000000000e57ca: push rdx; ret 0xdc68; 
0x00000000000d01f5: push rdx; ret; 
0x0000000000044fc5: push rdx; ucomisd xmm3, qword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000e5f14: push rdx; xchg ebp, eax; ret 0xbf3f; 
0x00000000000ef374: push rdx; xchg ebp, eax; ret 0xfc3f; 
0x00000000000e8483: push rdx; xchg edi, eax; ret 0x3f39; 
0x00000000000d5e1b: push rdx; xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x000000000018ffa9: push rsi; add byte ptr [rax], al; clc; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x000000000018ffb9: push rsi; add byte ptr [rax], al; cwde; xchg bl, ch; call rax; 
0x0000000000045ae6: push rsi; add eax, 0x85fc4; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000051035: push rsi; add eax, 0xafe65; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000051010: push rsi; add eax, 0xafe9a; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504d5: push rsi; add eax, 0xb09c5; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x00000000000504b0: push rsi; add eax, 0xb09fa; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004753f: push rsi; add eax, 0xb752b; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x0000000000043198: push rsi; add eax, 0xb9642; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004316a: push rsi; add eax, 0xb9680; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324f8: push rsi; add eax, 0xca2e2; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000324ca: push rsi; add eax, 0xca320; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000012868: push rsi; add rsp, 0x28; ret; 
0x0000000000029646: push rsi; and bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000461d9: push rsi; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000009710f: push rsi; dec dword ptr [rcx + 0x29]; ret 0x394d; 
0x000000000001cdd6: push rsi; dec dword ptr [rdx]; add cl, bl; leave; ret; 
0x0000000000048cf4: push rsi; iretd; ret; 
0x0000000000073016: push rsi; mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000fc8cd: push rsi; mov eax, 0xa454de39; ret 0x42d8; 
0x00000000000aafa0: push rsi; or dword ptr [rax], eax; and ch, al; sti; pop rax; ret; 
0x00000000000471ec: push rsi; or eax, 0xb787e; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000004500e: push rsi; or eax, 0xb9a5c; ret; 
0x0000000000015c6a: push rsi; or eax, dword ptr [rax]; fucompi st(1); je 0x15c74; faddp st(1); ret; 
0x000000000004882a: push rsi; out 0x66, eax; movaps xmm1, xmm4; ret; 
0x00000000000b9671: push rsi; out 0xc4, eax; jns 0xb969f; ret; 
0x00000000001006d9: push rsi; pop rcx; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000033924: push rsi; ret 0x11e9; 
0x000000000003504b: push rsi; ret 0x16e9; 
0x00000000000a87bc: push rsi; ret 0x1de9; 
0x00000000000bb5ff: push rsi; ret 0x22e9; 
0x00000000000bcdfe: push rsi; ret 0x23e9; 
0x00000000000b983c: push rsi; ret 0x2ae9; 
0x00000000000bc7f3: push rsi; ret 0x2ee9; 
0x00000000000921a2: push rsi; ret 0x2fe9; 
0x0000000000033acc: push rsi; ret 0x41f2; 
0x0000000000036917: push rsi; ret 0x4ae9; 
0x00000000000bb01a: push rsi; ret 0x4ce9; 
0x00000000000a8481: push rsi; ret 0x58e9; 
0x00000000000a8680: push rsi; ret 0x59e9; 
0x00000000000a9378: push rsi; ret 0x61e9; 
0x0000000000035ef9: push rsi; ret 0x68e9; 
0x0000000000091e68: push rsi; ret 0x69e9; 
0x00000000000a8e67: push rsi; ret 0x72e9; 
0x0000000000042d63: push rsi; ret 0x7580; 
0x000000000003df65: push rsi; ret 0x77e9; 
0x00000000000334b9: push rsi; ret 0x7ce9; 
0x00000000000a7753: push rsi; ret 0x86e9; 
0x0000000000091147: push rsi; ret 0x8ae9; 
0x0000000000092d44: push rsi; ret 0x8de9; 
0x00000000000362d3: push rsi; ret 0x8ee9; 
0x0000000000092839: push rsi; ret 0x98e9; 
0x000000000003ee42: push rsi; ret 0x9ae9; 
0x00000000000353c4: push rsi; ret 0x9de9; 
0x00000000000ca4e8: push rsi; ret 0xa61; 
0x0000000000046389: push rsi; ret 0xa8e9; 
0x00000000000b9fbb: push rsi; ret 0xabe9; 
0x00000000000358b0: push rsi; ret 0xb1e9; 
0x00000000000d8512: push rsi; ret 0xb2d2; 
0x00000000000db44c: push rsi; ret 0xbfd2; 
0x00000000000ba14b: push rsi; ret 0xc1c4; 
0x00000000000bb95e: push rsi; ret 0xc3e9; 
0x000000000009140b: push rsi; ret 0xc6e9; 
0x00000000000a7a12: push rsi; ret 0xc7e9; 
0x00000000000a7e10: push rsi; ret 0xc9e9; 
0x0000000000033162: push rsi; ret 0xd3e9; 
0x000000000003d908: push rsi; ret 0xd4e9; 
0x0000000000037289: push rsi; ret 0xd8e9; 
0x0000000000045c2a: push rsi; ret 0xdb85; 
0x00000000000bd143: push rsi; ret 0xdee9; 
0x0000000000036c7d: push rsi; ret 0xe4e9; 
0x00000000000b9b7e: push rsi; ret 0xe8e9; 
0x00000000000bc438: push rsi; ret 0xe9e9; 
0x00000000000bbe2d: push rsi; ret 0xf4e9; 
0x0000000000034a3b: push rsi; ret 0xfae9; 
0x00000000000bd724: push rsi; ret 0xfde9; 
0x000000000002fa36: push rsi; ret; 
0x000000000009e426: push rsi; rol byte ptr [rdi], 1; add ch, al; ret; 
0x0000000000053257: push rsi; sal dword ptr [rbx + rax + 0xf], 0x57; ret; 
0x0000000000041a33: push rsi; shr ecx, 0xc6; ret 0xffff; 
0x0000000000076211: push rsi; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ff44a: push rsi; sub r9b, dl; out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x00000000000d8642: push rsi; xchg ecx, eax; ret 0x84f6; 
0x0000000000044fb2: push rsi; xlatb; movapd xmm1, xmm2; ret; 
0x00000000000474d7: push rsp; adc eax, 0x83e03; movsd xmm1, qword ptr [rip + 0x845bb]; movapd xmm0, xmm2; ret; 
0x00000000000d4985: push rsp; add al, 0x41; ret; 
0x000000000004fe31: push rsp; add eax, 0x7bc89; ret; 
0x0000000000045ade: push rsp; add eax, 0x857fc; orpd xmm0, xmmword ptr [rip + 0x85fc4]; movsd xmm1, qword ptr [rip + 0x85fac]; ret; 
0x0000000000043002: push rsp; add eax, 0x882a8; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x0000000000031cf2: push rsp; add eax, 0x995b8; ret; 
0x0000000000070154: push rsp; and al, 0x10; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000006c1ab: push rsp; and al, 0x18; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x000000000006c0fd: push rsp; and al, 0x18; movdqa xmm0, xmm2; add rsp, 0x28; ret; 
0x0000000000054d0f: push rsp; and al, 0x40; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x0000000000011b18: push rsp; and al, 0xc; ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x0000000000012428: push rsp; and al, 0xc; ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x0000000000012668: push rsp; and al, 0xc; ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x00000000000126ff: push rsp; and al, 0xc; ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x000000000007286d: push rsp; and al, 0xe0; movdqa xmm0, xmmword ptr [rsp - 0x28]; ret; 
0x000000000001af6a: push rsp; and al, 0xe8; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000074741: push rsp; and al, 0xe8; movhps xmm0, qword ptr [rsp - 0x18]; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000018c16: push rsp; and al, 0xec; mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000001b332: push rsp; and al, 0xf0; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x000000000001b179: push rsp; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000006ee63: push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x000000000004d613: push rsp; and al, 0xf0; movss xmm0, dword ptr [rsp - 0x10]; addss xmm0, xmm1; ret; 
0x000000000009c043: push rsp; and al, 0xf0; vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000001b272: push rsp; and al, 0xf0; xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000001b32e: push rsp; and al, 0xf4; mov dword ptr [rsp - 0x10], edx; fld xword ptr [rsp - 0x10]; pop rbx; ret; 
0x0000000000015e84: push rsp; and al, 0xfc; and al, 1; je 0x15e94; fld qword ptr [rip + 0xb72d7]; ret; 
0x000000000004dde5: push rsp; and al, 8; add rsp, 0x10; mulss xmm0, xmm2; pop rbx; ret; 
0x0000000000072bff: push rsp; and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x000000000006fb45: push rsp; and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000045b1a: push rsp; cli; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000db256: push rsp; cmp al, 0x1b; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000e5a6e: push rsp; cmp al, 2; ret 0x2a49; 
0x000000000004ebac: push rsp; cmp eax, 0x7cf2e; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x00000000000493ae: push rsp; cmp eax, 0x81f2c; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000048ce7: push rsp; cmp eax, 0x825f3; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x000000000004881e: push rsp; cmp eax, 0x82abc; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000044faa: push rsp; cmp eax, 0x86330; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000002e9eb: push rsp; cmp eax, 0x9c8ef; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000093162: push rsp; fcmovb st(0), st(5); ret; 
0x00000000000939b9: push rsp; fcmovb st(0), st(5); stc; push rsp; ret 0x79c5; 
0x0000000000089681: push rsp; fld st(4); jns 0x896b5; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x000000000009fc01: push rsp; fld st(4); jns 0x9fc35; fimul dword ptr [rdi]; xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x000000000008e7cc: push rsp; fld st(5); jnp 0x8e7e1; push rcx; and ch, al; ret; 
0x00000000000a4dbc: push rsp; fld st(5); jnp 0xa4dd1; push rcx; and ch, al; ret; 
0x000000000003c43e: push rsp; idiv edi; jmp qword ptr [rsi + 0x41]; 
0x0000000000087d4e: push rsp; int 0xc5; pop r8; ret 0xfbc5; 
0x00000000000dde61: push rsp; int1; ret 0xe7cc; 
0x000000000007d5f8: push rsp; jl 0x7d603; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x5be8; 
0x000000000009838a: push rsp; jmp qword ptr [rax]; 
0x00000000001149a7: push rsp; jne 0x1149e8; xchg esi, eax; ret 0x65ae; 
0x000000000012996d: push rsp; loope 0x1299af; ret; 
0x0000000000139d0d: push rsp; loope 0x139d4f; ret; 
0x000000000015818d: push rsp; loope 0x1581cf; ret; 
0x000000000016844d: push rsp; loope 0x16848f; ret; 
0x000000000017c22d: push rsp; loope 0x17c26f; ret; 
0x0000000000186fcd: push rsp; loope 0x18700f; ret; 
0x00000000000d982d: push rsp; loope 0xd986f; ret; 
0x000000000000e4eb: push rsp; loope 0xe554; ucomiss xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x000000000000ee6b: push rsp; loope 0xeed4; ucomiss xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0db: push rsp; loope 0xf144; ucomiss xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f182: push rsp; loope 0xf1eb; ucomiss xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x00000000000f5ccd: push rsp; loope 0xf5d0f; ret; 
0x0000000000070d08: push rsp; mov bl, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000105616: push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000d563a: push rsp; mov esi, ecx; ret; 
0x0000000000103458: push rsp; mov ss, edx; test byte ptr [rdx], bh; ret 0xbf8b; 
0x0000000000106202: push rsp; mov word ptr [rdx], ds; ret 0xaf45; 
0x00000000000549ee: push rsp; movq xmm0, qword ptr [rsp + 0x50]; add rsp, 0x68; ret; 
0x00000000000fc8d1: push rsp; movsb byte ptr [rdi], byte ptr [rsi]; ret 0x42d8; 
0x00000000000e0e1b: push rsp; or byte ptr [r8 + 0xbd], r14b; pop rsp; push -0x46c00ffd; mov bh, 3; ret; 
0x00000000000518f1: push rsp; or eax, 0x7a1c9; ucomiss xmm1, dword ptr [rip + 0x7a1d2]; ja 0x51928; movd xmm0, eax; ret; 
0x00000000000501d4: push rsp; or eax, 0x7b8e6; divss xmm0, xmm1; ret; 
0x000000000004d354: push rsp; or eax, 0x7e766; divss xmm0, xmm1; ret; 
0x0000000000045a66: push rsp; or eax, 0x85874; ret; 
0x0000000000045002: push rsp; or eax, 0x862d8; pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x000000000004300a: push rsp; or eax, 0x882d0; orpd xmm0, xmm1; ret; 
0x000000000003d136: push rsp; or eax, 0x8e174; divsd xmm0, xmm1; ret; 
0x00000000000320fe: push rsp; or eax, 0x991ac; divsd xmm0, xmm1; ret; 
0x000000000002c4ee: push rsp; or eax, 0x9edbc; divsd xmm0, xmm1; ret; 
0x0000000000015e38: push rsp; or eax, dword ptr [rax]; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x0000000000015e27: push rsp; or eax, dword ptr [rax]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x0000000000045c49: push rsp; out dx, eax; pop rbx; orpd xmm1, xmm5; ret; 
0x00000000000d5dfc: push rsp; push rax; ret 0xc83f; 
0x000000000012c424: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c4: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac44: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af04: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece4: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a84: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e4: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8784: push rsp; rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x000000000004aa19: push rsp; rcr dword ptr [rbp - 0xd], 0xf; pop rcx; ret 0xfc3; 
0x0000000000047ddf: push rsp; ret 0x29eb; 
0x0000000000012511: push rsp; ret 0x2e0f; 
0x00000000000526f4: push rsp; ret 0x3ba; 
0x0000000000093d41: push rsp; ret 0x41c4; 
0x000000000007f092: push rsp; ret 0x44f2; 
0x000000000007fb95: push rsp; ret 0x4566; 
0x000000000007fe92: push rsp; ret 0x45f2; 
0x000000000009317a: push rsp; ret 0x79c5; 
0x0000000000095244: push rsp; ret 0x7bc5; 
0x00000000000da310: push rsp; ret 0x9d71; 
0x0000000000058f98: push rsp; ret 0xa; 
0x0000000000095419: push rsp; ret 0xc1c4; 
0x000000000000ef6a: push rsp; ret 0xf66; 
0x00000000000931b6: push rsp; ret 0xf9c5; 
0x0000000000095744: push rsp; ret 0xfbc5; 
0x0000000000029ccb: push rsp; ret 0xff2; 
0x0000000000026ff6: push rsp; ret; 
0x000000000004c615: push rsp; retf 0x280f; ret; 
0x0000000000043372: push rsp; retf 0xf66; push rsp; ret 0xf66; 
0x00000000000a9792: push rsp; rol ah, cl; ret; 
0x0000000000089b99: push rsp; rol ebp, 1; jns 0x89bcc; ret 0x860f; 
0x000000000008a446: push rsp; rol ebp, 1; jns 0x8a479; ret 0x860f; 
0x00000000000a010a: push rsp; rol ebp, 1; jns 0xa013d; ret 0x860f; 
0x00000000000a09ae: push rsp; rol ebp, 1; jns 0xa09e1; ret 0x860f; 
0x00000000000895f2: push rsp; rol ebp, 1; pop r8; ret; 
0x000000000008e28a: push rsp; rol ebp, 1; ret; 
0x00000000000bfbb5: push rsp; rol ebp, cl; ret; 
0x0000000000099865: push rsp; rol ebp, cl; sti; pop rsp; ret; 
0x00000000000896f1: push rsp; rol esp, 1; jns 0x89725; fcmovb st(0), st(5); ret; 
0x000000000009fc6f: push rsp; rol esp, 1; jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x000000000004aa16: push rsp; ror byte ptr [rdi], 1; push rsp; rcr dword ptr [rbp - 0xd], 0xf; pop rcx; ret 0xfc3; 
0x00000000000ca4b1: push rsp; sbb byte ptr [rdi + 0x4f3fea94], r13b; ja 0xca4af; ret 0xa1fc; 
0x00000000000e661a: push rsp; sbb eax, 0x3ff005d2; imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x00000000000e78b1: push rsp; scasd eax, dword ptr [rdi]; stosd dword ptr [rdi], eax; pop rbp; ret; 
0x00000000000471e7: push rsp; shl dword ptr [rsi + 0x44], 1; orps xmm1, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x000000000004753b: push rsp; stc; orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000010c853: push rsp; wait; xchg esi, eax; xor al, byte ptr [rip + 0x2583811e]; ret; 
0x00000000001142bc: push rsp; xchg byte ptr [rdi + rdi*4 - 0x2087e7cb], cl; ret; 
0x000000000004a4e4: push rsp; xor eax, 0x815f6; orps xmm0, xmm6; add rsp, 0x28; ret; 
0x0000000000026ffa: push rsp; xor eax, 0xa42e0; orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x000000000003cd16: pushfq; add al, 0; cmovne rax, rdx; ret; 
0x000000000019122c: pushfq; add al, byte ptr [rax]; add al, ah; mov cl, 0xe7; jmp qword ptr [rcx]; 
0x0000000000195d2c: pushfq; add byte ptr [r8], r8b; jo 0x195d36; in al, dx; jmp qword ptr [rcx]; 
0x0000000000012b45: pushfq; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000cd482: pushfq; add byte ptr [rbx + 0x2e007b20], ch; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x000000000019742c: pushfq; add byte ptr fs:[rax], al; mov al, 0x3c; out dx, al; call rsi; 
0x000000000000caef: pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x31], cl; ret; 
0x0000000000059dc6: pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000c9d48: pushfq; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000007a74a: pushfq; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret; 
0x00000000000e9b94: pushfq; call qword ptr [rbx]; 
0x0000000000133c86: pushfq; cmp al, 0xac; jae 0x133c89; pop rdx; ret; 
0x00000000001623c6: pushfq; cmp al, 0xac; jae 0x1623c9; pop rdx; ret; 
0x00000000000d34c6: pushfq; cmp al, 0xac; jae 0xd34c9; pop rdx; ret; 
0x00000000001068ca: pushfq; imul ecx, dword ptr [rbp + 0x2e], 0xd4a23ffb; ret; 
0x0000000000127e75: pushfq; jbe 0x127eb4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000138215: pushfq; jbe 0x138254; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000156695: pushfq; jbe 0x1566d4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000166955: pushfq; jbe 0x166994; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000017a735: pushfq; jbe 0x17a774; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000001854d5: pushfq; jbe 0x185514; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000d7d35: pushfq; jbe 0xd7d74; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000f41d5: pushfq; jbe 0xf4214; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000e4d24: pushfq; jmp qword ptr [rbx]; 
0x00000000000d7d7d: pushfq; movsb byte ptr [rdi], byte ptr [rsi]; mov edi, 0xde917e27; mov bl, 0xf3; mov ch, 0xbf; ret 0x455c; 
0x000000000004fcf3: pushfq; nop dword ptr [rax]; mulss xmm1, xmm0; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000103af6: pushfq; push rsi; ret; 
0x00000000000cf4f7: pushfq; ret 0x3f; 
0x0000000000112988: pushfq; ret 0xa75f; 
0x00000000000cf4d7: pushfq; ret 0xbf; 
0x000000000000ef30: pushfq; ret; 
0x0000000000107305: pushfq; xor al, bl; ret 0xf46e; 
0x0000000000043348: pushfq; xor eax, 0xc76400; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000057e51: pxor mm0, mm0; add rsp, 0x38; ret; 
0x0000000000051989: pxor mm0, mm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x0000000000044034: pxor mm0, mm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x000000000006eeda: pxor mm0, mm0; and rdx, rsi; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004d693: pxor mm0, mm0; cmp dl, al; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x00000000000442d5: pxor mm0, mm0; divss xmm0, xmm0; mov rax, qword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000208e5: pxor mm0, mm0; divss xmm0, xmm0; mov rax, qword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000745cd: pxor mm0, mm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000004d4e0: pxor mm0, mm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x0000000000045009: pxor mm0, mm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000043f03: pxor mm0, mm0; ret; 
0x00000000000501ac: pxor mm0, mm0; sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x00000000000320da: pxor mm0, mm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x000000000006ef46: pxor mm0, mm0; xor edx, edx; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000007c3a2: pxor mm0, qword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x000000000007c395: pxor mm0, qword ptr [rip + 0x673a4]; call 0x742d0; pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x0000000000075453: pxor mm0, qword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x000000000006b923: pxor mm0, qword ptr [rip + 0x77e16]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000058ac2: pxor mm0, qword ptr [rip + 0x8ac77]; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000eeb1: pxor mm1, mm1; ucomisd xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000012461: pxor mm1, mm1; ucomiss xmm1, xmm0; ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x000000000008027c: pxor mm2, mm2; je 0x8023b; movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000007c371: pxor mm3, mm3; movaps xmmword ptr [rsp + 0x20], xmm3; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000005114c: pxor mm4, mm4; ucomiss xmm0, xmm4; jp 0x51160; jne 0x51160; addss xmm0, xmm0; ret; 
0x0000000000056fcc: pxor mm4, mm4; ucomiss xmm0, xmm4; jp 0x56fe0; jne 0x56fe0; addss xmm0, xmm0; ret; 
0x0000000000057e50: pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x0000000000051988: pxor xmm0, xmm0; and eax, 0x3fffff; cvtsi2ss xmm0, eax; ret; 
0x0000000000044033: pxor xmm0, xmm0; and rax, rdx; cvtsi2sd xmm0, rax; ret; 
0x000000000006eed9: pxor xmm0, xmm0; and rdx, rsi; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004d692: pxor xmm0, xmm0; cmp dl, al; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x00000000000442d4: pxor xmm0, xmm0; divss xmm0, xmm0; mov rax, qword ptr [rip + 0x358cd5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000208e4: pxor xmm0, xmm0; divss xmm0, xmm0; mov rax, qword ptr [rip + 0x37c6c5]; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000745cc: pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000004d4df: pxor xmm0, xmm0; mulsd xmm1, qword ptr [rsp - 0x10]; cvtsd2ss xmm0, xmm1; ret; 
0x0000000000045008: pxor xmm0, xmm0; orpd xmm1, xmmword ptr [rip + 0xb9a5c]; ret; 
0x0000000000043f02: pxor xmm0, xmm0; ret; 
0x00000000000501ab: pxor xmm0, xmm0; sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x00000000000320d9: pxor xmm0, xmm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x000000000006ef45: pxor xmm0, xmm0; xor edx, edx; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000007c3a1: pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x000000000007c394: pxor xmm0, xmmword ptr [rip + 0x673a4]; call 0x742d0; pxor xmm0, xmmword ptr [rip + 0x67397]; add rsp, 8; ret; 
0x0000000000075452: pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x000000000006b922: pxor xmm0, xmmword ptr [rip + 0x77e16]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000058ac1: pxor xmm0, xmmword ptr [rip + 0x8ac77]; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000eeb0: pxor xmm1, xmm1; ucomisd xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000012460: pxor xmm1, xmm1; ucomiss xmm1, xmm0; ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x000000000008027b: pxor xmm2, xmm2; je 0x8023b; movsd xmm2, qword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000007c370: pxor xmm3, xmm3; movaps xmmword ptr [rsp + 0x20], xmm3; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000005114b: pxor xmm4, xmm4; ucomiss xmm0, xmm4; jp 0x51160; jne 0x51160; addss xmm0, xmm0; ret; 
0x0000000000056fcb: pxor xmm4, xmm4; ucomiss xmm0, xmm4; jp 0x56fe0; jne 0x56fe0; addss xmm0, xmm0; ret; 
0x00000000000fe7b0: rcl bh, 0xc0; idiv bh; jmp qword ptr [rbx]; 
0x000000000001f95a: rcl bl, cl; or al, byte ptr [rax]; add rsp, 0x28; fld st(0); fxch st(1); ret; 
0x00000000000a3ccf: rcl byte ptr [rax + 0x4a107bc5]; sub ah, al; jns 0xa3d02; loope 0xa3ca0; ret; 
0x00000000000e240b: rcl byte ptr [rax - 0x36], cl; add dword ptr [rsi - 0x44000000], edi; ret 0xe943; 
0x00000000000a9187: rcl byte ptr [rax - 0x3b], 0x23; pop rsp; in eax, 0xc5; sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x0000000000113afb: rcl byte ptr [rax], 0xc5; mov bh, byte ptr [rdi]; out 0x2e, eax; or esi, esp; ret; 
0x000000000012c425: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x12c41e; ret 0x226; 
0x000000000013c7c5: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x13c7be; ret 0x226; 
0x000000000015ac45: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x15ac3e; ret 0x226; 
0x000000000016af05: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x16aefe; ret 0x226; 
0x000000000017ece5: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x17ecde; ret 0x226; 
0x0000000000189a85: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0x189a7e; ret 0x226; 
0x00000000000dc2e5: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xdc2de; ret 0x226; 
0x00000000000f8785: rcl byte ptr [rbp + 0x3c], 0xcf; jno 0xf877e; ret 0x226; 
0x00000000000d707c: rcl byte ptr [rbx + rbx*4 + 0x3f]; xchg edx, eax; movabs dword ptr [0xc31ebfc0a732485b], eax; push rax; ret 0x7477; 
0x000000000010bdf8: rcl byte ptr [rdx], 0xf6; jmp rax; 
0x000000000002a3ca: rcl byte ptr [rsi + rdi*8], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000001b8e4: rcl byte ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000191b90: rcl ch, 0xe7; call qword ptr [rdi]; 
0x00000000000d4e81: rcl cl, 0x4b; or byte ptr [rcx], bh; or al, 0x40; std; lahf; ret; 
0x0000000000001790: rcl cl, 0x68; iretd; lodsq rax, qword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x00000000000d78a5: rcl dh, 0x3f; lea esi, [rsi - 0x42]; sti; ret; 
0x00000000000ddc21: rcl dh, 1; ret 0xee95; 
0x00000000000df5f5: rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x00000000000a7851: rcl dword ptr [rax + 0x585bc1c4]; ret 0x5bc5; 
0x00000000000e7243: rcl dword ptr [rax + rbx*2 - 0x70fc014]; ret; 
0x00000000000a3c55: rcl dword ptr [rax - 0x3c]; ret; 
0x00000000000d5ec0: rcl dword ptr [rbp - 0x23fe26fb]; cmp dword ptr [rbp*2 + 0x1bf7edfa], -0x60; ret 0x9abf; 
0x000000000008809e: rcl dword ptr [rbx + rbp*8 - 0x3b]; ret; 
0x00000000000bea7b: rcl dword ptr [rbx + rbp*8 - 0x3b]; stc; push rsp; ret; 
0x00000000000e4d3a: rcl dword ptr [rbx - 0x5d], cl; xchg dword ptr [rdi + 0x7fd782bb], esi; add al, 0x70; jmp qword ptr [rdi]; 
0x00000000000b4a16: rcl dword ptr [rcx + rbp*8 - 0x3b]; ret; 
0x00000000000ddc3d: rcl dword ptr [rdi + rdi*4 - 0xfd57c1c], 0xfb; call rsi; 
0x00000000000a97dd: rcl dword ptr [rdx + rdi*8 - 0x3c], 0xc1; and ebx, dword ptr [rdx + riz*8 - 0x3c]; push r11; pop rax; ret 0xdbc5; 
0x00000000000bbd66: rcl dword ptr [rsi - 3], 0xc5; ret; 
0x00000000000ce6d2: rcl ebp, cl; push -0x21; ret 0x188; 
0x0000000000107a86: rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x00000000000181a8: rcr al, 0xc8; fstp st(0); pop rbx; pop rbp; ret; 
0x0000000000015c5d: rcr al, 0xc8; fstp st(0); ret; 
0x000000000001314f: rcr al, 0xc9; fstp st(0); add rsp, 0x40; pop rbx; ret; 
0x000000000001706d: rcr al, cl; leave; fstp st(0); ret; 
0x000000000001ea45: rcr bl, 0x3c; and al, 0xe8; ret 0xff44; 
0x0000000000019f21: rcr bl, 0x3f; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x000000000001b1d1: rcr bl, 0x6c; and al, 0xe8; fstp xword ptr [rdi]; ret; 
0x000000000001d4ac: rcr bl, 0x6d; mov al, 0xdb; insd dword ptr [rdi], dx; movabs al, byte ptr [0x24b840f906ddb]; add dh, bl; ret 0x6ddb; 
0x000000000000cb86: rcr bl, 0x7c; and al, 0x10; fstp xword ptr [rsp]; call 0xe060; add rsp, 0x28; ret; 
0x000000000001aed8: rcr byte ptr [rax + 0x41f20941], cl; or edx, eax; jne 0x1aef0; fld xword ptr [rip + 0xb39c8]; ret; 
0x0000000000190d10: rcr byte ptr [rax + rax - 0xf0c1800], 1; jmp qword ptr [rax]; 
0x0000000000074d24: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000051cc1: rcr byte ptr [rbx + 0x48], cl; cmovs eax, ecx; pop rbp; pop r12; ret; 
0x0000000000074979: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000002dfda: rcr byte ptr [rbx + 0x66], 1; movaps xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x00000000000e3d27: rcr byte ptr [rdi - 0x2b], 0x18; rol dword ptr [r15 + 0x16dac06c], cl; pop rbp; ret 0xec71; 
0x00000000001264c3: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136863: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce3: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa3: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d83: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b23: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6383: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2823: rcr byte ptr [rdx + 0x33bfc13e], cl; mov word ptr [rbx + rdx*8 + 0x3e], ds; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000020939: rcr byte ptr [rdx + 0x59], 0x89; ret 0x2cdb; 
0x000000000007776c: rcr byte ptr [rsi + 0x1be80008], 1; test byte ptr [rax + rax], 0xe8; mul byte ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0xf]; 
0x00000000000d34c5: rcr byte ptr [rsp + rdi + 0x5afe73ac], cl; ret; 
0x000000000001e52d: rcr cl, 0xc9; ret; 
0x0000000000012929: rcr dh, 0xe1; fdiv st(0); add rsp, 0x18; ret; 
0x0000000000012dff: rcr dh, 0xf9; faddp st(1); ret; 
0x000000000001d138: rcr dh, 1; ret 0x6ddb; 
0x00000000000e3d2f: rcr dl, 0x16; pop rbp; ret 0xec71; 
0x0000000000091702: rcr dword ptr [rax + 5], cl; mov r9b, 6; add ch, al; fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x0000000000051cc6: rcr dword ptr [rbp + 0x41], 0x5c; ret; 
0x000000000004aa1a: rcr dword ptr [rbp - 0xd], 0xf; pop rcx; ret 0xfc3; 
0x00000000000e77e9: rcr dword ptr [rbx + 0x23], 0xc4; imul edi, dword ptr [rdi - 0x49f847b8], 0x3f454387; add byte ptr [rax], al; add dl, al; ret; 
0x0000000000028086: rcr dword ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000004c7ef: rcr dword ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000093126: rcr dword ptr [rbx - 0x3e3d3b23], 1; mov ecx, 0x7bc1c4c2; pop rax; ret; 
0x0000000000039e42: rcr dword ptr [rbx], 0; add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x44]; 
0x00000000000b1b5f: rcr dword ptr [rcx + 0x2c], cl; ret 0x8d48; 
0x000000000008cc5e: rcr dword ptr [rcx + 0x7bc1c4c0], 0x58; ret; 
0x000000000008f8cd: rcr dword ptr [rcx + 0x7bc1c4c2], 0x59; ret; 
0x000000000009100f: rcr dword ptr [rcx + 0x7bc1c4f9], 1; pop rcx; ret 0x41c4; 
0x000000000008f2b3: rcr dword ptr [rcx - 0x663d3b3e], 1; cdq; ret; 
0x00000000000bcacb: rcr dword ptr [rdi + rbp*8 - 0x3b], cl; jns 0xbcafa; mov ebp, 0xc5c558fb; ret; 
0x0000000000091032: rcr dword ptr [rdi + riz*8 - 0x3c], cl; ret 0xb9c9; 
0x0000000000105ea5: rcr dword ptr [rdi], 0xd9; ret 0x6a2b; 
0x00000000000b7b8d: rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x00000000000920e1: rcr dword ptr [rsi + rcx*8 - 0x3c], cl; ret 0x9df1; 
0x00000000000ef32d: rcr dword ptr [rsi], 0x3f; add byte ptr [rax - 0x44], ah; or ch, ch; pop rbp; ret 0x493f; 
0x0000000000098baa: rcr dword ptr [rsp + rbx*8 - 0x3b], cl; jns 0x98bd8; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000af1eb: rcr dword ptr [rsp + rbx*8 - 0x3b], cl; jns 0xaf219; rol ch, cl; pop r8; ret 0xfbc5; 
0x00000000000e0638: rcr eax, 0x25; ret 0x7d54; 
0x0000000000016ca5: rcr eax, 0xc9; fsub dword ptr [rip + 0xb451e]; fmulp st(1); fld1; faddp st(1); ret; 
0x000000000002082d: rcr ebp, 0xd9; ret; 
0x000000000000e058: rcr ebp, 1; fsubr st(0); fdivr st(7); call qword ptr [rbp + 0x53]; 
0x0000000000012bd6: rcr ebx, 0x2d; adc ecx, dword ptr [rdi - 0x1e21fff5]; jns 0x12b49; fchs; ret; 
0x000000000001768f: rcr ebx, 0x2d; mov ch, byte ptr [rbp + 0xb]; add al, bl; ret 0xcad8; 
0x00000000000179c9: rcr ebx, 0x2d; push rax; push 0xb; add al, bl; ret 0xcad8; 
0x0000000000018725: rcr ebx, 0x6c; and al, 0x10; pop rbx; fmulp st(1); ret; 
0x000000000001d135: rcr ebx, 0x6d; rcr dh, 1; ret 0x6ddb; 
0x0000000000018fe6: rcr ebx, 0xac; and al, 0xf0; add byte ptr [rax], al; add al, bl; ret 0xacdb; 
0x0000000000050399: rcr ecx, 0x5c; and al, 0xf4; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000016e1d: rcr ecx, 0xee; fucompi st(2); fstp st(1); jbe 0x16d23; fchs; ret; 
0x0000000000016055: rcr ecx, 0xfc; fcompi st(2); jne 0x16096; fscale; fstp st(1); ret; 
0x00000000000d8974: rcr edi, 0x4b; cmp al, 0x3f; ret; 
0x00000000000134bf: rcr esi, 0xc9; fld xword ptr [rsp - 0x68]; faddp st(1); fdivp st(2); faddp st(1); ret; 
0x00000000000134c7: rcr esi, 0xfa; faddp st(1); ret; 
0x0000000000051cc5: rcr qword ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000002a21: ret 0; 
0x00000000000bb6e2: ret 0x103; 
0x00000000000d5dae: ret 0x103f; 
0x000000000010bd4b: ret 0x105; 
0x000000000004781a: ret 0x10e8; 
0x000000000010187a: ret 0x10f4; 
0x0000000000142ed2: ret 0x1110; 
0x0000000000069dc5: ret 0x1174; 
0x00000000000eb161: ret 0x1194; 
0x00000000000069f0: ret 0x11; 
0x00000000000ddc66: ret 0x11bf; 
0x00000000000b73bf: ret 0x11c5; 
0x000000000000f109: ret 0x11e8; 
0x0000000000033925: ret 0x11e9; 
0x00000000000db3eb: ret 0x126d; 
0x00000000000e3d3c: ret 0x1270; 
0x00000000000cd0a4: ret 0x1291; 
0x00000000000b9c55: ret 0x12e9; 
0x00000000000e7920: ret 0x12f9; 
0x000000000010d0ac: ret 0x1353; 
0x000000000008f109: ret 0x13c5; 
0x000000000008269d: ret 0x141; 
0x00000000000c9541: ret 0x145; 
0x00000000000d3d29: ret 0x1460; 
0x0000000000055e71: ret 0x1476; 
0x00000000000182bc: ret 0x148; 
0x00000000000cc043: ret 0x149a; 
0x00000000001083a1: ret 0x149d; 
0x00000000000362e6: ret 0x14e8; 
0x0000000000095604: ret 0x14e9; 
0x00000000000003ca: ret 0x152; 
0x000000000010e729: ret 0x1547; 
0x0000000000048760: ret 0x1576; 
0x00000000000aa5a4: ret 0x15; 
0x000000000000eb97: ret 0x15bf; 
0x00000000000df749: ret 0x15c4; 
0x00000000000017f7: ret 0x15dd; 
0x000000000006bb75: ret 0x15e8; 
0x00000000000e185c: ret 0x1614; 
0x00000000000ca5e0: ret 0x161c; 
0x00000000000272d7: ret 0x165; 
0x00000000000eef28: ret 0x16b4; 
0x000000000000ebeb: ret 0x16bf; 
0x0000000000086264: ret 0x16e8; 
0x000000000003504c: ret 0x16e9; 
0x00000000000d0863: ret 0x1769; 
0x000000000000e646: ret 0x1777; 
0x00000000000a9f42: ret 0x17; 
0x000000000002e5ca: ret 0x17eb; 
0x00000000000e2aea: ret 0x186e; 
0x00000000000ce6d6: ret 0x188; 
0x0000000000055f72: ret 0x18bf; 
0x000000000007cc62: ret 0x18e8; 
0x0000000000044e2c: ret 0x197a; 
0x000000000000ee9d: ret 0x19bf; 
0x0000000000088f84: ret 0x19c5; 
0x00000000000dfcab: ret 0x19cf; 
0x0000000000042693: ret 0x1a74; 
0x0000000000011c63: ret 0x1a77; 
0x000000000000ebfd: ret 0x1a8; 
0x00000000000fe9db: ret 0x1ab1; 
0x00000000000e88f8: ret 0x1b0f; 
0x0000000000100447: ret 0x1b88; 
0x000000000001aff9: ret 0x1b8; 
0x00000000000cec40: ret 0x1ba9; 
0x00000000000804c2: ret 0x1ba; 
0x00000000000ba1e8: ret 0x1bc5; 
0x000000000006f35f: ret 0x1be8; 
0x00000000000fffb9: ret 0x1be9; 
0x00000000000cfbb8: ret 0x1bf3; 
0x00000000000ece96: ret 0x1bf; 
0x00000000000887f6: ret 0x1c3; 
0x00000000000d5d7e: ret 0x1c3f; 
0x000000000008e339: ret 0x1c5; 
0x00000000000e6290: ret 0x1c5e; 
0x00000000000eada9: ret 0x1c76; 
0x000000000002761a: ret 0x1c8; 
0x0000000000027bd2: ret 0x1cb; 
0x000000000003c3ed: ret 0x1cd; 
0x0000000000058c5e: ret 0x1ce8; 
0x0000000000011fae: ret 0x1ce9; 
0x000000000003bb3a: ret 0x1d5; 
0x0000000000041a50: ret 0x1d74; 
0x00000000000e88c8: ret 0x1de7; 
0x00000000000128ad: ret 0x1de8; 
0x0000000000074d95: ret 0x1de9; 
0x000000000003855b: ret 0x1df; 
0x0000000000104e3a: ret 0x1e01; 
0x00000000000d6129: ret 0x1e3e; 
0x000000000003b1f1: ret 0x1e7; 
0x0000000000028d39: ret 0x1e8; 
0x00000000000b4a99: ret 0x1e9; 
0x0000000000004b18: ret 0x1e; 
0x000000000002cb06: ret 0x1eb; 
0x000000000000f33c: ret 0x1ee8; 
0x0000000000105203: ret 0x1f07; 
0x000000000001c943: ret 0x1f0f; 
0x00000000000951e0: ret 0x1f3; 
0x00000000000e3fce: ret 0x1f3f; 
0x0000000000069377: ret 0x1f75; 
0x00000000000c81d7: ret 0x1f77; 
0x00000000001144b1: ret 0x1f90; 
0x00000000000ddbf6: ret 0x1fbf; 
0x000000000007bc6b: ret 0x1fe8; 
0x0000000000026a6b: ret 0x1fe9; 
0x00000000000e098c: ret 0x203c; 
0x00000000000ef3b6: ret 0x203f; 
0x00000000000c579a: ret 0x2045; 
0x000000000000b2e4: ret 0x20; 
0x000000000007dc3a: ret 0x20e8; 
0x00000000000270c5: ret 0x2148; 
0x0000000000070c3e: ret 0x2149; 
0x00000000000cbaf1: ret 0x2168; 
0x00000000000dd4b9: ret 0x2179; 
0x00000000000f0c3b: ret 0x217d; 
0x000000000006ac04: ret 0x217e; 
0x00000000000bed8c: ret 0x21c5; 
0x000000000010e183: ret 0x2234; 
0x00000000000dd036: ret 0x223f; 
0x00000000000ccdb1: ret 0x2246; 
0x00000000000dc2eb: ret 0x226; 
0x00000000000eed4c: ret 0x227e; 
0x000000000005ea58: ret 0x22e8; 
0x0000000000074dd7: ret 0x22e9; 
0x00000000000d709a: ret 0x234a; 
0x0000000000088d7c: ret 0x23c5; 
0x00000000000790d7: ret 0x23e8; 
0x00000000000bcdff: ret 0x23e9; 
0x00000000000eb734: ret 0x23ed; 
0x0000000000034310: ret 0x2444; 
0x0000000000102e37: ret 0x2457; 
0x00000000000a6adf: ret 0x2464; 
0x0000000000100d6a: ret 0x2490; 
0x00000000000bf4c9: ret 0x24; 
0x000000000007a666: ret 0x24e8; 
0x000000000003153a: ret 0x24eb; 
0x00000000000d60ee: ret 0x253f; 
0x000000000009711e: ret 0x2574; 
0x00000000000ec9cc: ret 0x25a8; 
0x00000000000d1fc2: ret 0x25e7; 
0x0000000000078365: ret 0x25e8; 
0x000000000003593d: ret 0x25e9; 
0x00000000000cdba6: ret 0x2600; 
0x000000000010c267: ret 0x260f; 
0x000000000000d2f1: ret 0x2675; 
0x0000000000076334: ret 0x26e8; 
0x00000000000d5d26: ret 0x273f; 
0x00000000000d424b: ret 0x278; 
0x000000000011306a: ret 0x27; 
0x00000000000955b5: ret 0x27a; 
0x00000000000b36e3: ret 0x27e8; 
0x000000000010d5a6: ret 0x27ef; 
0x0000000000049dde: ret 0x280f; 
0x0000000000106782: ret 0x2814; 
0x00000000000e7c6a: ret 0x2846; 
0x0000000000045a85: ret 0x287a; 
0x0000000000112f40: ret 0x28b3; 
0x00000000000fe0fe: ret 0x28bb; 
0x000000000007d132: ret 0x28e8; 
0x00000000000cd129: ret 0x28f5; 
0x0000000000048be0: ret 0x290f; 
0x00000000000d3be9: ret 0x292b; 
0x0000000000084f56: ret 0x2941; 
0x00000000000962e6: ret 0x2948; 
0x00000000000e1f8c: ret 0x29b3; 
0x000000000010a46b: ret 0x29ce; 
0x0000000000072f51: ret 0x29e8; 
0x0000000000047de0: ret 0x29eb; 
0x00000000000e5a71: ret 0x2a49; 
0x000000000001930b: ret 0x2a74; 
0x000000000010b920: ret 0x2aa; 
0x00000000000dcbb8: ret 0x2ae4; 
0x00000000000b983d: ret 0x2ae9; 
0x00000000000cadb9: ret 0x2b19; 
0x000000000005019a: ret 0x2b74; 
0x0000000000051a32: ret 0x2b75; 
0x000000000007007b: ret 0x2b8; 
0x00000000001092fb: ret 0x2b9d; 
0x00000000001054e9: ret 0x2bb6; 
0x000000000000ec11: ret 0x2bbf; 
0x0000000000091b1a: ret 0x2bc5; 
0x00000000000c83a5: ret 0x2bf; 
0x00000000000cd2f6: ret 0x2c00; 
0x0000000000036f26: ret 0x2c2; 
0x000000000003476f: ret 0x2c3; 
0x00000000000dd046: ret 0x2c3f; 
0x0000000000090813: ret 0x2c7; 
0x0000000000049b59: ret 0x2c7e; 
0x0000000000107508: ret 0x2c88; 
0x0000000000001885: ret 0x2c9b; 
0x000000000002093d: ret 0x2cdb; 
0x00000000000eed8c: ret 0x2d7e; 
0x000000000006abc8: ret 0x2d7f; 
0x0000000000013ce7: ret 0x2ddb; 
0x000000000004bed3: ret 0x2de9; 
0x00000000000e8c94: ret 0x2e01; 
0x0000000000012512: ret 0x2e0f; 
0x00000000000123c5: ret 0x2e66; 
0x0000000000102ab4: ret 0x2e71; 
0x00000000000904cb: ret 0x2e7; 
0x000000000002aa18: ret 0x2e8; 
0x00000000000bc7f4: ret 0x2ee9; 
0x00000000000e26ac: ret 0x2f24; 
0x000000000009befa: ret 0x2f3; 
0x00000000000ddfc1: ret 0x2f4c; 
0x00000000000d7593: ret 0x2fa9; 
0x00000000000921a3: ret 0x2fe9; 
0x000000000010e744: ret 0x30e7; 
0x000000000005040d: ret 0x30e9; 
0x000000000009b3a6: ret 0x3148; 
0x00000000000e31bc: ret 0x314d; 
0x0000000000114876: ret 0x31b; 
0x00000000000bff54: ret 0x31c5; 
0x00000000000ebf3c: ret 0x3210; 
0x000000000010ef39: ret 0x3290; 
0x000000000010c5db: ret 0x32be; 
0x000000000006f128: ret 0x32e8; 
0x0000000000086673: ret 0x32eb; 
0x00000000000e77a4: ret 0x3361; 
0x00000000000a5652: ret 0x33c5; 
0x000000000004bcd7: ret 0x33e8; 
0x00000000000001df: ret 0x33e9; 
0x00000000000d5e2e: ret 0x343f; 
0x00000000000d777b: ret 0x3464; 
0x0000000000050d14: ret 0x34; 
0x00000000000de260: ret 0x34bb; 
0x000000000007d026: ret 0x34e8; 
0x00000000000c8ba0: ret 0x3575; 
0x0000000000048863: ret 0x35bf; 
0x000000000000c686: ret 0x35d8; 
0x0000000000046e55: ret 0x35e9; 
0x0000000000114116: ret 0x366c; 
0x00000000000ed412: ret 0x3687; 
0x0000000000106280: ret 0x369c; 
0x0000000000030d64: ret 0x36; 
0x0000000000055bc1: ret 0x36e9; 
0x00000000000eb108: ret 0x3725; 
0x00000000000c98e6: ret 0x3775; 
0x0000000000107c6c: ret 0x37a; 
0x00000000000440fd: ret 0x3875; 
0x000000000002e1e1: ret 0x389; 
0x0000000000010ce3: ret 0x38; 
0x00000000000dbc80: ret 0x38eb; 
0x0000000000014c1a: ret 0x3901; 
0x0000000000084007: ret 0x3903; 
0x0000000000085077: ret 0x3905; 
0x000000000000bc8a: ret 0x3914; 
0x000000000000b882: ret 0x3917; 
0x000000000009854e: ret 0x3941; 
0x000000000008474f: ret 0x3945; 
0x0000000000059239: ret 0x3948; 
0x0000000000097113: ret 0x394d; 
0x00000000000eb001: ret 0x397a; 
0x000000000010b456: ret 0x397d; 
0x0000000000087853: ret 0x39c5; 
0x000000000007db21: ret 0x39e8; 
0x00000000000de59e: ret 0x3a3f; 
0x00000000000fd8f9: ret 0x3a5; 
0x0000000000076eaa: ret 0x3a; 
0x000000000010e66c: ret 0x3ac5; 
0x0000000000053f20: ret 0x3ae8; 
0x00000000000d4e30: ret 0x3b36; 
0x00000000000526f5: ret 0x3ba; 
0x00000000001107e1: ret 0x3bb3; 
0x000000000008ce72: ret 0x3bc5; 
0x00000000000e4e7d: ret 0x3bda; 
0x00000000000e52fd: ret 0x3bf0; 
0x00000000000eac08: ret 0x3bf5; 
0x00000000000e439d: ret 0x3c02; 
0x00000000000ca8ba: ret 0x3c09; 
0x00000000000d8d65: ret 0x3c4b; 
0x00000000000d7945: ret 0x3c63; 
0x00000000000d2723: ret 0x3c84; 
0x00000000000d2b65: ret 0x3ca4; 
0x000000000010dfe5: ret 0x3cd4; 
0x00000000000468de: ret 0x3ce8; 
0x0000000000011f8e: ret 0x3ce9; 
0x00000000000ed93d: ret 0x3d30; 
0x00000000000e9d9d: ret 0x3d33; 
0x00000000000e9f05: ret 0x3d3d; 
0x0000000000001bf2: ret 0x3d4d; 
0x000000000009bf5c: ret 0x3d59; 
0x00000000000cc1b4: ret 0x3d6f; 
0x00000000000756c2: ret 0x3de9; 
0x00000000000e4aa4: ret 0x3e01; 
0x000000000006b377: ret 0x3e8; 
0x00000000000416bc: ret 0x3ee8; 
0x00000000000a6099: ret 0x3ee9; 
0x00000000000ee0ad: ret 0x3f18; 
0x00000000000ec7ed: ret 0x3f31; 
0x00000000000e86c5: ret 0x3f36; 
0x00000000000e8605: ret 0x3f37; 
0x00000000000e8545: ret 0x3f38; 
0x00000000000e8485: ret 0x3f39; 
0x00000000000e83c5: ret 0x3f3a; 
0x00000000000fcd06: ret 0x3f3f; 
0x00000000000e7eb5: ret 0x3f40; 
0x00000000000e7d35: ret 0x3f41; 
0x00000000000e7bb5: ret 0x3f42; 
0x00000000000ea1b3: ret 0x3f53; 
0x00000000000d5792: ret 0x3f7b; 
0x00000000000d9a05: ret 0x3f84; 
0x0000000000102f5d: ret 0x3f8d; 
0x0000000000105f04: ret 0x3f9; 
0x00000000000d6e0d: ret 0x3f9e; 
0x00000000000cf4f8: ret 0x3f; 
0x00000000000dab5d: ret 0x3fae; 
0x00000000000d6395: ret 0x3fbb; 
0x00000000001106f7: ret 0x3fbd; 
0x00000000000d0f85: ret 0x3fc6; 
0x00000000000e6075: ret 0x3fcb; 
0x00000000000fd18d: ret 0x3fd2; 
0x00000000000fd3cd: ret 0x3fd7; 
0x00000000000da02d: ret 0x3fe2; 
0x00000000000db2ad: ret 0x3fe5; 
0x00000000000cff95: ret 0x3fe6; 
0x0000000000073d4b: ret 0x3fe8; 
0x00000000000abc19: ret 0x3fe9; 
0x00000000000ff7dd: ret 0x3feb; 
0x00000000000cbdb7: ret 0x3fec; 
0x00000000000fe0ed: ret 0x3fee; 
0x00000000000ffd8d: ret 0x3ff1; 
0x00000000000d4f55: ret 0x3ff4; 
0x00000000000d318d: ret 0x3ff5; 
0x00000000000cc9d7: ret 0x3ff6; 
0x0000000000049ae9: ret 0x3ff; 
0x000000000010fc07: ret 0x3ffd; 
0x000000000010418d: ret 0x3ffe; 
0x0000000000013132: ret 0x3fff; 
0x00000000000ddffb: ret 0x4000; 
0x00000000000cbea7: ret 0x4001; 
0x000000000010cb2d: ret 0x4003; 
0x000000000010ce9d: ret 0x4007; 
0x00000000000fd275: ret 0x4008; 
0x00000000000ce667: ret 0x400c; 
0x00000000000fcd95: ret 0x4018; 
0x00000000001094cd: ret 0x402d; 
0x00000000000fc6d5: ret 0x4031; 
0x00000000000d606e: ret 0x403f; 
0x00000000000d443d: ret 0x40c0; 
0x00000000000eed6a: ret 0x40e6; 
0x00000000000eb13c: ret 0x40ed; 
0x00000000000d5699: ret 0x4159; 
0x000000000006b7a7: ret 0x415d; 
0x000000000002f6ea: ret 0x4166; 
0x00000000000005b6: ret 0x4180; 
0x00000000000e77fb: ret 0x41c3; 
0x0000000000089032: ret 0x41c4; 
0x00000000000eb294: ret 0x41ce; 
0x0000000000091891: ret 0x41e9; 
0x00000000001008e9: ret 0x41ee; 
0x0000000000022cf6: ret 0x41f2; 
0x00000000000e1199: ret 0x423c; 
0x00000000000cf1a4: ret 0x4273; 
0x0000000000107798: ret 0x427c; 
0x00000000000fc8d3: ret 0x42d8; 
0x000000000004b318: ret 0x42e8; 
0x000000000009d486: ret 0x4305; 
0x00000000000b8fa2: ret 0x438; 
0x00000000000a6c98: ret 0x43c4; 
0x000000000008dd1e: ret 0x43c5; 
0x000000000000e917: ret 0x43e9; 
0x0000000000018f66: ret 0x440f; 
0x00000000000dd3b1: ret 0x4433; 
0x00000000000eb664: ret 0x445c; 
0x00000000000234f6: ret 0x4466; 
0x0000000000049a4c: ret 0x4489; 
0x000000000002dbb9: ret 0x448b; 
0x00000000000234b6: ret 0x44f2; 
0x000000000004c1f3: ret 0x44f3; 
0x000000000001682c: ret 0x450f; 
0x00000000000d7d88: ret 0x455c; 
0x0000000000023534: ret 0x4566; 
0x00000000000e5e0a: ret 0x458e; 
0x00000000000d7bc2: ret 0x459a; 
0x00000000000e7da1: ret 0x45a6; 
0x00000000000489d5: ret 0x45e8; 
0x000000000010bb4a: ret 0x45ea; 
0x0000000000023692: ret 0x45f2; 
0x000000000003a7da: ret 0x466; 
0x00000000000dda78: ret 0x4695; 
0x000000000002ce1e: ret 0x46f2; 
0x0000000000101444: ret 0x4712; 
0x00000000000d6f10: ret 0x4749; 
0x000000000000c4ed: ret 0x4801; 
0x000000000009b098: ret 0x4803; 
0x00000000000c778f: ret 0x4804; 
0x000000000007e04f: ret 0x4805; 
0x000000000009850c: ret 0x4807; 
0x00000000000986ff: ret 0x4808; 
0x00000000000299c0: ret 0x4853; 
0x0000000000050c14: ret 0x4864; 
0x0000000000027226: ret 0x4866; 
0x00000000000d538b: ret 0x48b2; 
0x0000000000016ba5: ret 0x48d; 
0x0000000000075512: ret 0x48e8; 
0x0000000000019ba2: ret 0x48e9; 
0x000000000009acf3: ret 0x48f2; 
0x0000000000081912: ret 0x4901; 
0x00000000000c726f: ret 0x4904; 
0x00000000000c765b: ret 0x4908; 
0x00000000000ef336: ret 0x493f; 
0x00000000000fdfc1: ret 0x498; 
0x0000000000108056: ret 0x4990; 
0x00000000000cd5a9: ret 0x49; 
0x00000000000ee03b: ret 0x49d3; 
0x00000000000e4afb: ret 0x49da; 
0x00000000000307e9: ret 0x49e9; 
0x00000000000f1566: ret 0x4a3f; 
0x000000000007cb10: ret 0x4ae8; 
0x0000000000036918: ret 0x4ae9; 
0x0000000000113b74: ret 0x4b11; 
0x00000000000e8312: ret 0x4b4c; 
0x000000000008f0bb: ret 0x4bc5; 
0x00000000000473cf: ret 0x4be8; 
0x0000000000080baa: ret 0x4c01; 
0x00000000000c74af: ret 0x4c07; 
0x00000000000807b0: ret 0x4c10; 
0x0000000000097172: ret 0x4c20; 
0x000000000007d29a: ret 0x4c3; 
0x000000000000c7d4: ret 0x4cd8; 
0x00000000000bb01b: ret 0x4ce9; 
0x00000000000447ab: ret 0x4d01; 
0x0000000000080740: ret 0x4d02; 
0x00000000000d7b00: ret 0x4d0e; 
0x0000000000077aba: ret 0x4d3; 
0x00000000000cd63d: ret 0x4d; 
0x00000000000ecbd3: ret 0x4dab; 
0x000000000002e7fd: ret 0x4de8; 
0x000000000004d70a: ret 0x4e6; 
0x0000000000012726: ret 0x4e8; 
0x000000000010d1ac: ret 0x4eb; 
0x00000000000d8968: ret 0x4ee7; 
0x00000000000d933b: ret 0x4f00; 
0x00000000001006b7: ret 0x4f16; 
0x000000000010cd98: ret 0x4f48; 
0x000000000007de3b: ret 0x4fe8; 
0x0000000000028c1a: ret 0x50e8; 
0x00000000000c5479: ret 0x50e9; 
0x0000000000103095: ret 0x5106; 
0x000000000004a7aa: ret 0x512; 
0x00000000000ea9e1: ret 0x5190; 
0x00000000000e59d0: ret 0x51a3; 
0x00000000000ff890: ret 0x51c4; 
0x000000000005ef39: ret 0x51e8; 
0x000000000010a411: ret 0x522b; 
0x0000000000101d92: ret 0x527c; 
0x000000000002a718: ret 0x52e8; 
0x00000000001071f0: ret 0x530d; 
0x000000000007598a: ret 0x531; 
0x0000000000113bd5: ret 0x537e; 
0x0000000000073fba: ret 0x538; 
0x00000000000d8211: ret 0x53be; 
0x000000000006bf27: ret 0x53e8; 
0x000000000001c9ef: ret 0x53e9; 
0x00000000000c7340: ret 0x5422; 
0x0000000000019f71: ret 0x5489; 
0x000000000006eb06: ret 0x54e8; 
0x000000000004b406: ret 0x54e9; 
0x00000000000fccee: ret 0x553f; 
0x00000000000bd898: ret 0x5572; 
0x00000000000d9751: ret 0x55ab; 
0x0000000000130236: ret 0x55bf; 
0x00000000000fe1f9: ret 0x55e6; 
0x0000000000053412: ret 0x560f; 
0x000000000006fe8a: ret 0x562; 
0x00000000000a64d2: ret 0x563; 
0x000000000002adb6: ret 0x5641; 
0x00000000000374a7: ret 0x5672; 
0x00000000000e7433: ret 0x56ca; 
0x0000000000072283: ret 0x56e9; 
0x0000000000085d8a: ret 0x570f; 
0x00000000000d65d4: ret 0x5732; 
0x000000000010ea96: ret 0x576; 
0x00000000000dc529: ret 0x576c; 
0x000000000004dcaa: ret 0x57a; 
0x0000000000112446: ret 0x583f; 
0x0000000000112a9b: ret 0x5848; 
0x00000000001094e4: ret 0x58b4; 
0x000000000006f322: ret 0x58e8; 
0x00000000000a8482: ret 0x58e9; 
0x00000000000e404e: ret 0x593f; 
0x000000000010d034: ret 0x59a6; 
0x00000000000a8681: ret 0x59e9; 
0x00000000000d6d18: ret 0x5a22; 
0x00000000000ddc2e: ret 0x5abf; 
0x0000000000028ce8: ret 0x5ae9; 
0x00000000000d29c2: ret 0x5b4b; 
0x00000000000e8d99: ret 0x5bc3; 
0x0000000000090da2: ret 0x5bc5; 
0x00000000000e9756: ret 0x5bc; 
0x000000000007d5ff: ret 0x5be8; 
0x000000000004e147: ret 0x5be9; 
0x000000000010c58a: ret 0x5bf0; 
0x000000000000e51d: ret 0x5bf; 
0x00000000001104e4: ret 0x5c23; 
0x00000000000d5da6: ret 0x5c3f; 
0x00000000000ece76: ret 0x5cbf; 
0x00000000000640fe: ret 0x5ce8; 
0x000000000001b847: ret 0x5ce9; 
0x0000000000102259: ret 0x5d3a; 
0x000000000001b5d2: ret 0x5d5b; 
0x00000000000157ce: ret 0x5d8; 
0x0000000000016ff4: ret 0x5d9; 
0x00000000000690ca: ret 0x5dc; 
0x00000000000e4592: ret 0x5dd; 
0x000000000004bea3: ret 0x5de9; 
0x00000000000da410: ret 0x5e09; 
0x00000000000edd4b: ret 0x5e0f; 
0x0000000000068bca: ret 0x5e1; 
0x00000000000d0d2e: ret 0x5e3f; 
0x00000000000669ba: ret 0x5e4; 
0x00000000000b89c9: ret 0x5e9; 
0x0000000000067fca: ret 0x5ed; 
0x0000000000058dfc: ret 0x5ee8; 
0x00000000000426f1: ret 0x5ee9; 
0x00000000000658ba: ret 0x5f5; 
0x00000000000e5a66: ret 0x5fbf; 
0x00000000000298bb: ret 0x5fe8; 
0x0000000000066eca: ret 0x5fe; 
0x00000000000de4cb: ret 0x5fff; 
0x000000000010c809: ret 0x601d; 
0x00000000000de52e: ret 0x603f; 
0x00000000000e37ae: ret 0x6040; 
0x00000000000668ca: ret 0x604; 
0x0000000000105884: ret 0x6082; 
0x000000000007cdfa: ret 0x60e8; 
0x000000000008f1c7: ret 0x60e9; 
0x00000000000d4aba: ret 0x60f6; 
0x0000000000065cca: ret 0x610; 
0x00000000000e6293: ret 0x618b; 
0x0000000000063e29: ret 0x61e8; 
0x0000000000055f49: ret 0x61e9; 
0x0000000000063a8a: ret 0x626; 
0x00000000000e613c: ret 0x628e; 
0x00000000000dbd63: ret 0x62a7; 
0x0000000000102998: ret 0x62b5; 
0x0000000000032936: ret 0x6348; 
0x00000000000da67b: ret 0x6368; 
0x00000000000ab7ad: ret 0x63c4; 
0x00000000000ae38a: ret 0x63c; 
0x0000000000080c17: ret 0x63e9; 
0x00000000000e5684: ret 0x63f9; 
0x00000000000d8d6e: ret 0x643f; 
0x0000000000029943: ret 0x64e9; 
0x000000000006419a: ret 0x652; 
0x00000000001143e7: ret 0x6574; 
0x00000000000613ca: ret 0x659; 
0x00000000001149ab: ret 0x65ae; 
0x00000000000cb1a2: ret 0x65fc; 
0x0000000000036d17: ret 0x6601; 
0x0000000000028ae4: ret 0x6653; 
0x00000000000fd31e: ret 0x66bb; 
0x000000000001a12c: ret 0x66c3; 
0x00000000000eb961: ret 0x66e8; 
0x000000000000c16a: ret 0x66f3; 
0x000000000010906b: ret 0x66fd; 
0x00000000000de23a: ret 0x671a; 
0x000000000003ce44: ret 0x672; 
0x000000000005d9ba: ret 0x674; 
0x000000000002ded3: ret 0x67a; 
0x000000000002e783: ret 0x67e8; 
0x00000000000b4b33: ret 0x67e9; 
0x00000000000d6bf0: ret 0x6848; 
0x000000000006a49b: ret 0x688d; 
0x0000000000035efa: ret 0x68e9; 
0x000000000005bfba: ret 0x68e; 
0x000000000005d8ca: ret 0x694; 
0x0000000000011b41: ret 0x69bf; 
0x000000000005b1ba: ret 0x69c; 
0x00000000000757f1: ret 0x69e8; 
0x0000000000011f61: ret 0x69e9; 
0x0000000000105ea8: ret 0x6a2b; 
0x00000000000d9174: ret 0x6a8c; 
0x0000000000108a25: ret 0x6aa9; 
0x0000000000113f38: ret 0x6ac4; 
0x000000000010cc25: ret 0x6adc; 
0x00000000000517d0: ret 0x6ae8; 
0x000000000005beca: ret 0x6ae; 
0x0000000000103276: ret 0x6b0d; 
0x000000000010e442: ret 0x6b8e; 
0x000000000003ceb3: ret 0x6ba; 
0x00000000000e453e: ret 0x6bbb; 
0x0000000000087ca6: ret 0x6bc5; 
0x000000000005b0ca: ret 0x6bc; 
0x00000000000e6dea: ret 0x6c01; 
0x00000000000d377b: ret 0x6c06; 
0x0000000000106401: ret 0x6c54; 
0x000000000001318f: ret 0x6cdb; 
0x000000000006b70e: ret 0x6ce8; 
0x00000000000317ef: ret 0x6ce9; 
0x0000000000059bca: ret 0x6d1; 
0x00000000000dd489: ret 0x6d4f; 
0x00000000000577ba: ret 0x6d6; 
0x000000000008f0ca: ret 0x6d7; 
0x00000000000cf612: ret 0x6dbf; 
0x00000000000dc38a: ret 0x6dd4; 
0x000000000001d13a: ret 0x6ddb; 
0x000000000007691d: ret 0x6de8; 
0x00000000000bbeb5: ret 0x6de9; 
0x00000000000e371b: ret 0x6e1f; 
0x00000000000eb180: ret 0x6e33; 
0x000000000008fab9: ret 0x6ee9; 
0x00000000000db8c2: ret 0x6eed; 
0x00000000000d0b33: ret 0x6f54; 
0x00000000000d5dea: ret 0x6f5; 
0x00000000000d5e4e: ret 0x6fbf; 
0x00000000000d3fab: ret 0x6fd7; 
0x000000000006ae0b: ret 0x6fe8; 
0x000000000004bb2b: ret 0x6fe9; 
0x00000000000574ba: ret 0x703; 
0x00000000000cbc13: ret 0x705f; 
0x0000000000044f0d: ret 0x707a; 
0x00000000000467aa: ret 0x70e8; 
0x0000000000001c4f: ret 0x712e; 
0x00000000000ff4eb: ret 0x7150; 
0x00000000000e5833: ret 0x718d; 
0x00000000000dcc90: ret 0x71ac; 
0x000000000000f1a9: ret 0x71e8; 
0x000000000003ba0b: ret 0x71e9; 
0x0000000000112d8c: ret 0x7232; 
0x0000000000054510: ret 0x72e9; 
0x0000000000018c2d: ret 0x7301; 
0x00000000000894aa: ret 0x730; 
0x00000000000d0483: ret 0x7332; 
0x0000000000001798: ret 0x7358; 
0x000000000006fad7: ret 0x7374; 
0x0000000000088fe7: ret 0x73c5; 
0x0000000000029834: ret 0x73e9; 
0x0000000000018064: ret 0x7401; 
0x0000000000015c99: ret 0x7402; 
0x00000000000c7237: ret 0x7407; 
0x0000000000055d3a: ret 0x744; 
0x00000000000d708b: ret 0x7477; 
0x00000000000dea21: ret 0x74aa; 
0x0000000000106189: ret 0x74e3; 
0x00000000001013c5: ret 0x74e; 
0x000000000001af0f: ret 0x7501; 
0x0000000000042d65: ret 0x7580; 
0x000000000010c273: ret 0x7603; 
0x0000000000056109: ret 0x76e9; 
0x0000000000109db3: ret 0x7727; 
0x000000000002e539: ret 0x77a; 
0x000000000007d6e3: ret 0x77e8; 
0x000000000003df66: ret 0x77e9; 
0x00000000000d0b66: ret 0x783f; 
0x00000000000d4846: ret 0x7940; 
0x00000000000b67a2: ret 0x79a; 
0x000000000011260c: ret 0x79b8; 
0x000000000001216d: ret 0x79bf; 
0x0000000000087d12: ret 0x79c5; 
0x00000000000d40bc: ret 0x7a16; 
0x00000000000d6d03: ret 0x7a2f; 
0x00000000000121ab: ret 0x7abf; 
0x00000000000cd48e: ret 0x7b00; 
0x000000000009d94e: ret 0x7b1d; 
0x00000000000f13b2: ret 0x7b20; 
0x00000000000dbe8a: ret 0x7b4c; 
0x00000000000ff8e9: ret 0x7ba2; 
0x00000000000ef452: ret 0x7bbf; 
0x000000000008b2de: ret 0x7bc5; 
0x000000000007d0df: ret 0x7be8; 
0x00000000000c56af: ret 0x7be9; 
0x00000000000de0c3: ret 0x7c06; 
0x00000000000843b0: ret 0x7c0b; 
0x00000000000e6523: ret 0x7c3; 
0x000000000002e31b: ret 0x7c7; 
0x000000000004c2fa: ret 0x7c89; 
0x000000000004990f: ret 0x7cc; 
0x000000000005e80e: ret 0x7ce8; 
0x00000000000334ba: ret 0x7ce9; 
0x00000000000b3142: ret 0x7d0; 
0x00000000000e8289: ret 0x7d47; 
0x00000000000e063b: ret 0x7d54; 
0x0000000000103673: ret 0x7d7b; 
0x0000000000012451: ret 0x7dbf; 
0x000000000001e822: ret 0x7dd9; 
0x0000000000102cd8: ret 0x7e26; 
0x000000000003ce2f: ret 0x7e73; 
0x00000000000d3c23: ret 0x7e74; 
0x00000000000444f7: ret 0x7e7f; 
0x00000000000c1ce2: ret 0x7e9; 
0x00000000000c1a22: ret 0x7eb; 
0x000000000001dd97: ret 0x7ee9; 
0x00000000000d8f6e: ret 0x7f3f; 
0x00000000000e4a0c: ret 0x7f48; 
0x00000000000ff999: ret 0x7f63; 
0x0000000000107000: ret 0x7fa5; 
0x0000000000105211: ret 0x7fe3; 
0x0000000000059dfb: ret 0x7fe8; 
0x00000000000c6884: ret 0x7fff; 
0x00000000000d866b: ret 0x801f; 
0x0000000000112f99: ret 0x8073; 
0x000000000002a8ca: ret 0x80e8; 
0x000000000005006b: ret 0x8101; 
0x00000000000d0bde: ret 0x813f; 
0x000000000007dff0: ret 0x8141; 
0x00000000000c808a: ret 0x8148; 
0x00000000000c8fdc: ret 0x8149; 
0x00000000000c8d50: ret 0x8166; 
0x00000000000beed2: ret 0x817; 
0x000000000003751d: ret 0x820f; 
0x00000000000490da: ret 0x829; 
0x00000000000dc36c: ret 0x82a7; 
0x00000000000ece56: ret 0x82bf; 
0x00000000000e3a71: ret 0x82c8; 
0x000000000006bef8: ret 0x82e8; 
0x0000000000032281: ret 0x8301; 
0x000000000002e129: ret 0x830f; 
0x000000000001b94a: ret 0x8341; 
0x00000000001014da: ret 0x8347; 
0x000000000000e599: ret 0x8348; 
0x00000000000c7635: ret 0x8349; 
0x00000000000cd3f9: ret 0x83; 
0x000000000002322f: ret 0x83e9; 
0x00000000000ef356: ret 0x83f; 
0x00000000000148bf: ret 0x840f; 
0x00000000000fc52e: ret 0x843f; 
0x000000000008ee2c: ret 0x8440; 
0x00000000000d75a9: ret 0x84d0; 
0x00000000000d8644: ret 0x84f6; 
0x00000000000d63c4: ret 0x8507; 
0x000000000001b636: ret 0x850f; 
0x00000000000c90bb: ret 0x8545; 
0x000000000001b886: ret 0x8548; 
0x00000000000961cf: ret 0x854d; 
0x000000000008023e: ret 0x85c3; 
0x0000000000045695: ret 0x85e9; 
0x000000000002548b: ret 0x860f; 
0x00000000000d11eb: ret 0x8636; 
0x00000000000d0b86: ret 0x863f; 
0x00000000000e81f0: ret 0x8657; 
0x00000000000e48d8: ret 0x86ce; 
0x0000000000076ad4: ret 0x86e8; 
0x00000000000a7754: ret 0x86e9; 
0x0000000000103962: ret 0x86ed; 
0x0000000000010391: ret 0x870f; 
0x0000000000048a07: ret 0x872; 
0x000000000010871b: ret 0x874; 
0x00000000000955c1: ret 0x876; 
0x00000000000e02f8: ret 0x8773; 
0x000000000002db27: ret 0x87e9; 
0x000000000006a93b: ret 0x880f; 
0x000000000007cf8a: ret 0x882; 
0x00000000000e45ee: ret 0x883b; 
0x00000000000e5f06: ret 0x883f; 
0x0000000000002028: ret 0x8893; 
0x000000000007ced2: ret 0x88e8; 
0x000000000004ee4c: ret 0x890f; 
0x0000000000085e30: ret 0x8941; 
0x00000000000c7f21: ret 0x8944; 
0x000000000001b4a0: ret 0x8945; 
0x000000000000bb8a: ret 0x8948; 
0x0000000000019e9b: ret 0x8949; 
0x000000000000bb66: ret 0x894c; 
0x00000000000c5bc1: ret 0x894d; 
0x00000000000daf9c: ret 0x895b; 
0x000000000000c2a6: ret 0x8966; 
0x00000000000d1371: ret 0x8992; 
0x0000000000052d79: ret 0x89e9; 
0x000000000003eac7: ret 0x8a0f; 
0x00000000000cdf54: ret 0x8a26; 
0x00000000000e9c30: ret 0x8a76; 
0x00000000000769f1: ret 0x8a8; 
0x00000000000e4b5e: ret 0x8abb; 
0x0000000000047d49: ret 0x8ae9; 
0x000000000007242c: ret 0x8aeb; 
0x000000000000e455: ret 0x8b48; 
0x000000000007dfb5: ret 0x8b4c; 
0x00000000000cbef3: ret 0x8bd5; 
0x00000000000fc624: ret 0x8bed; 
0x00000000000c4fc8: ret 0x8c0f; 
0x0000000000032520: ret 0x8c74; 
0x0000000000104f68: ret 0x8cc; 
0x00000000000cf920: ret 0x8d1; 
0x00000000000ebeb8: ret 0x8d1d; 
0x00000000000a2fa1: ret 0x8d2; 
0x0000000000073e0a: ret 0x8d3; 
0x00000000000de60e: ret 0x8d3f; 
0x00000000000744d4: ret 0x8d40; 
0x000000000001a502: ret 0x8d48; 
0x0000000000083ee4: ret 0x8d49; 
0x00000000000818d2: ret 0x8d4c; 
0x0000000000081112: ret 0x8d4e; 
0x00000000000811a4: ret 0x8d4f; 
0x00000000000cd428: ret 0x8d61; 
0x00000000001108b5: ret 0x8d6c; 
0x00000000000431c0: ret 0x8d74; 
0x00000000000024cf: ret 0x8d8a; 
0x0000000000092d45: ret 0x8de9; 
0x0000000000031742: ret 0x8e0f; 
0x000000000005e782: ret 0x8e8; 
0x00000000000dd792: ret 0x8e90; 
0x000000000001df0d: ret 0x8e9; 
0x00000000001003ff: ret 0x8ecf; 
0x00000000000fd2c8: ret 0x8ed9; 
0x00000000000d3e8c: ret 0x8edb; 
0x00000000000d1460: ret 0x8ee4; 
0x000000000000e9cc: ret 0x8ee9; 
0x000000000001b93b: ret 0x8f0f; 
0x000000000007578a: ret 0x8fa; 
0x00000000000a05e1: ret 0x8fb; 
0x00000000000121cf: ret 0x8fbf; 
0x0000000000028d8b: ret 0x8fe8; 
0x0000000000032aa7: ret 0x8fe9; 
0x00000000000fe499: ret 0x8fe; 
0x000000000009fb62: ret 0x906; 
0x000000000006c45d: ret 0x90c3; 
0x00000000000c46e6: ret 0x90e9; 
0x0000000000086bda: ret 0x914; 
0x00000000000f0809: ret 0x918d; 
0x00000000000735ea: ret 0x91d; 
0x0000000000057df9: ret 0x91e8; 
0x00000000001105a4: ret 0x920c; 
0x000000000010c994: ret 0x9214; 
0x000000000010c04c: ret 0x921; 
0x0000000000109e35: ret 0x928e; 
0x000000000010416a: ret 0x9307; 
0x0000000000087b82: ret 0x939; 
0x000000000004b457: ret 0x93e8; 
0x00000000000d015e: ret 0x93f; 
0x000000000001b844: ret 0x940f; 
0x00000000000cedf5: ret 0x941c; 
0x000000000001882d: ret 0x944; 
0x0000000000019b31: ret 0x948; 
0x0000000000027f87: ret 0x949; 
0x0000000000069f33: ret 0x94c; 
0x000000000005956e: ret 0x94d; 
0x0000000000029913: ret 0x94e9; 
0x0000000000001e78: ret 0x9504; 
0x00000000000e60f9: ret 0x950d; 
0x000000000001b52a: ret 0x950f; 
0x000000000010e36b: ret 0x952e; 
0x00000000000e0048: ret 0x95e6; 
0x0000000000072505: ret 0x95e8; 
0x00000000000d9b73: ret 0x961a; 
0x00000000000d0106: ret 0x963f; 
0x0000000000049a9a: ret 0x965; 
0x00000000000644e4: ret 0x96e8; 
0x0000000000051ae1: ret 0x970f; 
0x000000000003fbec: ret 0x972; 
0x00000000000dd146: ret 0x973f; 
0x00000000000422de: ret 0x974; 
0x00000000000f0898: ret 0x97ba; 
0x000000000010cc32: ret 0x97c4; 
0x00000000000311b3: ret 0x97e8; 
0x00000000000d0822: ret 0x982; 
0x0000000000092f47: ret 0x9848; 
0x00000000000fca24: ret 0x9856; 
0x00000000000d6240: ret 0x9877; 
0x00000000000c1a1a: ret 0x98; 
0x0000000000001b5d: ret 0x98a3; 
0x00000000000426b7: ret 0x98e9; 
0x000000000008e3cb: ret 0x9981; 
0x000000000008f0a9: ret 0x9989; 
0x000000000008f293: ret 0x9991; 
0x000000000008a3eb: ret 0x9999; 
0x000000000008ffca: ret 0x99; 
0x000000000009014a: ret 0x99a1; 
0x000000000008fc9e: ret 0x99a9; 
0x0000000000092985: ret 0x99b1; 
0x00000000000943cc: ret 0x99b9; 
0x000000000008cc5d: ret 0x99c1; 
0x0000000000087309: ret 0x99c9; 
0x000000000008f2b2: ret 0x99d1; 
0x000000000008fc0b: ret 0x99d9; 
0x0000000000087bca: ret 0x99e1; 
0x000000000007c2c1: ret 0x99e8; 
0x00000000000cfe50: ret 0x9aaa; 
0x00000000000d52c6: ret 0x9abf; 
0x000000000003ee43: ret 0x9ae9; 
0x000000000000e3ba: ret 0x9b0f; 
0x00000000000eaef3: ret 0x9b31; 
0x00000000000dd1b6: ret 0x9b3f; 
0x00000000000edc14: ret 0x9b5c; 
0x0000000000095466: ret 0x9b99; 
0x0000000000087825: ret 0x9ba9; 
0x0000000000098d69: ret 0x9bb1; 
0x000000000009925a: ret 0x9bc1; 
0x000000000008a1bd: ret 0x9bd1; 
0x000000000008772a: ret 0x9be1; 
0x00000000000997e6: ret 0x9bf1; 
0x00000000000ef316: ret 0x9c3f; 
0x000000000009528b: ret 0x9c5; 
0x00000000000e39d1: ret 0x9c5c; 
0x000000000001268e: ret 0x9ce8; 
0x000000000002e21a: ret 0x9d0; 
0x00000000000da311: ret 0x9d71; 
0x000000000008fc06: ret 0x9d89; 
0x0000000000090556: ret 0x9d91; 
0x000000000009231f: ret 0x9d99; 
0x000000000008fe81: ret 0x9da1; 
0x0000000000091aab: ret 0x9db1; 
0x000000000008ff5b: ret 0x9db9; 
0x00000000000925ce: ret 0x9dc1; 
0x00000000000920dc: ret 0x9dd1; 
0x000000000008f38c: ret 0x9dd9; 
0x00000000000353c5: ret 0x9de9; 
0x00000000000920e5: ret 0x9df1; 
0x0000000000090482: ret 0x9df9; 
0x00000000001006e0: ret 0x9dff; 
0x0000000000043fe6: ret 0x9e0f; 
0x00000000000d6063: ret 0x9e14; 
0x000000000006e23a: ret 0x9e7; 
0x000000000006e7ec: ret 0x9ee8; 
0x000000000006ddea: ret 0x9ee; 
0x0000000000027063: ret 0x9eeb; 
0x0000000000104118: ret 0x9f24; 
0x000000000006d32a: ret 0x9f3; 
0x00000000000fc7c6: ret 0x9f3f; 
0x000000000004d697: ret 0x9f75; 
0x000000000004c31b: ret 0x9fe8; 
0x00000000000cdf32: ret 0xa000; 
0x000000000001262a: ret 0xa0e8; 
0x0000000000109b43: ret 0xa163; 
0x0000000000029bfa: ret 0xa16; 
0x00000000000d9694: ret 0xa180; 
0x00000000000668ba: ret 0xa19; 
0x00000000000ecdf6: ret 0xa1bf; 
0x000000000009cb8b: ret 0xa1c4; 
0x0000000000048789: ret 0xa1e8; 
0x00000000000ca4bb: ret 0xa1fc; 
0x000000000006633a: ret 0xa26; 
0x000000000006bed8: ret 0xa2e8; 
0x000000000006617a: ret 0xa2f; 
0x0000000000064a4a: ret 0xa39; 
0x00000000000fd23e: ret 0xa3bb; 
0x00000000000d785e: ret 0xa3bf; 
0x0000000000091d1a: ret 0xa3c5; 
0x00000000000718d7: ret 0xa3e8; 
0x00000000000d752a: ret 0xa436; 
0x00000000000e64b2: ret 0xa4a8; 
0x00000000000325b6: ret 0xa4e9; 
0x000000000006261a: ret 0xa53; 
0x000000000010dbc1: ret 0xa57; 
0x00000000000d9b91: ret 0xa5a5; 
0x00000000000fd8f8: ret 0xa5c2; 
0x00000000000e4023: ret 0xa5d7; 
0x00000000000740d5: ret 0xa5e8; 
0x00000000000ca4e9: ret 0xa61; 
0x00000000000fd988: ret 0xa67; 
0x000000000004cdda: ret 0xa6eb; 
0x00000000000d5fee: ret 0xa73f; 
0x0000000000112989: ret 0xa75f; 
0x00000000000d57fa: ret 0xa7e6; 
0x00000000000541b3: ret 0xa7e8; 
0x00000000000d1daa: ret 0xa7e9; 
0x0000000000050cfb: ret 0xa7eb; 
0x000000000010e1a3: ret 0xa7f8; 
0x000000000005e82a: ret 0xa81; 
0x00000000000d1aab: ret 0xa88a; 
0x000000000005cafa: ret 0xa89; 
0x00000000000ece16: ret 0xa8bf; 
0x0000000000043da2: ret 0xa8e8; 
0x000000000004638a: ret 0xa8e9; 
0x000000000004a542: ret 0xa8eb; 
0x00000000000d09c6: ret 0xa93f; 
0x000000000005c65a: ret 0xa99; 
0x000000000010b779: ret 0xa9aa; 
0x0000000000058aa1: ret 0xa9e8; 
0x000000000003358d: ret 0xa9e9; 
0x00000000000dc0e1: ret 0xa9fb; 
0x000000000001efe7: ret 0xa; 
0x00000000000dd06e: ret 0xaa3f; 
0x000000000005c10a: ret 0xaa7; 
0x000000000005a53a: ret 0xaaf; 
0x000000000005b11a: ret 0xab0; 
0x00000000000d096e: ret 0xab3f; 
0x000000000009495b: ret 0xabc5; 
0x000000000001f57a: ret 0xabc; 
0x00000000000b9fbc: ret 0xabe9; 
0x000000000010e956: ret 0xac19; 
0x00000000000ce055: ret 0xac23; 
0x00000000000d3f31: ret 0xac8d; 
0x0000000000018fef: ret 0xacdb; 
0x00000000000c496d: ret 0xace9; 
0x00000000000d5cd1: ret 0xad7f; 
0x00000000000d4089: ret 0xad8c; 
0x0000000000060dad: ret 0xade8; 
0x00000000001146f3: ret 0xadee; 
0x000000000002d799: ret 0xae0f; 
0x000000000002989d: ret 0xae9; 
0x00000000000d795e: ret 0xaebf; 
0x0000000000101d82: ret 0xaecf; 
0x000000000001c37a: ret 0xaee; 
0x000000000004e0f7: ret 0xaeeb; 
0x000000000001f88e: ret 0xaef; 
0x00000000000cd632: ret 0xaf00; 
0x00000000000e0b09: ret 0xaf2; 
0x0000000000106206: ret 0xaf45; 
0x00000000000f0c9a: ret 0xafe6; 
0x000000000005c3cb: ret 0xafe8; 
0x0000000000030883: ret 0xafe9; 
0x00000000000e6cd0: ret 0xb00; 
0x0000000000105b85: ret 0xb085; 
0x000000000001a606: ret 0xb0b; 
0x00000000000e672a: ret 0xb0d9; 
0x000000000004b4aa: ret 0xb0e8; 
0x0000000000027051: ret 0xb0eb; 
0x00000000000e6ae8: ret 0xb145; 
0x00000000001059d3: ret 0xb16; 
0x000000000004f552: ret 0xb18; 
0x00000000000e4eac: ret 0xb194; 
0x0000000000114261: ret 0xb1ba; 
0x0000000000029769: ret 0xb1e8; 
0x00000000000358b1: ret 0xb1e9; 
0x00000000000dea28: ret 0xb229; 
0x00000000000ddeeb: ret 0xb24f; 
0x000000000003cecf: ret 0xb273; 
0x00000000000eb0eb: ret 0xb2ad; 
0x0000000000104778: ret 0xb2ba; 
0x00000000000d8513: ret 0xb2d2; 
0x00000000000eb6aa: ret 0xb2e5; 
0x000000000006aad8: ret 0xb2e8; 
0x000000000004b3ab: ret 0xb2eb; 
0x0000000000086f16: ret 0xb305; 
0x000000000004d2b2: ret 0xb35; 
0x00000000000d5b69: ret 0xb391; 
0x0000000000017502: ret 0xb3c; 
0x00000000000d8e6e: ret 0xb43f; 
0x00000000000e8ee4: ret 0xb440; 
0x000000000001712a: ret 0xb4a; 
0x00000000000d801a: ret 0xb50d; 
0x000000000004e4f5: ret 0xb5e8; 
0x000000000004a416: ret 0xb5f; 
0x000000000001b574: ret 0xb60f; 
0x0000000000049eaa: ret 0xb64; 
0x0000000000017d0a: ret 0xb68; 
0x00000000000e8c42: ret 0xb69; 
0x00000000000df9e8: ret 0xb6cb; 
0x000000000000e9a4: ret 0xb6e9; 
0x000000000001773a: ret 0xb6f; 
0x0000000000112a90: ret 0xb704; 
0x0000000000019557: ret 0xb70f; 
0x0000000000016e6a: ret 0xb73; 
0x0000000000015c82: ret 0xb74; 
0x00000000000d81dc: ret 0xb79c; 
0x00000000000599c3: ret 0xb7e8; 
0x00000000000c5470: ret 0xb841; 
0x0000000000042a70: ret 0xb848; 
0x0000000000050ec3: ret 0xb8; 
0x000000000004338e: ret 0xb8c3; 
0x0000000000012612: ret 0xb8e8; 
0x00000000000fddf9: ret 0xb90b; 
0x00000000000c8215: ret 0xb941; 
0x0000000000019c4c: ret 0xb948; 
0x00000000000dcdec: ret 0xb978; 
0x00000000000914fe: ret 0xb981; 
0x000000000008fc89: ret 0xb989; 
0x000000000009296c: ret 0xb991; 
0x000000000008fc66: ret 0xb999; 
0x000000000008f0f7: ret 0xb9a1; 
0x000000000008db5d: ret 0xb9a9; 
0x000000000008f139: ret 0xb9b1; 
0x000000000008fbfb: ret 0xb9b9; 
0x000000000008db8b: ret 0xb9c1; 
0x000000000010d006: ret 0xb9c5; 
0x0000000000091036: ret 0xb9c9; 
0x000000000008f8f5: ret 0xb9d1; 
0x00000000000908f5: ret 0xb9d9; 
0x0000000000090a4c: ret 0xb9e1; 
0x000000000008f341: ret 0xb9f1; 
0x000000000008b5e9: ret 0xb9f9; 
0x000000000000f392: ret 0xb; 
0x00000000000d75f9: ret 0xba1b; 
0x00000000000f1506: ret 0xba3f; 
0x000000000010046f: ret 0xba52; 
0x00000000000fc6da: ret 0xba70; 
0x0000000000114784: ret 0xbab4; 
0x000000000011338e: ret 0xbabf; 
0x00000000000723a0: ret 0xbae8; 
0x0000000000028c8b: ret 0xbaeb; 
0x00000000000d34b2: ret 0xbb19; 
0x00000000000287da: ret 0xbb1; 
0x000000000002c1da: ret 0xbb2; 
0x0000000000080d95: ret 0xbb41; 
0x00000000000d8673: ret 0xbb5e; 
0x00000000000d03ec: ret 0xbb6c; 
0x0000000000100403: ret 0xbba; 
0x000000000008d1ac: ret 0xbbc5; 
0x0000000000027a2a: ret 0xbbc; 
0x000000000004a52f: ret 0xbbeb; 
0x00000000000e46ad: ret 0xbbf1; 
0x00000000000dc275: ret 0xbc01; 
0x00000000000db375: ret 0xbc24; 
0x0000000000110211: ret 0xbc29; 
0x00000000000704bf: ret 0xbc41; 
0x00000000000dbec5: ret 0xbc42; 
0x00000000000d53f5: ret 0xbc56; 
0x00000000000b3a07: ret 0xbc5; 
0x000000000005187e: ret 0xbce8; 
0x00000000000ecf3d: ret 0xbd2e; 
0x00000000000e952d: ret 0xbd2f; 
0x00000000000eaec5: ret 0xbd31; 
0x000000000010f7b6: ret 0xbd86; 
0x0000000000090a5c: ret 0xbd91; 
0x000000000008f2cb: ret 0xbdb1; 
0x0000000000110636: ret 0xbdb4; 
0x0000000000090e8c: ret 0xbdc9; 
0x00000000000e0edb: ret 0xbdcf; 
0x0000000000092c88: ret 0xbdd1; 
0x0000000000090548: ret 0xbdd9; 
0x000000000009206d: ret 0xbde8; 
0x000000000008f395: ret 0xbdf9; 
0x00000000000e20ed: ret 0xbe2e; 
0x00000000000e341d: ret 0xbe2f; 
0x00000000000de566: ret 0xbe3f; 
0x00000000000d3903: ret 0xbe6d; 
0x0000000000074abd: ret 0xbe74; 
0x000000000007d54f: ret 0xbe8; 
0x000000000004739a: ret 0xbe9; 
0x000000000004d2be: ret 0xbeb; 
0x000000000000f09c: ret 0xbee8; 
0x00000000000d09b8: ret 0xbef5; 
0x0000000000015f69: ret 0xbf0f; 
0x00000000000f06ed: ret 0xbf3e; 
0x00000000000e5f16: ret 0xbf3f; 
0x00000000000e4855: ret 0xbf50; 
0x00000000000e4815: ret 0xbf51; 
0x00000000000e47d5: ret 0xbf52; 
0x000000000010c2e3: ret 0xbf7d; 
0x000000000010345d: ret 0xbf8b; 
0x00000000000d8815: ret 0xbf95; 
0x00000000000d8b85: ret 0xbf9e; 
0x00000000000cf4d8: ret 0xbf; 
0x00000000000d554d: ret 0xbfb3; 
0x000000000010f7d7: ret 0xbfba; 
0x00000000000e1be8: ret 0xbfbb; 
0x000000000010f817: ret 0xbfbc; 
0x00000000000d675d: ret 0xbfcf; 
0x000000000005928c: ret 0xbfd1; 
0x00000000000db44d: ret 0xbfd2; 
0x00000000000e5855: ret 0xbfd3; 
0x00000000000d924d: ret 0xbfd4; 
0x0000000000026a8b: ret 0xbfe9; 
0x00000000000cbe77: ret 0xbff3; 
0x00000000000ceb97: ret 0xc000; 
0x0000000000059486: ret 0xc002; 
0x00000000000cf041: ret 0xc006; 
0x0000000000018b7e: ret 0xc031; 
0x0000000000108e36: ret 0xc04a; 
0x00000000000d936c: ret 0xc063; 
0x00000000000508ac: ret 0xc083; 
0x000000000000cc6a: ret 0xc084; 
0x0000000000011baf: ret 0xc085; 
0x000000000002ae34: ret 0xc089; 
0x0000000000016656: ret 0xc0d9; 
0x00000000000cf1b6: ret 0xc0e7; 
0x00000000000697ba: ret 0xc0e8; 
0x000000000009cece: ret 0xc103; 
0x00000000000d8eee: ret 0xc13f; 
0x000000000001320e: ret 0xc148; 
0x00000000000c71ee: ret 0xc149; 
0x000000000009c04d: ret 0xc158; 
0x0000000000027bfc: ret 0xc181; 
0x000000000002c76c: ret 0xc189; 
0x0000000000088fd9: ret 0xc1c4; 
0x000000000008db08: ret 0xc1c5; 
0x000000000000c6d0: ret 0xc1d8; 
0x000000000001ae72: ret 0xc1d9; 
0x00000000000152e6: ret 0xc1de; 
0x00000000000c4aad: ret 0xc220; 
0x00000000000d1aa9: ret 0xc247; 
0x00000000000df62b: ret 0xc256; 
0x000000000010c807: ret 0xc267; 
0x00000000000db918: ret 0xc272; 
0x0000000000050342: ret 0xc289; 
0x00000000000ef3db: ret 0xc2a; 
0x000000000008f2b5: ret 0xc2c4; 
0x0000000000016ff2: ret 0xc2d8; 
0x000000000000c61e: ret 0xc2d9; 
0x000000000001a1e5: ret 0xc2de; 
0x00000000000e453c: ret 0xc2f9; 
0x0000000000042204: ret 0xc310; 
0x00000000000486b5: ret 0xc35b; 
0x00000000000fda12: ret 0xc36; 
0x00000000000fe3c4: ret 0xc374; 
0x00000000000e160b: ret 0xc387; 
0x00000000000a8363: ret 0xc3c4; 
0x0000000000087cf2: ret 0xc3c5; 
0x00000000000129e0: ret 0xc3d8; 
0x000000000000c6dc: ret 0xc3d9; 
0x00000000000e5f44: ret 0xc3df; 
0x0000000000049557: ret 0xc3e8; 
0x00000000000bb95f: ret 0xc3e9; 
0x0000000000100e21: ret 0xc3f1; 
0x0000000000022eb8: ret 0xc3f3; 
0x00000000000a4870: ret 0xc400; 
0x00000000000ff769: ret 0xc43b; 
0x00000000000a91ac: ret 0xc450; 
0x00000000000a88b0: ret 0xc460; 
0x00000000000a8570: ret 0xc470; 
0x0000000000109bc9: ret 0xc49a; 
0x000000000001adac: ret 0xc4d9; 
0x00000000000d68e9: ret 0xc4e2; 
0x0000000000054096: ret 0xc4e8; 
0x00000000000a6ead: ret 0xc4f0; 
0x00000000000a14dc: ret 0xc500; 
0x00000000000bd1d5: ret 0xc501; 
0x00000000000bd3d4: ret 0xc502; 
0x00000000000ef654: ret 0xc50b; 
0x00000000000a0fd3: ret 0xc510; 
0x00000000000af527: ret 0xc530; 
0x0000000000038d02: ret 0xc54; 
0x00000000000a5459: ret 0xc550; 
0x00000000000d74dc: ret 0xc5a4; 
0x000000000001ae1e: ret 0xc5d8; 
0x00000000000653b5: ret 0xc5e8; 
0x0000000000011f05: ret 0xc5e9; 
0x000000000002fa79: ret 0xc5eb; 
0x00000000000d0cd6: ret 0xc63f; 
0x00000000000d634c: ret 0xc665; 
0x00000000000fc679: ret 0xc69a; 
0x000000000007c794: ret 0xc6e8; 
0x000000000009140c: ret 0xc6e9; 
0x0000000000085807: ret 0xc705; 
0x000000000008082d: ret 0xc748; 
0x000000000009c081: ret 0xc759; 
0x0000000000027692: ret 0xc76; 
0x000000000002f313: ret 0xc7e8; 
0x00000000000a7a13: ret 0xc7e9; 
0x00000000000843a9: ret 0xc839; 
0x00000000000d5dfe: ret 0xc83f; 
0x00000000001074e5: ret 0xc883; 
0x0000000000019e44: ret 0xc889; 
0x000000000001a215: ret 0xc8d8; 
0x000000000010cb12: ret 0xc999; 
0x00000000000f1379: ret 0xc9c7; 
0x0000000000012f8c: ret 0xc9d8; 
0x0000000000012979: ret 0xc9d9; 
0x0000000000015972: ret 0xc9dc; 
0x00000000000128fd: ret 0xc9de; 
0x00000000000a7e11: ret 0xc9e9; 
0x0000000000006f30: ret 0xc; 
0x0000000000042282: ret 0xca08; 
0x00000000000dd17e: ret 0xca3f; 
0x0000000000050b66: ret 0xca81; 
0x00000000000138f5: ret 0xcad8; 
0x000000000000c804: ret 0xcad9; 
0x000000000000c682: ret 0xcadc; 
0x000000000000c7ee: ret 0xcade; 
0x00000000000ea291: ret 0xcae2; 
0x00000000000690b0: ret 0xcae8; 
0x00000000000c54ff: ret 0xcae9; 
0x0000000000028c7b: ret 0xcaeb; 
0x000000000010dc4a: ret 0xcb99; 
0x000000000009101b: ret 0xcbc5; 
0x000000000001618c: ret 0xcbd8; 
0x000000000001a1e7: ret 0xcbd9; 
0x0000000000012975: ret 0xcbde; 
0x00000000000596bf: ret 0xcbe8; 
0x0000000000080caf: ret 0xcbe9; 
0x00000000000dde9b: ret 0xcc23; 
0x00000000001125a8: ret 0xcc6f; 
0x000000000001a814: ret 0xccd8; 
0x000000000000c5dc: ret 0xccd9; 
0x000000000001a396: ret 0xccde; 
0x00000000000ab68c: ret 0xcce9; 
0x0000000000027035: ret 0xcceb; 
0x00000000000dd6ac: ret 0xcd03; 
0x0000000000014d36: ret 0xcdd8; 
0x000000000000c5b0: ret 0xcdd9; 
0x00000000000ef3d6: ret 0xce3f; 
0x0000000000049587: ret 0xce72; 
0x00000000000d1cb0: ret 0xce89; 
0x000000000002a1b6: ret 0xceb; 
0x0000000000108eec: ret 0xcec; 
0x000000000001a386: ret 0xced8; 
0x000000000004e56c: ret 0xcee8; 
0x000000000004cdd2: ret 0xceeb; 
0x0000000000106002: ret 0xcf35; 
0x000000000006f096: ret 0xcf74; 
0x00000000000d71b2: ret 0xcfc1; 
0x0000000000075ebb: ret 0xcfe8; 
0x000000000004b48b: ret 0xcfe9; 
0x00000000000c452e: ret 0xd020; 
0x00000000000d9cc0: ret 0xd04e; 
0x0000000000012ca3: ret 0xd089; 
0x00000000000d744c: ret 0xd0dc; 
0x000000000004a51a: ret 0xd0eb; 
0x00000000000dd5c0: ret 0xd0f6; 
0x0000000000042279: ret 0xd109; 
0x000000000004408e: ret 0xd175; 
0x0000000000086a73: ret 0xd189; 
0x000000000004d1f3: ret 0xd201; 
0x000000000010dbeb: ret 0xd212; 
0x00000000000c8af4: ret 0xd231; 
0x00000000000fcd0e: ret 0xd23f; 
0x0000000000101c97: ret 0xd26e; 
0x000000000001b7a8: ret 0xd284; 
0x0000000000021c55: ret 0xd285; 
0x00000000000d3ab8: ret 0xd2b4; 
0x000000000002aa48: ret 0xd2e8; 
0x000000000008247d: ret 0xd301; 
0x00000000000d0a1e: ret 0xd33f; 
0x00000000000c79b3: ret 0xd348; 
0x00000000000c751d: ret 0xd349; 
0x00000000000dda28: ret 0xd352; 
0x000000000001b30c: ret 0xd389; 
0x00000000000925e4: ret 0xd3c5; 
0x0000000000033163: ret 0xd3e9; 
0x0000000000102e02: ret 0xd490; 
0x000000000008b66a: ret 0xd4; 
0x000000000002ac76: ret 0xd4e8; 
0x000000000003d909: ret 0xd4e9; 
0x0000000000029535: ret 0xd4eb; 
0x0000000000084c1d: ret 0xd575; 
0x00000000000281ef: ret 0xd589; 
0x00000000000dd08e: ret 0xd5bf; 
0x00000000000125f5: ret 0xd5e8; 
0x0000000000028d6d: ret 0xd5e9; 
0x00000000000eaa49: ret 0xd64e; 
0x00000000000519e1: ret 0xd675; 
0x000000000002702b: ret 0xd676; 
0x0000000000050d53: ret 0xd689; 
0x00000000000fd11c: ret 0xd6a6; 
0x00000000000c46a0: ret 0xd6e9; 
0x0000000000085ced: ret 0xd775; 
0x00000000000eb0c2: ret 0xd77f; 
0x00000000000ca4f2: ret 0xd796; 
0x00000000000fdad8: ret 0xd7a9; 
0x0000000000072c83: ret 0xd7e8; 
0x00000000000d9d40: ret 0xd7f0; 
0x00000000000fd1b0: ret 0xd82b; 
0x00000000000cc954: ret 0xd832; 
0x0000000000013045: ret 0xd889; 
0x000000000001504d: ret 0xd8dd; 
0x000000000003728a: ret 0xd8e9; 
0x00000000000cdd80: ret 0xd96e; 
0x000000000004a511: ret 0xd976; 
0x000000000005248d: ret 0xd989; 
0x0000000000025ccb: ret 0xd; 
0x000000000001bd33: ret 0xda09; 
0x00000000000d954a: ret 0xda57; 
0x0000000000059647: ret 0xda80; 
0x0000000000019e40: ret 0xdaf7; 
0x00000000000e5108: ret 0xdb73; 
0x000000000007c596: ret 0xdb84; 
0x00000000000217fb: ret 0xdb85; 
0x0000000000092f6a: ret 0xdbc5; 
0x00000000000ecdd6: ret 0xdbf; 
0x00000000000e57cb: ret 0xdc68; 
0x0000000000103265: ret 0xdc86; 
0x00000000000cb020: ret 0xdc93; 
0x00000000000634ae: ret 0xdce8; 
0x00000000000d409e: ret 0xdd40; 
0x0000000000106d53: ret 0xdd81; 
0x000000000000c6c8: ret 0xdd8; 
0x00000000000e49dc: ret 0xdda0; 
0x00000000000e0ceb: ret 0xddf4; 
0x00000000000fc813: ret 0xddff; 
0x000000000010f685: ret 0xde37; 
0x00000000000d0b0e: ret 0xde3f; 
0x00000000000e59fb: ret 0xde59; 
0x000000000010b643: ret 0xde65; 
0x000000000000f07c: ret 0xdee8; 
0x00000000000bd144: ret 0xdee9; 
0x00000000000fcd26: ret 0xdf3f; 
0x0000000000014b3e: ret 0xdf75; 
0x0000000000048c57: ret 0xdf89; 
0x00000000000ec53a: ret 0xe06f; 
0x00000000000dc8da: ret 0xe07c; 
0x000000000009d00b: ret 0xe083; 
0x000000000019a2f4: ret 0xe0a; 
0x00000000000174ce: ret 0xe0c1; 
0x0000000000013185: ret 0xe0d9; 
0x000000000007db7a: ret 0xe0e8; 
0x0000000000109272: ret 0xe192; 
0x0000000000086ba7: ret 0xe1c4; 
0x00000000000d6eba: ret 0xe1cb; 
0x000000000000c620: ret 0xe1d8; 
0x0000000000014b9b: ret 0xe1d9; 
0x0000000000017036: ret 0xe1de; 
0x000000000004f459: ret 0xe1e8; 
0x00000000000dba3c: ret 0xe243; 
0x0000000000019e34: ret 0xe281; 
0x000000000009848c: ret 0xe283; 
0x00000000000217f6: ret 0xe2c1; 
0x0000000000087618: ret 0xe2c4; 
0x00000000001047da: ret 0xe30e; 
0x0000000000100db4: ret 0xe31c; 
0x00000000000e48ee: ret 0xe33b; 
0x000000000009db96: ret 0xe3c4; 
0x00000000000877fa: ret 0xe3c5; 
0x0000000000075577: ret 0xe3e8; 
0x00000000000db9ea: ret 0xe421; 
0x0000000000041a6c: ret 0xe475; 
0x0000000000036c7e: ret 0xe4e9; 
0x00000000000d9508: ret 0xe557; 
0x0000000000043ee8: ret 0xe575; 
0x00000000000c8926: ret 0xe583; 
0x00000000000df011: ret 0xe5b3; 
0x00000000000591a5: ret 0xe5e8; 
0x000000000000e975: ret 0xe5e9; 
0x00000000000150aa: ret 0xe680; 
0x00000000000695cc: ret 0xe681; 
0x0000000000100fc8: ret 0xe6aa; 
0x00000000000ece36: ret 0xe6bf; 
0x0000000000059794: ret 0xe6e8; 
0x000000000001aedf: ret 0xe75; 
0x00000000000de974: ret 0xe7a8; 
0x00000000000dde63: ret 0xe7cc; 
0x00000000000723b3: ret 0xe7e8; 
0x0000000000042668: ret 0xe7e9; 
0x0000000000101cd6: ret 0xe7fc; 
0x00000000000cd2b4: ret 0xe832; 
0x0000000000080f1d: ret 0xe883; 
0x000000000007d85a: ret 0xe8; 
0x000000000004a69b: ret 0xe8c1; 
0x0000000000014b17: ret 0xe8d9; 
0x00000000000c4b29: ret 0xe8db; 
0x0000000000054fa2: ret 0xe8e8; 
0x00000000000a56ef: ret 0xe8e9; 
0x000000000006a01d: ret 0xe940; 
0x00000000000ca3e4: ret 0xe943; 
0x000000000005205d: ret 0xe981; 
0x0000000000089069: ret 0xe9c5; 
0x0000000000112c14: ret 0xe9cd; 
0x00000000000eb449: ret 0xe9d; 
0x00000000000195cc: ret 0xe9df; 
0x0000000000055761: ret 0xe9e8; 
0x00000000000bc439: ret 0xe9e9; 
0x000000000010d562: ret 0xea19; 
0x00000000000ef396: ret 0xea3f; 
0x000000000010d852: ret 0xea42; 
0x000000000001b59d: ret 0xea74; 
0x000000000001a978: ret 0xeac1; 
0x000000000009abb5: ret 0xead1; 
0x00000000000dc159: ret 0xead4; 
0x000000000000c67c: ret 0xeadc; 
0x0000000000108e2c: ret 0xeaf; 
0x000000000010e835: ret 0xeb42; 
0x000000000009d6b6: ret 0xebc5; 
0x00000000000ff7ec: ret 0xebd5; 
0x000000000006aa7f: ret 0xebe8; 
0x000000000007b57d: ret 0xebe9; 
0x00000000000ff804: ret 0xebf2; 
0x00000000000d0bbe: ret 0xec3f; 
0x0000000000110bc2: ret 0xec4e; 
0x000000000010bc07: ret 0xec6f; 
0x00000000000e3d33: ret 0xec71; 
0x000000000000c6e0: ret 0xecdc; 
0x000000000002977e: ret 0xece8; 
0x000000000004c6de: ret 0xece9; 
0x000000000001982e: ret 0xed31; 
0x000000000004ba8b: ret 0xed85; 
0x0000000000014a72: ret 0xeddf; 
0x000000000004be4d: ret 0xede8; 
0x0000000000114845: ret 0xee38; 
0x0000000000098707: ret 0xee75; 
0x000000000002e3bc: ret 0xee8; 
0x00000000000ddc23: ret 0xee95; 
0x0000000000050d58: ret 0xeec1; 
0x00000000000d06f1: ret 0xeed9; 
0x000000000007a26c: ret 0xeee8; 
0x00000000000e0509: ret 0xeee9; 
0x00000000001036da: ret 0xeeed; 
0x00000000000da8d8: ret 0xeef5; 
0x00000000000d8dee: ret 0xef3f; 
0x00000000000ffb04: ret 0xefd3; 
0x0000000000070e6b: ret 0xefe8; 
0x0000000000112314: ret 0xefeb; 
0x00000000000e6b54: ret 0xeff6; 
0x00000000000e6b14: ret 0xeff7; 
0x00000000000e6624: ret 0xf005; 
0x00000000000e65a4: ret 0xf006; 
0x0000000000018162: ret 0xf01; 
0x0000000000015be1: ret 0xf02; 
0x00000000000dd41a: ret 0xf030; 
0x0000000000100c60: ret 0xf0bd; 
0x000000000007ce6a: ret 0xf0e8; 
0x0000000000026ba2: ret 0xf0e9; 
0x0000000000107968: ret 0xf124; 
0x00000000000fdd7c: ret 0xf127; 
0x00000000000801ee: ret 0xf129; 
0x00000000000e6e48: ret 0xf138; 
0x00000000001076bc: ret 0xf1a9; 
0x00000000000999bd: ret 0xf1c5; 
0x000000000001ff88: ret 0xf1d8; 
0x0000000000013ba9: ret 0xf1de; 
0x0000000000029869: ret 0xf1e8; 
0x000000000009b75c: ret 0xf1f6; 
0x000000000004c5ba: ret 0xf201; 
0x0000000000036f27: ret 0xf202; 
0x000000000008409a: ret 0xf208; 
0x0000000000018efe: ret 0xf209; 
0x00000000000cc7b1: ret 0xf20c; 
0x00000000000e2c3c: ret 0xf256; 
0x00000000001005b4: ret 0xf280; 
0x00000000000cc806: ret 0xf2a5; 
0x00000000000d78de: ret 0xf2bf; 
0x00000000000d53f0: ret 0xf2c5; 
0x000000000008510a: ret 0xf304; 
0x0000000000085af8: ret 0xf30a; 
0x00000000000f14e4: ret 0xf357; 
0x00000000000809ba: ret 0xf375; 
0x0000000000088911: ret 0xf3c5; 
0x0000000000072f97: ret 0xf3e8; 
0x000000000000f126: ret 0xf40; 
0x000000000001918b: ret 0xf41; 
0x0000000000019195: ret 0xf45; 
0x0000000000107308: ret 0xf46e; 
0x00000000000f0c0a: ret 0xf481; 
0x0000000000074887: ret 0xf48; 
0x0000000000046426: ret 0xf4e8; 
0x000000000002ddba: ret 0xf4e9; 
0x0000000000080438: ret 0xf575; 
0x0000000000028c05: ret 0xf5e8; 
0x000000000007533d: ret 0xf5e9; 
0x00000000000db91a: ret 0xf5ed; 
0x00000000000d3984: ret 0xf61c; 
0x00000000000ef2f6: ret 0xf63f; 
0x000000000000ef6b: ret 0xf66; 
0x00000000000ca262: ret 0xf68f; 
0x0000000000075764: ret 0xf6e8; 
0x000000000009a2da: ret 0xf715; 
0x0000000000071f60: ret 0xf748; 
0x00000000000e8f7a: ret 0xf792; 
0x0000000000047923: ret 0xf7e8; 
0x00000000000f0438: ret 0xf835; 
0x00000000000874da: ret 0xf843; 
0x000000000011364b: ret 0xf874; 
0x000000000000d2e9: ret 0xf883; 
0x00000000000e78a8: ret 0xf8b7; 
0x0000000000031f6a: ret 0xf8c1; 
0x000000000008925e: ret 0xf8c5; 
0x0000000000103aa2: ret 0xf8f6; 
0x00000000001058fc: ret 0xf90d; 
0x000000000010561c: ret 0xf990; 
0x00000000000219af: ret 0xf9c1; 
0x00000000000891a8: ret 0xf9c5; 
0x000000000001dce8: ret 0xf9dc; 
0x000000000001a6e7: ret 0xf9de; 
0x00000000000563b1: ret 0xf9e8; 
0x0000000000102194: ret 0xf9f3; 
0x000000000000c242: ret 0xfa09; 
0x00000000000d110b: ret 0xfa2d; 
0x00000000000fcd71: ret 0xfa84; 
0x00000000000500a4: ret 0xfac1; 
0x000000000001a97d: ret 0xfad1; 
0x0000000000016111: ret 0xfad8; 
0x000000000002e520: ret 0xfae8; 
0x0000000000034a3c: ret 0xfae9; 
0x00000000000873ce: ret 0xfb1d; 
0x0000000000114272: ret 0xfb35; 
0x00000000000fd974: ret 0xfb3a; 
0x00000000000dd07e: ret 0xfb3f; 
0x0000000000105d54: ret 0xfb80; 
0x000000000003d9c9: ret 0xfb81; 
0x0000000000074a34: ret 0xfb83; 
0x00000000000cc0b6: ret 0xfb98; 
0x000000000002a467: ret 0xfbb4; 
0x0000000000112af8: ret 0xfbc0; 
0x0000000000087133: ret 0xfbc5; 
0x00000000000c372a: ret 0xfbcd; 
0x0000000000043e4f: ret 0xfbe8; 
0x000000000010cf26: ret 0xfc10; 
0x0000000000019af3: ret 0xfc3; 
0x000000000010f940: ret 0xfc3b; 
0x00000000000e7586: ret 0xfc3f; 
0x000000000010732a: ret 0xfcb1; 
0x00000000001004c0: ret 0xfd12; 
0x00000000000ddde1: ret 0xfd6e; 
0x00000000000d52fe: ret 0xfdbf; 
0x00000000000bd725: ret 0xfde9; 
0x00000000000ef2d6: ret 0xfe3f; 
0x0000000000026eda: ret 0xfe49; 
0x0000000000018b38: ret 0xfe83; 
0x00000000000fdec1: ret 0xfe9e; 
0x0000000000019e50: ret 0xfeb8; 
0x000000000006ad71: ret 0xfeb9; 
0x000000000007435c: ret 0xfee8; 
0x000000000007537b: ret 0xfee9; 
0x0000000000113a0c: ret 0xfeea; 
0x000000000002fa64: ret 0xff25; 
0x000000000000ef9b: ret 0xff2; 
0x0000000000035911: ret 0xff31; 
0x0000000000012542: ret 0xff3; 
0x000000000001ea4a: ret 0xff44; 
0x00000000000794ea: ret 0xff5a; 
0x00000000000e9c23: ret 0xff7b; 
0x0000000000074a3b: ret 0xff83; 
0x00000000000e9bc3: ret 0xff91; 
0x00000000000e9efb: ret 0xffa5; 
0x00000000000c7e8b: ret 0xffb8; 
0x00000000001037c6: ret 0xffbb; 
0x0000000000048713: ret 0xffbf; 
0x000000000003a4da: ret 0xffce; 
0x0000000000191611: ret 0xffe7; 
0x000000000000f05b: ret 0xffe8; 
0x0000000000082dba: ret 0xffe9; 
0x000000000008172a: ret 0xffed; 
0x0000000000026e1b: ret 0xfff0; 
0x0000000000085c65: ret 0xfff6; 
0x00000000000b5aef: ret 0xfff7; 
0x000000000007b9a8: ret 0xfff8; 
0x0000000000029e84: ret 0xfffb; 
0x00000000000b94b1: ret 0xfffc; 
0x0000000000056438: ret 0xfffd; 
0x000000000002207a: ret 0xfffe; 
0x000000000000f635: ret 0xffff; 
0x0000000000003891: ret 1; 
0x000000000001f5a2: ret 2; 
0x000000000004916a: ret 3; 
0x00000000000327e3: ret 4; 
0x0000000000068b9b: ret 5; 
0x0000000000058c61: ret 6; 
0x00000000000043f8: ret 7; 
0x000000000000ea9a: ret 8; 
0x000000000001bf87: ret; 
0x00000000000d9b6b: retf 0x1247; mov edx, 0x45db833f; ret 0x961a; 
0x0000000000084536: retf 0x14c; ret 0x8d49; 
0x0000000000045aa3: retf 0x167a; jne 0x45abc; ret; 
0x000000000002deb5: retf 0x1876; mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000004dc8b: retf 0x1a76; mulss xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000af843: retf 0x1bc5; pop rsp; loope 0xaf80e; jnp 0xaf8a4; fld st(4); ret; 
0x00000000000afda3: retf 0x1bc5; pop rsp; loope 0xafd6e; jnp 0xafe04; fld st(4); ret; 
0x00000000000c7404: retf 0x2149; ret 0x949; 
0x00000000000128aa: retf 0x280f; ret 0x1de8; 
0x0000000000011b3e: retf 0x280f; ret 0x69bf; 
0x000000000001244e: retf 0x280f; ret 0x7dbf; 
0x00000000000126b3: retf 0x280f; ret 0x8348; 
0x0000000000011bac: retf 0x280f; ret 0xc085; 
0x000000000004c616: retf 0x280f; ret; 
0x00000000000bfa1c: retf 0x28; add ch, al; ret; 
0x0000000000070f76: retf 0x290f; or esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; add byte ptr [r14 + 0xf], r12b; out dx, eax; ret 0x290f; 
0x00000000000961cc: retf 0x2949; ret 0x854d; 
0x0000000000016f74: retf 0x2ddb; add eax, 0xd9000b73; ret; 
0x0000000000013ba1: retf 0x2ddb; mov eax, 0xde000b88; ret 0xf1de; 
0x00000000000158bc: retf 0x2ddb; mov ebp, 0xd8000b75; ret; 
0x00000000000179fb: retf 0x2ddb; outsb dx, byte ptr [rsi]; push 0xb; add dh, bl; ret 0xf1de; 
0x0000000000014611: retf 0x2ddb; push -0x21fff47a; ret 0xf1de; 
0x0000000000016c26: retf 0x2ddb; ret; 
0x0000000000087811: retf 0x33c5; pop rax; ret; 
0x000000000004484f: retf 0x34b9; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000043fe3: retf 0x3948; ret 0x9e0f; 
0x00000000000bb7e4: retf 0x3bc5; pop rcx; ret 0x23c5; 
0x00000000000ff44d: retf 0x3fe7; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x00000000000ba838: retf 0x41c4; jns 0xba865; ret 0x41c4; 
0x0000000000030d59: retf 0x41e8; stosd dword ptr [rdi], eax; std; call qword ptr [rax + 0x69058b48]; ret 0x36; 
0x00000000000d61e8: retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x00000000000a73bb: retf 0x488d; add al, byte ptr [rbx - 0x1c3bfc40]; mov ecx, 0xc4b0c56b; ret; 
0x0000000000098ebe: retf 0x488d; add ebp, eax; sti; pop rsp; ret 0x6348; 
0x00000000000dbf38: retf 0x5424; ret; 
0x0000000000085d87: retf 0x570f; ret 0x570f; 
0x000000000004d882: retf 0x570f; ret 0xff3; 
0x000000000002a75a: retf 0x5d41; movapd xmm0, xmm1; ret; 
0x0000000000050277: retf 0x6601; movd mm1, edx; movaps xmm0, xmm1; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x000000000003cc2b: retf 0x665b; movaps xmm0, xmm1; ret; 
0x0000000000087873: retf 0x73c5; pop rax; ret; 
0x00000000000d1d98: retf 0x73e0; add eax, 0x3fd598b6; add eax, 0xca1e1d9c; fdivr qword ptr [r15]; sti; ret 0xa7e9; 
0x000000000007dc82: retf 0x875; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007cd82: retf 0x884; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000012dd98: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e138: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5b8: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c878: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x16c8ad; ret 0x11bf; 
0x0000000000180658: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18068d; ret 0x11bf; 
0x000000000018b3f8: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc58: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0f8: retf 0x9029; sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xfa12d; ret 0x11bf; 
0x000000000006fb3f: retf 0x948; ret 0x8948; 
0x00000000000c5306: retf 0x948; ret 0xb848; 
0x000000000000e3ac: retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000afdf5: retf 0xa3c5; pop rax; rol ch, 0xf3; pop rax; fcmovnb st(0), st(4); ret; 
0x000000000001fa3e: retf 0xa; ret; 
0x00000000000d0ac9: retf 0xb151; pop rdx; xchg ebp, eax; ret; 
0x00000000000d68e5: retf 0xbc64; xchg ebp, eax; ret 0xc4e2; 
0x0000000000012dfd: retf 0xc0d8; fdivp st(1); faddp st(1); ret; 
0x0000000000088915: retf 0xc1c4; jnp 0x88973; ret; 
0x000000000009ee95: retf 0xc1c4; jnp 0x9eef3; ret; 
0x00000000000b3bf2: retf 0xc1c4; jnp 0xb3c4f; ret 0x33c5; 
0x00000000000b4882: retf 0xc1c4; jnp 0xb48df; rol esp, 0xc1; jnp 0xb48e4; ret; 
0x0000000000051949: retf 0xc239; setle al; movzx eax, al; ret; 
0x000000000008f2b0: retf 0xc2c4; rcr dword ptr [rcx - 0x663d3b3e], 1; cdq; ret; 
0x000000000009e5e3: retf 0xc480; ret; 
0x0000000000044ccb: retf 0xcfe9; xchg esi, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000016c50: retf 0xe1de; fld xword ptr [rcx + rdx]; fsubrp st(1); faddp st(1); ret; 
0x0000000000012b82: retf 0xeadf; fstp st(1); jbe 0x12a58; fstp st(1); ret; 
0x00000000000186e1: retf 0xf209; fld xword ptr [rsp + 0x10]; jne 0x18698; pop rbx; ret; 
0x00000000000506f3: retf 0xf5b; sub cl, al; ret; 
0x00000000000c7527: retf 0xf641; ret 0x7407; 
0x000000000000ecf0: retf 0xf66; fnstenv cs:[rbx + 0x59]; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000006f35b: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x1be8; 
0x000000000007bc67: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x1fe8; 
0x0000000000057a8b: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007de37: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x4fe8; 
0x000000000007c615: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x000000000006a497: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x688d; 
0x000000000005e80a: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x7ce8; 
0x000000000007ab07: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x7fe8; 
0x000000000005e77e: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x8e8; 
0x0000000000057df5: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x91e8; 
0x000000000006e7e8: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x9ee8; 
0x000000000006aad4: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xb2e8; 
0x00000000000795c1: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xc5e8; 
0x00000000000634aa: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x0000000000072ea8: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xdee8; 
0x00000000000591a1: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xe5e8; 
0x0000000000059790: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xe6e8; 
0x0000000000072f93: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xf3e8; 
0x0000000000043373: retf 0xf66; push rsp; ret 0xf66; 
0x00000000000283c8: retf 0xf66; sub cl, al; addsd xmm0, xmm5; ret; 
0x000000000003cba3: retf 0xf66; sub cl, al; pop rbx; ret; 
0x0000000000027150: retf 0xf66; sub cl, al; ret; 
0x000000000009cd28: retf 0xfbc5; adc cl, al; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x00000000000be7a5: retf 0xfbc5; pop rsp; ret 0x33c5; 
0x000000000007e9fe: retf 0xff2; adc dword ptr [rdi + 8], ecx; ret; 
0x000000000007e36b: retf 0xff2; pop rax; ret 0x4166; 
0x00000000000280c1: retf 0xff2; pop rax; ret 0xff2; 
0x000000000008032d: retf 0xff2; pop rax; shl dword ptr [rsi + 0xf], 0x2e; ret; 
0x000000000004a70d: retf 0xff2; pop rcx; ret 0xff2; 
0x000000000003d01b: retf 0xff2; pop rsi; or eax, 0x92a5c; subsd xmm0, xmm1; ret; 
0x0000000000027148: retf 0xff2; pop rsi; sal dl, 1; addps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000003849b: retf 0xff2; pop rsp; ret 0x44f2; 
0x000000000004b840: retf 0xff3; pop rax; or eax, 0x81447; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000055bbd: retf 0xff3; pop rcx; ret 0x36e9; 
0x000000000004c979: retf 0xff3; pop rcx; ret; 
0x000000000004a5fe: retf 0xff3; pop rsi; sal bl, 1; addps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000004ae6c: retf 0xff3; pop rsp; or eax, 0x80373; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000073d12: retf 0xff84; jmp qword ptr [rsi + 0xf]; 
0x0000000000057d42: retf 0xfff5; jmp qword ptr [rsi + 0x2e]; 
0x000000000006f69a: retf 0xfff9; jmp qword ptr [rsi - 0x70]; 
0x00000000000993d3: retf 0xfffc; jmp qword ptr [rsi + 0xf]; 
0x0000000000071583: retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x00000000000c8cf2: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000018a5e: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000004c3aa: retf 0xfffe; jmp qword ptr [rsi - 0x70]; 
0x00000000000128de: retf 0xffff; cvtsd2ss xmm0, xmm0; add rsp, 8; ret; 
0x0000000000058436: retf 6; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087ed1: retf; add al, byte ptr [rax]; add ch, al; ret; 
0x000000000009ab78: retf; addsd xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009b23f: retf; addsd xmm1, xmm4; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ad7e: retf; addsd xmm2, xmm1; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000049d16: retf; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x0000000000108afd: retf; and al, byte ptr [rax - 0x71]; ret; 
0x0000000000108085: retf; cmc; dec dword ptr [rax]; leave; cmc; jmp qword ptr [rax]; 
0x00000000000aed51: retf; cmc; jmp qword ptr [rsi - 0x70]; 
0x00000000000de962: retf; cmp edi, edi; jmp rdx; 
0x0000000000079682: retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000057251: retf; in al, dx; add al, byte ptr [rax]; nop dword ptr [rax]; addss xmm0, xmm0; ret; 
0x0000000000120d53: retf; ja 0x120d4c; ret 0xdbf; 
0x000000000014f5b3: retf; ja 0x14f5ac; ret 0xdbf; 
0x00000000000495dd: retf; ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000ecdd3: retf; ja 0xecdcc; ret 0xdbf; 
0x00000000000ed875: retf; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x000000000002e038: retf; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x0000000000031558: retf; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004ddbe: retf; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004cb1e: retf; movaps xmm0, xmm1; ret; 
0x000000000004f798: retf; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x00000000000528d8: retf; movss dword ptr [rsp + 0x20], xmm0; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000004eb0b: retf; mulss xmm0, xmm1; ret; 
0x00000000000280ef: retf; pop r13; movapd xmm0, xmm1; ret; 
0x000000000008712e: retf; pop rax; fisttp dword ptr [rax - 0x77]; ret 0xfbc5; 
0x00000000000a4018: retf; pop rax; in al, 0xc5; adc dword ptr [rcx + rbp*8 - 0x3c], edx; ret; 
0x000000000008a669: retf; pop rax; inc ebp; ret; 
0x0000000000091b20: retf; pop rax; jl 0x91b48; and ah, al; ret 0xb9f9; 
0x000000000008d246: retf; pop rax; out 0xc5, eax; ret; 
0x000000000009c298: retf; pop rax; ret 0xd3c5; 
0x00000000000c1f9c: retf; pop rax; test dword ptr [rdi], 0xa6886; add ch, al; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x00000000000b4a45: retf; pop rax; test ebp, 0x583d10fb; mov bh, 7; add ch, al; ret; 
0x00000000000b7bcc: retf; pop rax; test ebp, 0xc5c15439; ret; 
0x00000000000b1dba: retf; pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000b83f4: retf; pop rax; test ebp, 0xc5e72979; ret; 
0x00000000000c1b2f: retf; pop rcx; test dword ptr [rdi], 0x85384; add ch, al; ret; 
0x00000000000b1cee: retf; pop rcx; test ebp, 0xc4c12979; jns 0xb1d21; ret 0xc1c4; 
0x000000000009cb26: retf; pop rdx; vmovss dword ptr [rsi], xmm6; ret; 
0x000000000008b7ab: retf; pop rsp; inc ebp; ret; 
0x000000000008bbdc: retf; pop rsp; ret 0xfbc5; 
0x00000000000883ee: retf; pop rsp; ret; 
0x000000000008bbd8: retf; pop rsp; rol ebp, cl; retf; pop rsp; ret 0xfbc5; 
0x00000000000dfcaa: retf; ret 0x19cf; 
0x00000000000e83c4: retf; ret 0x3f3a; 
0x0000000000102193: retf; ret 0xf9f3; 
0x00000000000790e1: retf; ret 8; 
0x000000000005b4b1: retf; ret; 
0x00000000000d68e4: retf; retf 0xbc64; xchg ebp, eax; ret 0xc4e2; 
0x0000000000100daa: retf; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x000000000004e6df: retf; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004ee45: retf; subss xmm2, xmm1; movaps xmm0, xmm2; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x0000000000056d51: retf; ucomiss xmm1, dword ptr [rip + 0x74d77]; ja 0x56d74; mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000009bc11: retf; vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x00000000000aed50: retfq; cmc; jmp qword ptr [rsi - 0x70]; 
0x00000000000de961: retfq; cmp edi, edi; jmp rdx; 
0x000000000008f33a: rol ah, 0x41; and ebx, dword ptr [rax + rax*8 - 0x3c]; ret 0xb9f1; 
0x00000000000a9740: rol ah, 0x41; jnp 0xa979d; ret; 
0x0000000000095223: rol ah, 0x41; jns 0x95256; ret 0x67a; 
0x00000000000ab81f: rol ah, 0x41; jns 0xab852; ret 0x67a; 
0x00000000000bc15b: rol ah, 0x41; jns 0xbc188; ret; 
0x000000000008cc52: rol ah, 0x42; fstp dword ptr [rbx + 0x2879c5da]; int 0xc4; ret 0x99c1; 
0x000000000008f8ca: rol ah, 0x42; rcr dword ptr [rcx + 0x7bc1c4c2], 0x59; ret; 
0x000000000008b2d9: rol ah, 0x62; mov cl, 0x9d; ret 0x7bc5; 
0x000000000008cc60: rol ah, 0xc1; jnp 0x8ccbd; ret; 
0x00000000000ab6f4: rol ah, 0xc1; jnp 0xab751; ret; 
0x00000000000b973f: rol ah, 0xc1; jnp 0xb979c; ret; 
0x00000000000ba21b: rol ah, 0xc1; jnp 0xba279; ret 0x3bc5; 
0x00000000000de000: rol ah, 0xcd; add dword ptr [rdi], edx; ret; 
0x000000000009bd2e: rol ah, 0xe2; fstp dword ptr [rcx + 0x775c805]; add ch, al; sti; pop rax; ret 0xe2c4; 
0x000000000008bf55: rol ah, 0xe2; loope 0x8bef3; vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x00000000000a0928: rol ah, 1; ret; 
0x000000000009521e: rol ah, cl; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0x95256; ret 0x67a; 
0x00000000000ab81a: rol ah, cl; adc ebx, dword ptr [r8 + rax*8 - 0x3c]; jns 0xab852; ret 0x67a; 
0x0000000000093123: rol ah, cl; rcr dword ptr [rbx - 0x3e3d3b23], 1; mov ecx, 0x7bc1c4c2; pop rax; ret; 
0x00000000000a9793: rol ah, cl; ret; 
0x0000000000102c30: rol byte ptr [r11 - 0x73], 1; jle 0x102c70; ret; 
0x00000000000cf3a9: rol byte ptr [rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x00000000000cf919: rol byte ptr [rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x8d1; 
0x0000000000076f41: rol byte ptr [rax], 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000769eb: rol byte ptr [rax], 0; add byte ptr [rdi], cl; push rax; ret 0x8a8; 
0x0000000000017f8c: rol byte ptr [rax], 0; jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x00000000000cd426: rol byte ptr [rax], cl; ret 0x8d61; 
0x000000000001b042: rol byte ptr [rbp + 0x39], 0xc1; sete al; and eax, edx; ret; 
0x0000000000051f16: rol byte ptr [rbp + 0x5b7579d2], 0x5d; pop r12; ret; 
0x000000000001b3d7: rol byte ptr [rbp + rcx*4 + 0x4f], cl; add dword ptr [rcx - 0x46], eax; add byte ptr [rax], al; add byte ptr [rax - 0xc017], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000190958: rol byte ptr [rbp - 0x17c80000], 0xee; jmp rax; 
0x000000000003ccf0: rol byte ptr [rbp - 0x3f6bf037], 0xf3; ret; 
0x0000000000052471: rol byte ptr [rbp - 0x6176f02e], 0; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000050c88: rol byte ptr [rbp - 0x98c8a08], 1; ret; 
0x0000000000102c31: rol byte ptr [rbx - 0x73], 1; jle 0x102c70; ret; 
0x00000000000c7263: rol byte ptr [rbx - 0x7cb7f020], 1; clc; add al, 0x74; or ecx, dword ptr [rcx - 0x7d]; ret 0x4904; 
0x000000000009b429: rol byte ptr [rbx], 0x89; ret 0x8d48; 
0x00000000000c7519: rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0xd349; 
0x00000000000c780d: rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0xf45; 
0x000000000004a97f: rol byte ptr [rcx + rcx - 0x28], 1; movd xmm0, eax; ret; 
0x000000000004e619: rol byte ptr [rcx - 0x7fffff06], 0x7f; setne al; add eax, 0x7fffffff; ret; 
0x00000000000c7818: rol byte ptr [rcx - 0xa], cl; ret 0x7407; 
0x0000000000043f61: rol byte ptr [rcx], 0x83; ret 0xf01; 
0x000000000009b713: rol byte ptr [rcx], 0x89; ret 0xe283; 
0x000000000009acfe: rol byte ptr [rcx], 0x89; ret 0xead1; 
0x000000000009ae29: rol byte ptr [rcx], 0x89; ret 0xff2; 
0x00000000000bccf2: rol byte ptr [rcx], 0xa8; add al, ch; sti; pop rcx; ret; 
0x0000000000018a5b: rol byte ptr [rcx], 0xe9; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000004fc16: rol byte ptr [rcx], 0xf0; movd xmm0, eax; ret; 
0x000000000004fda6: rol byte ptr [rcx], 0xf0; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000009b6da: rol byte ptr [rcx], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009b6b6: rol byte ptr [rcx], 0xf3; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000010f9b0: rol byte ptr [rcx], cl; out 0x2e, eax; or esi, esp; ret; 
0x0000000000191f10: rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x000000000009e3b3: rol byte ptr [rdi], 1; add ch, al; ret; 
0x000000000009e24c: rol byte ptr [rdi], cl; add ch, al; jns 0x9e27a; ffreep st(4); ret; 
0x000000000004276e: rol byte ptr [rdx], 0; add dh, dh; ret; 
0x00000000000cf3a7: rol byte ptr [rdx], 0xc0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000009e2cb: rol byte ptr [rdx], 1; add ch, al; ret; 
0x000000000001c19a: rol byte ptr [rdx], cl; or eax, dword ptr [rax]; fld dword ptr [rip + 0xb0b8c]; add rsp, 0x18; fxch st(1); ret; 
0x0000000000069b3b: rol byte ptr [rip + 0x6609eb00], cl; movq mm1, mm0; call 0xc4e80; add rsp, 0x40; pop rbx; ret; 
0x0000000000069b87: rol byte ptr [rip - 0x3b7cb800], cl; pop rbx; ret; 
0x000000000009f579: rol ch, 0x1b; pop rcx; in eax, 0xc5; sti; pop rcx; ret 0xc1c4; 
0x0000000000093ad3: rol ch, 0x3b; pop rax; ret; 
0x000000000008bf48: rol ch, 0xbb; pop rax; fadd st(5); sti; pop rsp; ret; 
0x000000000008cc2c: rol ch, 0xbb; pop rax; in al, 0xc4; pop r11; pop rax; ret; 
0x00000000000a973c: rol ch, 0xbb; pop rax; rol ah, 0x41; jnp 0xa979d; ret; 
0x000000000008d240: rol ch, 0xbb; pop rax; test ch, 0xcb; pop rax; out 0xc5, eax; ret; 
0x00000000000b86ce: rol ch, 0xdb; pop rax; out 0xc5, eax; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x00000000000bf486: rol ch, 0xe3; pop rcx; faddp st(5); sti; pop rcx; ret; 
0x00000000000afdf9: rol ch, 0xf3; pop rax; fcmovnb st(0), st(4); ret; 
0x000000000009ce53: rol ch, 0xf9; pop rcx; ret 0xf9c5; 
0x00000000000bfcf4: rol ch, 0xf9; push rsp; ret; 
0x000000000009cd30: rol ch, 0xfa; adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000093454: rol ch, 0xfb; pop rax; ret; 
0x00000000000bc6f1: rol ch, 0xfb; pop rcx; ret; 
0x000000000009b9b6: rol ch, 0xfb; pop rsp; ret 0xfbc5; 
0x00000000000bfbae: rol ch, 1; adc ebx, dword ptr [rax + rbp*8 - 0x3b]; sub dword ptr [rbx + rdx*8 - 0x3b], edx; ret; 
0x000000000009c3ca: rol ch, 1; fistp dword ptr [rcx - 0x3f]; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6ec0]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000008784f: rol ch, 1; jns 0x8787b; ret 0x39c5; 
0x000000000009ddca: rol ch, 1; jns 0x9ddf6; ret 0x39c5; 
0x00000000000c0406: rol ch, 1; jns 0xc0432; mov ch, 0x39; push rsp; ret; 
0x00000000000b1bbf: rol ch, 1; ret; 
0x000000000008b7a9: rol ch, 1; retf; pop rsp; inc ebp; ret; 
0x0000000000096756: rol ch, 1; sti; pop rsp; ret 0x8948; 
0x00000000000c10e5: rol ch, 1; sti; pop rsp; ret 0xf9c5; 
0x00000000000a5b0f: rol ch, 1; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; sub ebx, dword ptr [rax + rdx*8 - 0x3c]; ret; 
0x0000000000093f9d: rol ch, cl; pop r8; int 0xc5; stc; push rsp; ret 0x79c5; 
0x0000000000098bb0: rol ch, cl; pop r8; ret 0xfbc5; 
0x0000000000091700: rol ch, cl; rcr dword ptr [rax + 5], cl; mov r9b, 6; add ch, al; fistp dword ptr [rdi + rbp*8 - 0x3c]; ret 0xb9c9; 
0x00000000000bd1f0: rol ch, cl; ret; 
0x000000000009cb24: rol ch, cl; retf; pop rdx; vmovss dword ptr [rsi], xmm6; ret; 
0x00000000000e6522: rol dl, cl; ret; 
0x00000000000b0180: rol dword ptr [r11 - 0x71f0dd06], 1; add eax, 0xc5000001; stc; sub dl, al; ret; 
0x0000000000080230: rol dword ptr [r11 - 0x71f0dd06], 1; xchg dword ptr [rcx], eax; add byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x00000000000e3d2b: rol dword ptr [r15 + 0x16dac06c], cl; pop rbp; ret 0xec71; 
0x00000000000270a3: rol dword ptr [rax], 1; add byte ptr [rax], al; movapd xmm0, xmm1; add rsp, 0x18; ret; 
0x00000000000c51c8: rol dword ptr [rbp + 0x31], cl; fisttp dword ptr [rax - 0x7b]; fild dword ptr [rcx + 0xf]; xchg ebp, eax; ret; 
0x000000000006a935: rol dword ptr [rbp + 0x6f0f66c0], 1; ret 0x880f; 
0x00000000000b0181: rol dword ptr [rbx - 0x71f0dd06], 1; add eax, 0xc5000001; stc; sub dl, al; ret; 
0x0000000000080231: rol dword ptr [rbx - 0x71f0dd06], 1; xchg dword ptr [rcx], eax; add byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x00000000000c5796: rol dword ptr [rcx + 0xf], 0x93; ret 0x2045; 
0x000000000001b9ab: rol dword ptr [rcx + 0xf], 0x95; ret; 
0x0000000000044841: rol dword ptr [rcx + 0xf], 1; xchg ebp, eax; ret; 
0x00000000000c71c5: rol dword ptr [rcx + 0xf], 1; xchg edx, eax; ret; 
0x000000000001bc66: rol dword ptr [rcx - 0x48], 1; add byte ptr [rax], al; add byte ptr [rbx + 0x94801e1], al; ror dword ptr [rdi], 1; xchg ebp, eax; ret 0xb60f; 
0x0000000000051c12: rol dword ptr [rcx - 0x77], 1; ret; 
0x000000000003241f: rol dword ptr [rcx], 0x83; ret 0xf01; 
0x00000000000e3d2c: rol dword ptr [rdi + 0x16dac06c], cl; pop rbp; ret 0xec71; 
0x000000000009e35b: rol dword ptr [rdi], 1; add ch, al; jns 0x9e389; ffreep st(5); ret; 
0x000000000009e33f: rol dword ptr [rdi], 1; add ch, al; ret; 
0x00000000001139fb: rol dword ptr [rsi + rcx*8 - 0x79], 1; mov edi, 0xe94658ca; push rbx; sbb eax, 0xbaf4f12c; sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x000000000009983b: rol ebp, 0x39; push rsp; ret 0x41c4; 
0x00000000000877ee: rol ebp, 0xbb; pop rax; fcmovnb st(0), st(5); imul ebx, dword ptr [rcx - 0x37], -0x3b; jns 0x87822; ret 0xe3c5; 
0x000000000009cf73: rol ebp, 0xf9; pop rcx; ret 0xf9c5; 
0x000000000009cd2c: rol ebp, 0xf9; pop rdx; rol ch, 0xfa; adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009930d: rol ebp, 0xfb; adc dword ptr [rdi], ecx; vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x00000000000bec04: rol ebp, 0xfb; pop rax; mov ebp, 0xc5fc28f9; ret; 
0x000000000009b9fc: rol ebp, 0xfb; pop rcx; and al, 0xf0; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000089b9a: rol ebp, 1; jns 0x89bcc; ret 0x860f; 
0x000000000008a447: rol ebp, 1; jns 0x8a479; ret 0x860f; 
0x00000000000a010b: rol ebp, 1; jns 0xa013d; ret 0x860f; 
0x00000000000a09af: rol ebp, 1; jns 0xa09e1; ret 0x860f; 
0x00000000000895f3: rol ebp, 1; pop r8; ret; 
0x0000000000088098: rol ebp, 1; ret; 
0x00000000000b1db8: rol ebp, 1; retf; pop rax; test ebp, 0xc5cf2979; ret; 
0x00000000000be063: rol ebp, 1; sti; pop rcx; ret 0xe3c5; 
0x000000000009c85d: rol ebp, 1; sti; pop rcx; ret 0xfbc5; 
0x000000000009e230: rol ebp, cl; jae 0x9e28d; ret 0x6bc5; 
0x00000000000c18b1: rol ebp, cl; jns 0xc18de; ret; 
0x000000000009c596: rol ebp, cl; ret; 
0x000000000008bbda: rol ebp, cl; retf; pop rsp; ret 0xfbc5; 
0x00000000000c2441: rol ebp, cl; sti; pop rsp; ret 0xdbc5; 
0x0000000000099866: rol ebp, cl; sti; pop rsp; ret; 
0x00000000000c0000: rol ebp, cl; sub ebx, dword ptr [rdi + rdx*8 - 0x3b]; ret; 
0x00000000000887f5: rol edx, cl; ret; 
0x00000000000b1cf4: rol esp, 0x41; jns 0xb1d21; ret 0xc1c4; 
0x00000000000943cf: rol esp, 0xc1; jnp 0x9442c; ret; 
0x0000000000094f93: rol esp, 0xc1; jnp 0x94ff0; ret; 
0x00000000000b4887: rol esp, 0xc1; jnp 0xb48e4; ret; 
0x00000000000b8993: rol esp, 0xc1; jnp 0xb89f0; ret; 
0x00000000000bc6ec: rol esp, 0xc1; jnp 0xbc749; rol ch, 0xfb; pop rcx; ret; 
0x000000000008db98: rol esp, 0xc1; jns 0x8dbcb; ret 0x8a0f; 
0x00000000000a3ab4: rol esp, 0xc1; jns 0xa3ae7; ret 0x8a0f; 
0x00000000000c01ff: rol esp, 1; add ebx, dword ptr [r9 + rdi*8 - 0x3b]; ret; 
0x00000000000896f2: rol esp, 1; jns 0x89725; fcmovb st(0), st(5); ret; 
0x000000000009fc70: rol esp, 1; jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x0000000000092b5c: rol esp, 1; ret 0x9db9; 
0x000000000008db89: rol esp, 1; ret 0xb9c1; 
0x00000000000a9191: rol esp, 1; ret; 
0x00000000000b1f4d: rol esp, cl; adc ebx, dword ptr [r10 + rbp*8 - 0x3c]; jns 0xb1f7f; ret 0x41c4; 
0x00000000000ba833: rol esp, cl; jns 0xba860; retf 0x41c4; jns 0xba865; ret 0x41c4; 
0x0000000000087728: rol esp, cl; ret 0x9be1; 
0x00000000000aa01a: rol esp, cl; ret; 
0x00000000000b39a9: rol esp, cl; xor ebx, dword ptr [r11 + rcx*8 - 0x3b]; ret; 
0x000000000009e33e: rol qword ptr [rdi], 1; add ch, al; ret; 
0x0000000000044036: ror byte ptr [rax + 0x21], 0xd0; cvtsi2sd xmm0, rax; ret; 
0x00000000000867a2: ror byte ptr [rax + 0x21], 0xd0; or rax, rcx; movq xmm0, rax; ret; 
0x0000000000042fee: ror byte ptr [rax + 0x21], 0xd0; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000006eedc: ror byte ptr [rax + 0x21], 0xf2; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000700f3: ror byte ptr [rax + 0x21], 1; ror byte ptr [rax - 0x77], 1; and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000008652a: ror byte ptr [rax + 0x21], cl; ret 0x4866; 
0x00000000000c8b88: ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x00000000000430ba: ror byte ptr [rax + 0x21], cl; shl byte ptr [rsi + 0x48], 1; movd mm1, eax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000865ea: ror byte ptr [rax + 0x21], cl; shr bl, 1; and eax, dword ptr [rcx + 0x400f9]; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x000000000000f39a: ror byte ptr [rax + 0x63], 1; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000002aef6: ror byte ptr [rax + 0x63], 1; ret 0x8d48; 
0x0000000000070be0: ror byte ptr [rax + 1], 0xfe; and rsi, rax; mov qword ptr [rsp], rsi; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000059a1e: ror byte ptr [rax + 1], cl; ret; 
0x000000000006ac15: ror byte ptr [rax + 9], 0xca; setne al; add eax, 0x7fffffff; ret; 
0x0000000000027e59: ror byte ptr [rax + 9], 1; clc; or rax, r9; movq xmm0, rax; ret; 
0x00000000000598f4: ror byte ptr [rax + 9], 1; ret; 
0x0000000000069268: ror byte ptr [rax + 9], cl; ret 0x8948; 
0x0000000000198e00: ror byte ptr [rax + rsi*8], 1; jmp qword ptr [rbx + 2]; 
0x000000000010da3f: ror byte ptr [rax - 0x1c], 0; sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x0000000000103de1: ror byte ptr [rax - 0x275e55af], 1; ret 1; 
0x0000000000070bd9: ror byte ptr [rax - 0x2d], 1; jmp qword ptr [rsi + 0xf]; 
0x000000000006ef12: ror byte ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000003234e: ror byte ptr [rax - 0x3f], cl; out 0x20, eax; or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000073999: ror byte ptr [rax - 0x73], 0xac; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000004a8d1: ror byte ptr [rax - 0x73], 1; adc eax, 0x809c7; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x0000000000016087: ror byte ptr [rax - 0x73], 1; adc eax, 0xb7fa1; fld qword ptr [rdx + rax]; ret; 
0x000000000008180b: ror byte ptr [rax - 0x75], 0x54; ret; 
0x000000000001b6a0: ror byte ptr [rax - 0x75], 5; adc byte ptr [rcx], bl; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000044aab: ror byte ptr [rax - 0x75], 5; add eax, 0x64003585; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x0000000000056e73: ror byte ptr [rax - 0x75], 5; cmp eax, 0x64003461; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x00000000000520cb: ror byte ptr [rax - 0x75], 5; in eax, 0xae; xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x000000000005236b: ror byte ptr [rax - 0x75], 5; lodsb al, byte ptr [rsi]; xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000496f3: ror byte ptr [rax - 0x75], 5; mov ebp, 0x64003538; mov dword ptr [rax], 0x21; xor eax, eax; ret; 
0x000000000001b8e0: ror byte ptr [rax - 0x75], 5; rcl byte ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x00000000000c2f46: ror byte ptr [rax - 0x77], 1; adc r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x00000000000c8f7e: ror byte ptr [rax - 0x77], 1; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000031a88: ror byte ptr [rax - 0x77], 1; and al, 0xf8; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000700f6: ror byte ptr [rax - 0x77], 1; and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000c2f8e: ror byte ptr [rax - 0x77], 1; and r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x00000000000c8b9d: ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x0000000000070147: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000072276: ror byte ptr [rax - 0x77], 1; ret 0xf748; 
0x00000000000c2f6a: ror byte ptr [rax - 0x77], 1; sbb r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x000000000006ef4a: ror byte ptr [rax - 0x77], cl; adc al, 0x24; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000008046c: ror byte ptr [rax - 0x7b], 0xc9; setne al; neg eax; ret; 
0x000000000004465b: ror byte ptr [rax - 0x7b], 0xd2; jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb4: ror byte ptr [rax - 0x7b], 0xd2; jns 0x44c68; pop rbx; pop rbp; ret; 
0x00000000000c74a3: ror byte ptr [rax - 0x7b], 1; ror byte ptr [rdi], cl; test dword ptr [rbx], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0x4c07; 
0x00000000000440fa: ror byte ptr [rax - 0x7b], cl; ret 0x3875; 
0x000000000004408b: ror byte ptr [rax - 0x7b], cl; ret 0xd175; 
0x00000000000508f7: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004db67: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000001b741: ror byte ptr [rax - 0x7d], 0xea; add dword ptr [rax + 0x21], ecx; ret 0x950f; 
0x000000000001d709: ror byte ptr [rax - 0x7d], 1; in al, dx; and dh, bl; ret 0xc9d9; 
0x00000000000c778c: ror byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000c77a8: ror byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000006a01a: ror byte ptr [rax - 0x7d], cl; ret 0xe940; 
0x00000000000320dc: ror byte ptr [rax - 0x7f], 0xea; inc dword ptr [rbx]; add byte ptr [rax], al; cvtsi2sd xmm0, rdx; ret; 
0x000000000001ba2a: ror byte ptr [rax - 9], 1; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000190a70: ror byte ptr [rbp + 0x6aa80000], 1; out dx, eax; jmp qword ptr [rax]; 
0x00000000000c7524: ror byte ptr [rbp + 9], cl; retf 0xf641; ret 0x7407; 
0x0000000000083eba: ror byte ptr [rbx + riz*2 - 0x2e], 0x83; ret 0x8301; 
0x000000000000f228: ror byte ptr [rbx], 0; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x00000000000d4109: ror byte ptr [rbx], 0x2d; and ah, byte ptr [rcx - 0x53]; mov esp, 0x69eab2f0; call qword ptr [rbp - 0x11]; 
0x0000000000080749: ror byte ptr [rcx + 0x29], 1; ret 0xc148; 
0x0000000000190a00: ror byte ptr [rcx + 0x2f980000], 1; out dx, eax; jmp qword ptr [rax]; 
0x00000000000804a9: ror byte ptr [rcx + 0x39], 0xc8; setl al; lea eax, [rax + rax - 1]; ret; 
0x0000000000020953: ror byte ptr [rcx + 0x483bdbd0], cl; add esp, 0x10; pop rbx; ret; 
0x00000000000c64a5: ror byte ptr [rcx + 9], 1; ret; 
0x00000000000c71cc: ror byte ptr [rcx + 9], cl; ret; 
0x00000000000c7815: ror byte ptr [rcx + 9], cl; rol byte ptr [rcx - 0xa], cl; ret 0x7407; 
0x000000000010b4ff: ror byte ptr [rcx + rax*2 + 0x23], 0x45; sti; ret; 
0x0000000000052191: ror byte ptr [rcx + rcx*4 - 0x30], cl; js 0x520af; pop rbx; pop rbp; pop r12; ret; 
0x00000000000448d2: ror byte ptr [rcx + rcx*4 - 0x40], cl; js 0x448ae; pop rbx; pop rbp; ret; 
0x000000000001b6c6: ror byte ptr [rcx - 0x173eb72d], 1; and byte ptr [rcx], cl; ret; 
0x0000000000019e84: ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x0000000000027210: ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x000000000009711b: ror byte ptr [rcx - 0x77], cl; ret 0x2574; 
0x00000000000447a8: ror byte ptr [rcx - 0x7d], 1; ret 0x4d01; 
0x000000000002e907: ror byte ptr [rcx], 0xca; setne al; add eax, 0x7fffffff; ret; 
0x00000000000eae12: ror byte ptr [rdi + 0x49], 0x9e; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x0000000000044203: ror byte ptr [rdi], 0x1f; add dl, sil; addps xmm0, xmm0; ret; 
0x000000000004ded2: ror byte ptr [rdi], 0x2e; ret 0x870f; 
0x0000000000056e45: ror byte ptr [rdi], 0x2e; ror dword ptr [rdi], 0x93; ret 0xc084; 
0x000000000004268e: ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000001a129: ror byte ptr [rdi], 0x45; ret 0x66c3; 
0x000000000004338b: ror byte ptr [rdi], 0x45; ret 0xb8c3; 
0x000000000000cc67: ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000195c9: ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x0000000000042951: ror byte ptr [rdi], 0x45; shl dword ptr [rsi + 0xf], 0x2e; int 0x89; ret 0x9b0f; 
0x000000000004a8c7: ror byte ptr [rdi], 0x48; ret 0xc085; 
0x000000000007a1f8: ror byte ptr [rdi], 0x84; cmp ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000067a84: ror byte ptr [rdi], 0x84; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000076944: ror byte ptr [rdi], 0x84; xor eax, 0xe9fffffb; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000016b59: ror byte ptr [rdi], 0x85; add byte ptr [rcx], al; add byte ptr [rax], al; fstp st(0); fld1; ret; 
0x0000000000068236: ror byte ptr [rdi], 0x89; ret; 
0x00000000000735bf: ror byte ptr [rdi], 0x8f; ret 6; 
0x0000000000071f9e: ror byte ptr [rdi], 0x8f; ret; 
0x000000000007b38f: ror byte ptr [rdi], 0x8f; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000071775: ror byte ptr [rdi], 0x94; ret; 
0x000000000001b7a5: ror byte ptr [rdi], 0x95; ret 0xd284; 
0x00000000000c66cd: ror byte ptr [rdi], 0x95; ret; 
0x000000000007c593: ror byte ptr [rdi], 0x99; ret 0xdb84; 
0x00000000000c4559: ror byte ptr [rdi], 0x9b; ret 0x2e0f; 
0x00000000000c4b1b: ror byte ptr [rdi], 0x9b; ret 0xe1de; 
0x000000000007c575: ror byte ptr [rdi], 0x9e; ret; 
0x00000000000c7aae: ror byte ptr [rdi], 0xb6; fisttp dword ptr [rcx + 1]; fmul dword ptr [rax + 0x11]; ret 0xf48; 
0x000000000004aa17: ror byte ptr [rdi], 1; push rsp; rcr dword ptr [rbp - 0xd], 0xf; pop rcx; ret 0xfc3; 
0x000000000004a21b: ror byte ptr [rdi], 1; sub dl, al; pop rbx; ret; 
0x000000000004a22e: ror byte ptr [rdi], 1; sub dl, al; ret; 
0x000000000007c622: ror byte ptr [rdi], 1; sub dword ptr [rbx], edx; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000aaed8: ror byte ptr [rdi], 1; xchg cl, cl; adc al, 0; add ah, al; pop r12; ret; 
0x00000000000948cf: ror byte ptr [rdi], 1; xchg dl, ah; adc al, 0; add ah, al; pop r12; ret; 
0x000000000004d68b: ror byte ptr [rdi], 1; xchg edi, eax; ret 0xe8c1; 
0x0000000000031ab3: ror byte ptr [rdi], cl; mov byte ptr [rsi], ah; add al, byte ptr [rax]; add bl, dh; ret; 
0x0000000000044bb7: ror byte ptr [rdi], cl; mov dword ptr [rdx + 0x5b000000], ebp; pop rbp; ret; 
0x0000000000052473: ror byte ptr [rdi], cl; mov dword ptr [rsi + 0x5b000000], ebx; pop rbp; pop r12; ret; 
0x000000000004dc88: ror byte ptr [rdi], cl; retf 0x1a76; mulss xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000011c69: ror byte ptr [rdi], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000c74a6: ror byte ptr [rdi], cl; test dword ptr [rbx], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0x4c07; 
0x0000000000190a18: ror byte ptr [rdx + 0x37580000], 0xef; call qword ptr [rax]; 
0x00000000000eb0b9: ror byte ptr [rdx + rdi*4], cl; mov esp, 0xf83d2e19; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xd77f; 
0x00000000000cccfc: ror byte ptr [rdx - 0x753f000c], 0xf4; jmp qword ptr [rax]; 
0x0000000000093606: ror byte ptr [rdx], 1; add ch, al; jns 0x93634; ffreep st(5); ret; 
0x00000000000935ea: ror byte ptr [rdx], 1; add ch, al; ret; 
0x0000000000126710: ror byte ptr [rdx], 1; jg 0x12676f; ret 0x5732; 
0x0000000000136ab0: ror byte ptr [rdx], 1; jg 0x136b0f; ret 0x5732; 
0x0000000000154f30: ror byte ptr [rdx], 1; jg 0x154f8f; ret 0x5732; 
0x00000000001651f0: ror byte ptr [rdx], 1; jg 0x16524f; ret 0x5732; 
0x0000000000178fd0: ror byte ptr [rdx], 1; jg 0x17902f; ret 0x5732; 
0x0000000000183d70: ror byte ptr [rdx], 1; jg 0x183dcf; ret 0x5732; 
0x00000000000d65d0: ror byte ptr [rdx], 1; jg 0xd662f; ret 0x5732; 
0x00000000000f2a70: ror byte ptr [rdx], 1; jg 0xf2acf; ret 0x5732; 
0x00000000000934a4: ror byte ptr [rdx], cl; add ch, al; jns 0x934d2; ffreep st(5); ret; 
0x0000000000093488: ror byte ptr [rdx], cl; add ch, al; ret; 
0x00000000001959c0: ror byte ptr [rsi], 8; ret; 
0x00000000000aaed7: ror byte ptr cs:[rdi], 1; xchg cl, cl; adc al, 0; add ah, al; pop r12; ret; 
0x00000000000948ce: ror byte ptr cs:[rdi], 1; xchg dl, ah; adc al, 0; add ah, al; pop r12; ret; 
0x000000000010c5d8: ror cl, 1; xchg edx, eax; ret 0x32be; 
0x0000000000044e3b: ror dword ptr [r8 - 0x77], 0x44; and al, 8; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x000000000004250a: ror dword ptr [rax + 9], cl; ret; 
0x000000000007237c: ror dword ptr [rax - 0x2d], 1; out dx, al; imul rax, rsi; add rsp, 0x18; ret; 
0x000000000004407e: ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x00000000000c96a4: ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000044e3c: ror dword ptr [rax - 0x77], 0x44; and al, 8; movsd xmm0, qword ptr [rsp + 8]; xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x00000000000c7dd9: ror dword ptr [rax - 0x77], 1; ret 0x8949; 
0x00000000000c6644: ror dword ptr [rax - 0x77], 1; ret; 
0x00000000000c5b32: ror dword ptr [rax - 0x7b], cl; fisttp dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000000070bd6: ror dword ptr [rax - 9], 1; ror byte ptr [rax - 0x2d], 1; jmp qword ptr [rsi + 0xf]; 
0x00000000000502b5: ror dword ptr [rbp - 0x60f0febf], 1; ret 0xd284; 
0x000000000007dfbf: ror dword ptr [rbp - 0x76b2adfc], cl; ret; 
0x0000000000017fdc: ror dword ptr [rbp - 0x77], cl; ret; 
0x00000000000d4e82: ror dword ptr [rbx + 8], 1; cmp dword ptr [rax + rax*2], ecx; std; lahf; ret; 
0x000000000002dba2: ror dword ptr [rcx + 0x29d289c9], cl; ret; 
0x00000000000c733a: ror dword ptr [rcx + 0x39], 1; fisttp dword ptr [rdi]; xchg esp, eax; ret 0x5422; 
0x00000000000c72b4: ror dword ptr [rcx + 9], cl; ret 0xc148; 
0x00000000000321d8: ror dword ptr [rcx + rcx*4 + 0x4c], 0x24; clc; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000006b3dd: ror dword ptr [rcx], cl; ret; 
0x000000000004a50e: ror dword ptr [rdi], 0x28; ret 0xd976; 
0x000000000004dc91: ror dword ptr [rdi], 0x28; ror byte ptr [rdi], 1; sub dl, al; ret; 
0x000000000004fb03: ror dword ptr [rdi], 0x28; sal ebx, 0xf; pop rsp; add eax, 0x7a6f1; ret; 
0x000000000004e2ae: ror dword ptr [rdi], 0x82; ret; 
0x0000000000085a4f: ror dword ptr [rdi], 0x84; ret 0; 
0x000000000009d262: ror dword ptr [rdi], 0x85; movabs dword ptr [0x5b28c48348000003], eax; pop rbp; ret; 
0x0000000000015629: ror dword ptr [rdi], 0x87; mov ebp, 0x48fffffc; lea edx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000496ca: ror dword ptr [rdi], 0x93; ret 0xc084; 
0x000000000001b045: ror dword ptr [rdi], 0x94; shl byte ptr [rcx], 0xd0; ret; 
0x0000000000051ea2: ror dword ptr [rdi], 0x95; ret; 
0x000000000000ed2f: ror dword ptr [rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000527d3: ror dword ptr [rdi], 1; push rsp; ret; 
0x000000000004ee49: ror dword ptr [rdi], 1; sub dl, al; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x00000000000442bb: ror dword ptr [rdi], 1; test byte ptr [rsi + 0x48000001], dh; neg eax; pop rbx; pop rbp; ret; 
0x0000000000050044: ror dword ptr [rdi], 1; xchg byte ptr [rbp + 0xffffffe], ah; sub al, cl; mulss xmm1, xmm0; ret; 
0x000000000001b571: ror dword ptr [rdi], 1; xchg ebp, eax; ret 0xb60f; 
0x000000000001b9b6: ror dword ptr [rdi], 1; xchg ebp, eax; ret; 
0x000000000001b0a8: ror dword ptr [rdi], 1; xchg esi, eax; shl byte ptr [rcx], 0xf0; ret; 
0x000000000009c284: ror dword ptr [rdi], cl; test ebp, edi; add al, byte ptr [rax]; add ch, al; ret; 
0x000000000009c74f: ror dword ptr [rdi], cl; test edx, ebp; add al, byte ptr [rax]; add ch, al; ret; 
0x0000000000042721: ror dword ptr [rdi], cl; wait; ret 0x450f; 
0x000000000004268b: ror dword ptr [rdi], cl; wait; ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000003ce59: ror dword ptr [rdi], cl; xchg dword ptr [rdi + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000009351b: ror dword ptr [rdx], 1; add ch, al; jns 0x93549; ffreep st(5); ret; 
0x00000000000934ff: ror dword ptr [rdx], 1; add ch, al; ret; 
0x000000000001de47: ror dword ptr [rdx], cl; add cl, bl; ret; 
0x00000000000ef449: ror dword ptr [rip + 0x3aa73a40], 0x3f; add byte ptr [rax], ah; ret 0x7bbf; 
0x0000000000110b14: ror dword ptr [rsi + 0x4168], 1; add al, al; xchg esp, eax; ret; 
0x000000000004a50d: ror dword ptr cs:[rdi], 0x28; ret 0xd976; 
0x000000000004e2ad: ror dword ptr cs:[rdi], 0x82; ret; 
0x00000000000496c9: ror dword ptr cs:[rdi], 0x93; ret 0xc084; 
0x000000000000ed2e: ror dword ptr cs:[rdi], 0x9b; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x0000000000050043: ror dword ptr cs:[rdi], 1; xchg byte ptr [rbp + 0xffffffe], ah; sub al, cl; mulss xmm1, xmm0; ret; 
0x0000000000042720: ror dword ptr cs:[rdi], cl; wait; ret 0x450f; 
0x000000000004268a: ror dword ptr cs:[rdi], cl; wait; ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000007dfbe: ror qword ptr [rbp - 0x76b2adfc], cl; ret; 
0x0000000000086ad0: roundsd xmm0, xmm0, 0xa; ret; 
0x0000000000086b50: roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b10: roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b30: roundsd xmm0, xmm0, 4; ret; 
0x0000000000086af0: roundsd xmm0, xmm0, 9; ret; 
0x0000000000086ae0: roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b60: roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b20: roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b40: roundss xmm0, xmm0, 4; ret; 
0x0000000000086b00: roundss xmm0, xmm0, 9; ret; 
0x000000000003cd0b: sahf; add al, 0; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x0000000000052476: sahf; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000190d51: sahf; add byte ptr [rax], al; cmp byte ptr [rdi - 0xf], bl; jmp rax; 
0x00000000000b1a03: sahf; cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f13fd: sahf; cmp eax, 0; add byte ptr [rax + 0xe5a3fe6], dh; ret; 
0x00000000000eae15: sahf; cmp eax, 0x2aea483f; pop rax; xchg edx, eax; ret; 
0x00000000000d4096: sahf; cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000e474d: sahf; fnstsw word ptr [rbx - 0x25b1c714]; pop rbp; ret; 
0x00000000000ddd1e: sahf; mov edi, 0x41f35c4c; std; call rdi; 
0x0000000000108c78: sahf; mov r10d, 0x27e92462; mov byte ptr [rdx - 0x4f475dd0], sil; jg 0x108c82; ret; 
0x00000000000d880b: sahf; movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x00000000000df5eb: sahf; movabs eax, dword ptr [0x35b00437793fe333]; rcl dl, 1; mov edi, 0x7ab9110c; ret; 
0x0000000000057777: sahf; or al, byte ptr [rax]; call 0xc4e80; add rsp, 0x50; pop rbx; ret; 
0x0000000000011c04: sahf; or eax, dword ptr [rax]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x000000000010871a: sahf; ret 0x874; 
0x000000000007c577: sahf; ret; 
0x00000000000934fe: sahf; ror dword ptr [rdx], 1; add ch, al; ret; 
0x000000000009e7fe: sahf; sal dh, 1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ef46d: sahf; xor al, 0xbf; add byte ptr [rax + 0x71fc201e], al; ret; 
0x0000000000079a9c: sal al, 1; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000080472: sal bh, 0xd8; ret; 
0x0000000000051a05: sal bl, 0xf; adc dword ptr [rdi], eax; ret; 
0x000000000004ea88: sal bl, 0xf; pop rax; fcomi st(3); subps xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000008596e: sal bl, 0xf; pop rcx; ret 0xff3; 
0x000000000004a64a: sal bl, 0xf; pop rsi; sal bl, 1; addps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x0000000000085bf8: sal bl, 0xf; pop rsp; ret; 
0x000000000004ea84: sal bl, 0xf; sub al, al; addss xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000004a602: sal bl, 1; addps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000010fc05: sal bl, 1; ret 0x3ffd; 
0x000000000004fdfd: sal bl, cl; subps xmm2, xmm1; movd eax, xmm2; add eax, esi; movd xmm0, eax; ret; 
0x000000000007ce85: sal byte ptr [rax + rdx + 0x66], 0xf; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x38; ret; 
0x00000000000a8927: sal byte ptr [rax - 0x3b], cl; ret; 
0x00000000000c4530: sal byte ptr [rbp + 0x14], 1; movss dword ptr [rsp - 8], xmm9; movss dword ptr [rsp - 4], xmm4; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000050f40: sal byte ptr [rbp + 0x15], 1; movss dword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x000000000004a8cc: sal byte ptr [rbp + 0x1f], 0x44; mov eax, edx; lea rdx, [rip + 0x809c7]; shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000000e415: sal byte ptr [rbp + 0x28], 0x48; add esp, 0x28; ret; 
0x0000000000011a41: sal byte ptr [rbp + 0x2c], 0x48; add esp, 0x18; ret; 
0x000000000007c438: sal byte ptr [rbp + 0x2d], 0x66; movq mm0, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000c47d7: sal byte ptr [rbp + 6], 1; movapd xmm0, xmm10; ret; 
0x00000000000119e3: sal byte ptr [rbp + rcx + 0xf], 0x2e; ret 0x9b0f; 
0x00000000000745c9: sal byte ptr [rbp + rcx*8 + 0x66], 0xf; out dx, eax; sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x0000000000042408: sal byte ptr [rbp + rsi*2 + 0x66], 0xf; in eax, 0xf; wait; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000007b42c: sal byte ptr [rbp - 1], 1; jmp qword ptr [rsi + 0xf]; 
0x000000000007470a: sal byte ptr [rbx + rax*2 + 0x66], 0xf; out dx, eax; sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x00000000000e779a: sal byte ptr [rbx - 0x32], 0x81; mov r15d, 0x76830985; ret 0x3361; 
0x00000000000dd7d9: sal byte ptr [rbx], 0x98; xchg ecx, eax; push 0x5aaf3fa2; xor al, 0x2d; std; call rcx; 
0x0000000000020951: sal byte ptr [rcx], 0xd2; mov eax, edx; fstp xword ptr [rbx]; add rsp, 0x10; pop rbx; ret; 
0x000000000006ef48: sal byte ptr [rcx], 0xd2; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004db52: sal byte ptr [rcx], 1; fcomp dword ptr [rbx + 0x66]; movd mm0, eax; pop rbp; ret; 
0x00000000000320d6: sal byte ptr [rdi + rdi + 0x66], cl; pxor mm0, mm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x000000000000b7fd: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000b01ce: sal byte ptr [rdx + rdi*4 - 0x3b], cl; sti; adc byte ptr [rip + 0x33547], dl; vmovapd xmm0, xmm2; ret; 
0x0000000000099bde: sal byte ptr [rdx + rdi*4 - 0x3b], cl; sti; adc byte ptr [rip + 0x49b37], dl; vmovapd xmm0, xmm2; ret; 
0x000000000008027e: sal byte ptr [rdx + rdi*4 - 0xe], cl; movups xmm2, xmmword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x000000000004fd7a: sal byte ptr [rsi + 0x5b], 1; addss xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x00000000000519b7: sal byte ptr [rsi + rdx + 0x31], 0xc0; movd xmm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000004405f: sal byte ptr [rsi + rdx + 0x31], 0xc0; movq xmm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x000000000001706b: sal byte ptr [rsi - 0x2e], 0xd8; leave; fstp st(0); ret; 
0x000000000004fd79: sal byte ptr cs:[rsi + 0x5b], 1; addss xmm0, xmm4; subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x00000000000fe7b2: sal dh, 0xff; jmp qword ptr [rbx]; 
0x000000000009e7ff: sal dh, 1; jmp qword ptr [rsi + 0x2e]; 
0x000000000004361f: sal dh, 1; ret 0xf01; 
0x00000000000323d5: sal dl, 0xf; adc byte ptr [rsp - 0x20], al; ret; 
0x00000000000440c0: sal dl, 0xf; adc dword ptr [rdi], eax; ret; 
0x000000000002a5ef: sal dl, 0xf; adc dword ptr [rsp + 0x10], ebx; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000031c9f: sal dl, 0xf; pop rax; ret; 
0x000000000007e367: sal dl, 0xf; pop rax; retf 0xff2; pop rax; ret 0x4166; 
0x000000000004d4e2: sal dl, 0xf; pop rcx; and al, 0xf0; cvtsd2ss xmm0, xmm1; ret; 
0x0000000000084926: sal dl, 0xf; pop rcx; ret 0xff2; 
0x00000000000361d2: sal dl, 0xf; pop rcx; ret; 
0x000000000009a9d0: sal dl, 0xf; pop rdx; ret; 
0x0000000000050cf3: sal dl, 0xf; pop rdx; sal ebx, 0xf; pop rax; ret 0xa7eb; 
0x0000000000029ae3: sal dl, 0xf; pop rsi; ret; 
0x00000000000271a4: sal dl, 0xf; pop rsi; sal dl, 1; addps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000002a144: sal dl, 0xf; pop rsi; sal edx, 0xf; pop rcx; ret 0xff2; 
0x0000000000084b24: sal dl, 0xf; pop rsp; ret; 
0x000000000002714c: sal dl, 1; addps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x0000000000044039: sal dl, 1; cvtpi2ps xmm0, mm0; ret; 
0x000000000007e9f6: sal dl, 1; movups xmmword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000004a9fe: sal dl, cl; cvtps2pd xmm0, xmm2; ret; 
0x0000000000085ee3: sal dword ptr [rax + 0x31], 1; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000d4a9c: sal dword ptr [rax + 0x4b], 0x40; ret; 
0x000000000004fe44: sal dword ptr [rax + rax], 1; lea rdx, [rip + 0x36cb2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004fdbc: sal dword ptr [rax + rax], 1; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000004a7f9: sal dword ptr [rbp + 8], 0x81; inc dword ptr [rax]; add byte ptr [rax - 0xcf38181], al; mulps xmm0, xmm1; divss xmm0, xmm0; ret; 
0x00000000000805d8: sal dword ptr [rbp - 0x13], 0xf3; ret; 
0x0000000000053258: sal dword ptr [rbx + rax + 0xf], 0x57; ret; 
0x00000000000e8905: sal dword ptr [rbx], 0x3f; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x000000000009228b: sal dword ptr [rbx], 0x58; ret; 
0x0000000000095081: sal dword ptr [rbx], 0x59; ret 0x94e9; 
0x00000000000ab689: sal dword ptr [rbx], 0x59; ret 0xcce9; 
0x0000000000019db9: sal dword ptr [rcx], 0xc0; and dx, 0x7fff; cmp dx, 0x7fff; sete al; and eax, ecx; ret; 
0x000000000001b587: sal dword ptr [rsi + rax + 0x48], 0xf7; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000085aef: sal dword ptr [rsi + riz - 0x7d], 0xfb; or dword ptr [rcx + riz - 0x7d], esi; ret 0xf30a; 
0x00000000000cbf63: sal dword ptr [rsi], cl; ret; 
0x0000000000050cf7: sal ebx, 0xf; pop rax; ret 0xa7eb; 
0x000000000004d33e: sal ebx, 0xf; pop rax; ret 0xfc3; 
0x0000000000049d1a: sal ebx, 0xf; pop rax; ret 0xff3; 
0x0000000000050163: sal ebx, 0xf; pop rcx; or eax, 0xb0cf4; addss xmm0, xmm2; addss xmm0, xmm1; ret; 
0x000000000004ddc1: sal ebx, 0xf; pop rcx; ret 0x66c3; 
0x0000000000049e8e: sal ebx, 0xf; pop rcx; ret 0xff3; 
0x000000000004b402: sal ebx, 0xf; pop rsi; ret 0x54e9; 
0x000000000004bd94: sal ebx, 0xf; pop rsi; ret 0x840f; 
0x000000000004ac09: sal ebx, 0xf; pop rsi; ret 0xff3; 
0x000000000004c270: sal ebx, 0xf; pop rsi; ret; 
0x000000000004fb06: sal ebx, 0xf; pop rsp; add eax, 0x7a6f1; ret; 
0x00000000000867de: sal ebx, 0xf; pop rsp; sar dword ptr [rax + 0x1b], 0xf3; ret; 
0x000000000004a22a: sal ebx, 1; addps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000049dda: sal ebx, 1; subps xmm0, xmm2; movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x0000000000050137: sal ebx, 1; subps xmm3, xmm2; subss xmm3, xmm0; subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x000000000004ea90: sal ebx, cl; mulps xmm0, xmm2; ret; 
0x000000000004e873: sal ebx, cl; subps xmm2, xmmword ptr [rip + 0xb1b18]; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000050ea4: sal edi, 0xd8; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x000000000007ff0c: sal edx, 0xf; adc dword ptr [rdi], ecx; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x000000000009b001: sal edx, 0xf; pop rax; add eax, 0x302b6; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004a6d5: sal edx, 0xf; pop rax; ret 0x4866; 
0x00000000000426b3: sal edx, 0xf; pop rax; ret 0x98e9; 
0x0000000000080393: sal edx, 0xf; pop rax; ret 0xf66; 
0x000000000004d1d8: sal edx, 0xf; pop rax; ret 0xff2; 
0x0000000000031a6d: sal edx, 0xf; pop rax; ret; 
0x0000000000031c9b: sal edx, 0xf; pop rax; sal dl, 0xf; pop rax; ret; 
0x000000000002aa14: sal edx, 0xf; pop rcx; ret 0x2e8; 
0x00000000000489d1: sal edx, 0xf; pop rcx; ret 0x45e8; 
0x000000000002e03c: sal edx, 0xf; pop rcx; ret 0x66c3; 
0x0000000000049553: sal edx, 0xf; pop rcx; ret 0xc3e8; 
0x000000000002e853: sal edx, 0xf; pop rcx; ret 0xf66; 
0x000000000002975c: sal edx, 0xf; pop rcx; ret 0xff2; 
0x000000000002fca9: sal edx, 0xf; pop rcx; ret; 
0x0000000000028ce4: sal edx, 0xf; pop rsi; ret 0x5ae9; 
0x0000000000029830: sal edx, 0xf; pop rsi; ret 0x73e9; 
0x0000000000029531: sal edx, 0xf; pop rsi; ret 0xd4eb; 
0x00000000000289d0: sal edx, 0xf; pop rsi; ret; 
0x000000000003193e: sal edx, 0xf; pop rsp; add eax, 0x99979; ret; 
0x000000000002dd96: sal edx, 0xf; pop rsp; ret 0xf0e9; 
0x000000000007f3f1: sal edx, 0xf; pop rsp; ret; 
0x0000000000086775: sal edx, 0xf; pop rsp; sar dword ptr [rax + 0x14], 0xf3; ret; 
0x000000000002917c: sal edx, 1; divps xmm13, xmm10; addsd xmm13, qword ptr [rip + 0xbac2d]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002865c: sal edx, 1; divps xmm13, xmm10; subsd xmm13, qword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000009ad82: sal edx, 1; mulps xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002c4ca: sal edx, 1; mulps xmm1, xmmword ptr [rip + 0xbb105]; add rsp, 0x18; addsd xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000004a9fa: sal edx, 1; sqrtps xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x000000000009b37c: sal edx, cl; addps xmm1, xmm2; mulsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000009ac1f: sal edx, cl; addps xmm2, xmm4; mulsd xmm0, xmm2; cvtsd2ss xmm0, xmm0; ret; 
0x00000000000283c4: sal edx, cl; divps xmm1, xmm2; movapd xmm0, xmm1; addsd xmm0, xmm5; ret; 
0x000000000003100c: sal edx, cl; divps xmm1, xmm2; mulsd xmm1, xmm0; addsd xmm0, xmm1; ret; 
0x000000000003d013: sal edx, cl; subps xmm2, xmm1; movapd xmm1, xmm2; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x0000000000194760: sar al, 0xea; jmp qword ptr [rax]; 
0x00000000000e3d37: sar bh, 0xd9; add dh, byte ptr [rbx]; ret 0x1270; 
0x00000000000c8d74: sar bh, 0xff; mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000006ac2f: sar bh, 0xff; ret; 
0x000000000002693d: sar bh, cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000026a8e: sar bh, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000086525: sar byte ptr [rax + 0x58], 0x48; not edx; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000044068: sar byte ptr [rax + 1], 0xf2; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000519bf: sar byte ptr [rax + 1], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000745cf: sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x000000000007c59c: sar byte ptr [rax + 1], cl; je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x00000000000448d5: sar byte ptr [rax - 0x2a], 0x5b; pop rbp; ret; 
0x000000000004d695: sar byte ptr [rax], 0xc2; jne 0x4d639; movaps xmm0, xmm1; mulss xmm0, xmm1; ret; 
0x000000000009c0c5: sar byte ptr [rax], 0xc2; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x000000000010b4fc: sar byte ptr [rbx + 0x414cc009], 0x23; sti; ret; 
0x0000000000072632: sar byte ptr [rcx + 0x3b], 0x66; movq mm0, qword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000051f18: sar byte ptr [rcx + 0x75], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000004465e: sar byte ptr [rcx + 0x7f], cl; pop rbx; pop rbp; ret; 
0x000000000007dabc: sar byte ptr [rcx - 0x4b], 0xeb; mov ebp, eax; fcmovu st(0), st(5); clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000001b0a6: sar byte ptr [rcx], 0xd1; setbe al; and eax, esi; ret; 
0x0000000000080436: sar byte ptr [rcx], 1; ret 0xf575; 
0x000000000007db29: sar byte ptr [rdi + 0x14], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012fede: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x12fe97; and al, 0xee; ret; 
0x000000000014027e: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x140237; and al, 0xee; ret; 
0x000000000015e6fe: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x15e6b7; and al, 0xee; ret; 
0x000000000016e9be: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x16e977; and al, 0xee; ret; 
0x000000000018279e: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x182757; and al, 0xee; ret; 
0x000000000018d53e: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0x18d4f7; and al, 0xee; ret; 
0x00000000000dfd9e: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xdfd57; and al, 0xee; ret; 
0x00000000000fc23e: sar byte ptr [rdi + 0x1f3fbc2b], 1; insb byte ptr [rdi], dx; mov ch, 0x3f; jge 0xfc1f7; and al, 0xee; ret; 
0x00000000000db24e: sar byte ptr [rdi + 0x3e5d3d61], cl; mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000dda66: sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x00000000000df5f6: sar byte ptr [rdi + 0x7ab9110c], cl; ret; 
0x000000000007220e: sar byte ptr [rdi + 0x7f], 0x66; movq mm0, qword ptr [rsp]; call 0xc8fa0; add rsp, 0x10; pop rbx; ret; 
0x00000000000805b0: sar byte ptr [rdi + 0xa], 1; mov rdx, qword ptr [rdi + rax*8 + 8]; mov qword ptr [rsi + rax*8 + 8], rdx; pop rbx; ret; 
0x000000000007cdb2: sar byte ptr [rdi + 0xb], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e7: sar byte ptr [rdi + 0xe], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x48; ret; 
0x00000000000dca4e: sar byte ptr [rdi - 0x30686fff], 1; call qword ptr [rbx]; 
0x00000000000ebf36: sar byte ptr [rdi - 0x48cf1d75], cl; ret 0x3210; 
0x00000000000dd176: sar byte ptr [rdi - 0x53953753], cl; clc; pop rdi; ret 0xca3f; 
0x000000000007dd1a: sar byte ptr [rdi - 0x55], 0x48; mov eax, dword ptr [rip + 0x31f294]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000012dd9e: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13e: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5be: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87e: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065e: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18068d; ret 0x11bf; 
0x000000000018b3fe: sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5e: sar byte ptr [rdi - 0x760a04e4], cl; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0fe: sar byte ptr [rdi - 0x760a04e4], cl; ja 0xfa12d; ret 0x11bf; 
0x000000000012df96: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x12e016; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000013e336: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x13e3b6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000015c7b6: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x15c836; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000016ca76: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x16caf6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x0000000000180856: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x1808d6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x000000000018b5f6: sar byte ptr [rdi - 0x7739a618], cl; jbe 0x18b676; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000dde56: sar byte ptr [rdi - 0x7739a618], cl; jbe 0xdded6; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000fa2f6: sar byte ptr [rdi - 0x7739a618], cl; jbe 0xfa376; mov ebp, 0xf15460bf; ret 0xe7cc; 
0x00000000000519fc: sar byte ptr [rdi - 0x77], 0xc2; movd xmm0, edx; xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x00000000000ec216: sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x00000000000dd02e: sar byte ptr [rdi], 0x67; or bh, byte ptr fs:[rax - 0x22]; stosb byte ptr [rdi], al; ret 0x223f; 
0x00000000000f0436: sar byte ptr [rdi], 1; ret 0xf835; 
0x00000000000fd186: sar byte ptr [rdi], cl; mov esi, 0xe4618faa; ret 0x3fd2; 
0x00000000000fd1a6: sar byte ptr [rdi], cl; test byte ptr [rax], bh; pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x0000000000049657: sar byte ptr [rdx + 0xe], 0xf2; movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049697: sar byte ptr [rdx + 0xe], 0xf2; movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000056dd4: sar byte ptr [rdx + 0xe], 0xf3; movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e14: sar byte ptr [rdx + 0xe], 0xf3; movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x000000000004337f: sar byte ptr [rdx + 1], 0x66; ucomiss xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x000000000009c8cf: sar byte ptr [rip + 0x7f800000], 1; jne 0x9c8e5; mov rax, qword ptr [rip + 0x3006da]; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x0000000000020d6c: sar byte ptr [rsi + 0x29], 1; movapd xmm1, xmm0; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007ccaf: sar byte ptr [rsi + 0xa], 0x66; movq mm0, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000e87e1: sar byte ptr [rsi - 0x4b], 1; ret; 
0x00000000000eccee: sar byte ptr [rsi], cl; add byte ptr [rax], ah; cdq; movsd dword ptr [rdi], dword ptr [rsi]; sti; ret; 
0x0000000000049656: sar byte ptr cs:[rdx + 0xe], 0xf2; movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049696: sar byte ptr cs:[rdx + 0xe], 0xf2; movups xmmword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000056dd3: sar byte ptr cs:[rdx + 0xe], 0xf3; movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e13: sar byte ptr cs:[rdx + 0xe], 0xf3; movups xmmword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000015143: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000010218d: sar cl, 0xbf; test dword ptr [rdi + 0x78], eax; retf; ret 0xf9f3; 
0x0000000000100dac: sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x0000000000013a6e: sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000e3d36: sar dil, 0xd9; add dh, byte ptr [rbx]; ret 0x1270; 
0x000000000011c15a: sar dl, 1; jae 0x11c132; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4f031b; ret 0x8657; 
0x000000000014a9ba: sar dl, 1; jae 0x14a992; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf51eb7b; ret 0x8657; 
0x00000000000e81da: sar dl, 1; jae 0xe81b2; bsr ebx, dword ptr [rdx + 0x57f1cc60]; cmp eax, 0x8000003f; call 0xffffffffbf4bc39b; ret 0x8657; 
0x000000000005e65b: sar dl, cl; jmp qword ptr [rsi - 0x70]; 
0x0000000000086779: sar dword ptr [rax + 0x14], 0xf3; ret; 
0x00000000000867e2: sar dword ptr [rax + 0x1b], 0xf3; ret; 
0x00000000000e4ccc: sar dword ptr [rbx - 0x57c5445d], 0xa6; add dh, cl; call qword ptr [rbx]; 
0x000000000008f579: sar dword ptr [rbx - 0xe1d3b28], 0x99; fadd st(5), st(0); ret; 
0x0000000000090341: sar dword ptr [rbx], 0x58; ret; 
0x000000000009374b: sar dword ptr [rcx + 0x58fbc5da], 1; ret 0xe3c5; 
0x000000000009312b: sar dword ptr [rcx + 0x7bc1c4c2], 0x58; ret; 
0x0000000000093fff: sar dword ptr [rcx + 0x7bc1c4eb], 0x58; ret; 
0x000000000008f8f6: sar dword ptr [rcx - 0x5e1d3b1e], 1; cdq; ret; 
0x00000000000495e3: sar dword ptr [rcx], 1; xor eax, 0xc76400; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000d6e06: sar dword ptr [rdi + 0x1737ca6d], 0xda; ret 0x3f9e; 
0x00000000000d5ade: sar dword ptr [rdi + 0x4487f4b8], cl; ret; 
0x00000000000d6986: sar dword ptr [rdi - 0x238eaf80], 0xb6; ret; 
0x00000000001264c6: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136866: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce6: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa6: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d86: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b26: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6386: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2826: sar dword ptr [rdi - 0x2ca373cd], 0x3e; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000dc14e: sar dword ptr [rdi - 0x4b4851ee], 1; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x00000000000ecf36: sar dword ptr [rdi - 0x56ff61c3], 0xd2; ret 0xbd2e; 
0x0000000000100fbf: sar dword ptr [rdi], 0x1a; mov es, word ptr [rcx + 0x42]; je 0x100f86; ret 0xe6aa; 
0x00000000000fcce6: sar dword ptr [rdi], 0x2d; mov edi, 0x1e9dee74; ret 0x553f; 
0x00000000000f0896: sar dword ptr [rdi], 1; ret 0x97ba; 
0x00000000000d145e: sar dword ptr [rdi], cl; ret 0x8ee4; 
0x00000000000fd1ae: sar dword ptr [rdi], cl; ret 0xd82b; 
0x00000000000f0c96: sar dword ptr [rdi], cl; wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x000000000004125e: sar dword ptr [rdx + 6], 0xf; test byte ptr [rcx - 0x9ffffff], bl; ret; 
0x00000000001264cb: sar dword ptr [rsi], cl; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x000000000013686b: sar dword ptr [rsi], cl; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ceb: sar dword ptr [rsi], cl; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fab: sar dword ptr [rsi], cl; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d8b: sar dword ptr [rsi], cl; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b2b: sar dword ptr [rsi], cl; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d638b: sar dword ptr [rsi], cl; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f282b: sar dword ptr [rsi], cl; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x000000000004125d: sar dword ptr cs:[rdx + 6], 0xf; test byte ptr [rcx - 0x9ffffff], bl; ret; 
0x00000000001264c5: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136865: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce5: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa5: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d85: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b25: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6385: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2825: sar dword ptr ds:[rdi - 0x2ca373cd], 0x3e; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000019e58: sar eax, 0x10; ret; 
0x0000000000050ea9: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000019e08: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000727ba: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000042f9d: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x0000000000086a8d: sar eax, cl; not eax; and eax, edx; movd xmm0, eax; ret; 
0x000000000002e508: sar ebp, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000105a44: sar ebx, 0x1d; stc; mov edx, 0xcb7c5b8; ret; 
0x00000000000ce6f7: sar ebx, 0x3f; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cmp eax, 0x4a121583; ret; 
0x000000000012eb53: sar ebx, 0x6b; loope 0x12eb97; ja 0x12eb85; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000013eef3: sar ebx, 0x6b; loope 0x13ef37; ja 0x13ef25; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000015d373: sar ebx, 0x6b; loope 0x15d3b7; ja 0x15d3a5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000016d633: sar ebx, 0x6b; loope 0x16d677; ja 0x16d665; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x0000000000181413: sar ebx, 0x6b; loope 0x181457; ja 0x181445; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018c1b3: sar ebx, 0x6b; loope 0x18c1f7; ja 0x18c1e5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000dea13: sar ebx, 0x6b; loope 0xdea57; ja 0xdea45; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000faeb3: sar ebx, 0x6b; loope 0xfaef7; ja 0xfaee5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000007df19: sar edi, 0x7f; add byte ptr [rax], al; cmove eax, edx; ret; 
0x000000000010e832: sar edi, 1; cli; ret 0xeb42; 
0x000000000002e918: sar edx, 0x14; lea eax, [rdx - 0x3ff]; ret; 
0x000000000004e630: sar edx, 0x17; lea eax, [rdx - 0x7f]; ret; 
0x000000000006ac29: sar edx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x0000000000042def: sar edx, cl; imul rax, rdx; ret; 
0x00000000000d6e05: sar qword ptr [rdi + 0x1737ca6d], 0xda; ret 0x3f9e; 
0x00000000000727b9: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000042f9c: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000006ac28: sar rdx, 0x30; lea eax, [rdx - 0x3fff]; ret; 
0x0000000000042dee: sar rdx, cl; imul rax, rdx; ret; 
0x00000000000a4da9: sbb ah, al; jns 0xa4dd6; fadd st(4); ret; 
0x0000000000012df9: sbb ah, bl; ret 0xcad9; 
0x000000000010323a: sbb ah, bl; ret; 
0x00000000000d8de0: sbb ah, byte ptr [rbp - 0x44a79cf7]; cmp al, 0xbc; sub dword ptr [rax - 0x54f51984], ebx; ret 0xef3f; 
0x000000000010e563: sbb ah, byte ptr [rcx + rax*2 + 0x1a41a41a]; movsb byte ptr [rdi], byte ptr [rsi]; sbb spl, byte ptr [r15 + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x000000000010e56c: sbb ah, byte ptr [rdi + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x0000000000011c65: sbb ah, byte ptr [rsi + 0xf]; out dx, eax; ror byte ptr [rdi], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000a3276: sbb al, 0; add ah, al; jnp 0xa32d9; ret; 
0x00000000001966c8: sbb al, 0; add byte ptr [rax], al; cmp al, 0x57; add byte ptr [rax], al; adc byte ptr [rbx - 0x13], bl; jmp qword ptr [rbx + 1]; 
0x00000000001979a8: sbb al, 0; add byte ptr [rax], al; sbb al, 0x6a; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x00000000000c0c60: sbb al, 0; add ch, al; ret; 
0x00000000000fd1ba: sbb al, 0x14; ret; 
0x00000000000e76e5: sbb al, 0x1c; cmp eax, 0x27125244; ret; 
0x00000000000ca772: sbb al, 0x1c; ret; 
0x000000000009b2cb: sbb al, 0x30; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; subss xmm0, xmm0; ret; 
0x00000000000e76e6: sbb al, 0x3d; push rdx; adc ah, byte ptr [rdi]; ret; 
0x00000000000d9d34: sbb al, 0x42; insb byte ptr [rdi], dx; cmp al, 0x95; add eax, 0xb0479c62; out 0x3f, al; ret 0xd7f0; 
0x00000000000dd790: sbb al, 0x43; ret 0x8e90; 
0x0000000000050623: sbb al, 0x48; add esp, 0x18; ret; 
0x00000000000d7468: sbb al, 0x5c; sti; ret; 
0x000000000004a1a8: sbb al, 0x62; or eax, dword ptr [rax]; mulss xmm1, xmm2; mulss xmm1, xmm0; addss xmm0, xmm1; ret; 
0x0000000000045a9f: sbb al, 0x66; ucomiss xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000001979ac: sbb al, 0x6a; add byte ptr [rax], al; xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x00000000000eaa42: sbb al, 0x6b; adc eax, 0xadbd3b55; ret 0xd64e; 
0x0000000000101cd3: sbb al, 0x84; cmc; ret 0xe7fc; 
0x00000000000fd2db: sbb al, 0x8a; iretd; cmp ecx, ecx; xchg eax, esi; idiv edi; call rsp; 
0x00000000000ece2b: sbb al, 0x8a; movabs dword ptr [0x8753bc11a0003f3f], eax; ret 0xe6bf; 
0x00000000000e83c1: sbb al, 0xcd; fcmove st(0), st(3); ret 0x3f3a; 
0x00000000001902fd: sbb al, 0xec; call rax; 
0x0000000000052e4e: sbb al, 0xf3; movups xmmword ptr [rsp + 0x10], xmm1; movss dword ptr [rsp + 0x14], xmm0; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000e6bd2: sbb al, 0xf3; ret; 
0x000000000010be25: sbb al, 0xf6; push rbx; sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x000000000004df9c: sbb al, 0xf; scasd eax, dword ptr [rdi]; ret 0x389; 
0x00000000000ddc60: sbb al, 0xfb; cmc; mov dword ptr [rdi + 0x27], esi; ret 0x11bf; 
0x0000000000049be1: sbb al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d8d62: sbb al, bh; xchg esi, eax; ret 0x3c4b; 
0x00000000000a3151: sbb al, byte ptr [rax]; add ah, al; jnp 0xa31b4; ret 0x3bc5; 
0x00000000000be473: sbb al, byte ptr [rax]; add ch, al; ret; 
0x00000000000209bb: sbb al, ch; jmp qword ptr [rax - 1]; 
0x0000000000104798: sbb al, ch; ret; 
0x00000000000d43d3: sbb bh, ah; cli; mov ebx, 0xa8bc2240; ret; 
0x0000000000049f77: sbb bh, ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000049f2e: sbb bh, ah; push rbx; addps xmm0, xmmword ptr [rip + 0xb646f]; add rsp, 8; ret; 
0x00000000000209b7: sbb bh, bh; je 0x209df; sbb al, ch; jmp qword ptr [rax - 1]; 
0x00000000000accd2: sbb bh, byte ptr [rax]; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f06ce: sbb bh, byte ptr [rdi]; add byte ptr [rax], ah; xchg ecx, eax; ret; 
0x000000000007d832: sbb bh, byte ptr [rdx + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000010305c: sbb bh, byte ptr [rsi]; mov edi, dword ptr [rdi + 0x691e3000]; outsb dx, byte ptr [rsi]; xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x00000000000e64b0: sbb bh, cl; ret 0xa4a8; 
0x000000000001bddb: sbb bl, bl; jl 0x1be03; or cl, ch; imul ecx, dword ptr [rsi], -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000012997: sbb bl, bl; sub al, 0x24; add rsp, 0x18; fadd st(0); ret; 
0x00000000000fdadb: sbb bl, byte ptr [rbx]; ret; 
0x00000000000f0d1a: sbb bl, byte ptr [rip - 0x42ef9e2e]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x0000000000190dbc: sbb bl, ch; int1; jmp rax; 
0x000000000004d33a: sbb bl, dh; addps xmm0, xmm1; addss xmm0, xmm2; ret; 
0x000000000004dc37: sbb bl, dh; divps xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000006c1a3: sbb bl, dh; movd dword ptr [rsp], mm2; movhps xmm2, qword ptr [rsp + 0x18]; add rsp, 0x28; movdqa xmm0, xmm2; ret; 
0x0000000000056dcc: sbb bl, dh; movups xmm0, xmm1; ret; 
0x00000000000526b1: sbb bl, dh; movups xmmword ptr [rsp + 0x10], xmm0; movss dword ptr [rsp + 0x14], xmm1; movq xmm0, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000004a5d7: sbb bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a67f: sbb bl, dh; mulps xmm1, xmm0; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004a5b4: sbb bl, dh; mulps xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x00000000001902bc: sbb bpl, spl; call qword ptr [rax]; 
0x000000000006facd: sbb byte ptr [rax + 0x21], cl; ret 0x8b48; 
0x00000000000595d9: sbb byte ptr [rax + 0x21], cl; ret; 
0x00000000000986ee: sbb byte ptr [rax + 0x63], cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000190ee8: sbb byte ptr [rax + rax - 0xcb3b800], ch; jmp qword ptr [rax - 0x54]; 
0x00000000001142c1: sbb byte ptr [rax - 0x21], bh; ret; 
0x00000000000f0889: sbb byte ptr [rax - 0x57c7fe7d], al; add byte ptr ds:[rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x000000000000bca7: sbb byte ptr [rax - 0x75], cl; add eax, 0x391339; test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000001b6c3: sbb byte ptr [rax - 0x77], cl; ror byte ptr [rcx - 0x173eb72d], 1; and byte ptr [rcx], cl; ret; 
0x000000000000f697: sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0xf6c2; adc al, ch; pop rsp; ret 0xffff; 
0x000000000009b2a4: sbb byte ptr [rax], al; add eax, dword ptr [rax]; subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000190214: sbb byte ptr [rax], dl; in al, dx; call rax; 
0x0000000000037405: sbb byte ptr [rbp + 0xa], dh; add rsp, 0x178; pop rbx; pop rbp; ret; 
0x0000000000029b0c: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000004aa9a: sbb byte ptr [rbx + 0x5d], bl; movaps xmm0, xmm1; ret; 
0x000000000004aa5a: sbb byte ptr [rbx + 0x5d], bl; movaps xmm0, xmm2; ret; 
0x000000000003cee7: sbb byte ptr [rbx + 0x5d], bl; pop r12; divsd xmm0, xmm0; pop r13; ret; 
0x000000000003ce11: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004db6b: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008f76c: sbb byte ptr [rbx + 5], al; add ch, al; ret; 
0x00000000000ccd0c: sbb byte ptr [rbx - 0x7538000c], cl; hlt; jmp qword ptr [rsi]; 
0x0000000000049a46: sbb byte ptr [rbx - 0x76e7dbbc], cl; ret 0x4489; 
0x0000000000099a9d: sbb byte ptr [rbx], al; add ch, al; stc; push rdi; ret 0xf1c5; 
0x000000000004e878: sbb byte ptr [rbx], bl; or eax, dword ptr [rax]; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000c949e: sbb byte ptr [rcx + 0x21], cl; ret; 
0x00000000000c96a1: sbb byte ptr [rcx + 0x21], cl; ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x00000000000e37f5: sbb byte ptr [rcx + 0x379081bd], ch; cld; xchg esi, eax; mov dl, 0x65; jle 0xe379d; ret; 
0x000000000002e8ff: sbb byte ptr [rcx - 0xfffff0e], al; jg 0x2e938; ror byte ptr [rcx], 0xca; setne al; add eax, 0x7fffffff; ret; 
0x000000000004e617: sbb byte ptr [rcx], dh; rol byte ptr [rcx - 0x7fffff06], 0x7f; setne al; add eax, 0x7fffffff; ret; 
0x00000000000804a7: sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], 0xc8; setl al; lea eax, [rax + rax - 1]; ret; 
0x000000000002720e: sbb byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000ca4b3: sbb byte ptr [rdi + 0x4f3fea94], ch; ja 0xca4af; ret 0xa1fc; 
0x00000000000ca4b2: sbb byte ptr [rdi + 0x4f3fea94], r13b; ja 0xca4af; ret 0xa1fc; 
0x0000000000052e45: sbb byte ptr [rdi], cl; push rdi; ret 0xff3; 
0x0000000000056e4f: sbb byte ptr [rdx + rdx*8 + 0x1b8], al; add byte ptr [rdi + rax - 0xd], dh; ret; 
0x0000000000190e8c: sbb byte ptr [rdx + rsi*8 + 0xa8d4ff], bh; add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x0000000000190464: sbb byte ptr [rdx - 0x14], bh; jmp rax; 
0x00000000000d0ac3: sbb byte ptr [rdx - 0x49], ah; mov edi, 0x51caad3f; mov cl, 0x5a; xchg ebp, eax; ret; 
0x000000000005b4f4: sbb byte ptr [rdx - 0x7c17fff6], ah; ret; 
0x0000000000047c0d: sbb byte ptr [rdx], al; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x000000000008d3e0: sbb byte ptr [rip + 0x41c40000], dl; jnp 0x8d444; ret; 
0x0000000000141b53: sbb byte ptr [rip - 0x4fc00c84], ch; jnp 0x141b52; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000170093: sbb byte ptr [rip - 0x4fc00c84], ch; jnp 0x170092; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000018ec13: sbb byte ptr [rip - 0x4fc00c84], ch; jnp 0x18ec12; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000fde73: sbb byte ptr [rip - 0x4fc00c84], ch; jnp 0xfde72; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000e99de: sbb byte ptr [rip - 0x7f59a1ca], bh; ret; 
0x00000000000f0bfe: sbb byte ptr [rip], bh; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x00000000000f0bfd: sbb byte ptr [rip], r15b; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x00000000000e73b8: sbb byte ptr [rsi + 0x61861861], al; call 0x78148802; ret 0x4f00; 
0x000000000011b338: sbb byte ptr [rsi + 0x61861861], al; call 0x7817c782; ret 0x4f00; 
0x0000000000149cd8: sbb byte ptr [rsi + 0x61861861], al; call 0x781ab122; ret 0x4f00; 
0x0000000000177c18: sbb byte ptr [rsi + 0x61861861], al; call 0x781d9062; ret 0x4f00; 
0x0000000000075451: sbb byte ptr [rsi + 0xf], ah; out dx, eax; add eax, 0x6e2e6; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x0000000000070ce4: sbb byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000006c0ff: sbb byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000074836: sbb byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xfc3; 
0x0000000000044f4e: sbb byte ptr [rsi + 0xf], ah; push rdi; ret; 
0x0000000000045529: sbb byte ptr [rsi + 0xf], ah; push rdi; shl byte ptr [rsi + 0xf], 1; sub cl, al; movapd xmm1, xmm2; ret; 
0x0000000000044db1: sbb byte ptr [rsi + 0xf], ah; sub cl, al; movapd xmm1, xmm2; ret; 
0x00000000000af2c3: sbb byte ptr [rsi], al; add ch, al; ret; 
0x00000000001217f1: sbb ch, 0xcd; jae 0x1217c1; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x0000000000150051: sbb ch, 0xcd; jae 0x150021; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x00000000000ed871: sbb ch, 0xcd; jae 0xed841; lodsb al, byte ptr [rsi]; mov edi, 0x6e09f5fe; ret; 
0x00000000001902bd: sbb ch, ah; call qword ptr [rax]; 
0x00000000000c1045: sbb ch, al; ret; 
0x00000000000c2f6e: sbb ch, al; sti; pop rsp; ret 0xfbc5; 
0x000000000010d0a2: sbb ch, byte ptr [rbx + 0x7d799144]; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x000000000010d2c5: sbb ch, byte ptr [rcx]; ret; 
0x00000000000e8902: sbb ch, byte ptr [rsi]; xchg cl, al; xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x0000000000001c09: sbb cl, 0x50; mov ah, byte ptr [rsi + 0x6d]; jne 0x417cb2ca; ret; 
0x00000000000d7c5b: sbb cl, 0xb9; mov edi, 0x5c4097bf; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x000000000001bf84: sbb cl, bl; leave; ret; 
0x000000000001c16c: sbb cl, bl; out dx, al; ret; 
0x000000000012dd9b: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13b: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5bb: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87b: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065b: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18068d; ret 0x11bf; 
0x000000000018b3fb: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5b: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0fb: sbb cl, byte ptr [r10]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xfa12d; ret 0x11bf; 
0x0000000000032005: sbb cl, byte ptr [rbx]; add byte ptr [rdx + 0x3e], bh; jne 0x32048; movsd xmm0, qword ptr [rip + 0xb55a4]; divsd xmm0, qword ptr [rip + 0x992b4]; ret; 
0x0000000000066bb5: sbb cl, byte ptr [rdx]; add al, ch; ret; 
0x000000000012dd9c: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e13c: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5bc: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c87c: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x16c8ad; ret 0x11bf; 
0x000000000018065c: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18068d; ret 0x11bf; 
0x000000000018b3fc: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc5c: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0fc: sbb cl, byte ptr [rdx]; sar byte ptr [rdi - 0x760a04e4], cl; ja 0xfa12d; ret 0x11bf; 
0x000000000007d1e1: sbb cl, ch; pop rcx; out dx, al; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000d0bbc: sbb cl, ch; ret 0xec3f; 
0x0000000000049127: sbb cl, ch; ret; 
0x000000000007d8d6: sbb cl, ch; xchg esp, eax; ret; 
0x0000000000196ff0: sbb dh, 0xed; jmp rax; 
0x000000000002a003: sbb dh, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000077cae: sbb dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000004dc8d: sbb dh, bl; mulps xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000012e7c: sbb dh, bl; stc; faddp st(1); ret; 
0x0000000000190655: sbb dh, ch; call qword ptr [rax]; 
0x0000000000190824: sbb dh, cl; out dx, al; jmp rax; 
0x000000000010be29: sbb dh, dh; dec dword ptr [rcx]; sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x0000000000190e3d: sbb dh, dl; inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x00000000001905dc: sbb dl, bh; in eax, dx; jmp qword ptr [rax + 0x73]; 
0x000000000006a064: sbb dl, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d5daa: sbb dl, byte ptr [rdi]; outsb dx, byte ptr [rsi]; pop rdi; ret 0x103f; 
0x0000000000105f02: sbb dl, byte ptr [rdx]; ret 0x3f9; 
0x000000000002c4d6: sbb dl, dh; addps xmm0, xmm2; addsd xmm0, xmm1; ret; 
0x000000000002de47: sbb dl, dh; divps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000002deb7: sbb dl, dh; mulps xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x0000000000027118: sbb dl, dh; mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000271d8: sbb dl, dh; mulps xmm1, xmm0; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000270ee: sbb dl, dh; mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x00000000000669b5: sbb dword ptr [edx], ecx; add al, ch; ret 0x5e4; 
0x0000000000056d5a: sbb dword ptr [rax - 0x75], ecx; add eax, 0x346256; mov dword ptr fs:[rax], 0x22; ret; 
0x000000000000bc56: sbb dword ptr [rax - 0x75], ecx; add eax, 0x391352; test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x00000000000745c6: sbb dword ptr [rax - 0x7b], ecx; sal byte ptr [rbp + rcx*8 + 0x66], 0xf; out dx, eax; sar byte ptr [rax + 1], 0xf; sub dword ptr [rdi], eax; ret; 
0x000000000008cf81: sbb dword ptr [rax], eax; add ah, al; jnp 0x8cfe4; ret; 
0x00000000000b3481: sbb dword ptr [rax], eax; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x00000000000bffe0: sbb dword ptr [rax], eax; add ch, al; ret; 
0x000000000001b6a5: sbb dword ptr [rax], edi; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000d0b0c: sbb dword ptr [rax], esp; ret 0xde3f; 
0x00000000000d8635: sbb dword ptr [rbp + 0x3c], esi; movabs dword ptr [0x9f3fea647e2348d9], eax; in eax, 0x56; xchg ecx, eax; ret 0x84f6; 
0x00000000000e28f4: sbb dword ptr [rbp + rbp*8 + 0x3f], ebp; ret; 
0x00000000000d75f3: sbb dword ptr [rbx - 0x2dc3c7f3], ecx; ret 0xba1b; 
0x00000000000ddb80: sbb dword ptr [rbx - 0x4cb3408c], eax; ret; 
0x00000000000999b7: sbb dword ptr [rbx], eax; add ch, al; stc; push rdi; ret 0xf1c5; 
0x00000000000320f9: sbb dword ptr [rbx], ecx; add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x991ac; divsd xmm0, xmm1; ret; 
0x00000000000a6536: sbb dword ptr [rcx - 0x14], -0x3c; ret; 
0x00000000001106f3: sbb dword ptr [rcx - 0x73], edx; xchg edx, eax; ret 0x3fbd; 
0x0000000000114841: sbb dword ptr [rcx - 0x73], edx; xchg edx, eax; ret 0xee38; 
0x000000000010d1d8: sbb dword ptr [rcx], edi; ret; 
0x00000000000e5f03: sbb dword ptr [rdi + 0x26], ebp; ret 0x883f; 
0x00000000000ef2f3: sbb dword ptr [rdi + 0x26], ebp; ret 0xf63f; 
0x00000000000e5695: sbb dword ptr [rdi + rdi - 0x74], esp; sub r15b, byte ptr [r9 + 0x79]; ret 0xbc01; 
0x00000000000e223a: sbb dword ptr [rdx + 0x3e2837f0], 0; add byte ptr [rax], al; mov eax, 0x3fe7df9a; pop rbx; ret; 
0x00000000000fd971: sbb dword ptr [rdx + 0x70], edx; ret 0xfb3a; 
0x00000000000d8011: sbb dword ptr [rdx + 4], esi; int 0x80; 
0x000000000008ce4b: sbb dword ptr [rdx + rcx], esi; add ch, al; ret; 
0x00000000000669b6: sbb dword ptr [rdx], ecx; add al, ch; ret 0x5e4; 
0x0000000000066db5: sbb dword ptr [rdx], ecx; add al, ch; ret; 
0x00000000000e88fe: sbb dword ptr [rip + 0x2e1a0e83], edi; xchg cl, al; xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x00000000000ddb7a: sbb dword ptr [rip - 0x402e6774], esi; sbb dword ptr [rbx - 0x4cb3408c], eax; ret; 
0x000000000010da45: sbb dword ptr [rsi + 0x5b], eax; jne 0x10da0c; ret; 
0x000000000007dc33: sbb dword ptr [rsi + 8], esi; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x20e8; 
0x00000000000999b6: sbb dword ptr es:[rbx], eax; add ch, al; stc; push rdi; ret 0xf1c5; 
0x0000000000049517: sbb eax, 0x14770008; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x00000000000d8ae2: sbb eax, 0x1569aa83; cmp al, 0x36; mov esp, 0xdabe0f10; ret; 
0x00000000000ff58d: sbb eax, 0x27d93fe9; stosb byte ptr [rdi], al; push rbx; ret; 
0x00000000000e7eb0: sbb eax, 0x3169774d; ret 0x3f40; 
0x00000000000e2239: sbb eax, 0x37f09a83; sub byte ptr [rsi], bh; add byte ptr [rax], al; add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x00000000000fc7bb: sbb eax, 0x3fcc71c5; push rdx; fist word ptr ds:[rdx]; int1; ret 0x9f3f; 
0x00000000000e661b: sbb eax, 0x3ff005d2; imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x0000000000101ad1: sbb eax, 0x436205b2; mov edx, esi; ret; 
0x000000000000cc3f: sbb eax, 0x48000014; add esp, 0x28; ret; 
0x00000000001015d4: sbb eax, 0x4f45bca6; xchg esp, eax; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000049897: sbb eax, 0x64003537; mov dword ptr [rax], 0x22; add rsp, 0x28; ret; 
0x000000000009bc08: sbb eax, 0x77813; vfmadd231sd xmm1, xmm0, xmm3; vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x000000000009d7e8: sbb eax, 0x7a8d2; xor ch, al; ret; 
0x00000000000de9e1: sbb eax, 0x7f39244a; out 0x3f, eax; shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x0000000000044fc9: sbb eax, 0x862fa; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x00000000000a95a6: sbb eax, 0x89480002; ret 0xfbc5; 
0x000000000006c4d4: sbb eax, 0x8d480000; adc eax, 0x9f936; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000010d0a1: sbb eax, 0x9144ab1a; jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x00000000000a9d79: sbb eax, 0x968f9; xor ch, al; sti; pop rax; ret 0xe3c5; 
0x000000000009c966: sbb eax, 0xa692d; vmulsd xmm1, xmm2, xmm1; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000113a05: sbb eax, 0xbaf4f12c; sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x0000000000125c93: sbb eax, 0xbc35a199; xlatb; loope 0x125d11; stosb byte ptr [rdi], al; ret; 
0x0000000000136033: sbb eax, 0xbc35a199; xlatb; loope 0x1360b1; stosb byte ptr [rdi], al; ret; 
0x00000000001544b3: sbb eax, 0xbc35a199; xlatb; loope 0x154531; stosb byte ptr [rdi], al; ret; 
0x0000000000164773: sbb eax, 0xbc35a199; xlatb; loope 0x1647f1; stosb byte ptr [rdi], al; ret; 
0x0000000000178553: sbb eax, 0xbc35a199; xlatb; loope 0x1785d1; stosb byte ptr [rdi], al; ret; 
0x00000000001832f3: sbb eax, 0xbc35a199; xlatb; loope 0x183371; stosb byte ptr [rdi], al; ret; 
0x00000000000d5b53: sbb eax, 0xbc35a199; xlatb; loope 0xd5bd1; stosb byte ptr [rdi], al; ret; 
0x00000000000f1ff3: sbb eax, 0xbc35a199; xlatb; loope 0xf2071; stosb byte ptr [rdi], al; ret; 
0x00000000000f0d1b: sbb eax, 0xbd1061d2; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x0000000000105a46: sbb eax, 0xc5b8baf9; mov bh, 0xc; ret; 
0x0000000000105b7d: sbb eax, 0xcfc73fdd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x00000000000de95c: sbb eax, 0xedbfb590; retfq; cmp edi, edi; jmp rdx; 
0x00000000000735eb: sbb eax, 0xf660009; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000039e43: sbb eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x44]; 
0x00000000000c0d3b: sbb eax, dword ptr [rax]; add ch, al; ret; 
0x0000000000113a0a: sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x00000000000fcb49: sbb eax, ebp; mov eax, 0x3fb70fe4; jmp qword ptr [rdx - 0x1b]; 
0x00000000000d013a: sbb ebp, dword ptr [rbp + 0x3ca13f57]; xor byte ptr [rbx + 0x4ff9c8e0], dl; ret 0x3f; 
0x00000000000ea6eb: sbb ebp, dword ptr [rbx + 0x1e]; xor al, 0xbf; add byte ptr [rax], al; or byte ptr [rax + 0x3f341f35], 0x2f; cld; ret; 
0x00000000000d9b70: sbb ebx, 0x45; ret 0x961a; 
0x00000000000b7e48: sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7e78; ret; 
0x00000000000b7f2e: sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb7f5e; ret; 
0x00000000000b8014: sbb ebx, dword ptr [r11 + riz*8 - 0x3c]; jns 0xb8044; ret; 
0x00000000000b5436: sbb ebx, dword ptr [r13 + riz*8 - 0x3b]; ret; 
0x0000000000092b59: sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret 0x9db9; 
0x00000000000a918e: sbb ebx, dword ptr [rax + 0x24]; rol esp, 1; ret; 
0x000000000011b713: sbb ebx, dword ptr [rbp + 0x3f4583]; add al, al; jae 0x11b6eb; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x0000000000149f73: sbb ebx, dword ptr [rbp + 0x3f4583]; add al, al; jae 0x149f4b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000e7793: sbb ebx, dword ptr [rbp + 0x3f4583]; add al, al; jae 0xe776b; add dword ptr [rbp - 0x41], 0x76830985; ret 0x3361; 
0x00000000000b5437: sbb ebx, dword ptr [rbp + riz*8 - 0x3b]; ret; 
0x00000000000b7e49: sbb ebx, dword ptr [rbx + riz*8 - 0x3c]; jns 0xb7e78; ret; 
0x00000000000b7f2f: sbb ebx, dword ptr [rbx + riz*8 - 0x3c]; jns 0xb7f5e; ret; 
0x00000000000b8015: sbb ebx, dword ptr [rbx + riz*8 - 0x3c]; jns 0xb8044; ret; 
0x00000000000af845: sbb ebx, dword ptr [rcx + riz*8 - 0x3b]; jnp 0xaf8a4; fld st(4); ret; 
0x00000000000afda5: sbb ebx, dword ptr [rcx + riz*8 - 0x3b]; jnp 0xafe04; fld st(4); ret; 
0x00000000000ece6a: sbb ebx, ebx; out dx, eax; call 0xffffffffc00f8d97; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x0000000000120dea: sbb ebx, ebx; out dx, eax; call 0xffffffffc012cd17; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x000000000014f64a: sbb ebx, ebx; out dx, eax; call 0xffffffffc015b577; sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x00000000000dcf4b: sbb ecx, dword ptr [rax]; wait; mov ebp, 0x45adfc3f; ret; 
0x000000000004e879: sbb ecx, dword ptr [rbx]; add bl, dh; mulps xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000000d541: sbb ecx, dword ptr [rbx]; add byte ptr [rax], al; add rsp, 0x20; add rsp, 8; ret; 
0x0000000000021f54: sbb ecx, dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000007b17f: sbb ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], esp; add rsp, 0x10; pop rbx; ret; 
0x00000000000762d4: sbb ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], esp; jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x000000000001b465: sbb edi, dword ptr [rax]; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000117b98: sbb edi, ebp; jne 0x117bc0; ret 0x314d; 
0x0000000000146578: sbb edi, ebp; jne 0x1465a0; ret 0x314d; 
0x00000000001744b8: sbb edi, ebp; jne 0x1744e0; ret 0x314d; 
0x00000000000e31b8: sbb edi, ebp; jne 0xe31e0; ret 0x314d; 
0x00000000000dd175: sbb edx, edx; mov edi, 0xac6ac8ad; clc; pop rdi; ret 0xca3f; 
0x00000000000ecd69: sbb edx, esi; mov esi, 0xbf3bed61; add byte ptr [rax + 0x65fcb015], ah; ret; 
0x000000000004964e: sbb edx, esi; movups xmm0, xmm1; ret; 
0x000000000007b671: sbb esi, dword ptr [rdi - 0x917fffc]; in eax, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000867e4: sbb esi, ebx; ret; 
0x0000000000190e45: sbb esi, edx; call rax; 
0x00000000000e4db0: sbb esi, edx; in eax, dx; mov byte ptr [rbx - 1], cl; xor bh, byte ptr [rdi]; ret; 
0x000000000010be2d: sbb esi, esi; call qword ptr [rbp + 0x16]; 
0x000000000010d1aa: sbb esi, esi; ret 0x4eb; 
0x00000000000f0c1c: sbb esp, dword ptr [rdi]; cmp eax, 0x3d; add byte ptr [rax], al; mov eax, 0x64073fe7; mov sil, 0x9c; ret; 
0x00000000000dd043: sbb esp, dword ptr [rsi + 0x5f]; ret 0x2c3f; 
0x000000000006976a: sbb esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000073022: sbb esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000001902ad: sbb esp, ebp; jmp rax; 
0x00000000000d0b0b: sbb qword ptr [r8], r12; ret 0xde3f; 
0x00000000000a4da8: sbb r12b, al; jns 0xa4dd6; fadd st(4); ret; 
0x00000000000c2f6d: sbb r13b, r8b; sti; pop rsp; ret 0xfbc5; 
0x000000000010e56b: sbb spl, byte ptr [r15 + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x000000000010e562: sbb spl, byte ptr [r9 + rax*2 + 0x1a41a41a]; movsb byte ptr [rdi], byte ptr [rsi]; sbb spl, byte ptr [r15 + rsi*8 - 0x2ce8a3c1]; mov cs, word ptr [rdx + 6]; ret 0x397d; 
0x00000000000869ee: scasb al, byte ptr [rdi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000102f5b: scasb al, byte ptr [rdi]; cli; ret 0x3f8d; 
0x00000000000dc151: scasb al, byte ptr [rdi]; mov bh, 0xb4; xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x000000000012e748: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x12e75c; ret 0x8d3f; 
0x000000000013eae8: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x13eafc; ret 0x8d3f; 
0x000000000015cf68: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x15cf7c; ret 0x8d3f; 
0x000000000016d228: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x16d23c; ret 0x8d3f; 
0x0000000000181008: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x18101c; ret 0x8d3f; 
0x000000000018bda8: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0x18bdbc; ret 0x8d3f; 
0x00000000000de608: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0xde61c; ret 0x8d3f; 
0x00000000000faaa8: scasb al, byte ptr [rdi]; or byte ptr [rdi + 0x73], ah; jge 0xfaabc; ret 0x8d3f; 
0x000000000007a68e: scasb al, byte ptr [rdi]; out 0xfd, al; jmp qword ptr [rsi + 0xf]; 
0x00000000000dbc29: scasb al, byte ptr [rdi]; pop r11; ret; 
0x00000000000186e9: scasb al, byte ptr [rdi]; pop rbx; ret; 
0x0000000000107304: scasb al, byte ptr [rdi]; pushfq; xor al, bl; ret 0xf46e; 
0x00000000000df3a9: scasb al, byte ptr [rdi]; ret; 
0x00000000000e5694: scasb al, byte ptr [rdi]; sbb dword ptr [rdi + rdi - 0x74], esp; sub r15b, byte ptr [r9 + 0x79]; ret 0xbc01; 
0x0000000000049516: scasb al, byte ptr [rdi]; sbb eax, 0x14770008; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x00000000000df3a8: scasb al, byte ptr [rdi]; scasb al, byte ptr [rdi]; ret; 
0x00000000000710bd: scasb al, byte ptr [rdi]; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000d8668: scasb al, byte ptr [rdi]; xchg ah, al; ret 0x801f; 
0x00000000000520d0: scasb al, byte ptr [rdi]; xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000051b9d: scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 9], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000d1113: scasd eax, dword ptr [rdi]; bnd call rsp; 
0x00000000000e9b34: scasd eax, dword ptr [rdi]; call qword ptr [rcx]; 
0x00000000000b08cb: scasd eax, dword ptr [rdi]; cmc; jmp qword ptr [rsi - 0x70]; 
0x00000000000eaa40: scasd eax, dword ptr [rdi]; ficomp dword ptr [rbx + rbp*2]; adc eax, 0xadbd3b55; ret 0xd64e; 
0x00000000000e4d14: scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000dd7e0: scasd eax, dword ptr [rdi]; pop rdx; xor al, 0x2d; std; call rcx; 
0x000000000002e1e0: scasd eax, dword ptr [rdi]; ret 0x389; 
0x0000000000101443: scasd eax, dword ptr [rdi]; ret 0x4712; 
0x000000000010d033: scasd eax, dword ptr [rdi]; ret 0x59a6; 
0x0000000000042df3: scasd eax, dword ptr [rdi]; ret 0x66c3; 
0x00000000000724cc: scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000000d7529: scasd eax, dword ptr [rdi]; ret 0xa436; 
0x0000000000019af2: scasd eax, dword ptr [rdi]; ret 0xfc3; 
0x00000000000dc564: scasd eax, dword ptr [rdi]; ret; 
0x00000000000ec215: scasd eax, dword ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x00000000000e78b2: scasd eax, dword ptr [rdi]; stosd dword ptr [rdi], eax; pop rbp; ret; 
0x00000000000e2c3a: scasd eax, dword ptr [rdi]; xchg edi, eax; ret 0xf256; 
0x00000000000ec214: scasw ax, word ptr [rdi]; sar byte ptr [rdi - 0xad727f6], 1; ret; 
0x0000000000042f5c: seta al; movzx eax, al; ret; 
0x000000000006bc6d: setb byte ptr [rip - 0x3b7cb800]; pop rbx; pop rbp; ret; 
0x000000000001b0a9: setbe al; and eax, esi; ret; 
0x000000000004400d: setbe al; movzx eax, al; ret; 
0x000000000001b03e: setbe dl; xor eax, eax; cmp r9d, r8d; sete al; and eax, edx; ret; 
0x0000000000019dc6: sete al; and eax, ecx; ret; 
0x000000000001b046: sete al; and eax, edx; ret; 
0x000000000001b0a2: sete dh; xor eax, eax; cmp ecx, edx; setbe al; and eax, esi; ret; 
0x000000000001b0a1: sete sil; xor eax, eax; cmp ecx, edx; setbe al; and eax, esi; ret; 
0x00000000000804ad: setl al; lea eax, [rax + rax - 1]; ret; 
0x0000000000043fe7: setle al; movzx eax, al; ret; 
0x000000000002e90a: setne al; add eax, 0x7fffffff; ret; 
0x0000000000072da2: setne al; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000080470: setne al; neg eax; ret; 
0x000000000001a127: setp al; cmovne eax, edx; ret; 
0x0000000000011a3a: setp al; cmovne eax, edx; test al, al; jne 0x11a70; add rsp, 0x18; ret; 
0x000000000000e40e: setp al; cmovne eax, edx; test al, al; jne 0xe440; add rsp, 0x28; ret; 
0x00000000000c47d3: setp dl; and al, dl; jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x00000000000034c8: sgdt [rax]; add byte ptr [rdx], dl; add byte ptr [rsi], cl; add byte ptr [rax], ah; ret 0; 
0x0000000000015d0f: shl ah, 1; xor dl, ah; and edx, 2; lea rcx, [rip + 0xb5d93]; fld qword ptr [rcx + rdx*4]; ret; 
0x00000000000fc66e: shl byte ptr [esi + 0x22], 0x28; test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x00000000000866a6: shl byte ptr [r14 + 0xf], 1; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x00000000000ece08: shl byte ptr [rbp + 0x20], cl; push rax; fisttp word ptr [rbp + riz + 0x5f6000bf]; or dword ptr [rbp - 0x54], edx; ret 0xa8bf; 
0x00000000001125a0: shl byte ptr [rbp - 0x461ea04b], 1; int 0x3f; ret 0xcc6f; 
0x00000000000f0d1c: shl byte ptr [rcx + 0x10], cl; mov ebp, 0; add byte ptr [rax + 0x16d63fe7], dl; xor al, 0x1e; ret 0x3f37; 
0x00000000000518fa: shl byte ptr [rcx + 0x28770007], cl; movd xmm0, eax; ret; 
0x0000000000105b46: shl byte ptr [rcx + 0x6f], cl; ret; 
0x0000000000019dc8: shl byte ptr [rcx], 0xc8; ret; 
0x000000000001b048: shl byte ptr [rcx], 0xd0; ret; 
0x000000000001b0ab: shl byte ptr [rcx], 0xf0; ret; 
0x0000000000086671: shl byte ptr [rcx], cl; ret 0x32eb; 
0x000000000000c2a4: shl byte ptr [rcx], cl; ret 0x8966; 
0x0000000000020992: shl byte ptr [rdi + rax*8 + 2], 0x21; add byte ptr [rax], al; add bl, dh; divps xmm0, xmm0; add rsp, 8; ret; 
0x00000000000d8661: shl byte ptr [rdi], 0x44; pop rbx; mov ah, 0x53; cmp al, 0xae; xchg ah, al; ret 0x801f; 
0x000000000010d031: shl byte ptr [rdx - 0x51], 1; ret 0x59a6; 
0x000000000005198b: shl byte ptr [rip + 0x3fffff], 0xf3; cvtpi2ps xmm0, mm0; ret; 
0x0000000000050193: shl byte ptr [rip + 0x7fffffff], 0x89; ret 0x2b74; 
0x0000000000072c7c: shl byte ptr [rip + 0xf660009], 1; outsd dx, dword ptr [rsi]; ret 0xd7e8; 
0x0000000000086ab9: shl byte ptr [rip - 0x80000000], 1; movd xmm0, eax; ret; 
0x00000000000fc66f: shl byte ptr [rsi + 0x22], 0x28; test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x0000000000044063: shl byte ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; sar byte ptr [rax + 1], 0xf2; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043067: shl byte ptr [rsi + 0x48], 1; movd mm0, eax; ret; 
0x00000000000430dc: shl byte ptr [rsi + 0x48], 1; movd mm1, eax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000430bd: shl byte ptr [rsi + 0x48], 1; movd mm1, eax; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000002f26c: shl byte ptr [rsi + 0xf], 0x28; ret 0xf66; 
0x00000000000342a0: shl byte ptr [rsi + 0xf], 0x28; ret; 
0x0000000000011333: shl byte ptr [rsi + 0xf], 0x2e; ret 0x870f; 
0x0000000000044dd3: shl byte ptr [rsi + 0xf], 0x2e; ret; 
0x00000000000496c6: shl byte ptr [rsi + 0xf], 0x2e; ror dword ptr [rdi], 0x93; ret 0xc084; 
0x0000000000039af2: shl byte ptr [rsi + 0xf], 0x54; ret; 
0x000000000004500b: shl byte ptr [rsi + 0xf], 0x56; or eax, 0xb9a5c; ret; 
0x00000000000519bb: shl byte ptr [rsi + 0xf], 0x6e; sar byte ptr [rax + 1], 0xf3; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000006a937: shl byte ptr [rsi + 0xf], 0x6f; ret 0x880f; 
0x000000000006bdaa: shl byte ptr [rsi + 0xf], 0x6f; ret; 
0x000000000003d2bd: shl byte ptr [rsi + 0xf], 0x7e; ret; 
0x0000000000044032: shl byte ptr [rsi + 0xf], 0xef; ror byte ptr [rax + 0x21], 0xd0; cvtsi2sd xmm0, rax; ret; 
0x0000000000067a80: shl byte ptr [rsi + 0xf], 0xef; ror byte ptr [rdi], 0x84; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000008027a: shl byte ptr [rsi + 0xf], 0xef; sal byte ptr [rdx + rdi*4 - 0xe], cl; movups xmm2, xmmword ptr [rip + 0x63497]; movapd xmm0, xmm2; ret; 
0x0000000000051987: shl byte ptr [rsi + 0xf], 0xef; shl byte ptr [rip + 0x3fffff], 0xf3; cvtpi2ps xmm0, mm0; ret; 
0x00000000000866a7: shl byte ptr [rsi + 0xf], 1; outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x000000000006455e: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000069acb: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000004552d: shl byte ptr [rsi + 0xf], 1; sub cl, al; movapd xmm1, xmm2; ret; 
0x000000000002debf: shl byte ptr [rsi + 0xf], 1; sub dl, al; ret; 
0x000000000002deb1: shl byte ptr [rsi + 0xf], cl; retf 0x1876; mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000000e64c: shl byte ptr [rsi + 0xf], cl; retf 0x9b0f; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000c6881: shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x000000000007266a: shl byte ptr [rsi - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000000e8f55: shl byte ptr [rsi], 0xbf; mov ch, ah; ret; 
0x000000000010cae8: shl byte ptr [rsi], cl; pop rbx; ret; 
0x00000000000f1385: shl dh, 0x3f; add byte ptr [rsi], bh; ret; 
0x0000000000062f4c: shl dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1110: shl dl, 0x11; scasd eax, dword ptr [rdi]; bnd call rsp; 
0x0000000000042953: shl dword ptr [r14 + 0xf], 0x2e; int 0x89; ret 0x9b0f; 
0x0000000000042686: shl dword ptr [r14 + 0xf], 1; ror dword ptr cs:[rdi], cl; wait; ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000008890e: shl dword ptr [rbx], 0x59; ret 0xf3c5; 
0x00000000000dc495: shl dword ptr [rcx - 0x41], 0xa; ret 0xe421; 
0x00000000000de9e8: shl dword ptr [rdi + rsi*4 - 0x61], 9; ret 0xbfd4; 
0x000000000007f08e: shl dword ptr [rsi + 0x44], 0xf; push rsp; ret 0x44f2; 
0x00000000000471e8: shl dword ptr [rsi + 0x44], 1; orps xmm1, xmmword ptr [rip + 0xb787e]; movapd xmm0, xmm2; movapd xmm1, xmm9; ret; 
0x0000000000027027: shl dword ptr [rsi + 0xf], 0x28; ret 0xd676; 
0x0000000000045986: shl dword ptr [rsi + 0xf], 0x28; ret 0xf66; 
0x000000000002db71: shl dword ptr [rsi + 0xf], 0x28; ret; 
0x0000000000044cc7: shl dword ptr [rsi + 0xf], 0x28; retf 0xcfe9; xchg esi, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000003193a: shl dword ptr [rsi + 0xf], 0x28; sal edx, 0xf; pop rsp; add eax, 0x99979; ret; 
0x000000000002debb: shl dword ptr [rsi + 0xf], 0x28; shl byte ptr [rsi + 0xf], 1; sub dl, al; ret; 
0x0000000000042954: shl dword ptr [rsi + 0xf], 0x2e; int 0x89; ret 0x9b0f; 
0x000000000003cecb: shl dword ptr [rsi + 0xf], 0x2e; ret 0xb273; 
0x0000000000080331: shl dword ptr [rsi + 0xf], 0x2e; ret; 
0x000000000003d530: shl dword ptr [rsi + 0xf], 0x54; ret; 
0x0000000000047538: shl dword ptr [rsi + 0xf], 0x54; stc; orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004fda2: shl dword ptr [rsi + 0xf], 0x7e; rol byte ptr [rcx], 0xf0; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000004fe01: shl dword ptr [rsi + 0xf], 1; jle 0x4fdd6; add eax, esi; movd xmm0, eax; ret; 
0x000000000006363b: shl dword ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0x4be8; 
0x0000000000063e25: shl dword ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0x61e8; 
0x000000000009b6a7: shl dword ptr [rsi + 0xf], 1; pop rcx; fsub qword ptr [rsi + 0xf]; pop rdx; ret; 
0x0000000000042687: shl dword ptr [rsi + 0xf], 1; ror dword ptr cs:[rdi], cl; wait; ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000003d017: shl dword ptr [rsi + 0xf], 1; sub dl, cl; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x0000000000045b1f: shl dword ptr [rsi + 0xf], cl; push rsi; xlatb; movapd xmm1, xmm2; ret; 
0x00000000000e8f4d: shl dword ptr [rsi], 0x3f; add byte ptr [rax], al; add byte ptr [rax - 0x7f], ch; shl byte ptr [rsi], 0xbf; mov ch, ah; ret; 
0x0000000000027026: shl dword ptr cs:[rsi + 0xf], 0x28; ret 0xd676; 
0x000000000005048c: shl eax, 0x17; or eax, ecx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x00000000000445a4: shl eax, cl; sub rax, 1; ret; 
0x000000000004a97a: shl ebx, 0x17; or eax, r10d; or eax, r11d; movd xmm0, eax; ret; 
0x0000000000105b7a: shl ebx, 0x24; sbb eax, 0xcfc73fdd; lahf; cmp byte ptr [rcx], ch; ret 0xb085; 
0x0000000000086804: shl ecx, 0x1f; and eax, 0x7fffffff; or eax, ecx; movd xmm0, eax; ret; 
0x00000000000321d3: shl ecx, 0x20; or r9, rax; mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x000000000008679b: shl ecx, 0x3f; movq rax, xmm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x00000000000e438d: shl ecx, 1; cmp edi, dword ptr [rax - 0x13464d]; in al, 0x61; mov edi, 0xffd8e706; cld; ret 0x3c02; 
0x0000000000050ff3: shl edi, 0x17; or edi, edx; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x0000000000032350: shl edi, 0x20; or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000027e54: shl edi, 0x34; add rax, rdx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x00000000000324a1: shl edi, 0x34; and rdx, rax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000191b49: shl edi, cl; call rax; 
0x0000000000015dc0: shl edx, 0x1e; shr edx, 0x1f; lea rcx, [rip + 0xb5ce3]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000031a83: shl edx, 0x20; or rax, rdx; mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000074516: shl edx, 0x30; or rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000042e27: shl edx, cl; imul rax, rdx; ret; 
0x0000000000043f6c: shl esi, 0x20; or rsi, rdx; mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000e3309: shl esp, 0xf9; ret; 
0x000000000004a979: shl r11d, 0x17; or eax, r10d; or eax, r11d; movd xmm0, eax; ret; 
0x00000000000321d2: shl r9, 0x20; or r9, rax; mov qword ptr [rsp - 8], r9; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000445a3: shl rax, cl; sub rax, 1; ret; 
0x000000000008679a: shl rcx, 0x3f; movq rax, xmm0; and rax, rdx; or rax, rcx; movq xmm0, rax; ret; 
0x000000000003234f: shl rdi, 0x20; or rdi, rdx; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000027e53: shl rdi, 0x34; add rax, rdx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x00000000000324a0: shl rdi, 0x34; and rdx, rax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000031a82: shl rdx, 0x20; or rax, rdx; mov qword ptr [rsp - 8], rax; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000074515: shl rdx, 0x30; or rdx, rax; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; ret; 
0x0000000000042e26: shl rdx, cl; imul rax, rdx; ret; 
0x0000000000043f6b: shl rsi, 0x20; or rsi, rdx; mov qword ptr [rsp - 8], rsi; movq xmm1, qword ptr [rsp - 8]; movapd xmm0, xmm1; ret; 
0x00000000000cadaa: shld dword ptr [rax - 0x7f], edx, cl; sub r10d, dword ptr [rax]; jnp 0xcade8; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x00000000000ef4f1: shr ah, 0xb0; ret 0xc3df; 
0x0000000000128519: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x128549; ret; 
0x00000000001388b9: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x1388e9; ret; 
0x0000000000156d39: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x156d69; ret; 
0x0000000000166ff9: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x167029; ret; 
0x000000000017add9: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x17ae09; ret; 
0x0000000000185b79: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0x185ba9; ret; 
0x00000000000d83d9: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0xd8409; ret; 
0x00000000000f4879: shr ah, 0xe4; fcmovne st(0), st(0); mov ah, 0xbf; jb 0xf48a9; ret; 
0x00000000000e9061: shr bh, 0x46; xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x0000000000190ba5: shr bh, 1; call qword ptr [rax]; 
0x00000000001900dd: shr bl, 0xff; mov byte ptr [rbx], bl; add byte ptr [rax], bl; ret; 
0x00000000000865ed: shr bl, 1; and eax, dword ptr [rcx + 0x400f9]; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x0000000000044201: shr bl, 1; ror byte ptr [rdi], 0x1f; add dl, sil; addps xmm0, xmm0; ret; 
0x000000000001b393: shr bl, cl; nop; nop word ptr cs:[rax + rax]; fadd st(0); pop rbx; ret; 
0x000000000009d7e9: shr byte ptr [rax - 0x3acffff9], cl; ret; 
0x0000000000192de0: shr byte ptr [rbp - 0x18], 1; call qword ptr [rax]; 
0x0000000000190520: shr byte ptr [rbp], 0; sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x00000000000a9ae2: shr byte ptr [rbx + 9], cl; add ch, al; jns 0xa9b11; ffreep st(5); ret; 
0x000000000010e999: shr byte ptr [rbx], 1; add al, 0xb8; int1; nop; mov edi, 0x947c13a; ret; 
0x0000000000089062: shr byte ptr [rcx - 0x43afffb], cl; pop rcx; ret 0xe9c5; 
0x00000000000bf941: shr byte ptr [rcx], 0; add ch, al; ret; 
0x00000000000ef651: shr byte ptr [rcx], 0xcd; ret 0xc50b; 
0x000000000002dba6: shr byte ptr [rcx], cl; ret; 
0x00000000000ca430: shr byte ptr [rdi + rax*8], 0x6a; push rbx; ret; 
0x0000000000127a99: shr byte ptr [rdx + 0x48], cl; jno 0x127ac5; ret 0xaebf; 
0x0000000000137e39: shr byte ptr [rdx + 0x48], cl; jno 0x137e65; ret 0xaebf; 
0x00000000001562b9: shr byte ptr [rdx + 0x48], cl; jno 0x1562e5; ret 0xaebf; 
0x0000000000166579: shr byte ptr [rdx + 0x48], cl; jno 0x1665a5; ret 0xaebf; 
0x000000000017a359: shr byte ptr [rdx + 0x48], cl; jno 0x17a385; ret 0xaebf; 
0x00000000001850f9: shr byte ptr [rdx + 0x48], cl; jno 0x185125; ret 0xaebf; 
0x00000000000d7959: shr byte ptr [rdx + 0x48], cl; jno 0xd7985; ret 0xaebf; 
0x00000000000f3df9: shr byte ptr [rdx + 0x48], cl; jno 0xf3e25; ret 0xaebf; 
0x000000000009c3d4: shr byte ptr [rsi + 0xa], 0; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000fec45: shr byte ptr [rsi], 0x2a; add byte ptr [rax], al; ret; 
0x000000000010ea8f: shr ch, 0x7f; mov dl, 0xbc; jb 0x10ea3b; ret 0x576; 
0x000000000003ba01: shr cl, 0x7b; ret 0xffff; 
0x0000000000026bd3: shr cl, 0xbf; out 0xff, eax; jmp qword ptr [rsi + 0x41]; 
0x00000000000ab6c1: shr cl, 0xc; loope 0xab6c5; jmp qword ptr [rsi + 0xf]; 
0x0000000000001791: shr dword ptr [rax - 0x31], 1; lodsq rax, qword ptr [rsi]; mov byte ptr [rbx], cl; ret 0x7358; 
0x00000000000d58cc: shr dword ptr [rax - 0x46], 0xbf; adc al, 0x93; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x000000000007a0ab: shr dword ptr [rbp - 0x7317fffc], 1; in al, dx; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000091b17: shr dword ptr [rbx], 0x59; ret 0x2bc5; 
0x00000000000a4b2f: shr dword ptr [rdi - 0x39], 1; rol ah, 1; ret; 
0x0000000000105610: shr dword ptr [rdx - 0xb], cl; cmpsd dword ptr [rsi], dword ptr [rdi]; mov cs, ebp; push rsp; mov ebx, 0x654acc89; ret 0xf990; 
0x00000000000736c7: shr eax, 0x13; mov edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000004a8d9: shr eax, 0x1f; movss xmm0, dword ptr [rdx + rax*4]; ret; 
0x000000000007df10: shr eax, 0x1f; not edx; shr edx, 0x1f; test ecx, 0x7fff; cmove eax, edx; ret; 
0x0000000000019e6b: shr eax, 0x1f; ret; 
0x000000000009c0bf: shr eax, 0x1f; vxorps xmm0, xmm0, xmm0; cmp dl, al; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x0000000000027e7d: shr eax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x0000000000042fd0: shr eax, 0x3f; ret; 
0x000000000006a9b7: shr eax, 0xd3; ret; 
0x000000000004f068: shr eax, 1; xor cl, al; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000015da8: shr eax, 5; and eax, 8; lea rcx, [rip + 0xb5cfb]; fld qword ptr [rcx + rax]; ret; 
0x000000000018fb15: shr eax, cl; jmp qword ptr [rax]; 
0x0000000000086a3f: shr eax, cl; not rax; and rax, rdx; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000440b5: shr eax, cl; or rdx, rax; movq xmm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000030a30: shr ecx, 0x5a; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000041a34: shr ecx, 0xc6; ret 0xffff; 
0x00000000000b4ce0: shr ecx, 0xcf; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c2aac: shr ecx, cl; idiv dil; jmp qword ptr [rsi + 0x2e]; 
0x0000000000015dc3: shr edx, 0x1f; lea rcx, [rip + 0xb5ce3]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000015d8f: shr edx, 0x1f; lea rcx, [rip + 0xb73c7]; fld qword ptr [rcx + rdx*8]; ret; 
0x0000000000019e4c: shr edx, 0x1f; or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000007df15: shr edx, 0x1f; test ecx, 0x7fff; cmove eax, edx; ret; 
0x000000000000c72f: shr edx, 0xb; add cl, bl; ret 0xc1d8; 
0x0000000000016083: shr edx, 0xb; add eax, edx; lea rdx, [rip + 0xb7fa1]; fld qword ptr [rdx + rax]; ret; 
0x00000000000724c8: shr edx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x0000000000019aee: shr edx, cl; imul rax, rdx; ret; 
0x000000000007237e: shr esi, cl; imul rax, rsi; add rsp, 0x18; ret; 
0x0000000000027e7c: shr rax, 0x3f; movsd xmm0, qword ptr [rdx + rax*8]; ret; 
0x0000000000042fcf: shr rax, 0x3f; ret; 
0x0000000000086a3e: shr rax, cl; not rax; and rax, rdx; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000440b4: shr rax, cl; or rdx, rax; movq xmm0, rdx; xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000724c7: shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x000000000007237d: shr rsi, cl; imul rax, rsi; add rsp, 0x18; ret; 
0x000000000009b6d8: shufps xmm0, xmm0, 1; movss dword ptr [rdi], xmm0; ret; 
0x000000000009b6b4: shufps xmm0, xmm0, 1; movss dword ptr [rsi], xmm0; ret; 
0x000000000001bf7a: sldt word ptr [rax]; add rsp, 0x20; add rsp, 0x18; fxch st(1); ret; 
0x000000000000d127: sldt word ptr [rax]; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000d0b7: sldt word ptr [rax]; add rsp, 0x28; ret; 
0x0000000000021f55: sldt word ptr [rax]; add rsp, 0x48; ret; 
0x0000000000191f55: sldt word ptr [rax]; cwde; or al, ch; call rsp; 
0x0000000000191f0d: sldt word ptr [rax]; rol byte ptr [rdi], 0xe8; call qword ptr [rdi]; 
0x000000000000d126: sldt word ptr ss:[rax]; add rsp, 0x20; add rsp, 8; ret; 
0x000000000000eebb: sqrtps xmm0, xmm0; ret; 
0x000000000004a9fc: sqrtps xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x000000000000eeba: sqrtsd xmm0, xmm0; ret; 
0x000000000004a9fb: sqrtsd xmm2, xmm2; cvtsd2ss xmm0, xmm2; ret; 
0x0000000000012469: sqrtss xmm0, xmm0; ret; 
0x00000000000865f1: stc; add byte ptr [rax + rax], al; add byte ptr [rax + rbp - 0xd], dh; ret; 
0x000000000003d1e2: stc; add byte ptr [rax + rax], al; add byte ptr [rbp - 0x38], dh; addsd xmm0, xmm0; ret; 
0x0000000000086a52: stc; add byte ptr [rax + rax], al; add byte ptr [rdi + rax - 0xd], dh; ret; 
0x000000000002e9e4: stc; andpd xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045b17: stc; andpd xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004eba7: stc; andps xmm0, xmm5; andps xmm7, xmmword ptr [rip + 0x7cf2e]; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000048353: stc; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000af3f4: stc; dec byte ptr cs:[rdi]; xchg dword ptr [rbx - 0x3b000000], esp; sti; pop rsp; ret; 
0x0000000000098dbd: stc; dec byte ptr cs:[rdi]; xchg dword ptr [rdx - 0x3b000000], ebp; sti; pop rsp; ret; 
0x000000000001761a: stc; faddp st(1); add rsp, 0x60; pop rbx; ret; 
0x0000000000012e01: stc; faddp st(1); ret; 
0x00000000000955bb: stc; fcmovb st(0), st(5); jns 0x955e9; ret 0x876; 
0x00000000000abbcf: stc; fcmovb st(0), st(5); jns 0xabbfd; ret 0x876; 
0x000000000010b8e0: stc; fiadd word ptr [rcx - 0x2883477b]; call qword ptr [rbp - 0x58]; 
0x00000000000435d3: stc; fstp qword ptr [rsi]; ret; 
0x000000000002c3a3: stc; hlt; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000036743: stc; idiv bh; jmp qword ptr [rsi + 0x41]; 
0x0000000000042202: stc; imul eax, edx, 0x10; ret; 
0x00000000000880a6: stc; in eax, 0xc5; ret; 
0x000000000002e8a3: stc; iretd; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000777b3: stc; ja 0x777b5; jmp qword ptr [rsi + 0xf]; 
0x00000000001094c7: stc; jae 0x1094f5; xor ch, byte ptr [rsi - 0x3c]; ret 0x402d; 
0x0000000000134879: stc; jge 0x134892; ret 0x7a16; 
0x0000000000162fb9: stc; jge 0x162fd2; ret 0x7a16; 
0x00000000000d40b9: stc; jge 0xd40d2; ret 0x7a16; 
0x000000000006c072: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000003d040: stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000073e4c: stc; jmp qword ptr [rsi - 0x70]; 
0x00000000000e9854: stc; jmp rbx; 
0x000000000007d853: stc; jns 0x7d85e; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xe8; 
0x00000000000186fa: stc; js 0x18740; faddp st(1); pop rbx; ret; 
0x00000000000122bb: stc; lodsb al, byte ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000090338: stc; mov ebp, 0xd942c4d8; mov ecx, 0x3bc1c4d9; pop rax; ret; 
0x000000000008c998: stc; mov ebx, 0x5ccbc5fd; inc ebp; ret; 
0x00000000000871cb: stc; mov ecx, 0x58dbc5dc; ret; 
0x000000000009068c: stc; mov ecx, 0xc410245c; ret 0x9da1; 
0x000000000010218e: stc; mov edi, 0xcb784785; ret 0xf9f3; 
0x0000000000105a47: stc; mov edx, 0xcb7c5b8; ret; 
0x0000000000018eee: stc; mov esi, 0x970f407f; mov byte ptr [rcx - 0x7f], 0xf8; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x000000000007f452: stc; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000031fb1: stc; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000006c409: stc; or dword ptr [rax], eax; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003287c: stc; or eax, 0xf446600; push rsp; ret; 
0x000000000004753c: stc; orpd xmm0, xmmword ptr [rip + 0xb752b]; movapd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x00000000000a2f48: stc; outsd dx, dword ptr [rsi]; call qword ptr [rax - 0x3b]; 
0x00000000000a4e17: stc; outsd dx, dword ptr [rsi]; int 0x80; 
0x000000000009ccc8: stc; pop rcx; ret 0xf9c5; 
0x000000000009cd2e: stc; pop rdx; rol ch, 0xfa; adc dword ptr [rdi], eax; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000090905: stc; popfq; loope 0x908cd; fstp dword ptr [rbp + 0x28f9c5e2]; out 0xc4, eax; ret 0x99a9; 
0x000000000008db87: stc; popfq; rol esp, 1; ret 0xb9c1; 
0x00000000000a9d7a: stc; push -0x3acffff7; sti; pop rax; ret 0xe3c5; 
0x00000000000999bb: stc; push rdi; ret 0xf1c5; 
0x00000000000a87bb: stc; push rsi; ret 0x1de9; 
0x00000000000bb5fe: stc; push rsi; ret 0x22e9; 
0x00000000000bcdfd: stc; push rsi; ret 0x23e9; 
0x00000000000b983b: stc; push rsi; ret 0x2ae9; 
0x00000000000bc7f2: stc; push rsi; ret 0x2ee9; 
0x00000000000921a1: stc; push rsi; ret 0x2fe9; 
0x00000000000bb019: stc; push rsi; ret 0x4ce9; 
0x00000000000a8480: stc; push rsi; ret 0x58e9; 
0x00000000000a867f: stc; push rsi; ret 0x59e9; 
0x00000000000a9377: stc; push rsi; ret 0x61e9; 
0x0000000000091e67: stc; push rsi; ret 0x69e9; 
0x00000000000a8e66: stc; push rsi; ret 0x72e9; 
0x0000000000092059: stc; push rsi; ret 0x77e9; 
0x00000000000a7752: stc; push rsi; ret 0x86e9; 
0x0000000000091146: stc; push rsi; ret 0x8ae9; 
0x0000000000092d43: stc; push rsi; ret 0x8de9; 
0x0000000000092838: stc; push rsi; ret 0x98e9; 
0x00000000000b9fba: stc; push rsi; ret 0xabe9; 
0x00000000000bb95d: stc; push rsi; ret 0xc3e9; 
0x000000000009140a: stc; push rsi; ret 0xc6e9; 
0x00000000000a7a11: stc; push rsi; ret 0xc7e9; 
0x00000000000a7e0f: stc; push rsi; ret 0xc9e9; 
0x00000000000bd142: stc; push rsi; ret 0xdee9; 
0x00000000000b9b7d: stc; push rsi; ret 0xe8e9; 
0x00000000000bc437: stc; push rsi; ret 0xe9e9; 
0x00000000000bbe2c: stc; push rsi; ret 0xf4e9; 
0x00000000000bd723: stc; push rsi; ret 0xfde9; 
0x00000000000b3d9d: stc; push rsi; ret; 
0x0000000000093179: stc; push rsp; ret 0x79c5; 
0x00000000000931b5: stc; push rsp; ret 0xf9c5; 
0x00000000000873d6: stc; push rsp; ret; 
0x0000000000111f79: stc; ret 0; 
0x000000000010a410: stc; ret 0x522b; 
0x00000000000e453d: stc; ret 0x6bbb; 
0x00000000000e64b1: stc; ret 0xa4a8; 
0x000000000011338d: stc; ret 0xbabf; 
0x0000000000013753: stc; ret; 
0x00000000000c20c6: stc; rol ebp, cl; ret; 
0x000000000004fdbb: stc; sal dword ptr [rax + rax], 1; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000db24d: stc; sar byte ptr [rdi + 0x3e5d3d61], cl; mov edx, 0x1b3c5400; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000019aed: stc; shr edx, cl; imul rax, rdx; ret; 
0x000000000004bf52: stc; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000008a7bd: stc; sub ah, al; jne 0x8b497; add rsp, 0x40; pop rbx; ret; 
0x00000000000a0d2d: stc; sub ah, al; jne 0xa1a0f; add rsp, 0x40; pop rbx; ret; 
0x0000000000099b9c: stc; sub dl, al; ret; 
0x0000000000093f74: stc; test eax, 0x5d59d2d; add ch, al; ret; 
0x000000000009c287: std; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000d8328: std; and ecx, esp; ret; 
0x0000000000030d5d: std; call qword ptr [rax + 0x69058b48]; ret 0x36; 
0x00000000000dd7e4: std; call rcx; 
0x00000000000ddd24: std; call rdi; 
0x00000000000dda84: std; call rsp; 
0x000000000010e37c: std; cmc; add eax, 0x5f98c940; ret; 
0x00000000000d71ab: std; div dword ptr [rdx - 0x2bbcc02e]; ret 0xcfc1; 
0x000000000001605d: std; fstp st(1); ret; 
0x00000000001006d4: std; insb byte ptr [rdi], dx; mov eax, 0x59567e3a; sub eax, 0x31ad6446; ret 0x9dff; 
0x0000000000049761: std; ja 0x49770; add rsp, 8; ret; 
0x0000000000056ee1: std; ja 0x56ef0; add rsp, 8; ret; 
0x000000000007c641: std; ja 0x7c650; add rsp, 8; ret; 
0x00000000000accd4: std; jmp qword ptr [rsi + 0x2e]; 
0x000000000002c3a5: std; jmp qword ptr [rsi + 0xf]; 
0x0000000000034a5c: std; jmp qword ptr [rsi - 0x70]; 
0x000000000007d74f: std; jp 0x7d75a; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4e8; 
0x00000000000d4e88: std; lahf; ret; 
0x0000000000105efe: std; mov edi, 0x121a3180; ret 0x3f9; 
0x000000000010cc19: std; or eax, 0xc7806df; push 0x7d; and r15d, edx; ret 0x6adc; 
0x000000000007a63f: std; out 0xfd, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000198d99: std; out dx, eax; call qword ptr [rbp + 3]; 
0x000000000002097a: std; pop rsi; ja 0x20988; add rsp, 8; ret; 
0x000000000011260a: std; popfq; ret 0x79b8; 
0x000000000010f7d5: std; popfq; ret 0xbfba; 
0x00000000000eada8: std; ret 0x1c76; 
0x000000000005d25f: std; ret; 
0x00000000000dda65: std; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000009c8b1: sti; adc byte ptr [rip + 0x2ea08], al; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000b01d2: sti; adc byte ptr [rip + 0x33547], dl; vmovapd xmm0, xmm2; ret; 
0x0000000000099be2: sti; adc byte ptr [rip + 0x49b37], dl; vmovapd xmm0, xmm2; ret; 
0x000000000009cd2a: sti; adc cl, al; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000099317: sti; adc dword ptr [rdi + 8], ebp; ret; 
0x0000000000098de7: sti; adc dword ptr [rdi + 8], ecx; ret; 
0x0000000000098ddf: sti; adc dword ptr [rdi], eax; vaddsd xmm1, xmm3, xmm1; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000009930f: sti; adc dword ptr [rdi], ecx; vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x000000000019b878: sti; add dword ptr [rax], eax; add byte ptr [rdi + 1], dh; add byte ptr [rax], al; ret; 
0x00000000000558de: sti; call qword ptr [rbx + 0x48]; 
0x0000000000109868: sti; call qword ptr [rdi]; 
0x00000000000e9824: sti; call rdi; 
0x00000000000ddc44: sti; call rsi; 
0x00000000000ddc61: sti; cmc; mov dword ptr [rdi + 0x27], esi; ret 0x11bf; 
0x00000000001105a1: sti; cmp ah, ch; ret 0x920c; 
0x00000000000fcd4c: sti; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000012eb54: sti; imul esp, ecx, 0x3f; ja 0x12eb85; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000013eef4: sti; imul esp, ecx, 0x3f; ja 0x13ef25; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000015d374: sti; imul esp, ecx, 0x3f; ja 0x15d3a5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000016d634: sti; imul esp, ecx, 0x3f; ja 0x16d665; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x0000000000181414: sti; imul esp, ecx, 0x3f; ja 0x181445; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x000000000018c1b4: sti; imul esp, ecx, 0x3f; ja 0x18c1e5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000dea14: sti; imul esp, ecx, 0x3f; ja 0xdea45; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000faeb4: sti; imul esp, ecx, 0x3f; ja 0xfaee5; cmp ebp, dword ptr [rbp + 0x3fe76a77]; xchg esi, eax; ret 0x74aa; 
0x00000000000ccd51: sti; int1; mov ch, 0x1a; ret; 
0x00000000001109d4: sti; jmp qword ptr [rdx + 0x41]; 
0x000000000004bf53: sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000004c488: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000004f06c: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000026959: sti; loope 0x2695b; jmp qword ptr [rsi + 0xf]; 
0x00000000000de7aa: sti; mov edx, 0x3fe0657e; ret; 
0x0000000000085af3: sti; or dword ptr [rcx + riz - 0x7d], esi; ret 0xf30a; 
0x000000000008b69d: sti; pop rax; fcmovb st(0), st(5); sti; pop rsp; ret; 
0x000000000008b62a: sti; pop rax; fld st(5); sti; pop rsp; ret; 
0x0000000000099313: sti; pop rax; in eax, dx; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x00000000000b9087: sti; pop rax; mov ebp, 0xc5e05cdb; ret; 
0x00000000000bec06: sti; pop rax; mov ebp, 0xc5fc28f9; ret; 
0x00000000000bfd76: sti; pop rax; mov ebp, 0xc5fc28f9; xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x00000000000bec16: sti; pop rax; mov ebp, 0xc5fd28f9; ret; 
0x00000000000b190a: sti; pop rax; ret 0xc181; 
0x000000000009bd39: sti; pop rax; ret 0xe2c4; 
0x000000000009374f: sti; pop rax; ret 0xe3c5; 
0x000000000008c1fe: sti; pop rax; ret 0xf3c5; 
0x00000000000c2612: sti; pop rax; ret 0xf9c5; 
0x0000000000088d54: sti; pop rax; ret 0xfbc5; 
0x000000000008c2c4: sti; pop rax; ret; 
0x000000000009b9fe: sti; pop rcx; and al, 0xf0; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000b9a92: sti; pop rcx; mov ah, 0xc1; jnp 0xb9af1; ret; 
0x00000000000babec: sti; pop rcx; mov ch, 0x3b; pop rsp; ret; 
0x00000000000b167e: sti; pop rcx; mov ch, 0xfb; pop rax; ret; 
0x00000000000bd639: sti; pop rcx; mov ebp, 0xc5cc28f9; ret; 
0x00000000000bea5d: sti; pop rcx; mov ebp, 0xc5f828f9; ret; 
0x0000000000089030: sti; pop rcx; ret 0x41c4; 
0x00000000000b9530: sti; pop rcx; ret 0x7bc5; 
0x0000000000088fd7: sti; pop rcx; ret 0xc1c4; 
0x0000000000096701: sti; pop rcx; ret 0xd089; 
0x00000000000be065: sti; pop rcx; ret 0xe3c5; 
0x0000000000089067: sti; pop rcx; ret 0xe9c5; 
0x00000000000b91b9: sti; pop rcx; ret 0xf9c5; 
0x000000000008905b: sti; pop rcx; ret 0xfbc5; 
0x000000000009a77c: sti; pop rcx; ret; 
0x00000000000bf31e: sti; pop rsi; ret; 
0x00000000000b40d3: sti; pop rsp; mov ah, 0xc1; jnp 0xb4132; ret 0x23c5; 
0x00000000000b4a5d: sti; pop rsp; mov ebp, 0xc5f358cb; sti; pop rax; ret; 
0x0000000000015db1: sti; pop rsp; or eax, dword ptr [rax]; fld qword ptr [rcx + rax]; ret; 
0x00000000000be7a7: sti; pop rsp; ret 0x33c5; 
0x0000000000098ec3: sti; pop rsp; ret 0x6348; 
0x0000000000096758: sti; pop rsp; ret 0x8948; 
0x00000000000c2662: sti; pop rsp; ret 0xc1c4; 
0x00000000000c2443: sti; pop rsp; ret 0xdbc5; 
0x00000000000c2273: sti; pop rsp; ret 0xe3c5; 
0x00000000000be955: sti; pop rsp; ret 0xf9c5; 
0x000000000009b9b8: sti; pop rsp; ret 0xfbc5; 
0x000000000008b62e: sti; pop rsp; ret; 
0x0000000000099c61: sti; push rcx; ret 0xfbc5; 
0x0000000000050e63: sti; push rdx; cvtps2pd xmm0, xmm0; add rsp, 8; ret; 
0x00000000000bad62: sti; ret 0x2c3; 
0x00000000000eed8b: sti; ret 0x2d7e; 
0x000000000009d485: sti; ret 0x4305; 
0x0000000000106400: sti; ret 0x6c54; 
0x00000000000d1da9: sti; ret 0xa7e9; 
0x0000000000086f15: sti; ret 0xb305; 
0x000000000002a466: sti; ret 0xfbb4; 
0x000000000002ab51: sti; ret; 
0x0000000000105a45: sti; sbb eax, 0xc5b8baf9; mov bh, 0xc; ret; 
0x000000000009a451: sti; sub al, 4; ret 0x894c; 
0x0000000000015c75: sti; test byte ptr [rsp + 0x1f], 0x40; je 0x15c71; fstp st(1); ret; 
0x00000000000471c1: sti; ucomisd xmm8, xmm7; jbe 0x471cd; mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x0000000000103070: sti; xchg ecx, eax; and al, 0xd9; call qword ptr [rsi]; 
0x000000000000178a: sti; xchg ecx, eax; push rbx; ret; 
0x000000000000c004: stmxcsr dword ptr [rdi + 0x1c]; xor eax, eax; ret; 
0x000000000000c384: stmxcsr dword ptr [rdi + 4]; ret; 
0x000000000010d1c7: stosb byte ptr [rdi], al; adc byte ptr [r15 + rbp*8 - 0x6b], r9b; pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x0000000000044bba: stosb byte ptr [rdi], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000098dc2: stosb byte ptr [rdi], al; add byte ptr [rax], al; add ch, al; sti; pop rsp; ret; 
0x0000000000027cf2: stosb byte ptr [rdi], al; cmp edi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d4f53: stosb byte ptr [rdi], al; lahf; ret 0x3ff4; 
0x0000000000079ad2: stosb byte ptr [rdi], al; mov bl, 4; add al, ch; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000ff592: stosb byte ptr [rdi], al; push rbx; ret; 
0x00000000000ddc20: stosb byte ptr [rdi], al; rcl dh, 1; ret 0xee95; 
0x00000000000ce6d1: stosb byte ptr [rdi], al; rcl ebp, cl; push -0x21; ret 0x188; 
0x00000000000d5d7d: stosb byte ptr [rdi], al; ret 0x1c3f; 
0x00000000000dd035: stosb byte ptr [rdi], al; ret 0x223f; 
0x0000000000114875: stosb byte ptr [rdi], al; ret 0x31b; 
0x0000000000105883: stosb byte ptr [rdi], al; ret 0x6082; 
0x00000000000a3f12: stosb byte ptr [rdi], al; ret 8; 
0x00000000000cdc84: stosb byte ptr [rdi], al; ret; 
0x00000000000ef448: stosb byte ptr [rdi], al; ror dword ptr [rip + 0x3aa73a40], 0x3f; add byte ptr [rax], ah; ret 0x7bbf; 
0x000000000010d1a9: stosb byte ptr [rdi], al; sbb esi, esi; ret 0x4eb; 
0x0000000000070dc1: stosb byte ptr [rdi], al; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000071281: stosb byte ptr [rdi], al; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000d6eb8: stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000075de2: stosb byte ptr [rdi], al; syscall; 
0x000000000004f855: stosd dword ptr [rdi], eax; adc eax, 0xff3000b; pop rcx; ret; 
0x0000000000063cf1: stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fe05], al; ret 2; 
0x00000000000cd484: stosd dword ptr [rdi], eax; and byte ptr [rbx], bh; mov ch, 0x9f; add byte ptr [rdi - 0x6e], al; ret 0x7b00; 
0x00000000000e6e41: stosd dword ptr [rdi], eax; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x0000000000022d8a: stosd dword ptr [rdi], eax; idiv edi; jmp qword ptr [rsi + 0x41]; 
0x000000000007dea1: stosd dword ptr [rdi], eax; jae 0x7deac; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dd1c: stosd dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x31f294]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x00000000000db44a: stosd dword ptr [rdi], eax; movsd dword ptr [rdi], dword ptr [rsi]; push rsi; ret 0xbfd2; 
0x00000000000d0b03: stosd dword ptr [rdi], eax; or byte ptr [rbp - 0x1117c010], cl; xor al, 0x4f; sbb dword ptr [rax], esp; ret 0xde3f; 
0x000000000002922e: stosd dword ptr [rdi], eax; or eax, dword ptr [rax]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000eb660: stosd dword ptr [rdi], eax; out dx, eax; adc al, 0x3c; ret 0x445c; 
0x00000000000e78b3: stosd dword ptr [rdi], eax; pop rbp; ret; 
0x0000000000090137: stosd dword ptr [rdi], eax; pop rcx; inc esp; ret 0x99d1; 
0x00000000000dda6a: stosd dword ptr [rdi], eax; pop rdx; ret 0xc5a4; 
0x00000000000d7944: stosd dword ptr [rdi], eax; ret 0x3c63; 
0x00000000000de565: stosd dword ptr [rdi], eax; ret 0xbe3f; 
0x00000000000d6eb9: stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000d8ded: stosd dword ptr [rdi], eax; ret 0xef3f; 
0x00000000000e6b53: stosd dword ptr [rdi], eax; ret 0xeff6; 
0x000000000008f001: stosd dword ptr [rdi], eax; ret 3; 
0x0000000000033c71: stosd dword ptr [rdi], eax; ret; 
0x00000000000ca771: stosd dword ptr [rdi], eax; sbb al, 0x1c; ret; 
0x00000000000f0bfc: stosd dword ptr [rdi], eax; sbb byte ptr [rip], r15b; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x0000000000030d5c: stosd dword ptr [rdi], eax; std; call qword ptr [rax + 0x69058b48]; ret 0x36; 
0x0000000000050e62: stosd dword ptr [rdi], eax; sti; push rdx; cvtps2pd xmm0, xmm0; add rsp, 8; ret; 
0x000000000010d0a3: stosd dword ptr [rdi], eax; xchg ecx, eax; jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x0000000000086a3c: str word ptr [rax - 0x2d]; call 0x48d9618d; and eax, edx; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000eef25: sub ah, 0x3f; ret 0x16b4; 
0x0000000000020e1e: sub ah, al; jne 0x21c90; add rsp, 0x40; pop rbx; ret; 
0x000000000008a7be: sub ah, al; jne 0x8b497; add rsp, 0x40; pop rbx; ret; 
0x00000000000a0d2e: sub ah, al; jne 0xa1a0f; add rsp, 0x40; pop rbx; ret; 
0x00000000000a3cd5: sub ah, al; jns 0xa3d02; loope 0xa3ca0; ret; 
0x0000000000050145: sub ah, al; ret; 
0x00000000000cadb7: sub ah, byte ptr [rax]; ret 0x2b19; 
0x00000000000d1319: sub ah, byte ptr [rax]; ret; 
0x0000000000109c02: sub ah, byte ptr [rcx + rbx*2 + 0x2c]; or dword ptr [rbx + 0x781fe0e1], eax; mov edx, 0x89bff1fa; call qword ptr [rax + 0x3a]; 
0x0000000000045830: sub ah, cl; jne 0x459fe; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000004882e: sub ah, cl; ret; 
0x0000000000191648: sub al, 0; add byte ptr [rax], al; mov esp, 0x20000006; ret; 
0x0000000000016c54: sub al, 0x11; fsubrp st(1); faddp st(1); ret; 
0x000000000004a0b0: sub al, 0x1a; or byte ptr [rax], al; ret; 
0x00000000000493b0: sub al, 0x1f; or byte ptr [rax], al; movapd xmm0, xmm2; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x0000000000012999: sub al, 0x24; add rsp, 0x18; fadd st(0); ret; 
0x0000000000014f91: sub al, 0x24; jne 0x1519b; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000006fa83: sub al, 0x24; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000049230: sub al, 0x26; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000ea28e: sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000cb728: sub al, 0x40; hlt; dec dword ptr [rbp + rax*2 + 0x426cfff4]; hlt; call rsp; 
0x0000000000011a43: sub al, 0x48; add esp, 0x18; ret; 
0x000000000001a299: sub al, 0x48; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196dbc: sub al, 0x5e; add byte ptr [rax], al; jo 0x196d85; in eax, dx; call qword ptr [rsi]; 
0x00000000000cc0b2: sub al, 0x64; je 0xcc117; ret 0xfb98; 
0x00000000000528d0: sub al, 0x78; jge 0x528e3; push rdi; ret 0x280f; 
0x00000000000ff7ea: sub al, 0x7e; ret 0xebd5; 
0x0000000000103773: sub al, 0xa1; jno 0x103703; imul dword ptr [rcx - 0x5815110f]; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000000d7942: sub al, 0xb3; stosd dword ptr [rdi], eax; ret 0x3c63; 
0x0000000000042e03: sub al, 0xc0; ret; 
0x000000000006b750: sub al, 0xc1; add eax, 0xfd834100; jmp qword ptr [rsi + 0xf]; 
0x00000000000fd31c: sub al, 0xc5; ret 0x66bb; 
0x00000000000ca431: sub al, 0xc7; push 0x53; ret; 
0x0000000000190675: sub al, 0xee; push rax; jbe 0x19067b; add al, bl; out dx, al; jmp qword ptr [rax]; 
0x000000000006c070: sub al, 0xf8; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000076058: sub al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000be90d: sub al, 3; add ch, al; ret; 
0x0000000000082182: sub al, 4; ret 0x894c; 
0x00000000000725b9: sub al, 9; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000010e17d: sub al, 9; xchg ebx, eax; jle 0x10e161; ret 0x2234; 
0x000000000004ea87: sub al, al; addss xmm3, xmm3; subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000004403d: sub al, al; ret; 
0x0000000000054d0a: sub al, bl; movss dword ptr [rsp + 0x40], xmm2; movss dword ptr [rsp + 0x44], xmm3; movq xmm0, qword ptr [rsp + 0x40]; add rsp, 0x58; ret; 
0x00000000000bf867: sub al, byte ptr [rax]; add ch, al; ret; 
0x00000000000cdf52: sub al, byte ptr [rax]; ret 0x8a26; 
0x0000000000100da5: sub al, byte ptr [rbp - 0x344431c3]; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x000000000007cf22: sub al, byte ptr [rbx + 0xf660008]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000bea59: sub al, byte ptr [rbx]; add ch, al; sti; pop rcx; mov ebp, 0xc5f828f9; ret; 
0x0000000000049c12: sub al, byte ptr [rcx]; add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb675e]; addss xmm0, dword ptr [rip + 0xb6752]; ret; 
0x0000000000089d10: sub al, byte ptr [rdi]; add ch, al; ret; 
0x000000000018f71d: sub al, ch; call rax; 
0x0000000000027162: sub al, cl; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004a611: sub al, cl; add rsp, 0x18; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000020d71: sub al, cl; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000049ea0: sub al, cl; addss xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb64c2]; subss xmm0, xmm1; ret; 
0x0000000000043f9a: sub al, cl; movapd xmm0, xmm1; ret; 
0x00000000000486b0: sub al, cl; movapd xmm0, xmm2; pop rbx; ret; 
0x000000000003d12a: sub al, cl; movsd xmm0, qword ptr [rip + 0xaa484]; andpd xmm1, xmmword ptr [rip + 0x8e174]; divsd xmm0, xmm1; ret; 
0x00000000000320f2: sub al, cl; movsd xmm0, qword ptr [rip + 0xb1984]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000002c4e2: sub al, cl; movsd xmm0, qword ptr [rip + 0xbb0cc]; andpd xmm1, xmmword ptr [rip + 0x9edbc]; divsd xmm0, xmm1; ret; 
0x00000000000501c9: sub al, cl; movss xmm0, dword ptr [rip + 0xb03bd]; andps xmm1, xmmword ptr [rip + 0x7b8e6]; divss xmm0, xmm1; ret; 
0x000000000004d349: sub al, cl; movss xmm0, dword ptr [rip + 0xb3521]; andps xmm1, xmmword ptr [rip + 0x7e766]; divss xmm0, xmm1; ret; 
0x0000000000049de0: sub al, cl; movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x000000000003208c: sub al, cl; mulsd xmm1, xmm0; ret; 
0x000000000002dfd5: sub al, cl; mulsd xmm2, xmm0; pop rbx; movapd xmm0, xmm2; mulsd xmm0, xmm1; ret; 
0x000000000005004c: sub al, cl; mulss xmm1, xmm0; ret; 
0x00000000000503cb: sub al, cl; mulss xmm1, xmm1; ret; 
0x0000000000045592: sub al, cl; ret; 
0x0000000000044dac: sub al, dl; add rsp, 0x18; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x000000000002debe: sub al, dl; movapd xmm0, xmm2; ret; 
0x000000000004a21a: sub al, dl; movaps xmm0, xmm2; pop rbx; ret; 
0x000000000004dc93: sub al, dl; movaps xmm0, xmm2; ret; 
0x000000000000f399: sub al, dl; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000320e7: sub al, dl; ret; 
0x000000000009c3c9: sub al, dl; vmulsd xmm0, xmm4, xmm1; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6ec0]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000ca76d: sub bh, 0x3f; leave; stosd dword ptr [rdi], eax; sbb al, 0x1c; ret; 
0x00000000000eb130: sub bh, ah; adc dword ptr [rdi - 0x11], esi; add ah, byte ptr [rbx]; cmp eax, 0x89e20138; ret 0x40ed; 
0x0000000000107a84: sub bh, ah; rcl esp, 1; mov esp, 0x2aee8072; ret; 
0x0000000000021f50: sub bh, al; jne 0x22e73; add rsp, 0x48; ret; 
0x0000000000018e87: sub bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000e9066: sub bh, byte ptr [rbp + 0xf86394d]; ret; 
0x00000000000990b2: sub bh, byte ptr [rbx + 7]; add ch, al; ret; 
0x00000000000d7c63: sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x00000000000e569a: sub bh, byte ptr [rcx + 0x79]; ret 0xbc01; 
0x00000000000ef4ae: sub bh, byte ptr [rdi]; add byte ptr [rax - 0x5714d2cf], ah; ret; 
0x00000000000d6d10: sub bh, ch; int1; iretd; mov ch, 0x3f; ret 0x5a22; 
0x0000000000047547: sub bh, dl; movapd xmm1, xmm2; ret; 
0x00000000000ef445: sub bl, 0x3f; stosb byte ptr [rdi], al; ror dword ptr [rip + 0x3aa73a40], 0x3f; add byte ptr [rax], ah; ret 0x7bbf; 
0x00000000000eae1a: sub bl, byte ptr [rax - 0x6e]; ret; 
0x000000000004cb1d: sub bl, cl; movaps xmm0, xmm1; ret; 
0x00000000000528d7: sub bl, cl; movss dword ptr [rsp + 0x20], xmm0; movss dword ptr [rsp + 0x24], xmm1; movq xmm0, qword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x00000000000280ee: sub bl, cl; pop r13; movapd xmm0, xmm1; ret; 
0x000000000004e6de: sub bl, cl; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x00000000000865f7: sub bl, dh; ret; 
0x0000000000198eb8: sub byte ptr [rax + rsi*8], dl; jmp qword ptr [rdi + 3]; 
0x000000000018f711: sub byte ptr [rax], al; add byte ptr [rax - 0x4f0017d9], ch; sub byte ptr [rax], al; add byte ptr [rax], ch; sub al, ch; call rax; 
0x0000000000198784: sub byte ptr [rax], al; add byte ptr [rax], al; clc; ja 0x19878b; add byte ptr [rdi + rdi - 0x11], al; call rsi; 
0x0000000000012863: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x128bf; add rsp, 0x28; ret; 
0x0000000000014672: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x14802; add rsp, 0x60; pop rbx; ret; 
0x00000000000164f9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x166aa; add rsp, 0xa0; pop rbx; ret; 
0x00000000000172b8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017399: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x174a0; add rsp, 0x38; ret; 
0x000000000001845b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3bf: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c369: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1c681; leave; ret; 
0x000000000001ed11: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1efa7; fxch st(1); leave; ret; 
0x00000000000279c2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x27cf1; add rsp, 0x28; ret; 
0x000000000002889e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x28acd; add rsp, 0x40; pop rbx; ret; 
0x00000000000297b7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x2999d; add rsp, 0x40; pop rbx; ret; 
0x0000000000030d2e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000047c07: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e29; add rsp, 0x50; pop rbx; ret; 
0x000000000004826f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x48599; add rsp, 0x60; pop rbx; ret; 
0x0000000000049b92: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004affd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4b20c; add rsp, 0x20; pop rbx; ret; 
0x000000000004b36a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4b4f5; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0b2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4e1ba; add rsp, 0x30; pop rbx; ret; 
0x000000000004f044: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000005061e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b45: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c32a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006795f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x67d52; sub rsp, -0x80; pop rbx; ret; 
0x000000000006c251: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc71: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6fe3c; add rsp, 0x48; ret; 
0x00000000000800ca: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x80162; add rsp, 0x20; pop rbx; ret; 
0x000000000008689e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086997: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087208: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x874d9; add rsp, 0x28; ret; 
0x0000000000099a2b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x99ac3; add rsp, 0x20; pop rbx; ret; 
0x000000000009d78a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b001b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb00b3; add rsp, 0x20; pop rbx; ret; 
0x00000000000b16e2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000bd73: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbd80; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000be5c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bed4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbee1; xor eax, eax; add rsp, 0x48; ret; 
0x000000000000bf22: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf6b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000bfd8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c04c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc059; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c110: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c207: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc214; xor eax, eax; add rsp, 0x18; ret; 
0x000000000000c26e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2d2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000c31d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000000c3df: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc3fc; add rsp, 0x18; ret; 
0x000000000000c9c4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcb2a; add rsp, 0xc0; pop rbx; ret; 
0x000000000000dbc4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfda: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xf34f; add rsp, 0x28; ret; 
0x000000000000ef52: sub byte ptr [rax], al; add byte ptr [rax], al; movapd xmm0, xmm1; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000021f4a: sub byte ptr [rax], al; add byte ptr [rax], al; movapd xmm0, xmm7; jne 0x22e73; add rsp, 0x48; ret; 
0x00000000000124fc: sub byte ptr [rax], al; add byte ptr [rax], al; movaps xmm0, xmm1; jne 0x12638; add rsp, 0x28; ret; 
0x000000000018f719: sub byte ptr [rax], al; add byte ptr [rax], ch; sub al, ch; call rax; 
0x00000000000bfa1d: sub byte ptr [rax], al; add ch, al; ret; 
0x000000000009b294: sub byte ptr [rax], al; add eax, dword ptr [rax]; cvtsd2ss xmm0, xmm0; ret; 
0x0000000000048a65: sub byte ptr [rax], cl; add bl, dh; ret; 
0x00000000000ccab0: sub byte ptr [rbp + 0x38], cl; pop rsi; ret; 
0x00000000000c6eb8: sub byte ptr [rbp + 0x634e000c], al; and al, 0xa2; add rdx, r12; jmp rdx; 
0x0000000000029504: sub byte ptr [rbp + 0xff2000b], ah; pop rsi; ret 0xdb85; 
0x0000000000045584: sub byte ptr [rbp + 8], ah; add bl, dh; ret; 
0x00000000000273b7: sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001122fd: sub byte ptr [rbx - 0x7f7410c4], al; cmp eax, 0x3fb1fc34; movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x00000000001904c0: sub byte ptr [rbx], ch; add al, cl; mov ch, ah; jmp qword ptr [rax + 0x6b]; 
0x00000000000dc063: sub byte ptr [rcx + 0x29], bl; cmp al, 0x43; int1; sub dword ptr [rax], esp; ret; 
0x00000000000fc672: sub byte ptr [rcx + rsi*4 + 0x5c40644c], al; ret 0xc69a; 
0x000000000010bc04: sub byte ptr [rcx - 6], bh; ret 0xec6f; 
0x000000000004ded0: sub byte ptr [rcx], dh; ror byte ptr [rdi], 0x2e; ret 0x870f; 
0x000000000002fa51: sub byte ptr [rcx], dl; add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000010da43: sub byte ptr [rdi + 0x4a5b4619], cl; jne 0x10da0c; ret; 
0x00000000000e8ede: sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x000000000007c324: sub byte ptr [rdi + 0xf660008], cl; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000190524: sub byte ptr [rdi - 0x13], al; call qword ptr [rax]; 
0x00000000000cf181: sub byte ptr [rdi - 0x1f], bh; movabs dword ptr [0xc000fd238a], eax; add byte ptr [rax], al; add byte ptr [rcx], ah; ret; 
0x000000000009e3cf: sub byte ptr [rdi], al; add ch, al; jns 0x9e3fd; ffreep st(5); ret; 
0x00000000000e8ed6: sub byte ptr [rdi], bh; add byte ptr [rax], al; add byte ptr [rax + rdx*4], 0; sub byte ptr [rdi + 0x6dfeb485], bh; ret 0xb440; 
0x0000000000190704: sub byte ptr [rdx - 0x12], cl; jmp qword ptr [rax]; 
0x000000000005b4c4: sub byte ptr [rdx - 0x4c17fff6], ah; ret; 
0x000000000004a7a4: sub byte ptr [rip + 0x158d4800], dh; ret 0x512; 
0x00000000000e78ae: sub byte ptr [rip - 0x5450ab14], bh; pop rbp; ret; 
0x00000000000e78ad: sub byte ptr [rip - 0x5450ab14], r15b; pop rbp; ret; 
0x000000000006c1b1: sub byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x66c3; 
0x00000000000e223e: sub byte ptr [rsi], bh; add byte ptr [rax], al; add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x0000000000195d18: sub byte ptr [rsp + rbp*8], al; call qword ptr [rdi]; 
0x000000000004961b: sub byte ptr [rsp], cl; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d99: sub byte ptr [rsp], cl; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x0000000000045523: sub byte ptr [rsp], dl; add rsp, 0x18; xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000192389: sub ch, al; call qword ptr [rdx + 3]; 
0x0000000000047f83: sub ch, al; jne 0x481e9; add rsp, 0x60; pop rbx; ret; 
0x000000000008e762: sub ch, al; jns 0x8e78e; ffreep st(5); ret; 
0x00000000000a4d54: sub ch, al; jns 0xa4d80; ffreep st(5); ret; 
0x0000000000028673: sub ch, al; ret; 
0x000000000008c1f8: sub ch, al; sti; pop rsp; ret; 
0x00000000001909f5: sub ch, bh; inc dword ptr [rax - 0x17ffff77]; sub ebp, edi; call rax; 
0x00000000000d6bd9: sub ch, ch; in al, 0x6b; mov ah, cl; mov edi, 0x7604b95a; ret; 
0x00000000000d6393: sub ch, dh; ret 0x3fbb; 
0x00000000000ec21a: sub ch, dh; ret; 
0x00000000000270a9: sub cl, al; add rsp, 0x18; ret; 
0x00000000000283cb: sub cl, al; addsd xmm0, xmm5; ret; 
0x000000000004ac08: sub cl, al; divss xmm0, xmm2; addss xmm0, xmm4; ret; 
0x0000000000012501: sub cl, al; jne 0x12638; add rsp, 0x28; ret; 
0x0000000000086cef: sub cl, al; jne 0x8709b; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000089c31: sub cl, al; jne 0x8a757; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009d261: sub cl, al; jne 0x9d60c; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a01a1: sub cl, al; jne 0xa0cc7; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000ef58: sub cl, al; jne 0xf0ab; add rsp, 0x38; ret; 
0x0000000000030f2e: sub cl, al; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x0000000000044db4: sub cl, al; movapd xmm1, xmm2; ret; 
0x000000000004f236: sub cl, al; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000032223: sub cl, al; mulsd xmm0, xmm0; movapd xmm0, xmm1; ret; 
0x000000000002e03b: sub cl, al; mulsd xmm0, xmm2; ret; 
0x000000000005027e: sub cl, al; mulss xmm0, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004d69b: sub cl, al; mulss xmm0, xmm1; ret; 
0x000000000004ddc0: sub cl, al; mulss xmm0, xmm2; ret; 
0x0000000000028085: sub cl, al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004c7ee: sub cl, al; pop rbx; pop rbp; pop r12; ret; 
0x000000000003cba6: sub cl, al; pop rbx; ret; 
0x0000000000020d79: sub cl, al; ret; 
0x000000000003193d: sub cl, al; subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000004fb05: sub cl, al; subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000002e9e3: sub cl, bh; andpd xmm0, xmm5; andpd xmm7, xmmword ptr [rip + 0x9c8ef]; orpd xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000045b16: sub cl, bh; andpd xmm7, xmm2; andnpd xmm2, xmm3; orpd xmm2, xmm7; movapd xmm1, xmm2; ret; 
0x000000000004eba6: sub cl, bh; andps xmm0, xmm5; andps xmm7, xmmword ptr [rip + 0x7cf2e]; orps xmm0, xmm7; add rsp, 0x28; ret; 
0x0000000000031557: sub cl, bl; movapd xmm0, xmm2; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004f797: sub cl, bl; movaps xmm0, xmm2; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x000000000001f961: sub cl, bl; rcr cl, 0xc9; ret; 
0x0000000000048821: sub cl, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; sub dl, al; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x000000000003d021: sub cl, byte ptr [rcx]; add dl, dh; subps xmm0, xmm1; ret; 
0x0000000000072668: sub cl, ch; shl byte ptr [rsi - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000000471f9: sub cl, cl; ret; 
0x000000000004a229: sub cl, dl; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x00000000000ff44c: sub cl, dl; out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x0000000000107a8a: sub dh, 0x2a; ret; 
0x0000000000107e04: sub dh, ah; ret; 
0x00000000000ddc42: sub dh, al; sti; call rsi; 
0x00000000000ece73: sub dh, byte ptr [rcx + 0x3d]; ret 0x5cbf; 
0x00000000000e5a73: sub dh, byte ptr [rcx + 0x3d]; ret 0x69bf; 
0x0000000000114873: sub dh, byte ptr [rdi]; stosb byte ptr [rdi], al; ret 0x31b; 
0x0000000000112444: sub dh, ch; ret 0x583f; 
0x000000000004cae2: sub dh, cl; movaps xmm0, xmm1; ret; 
0x000000000004e783: sub dh, cl; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000030f32: sub dl, al; addsd xmm0, xmm1; add rsp, 0x30; pop rbx; ret; 
0x000000000004f239: sub dl, al; addss xmm0, xmm1; add rsp, 0x20; pop rbx; ret; 
0x0000000000048ce3: sub dl, al; andpd xmm7, xmmword ptr [rip + 0x825f3]; add rsp, 0x40; pop rbx; orpd xmm1, xmm7; ret; 
0x00000000000273ac: sub dl, al; jne 0x277ae; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000b111d: sub dl, al; jne 0xb1522; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004ee4b: sub dl, al; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x00000000000471f4: sub dl, al; movapd xmm1, xmm9; ret; 
0x000000000002dfde: sub dl, al; mulsd xmm0, xmm1; ret; 
0x0000000000048826: sub dl, al; orpd xmm4, xmm7; movapd xmm1, xmm4; ret; 
0x00000000000486b4: sub dl, al; pop rbx; ret; 
0x000000000002dec2: sub dl, al; ret; 
0x000000000018fd75: sub dl, ch; call qword ptr [rax]; 
0x000000000003d01a: sub dl, cl; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000002a759: sub dl, cl; pop r13; movapd xmm0, xmm1; ret; 
0x0000000000044db8: sub dl, cl; ret; 
0x000000000010d5a0: sub dword ptr [rax - 0x1e143461], edx; ret 0x27ef; 
0x000000000012dd99: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x12ddcd; ret 0x11bf; 
0x000000000013e139: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x13e16d; ret 0x11bf; 
0x000000000015c5b9: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x15c5ed; ret 0x11bf; 
0x000000000016c879: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x16c8ad; ret 0x11bf; 
0x0000000000180659: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x18068d; ret 0x11bf; 
0x000000000018b3f9: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0x18b42d; ret 0x11bf; 
0x00000000000ddc59: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0xddc8d; ret 0x11bf; 
0x00000000000fa0f9: sub dword ptr [rax - 0x2df5e5b5], edx; mov edi, 0x89f5fb1c; ja 0xfa12d; ret 0x11bf; 
0x00000000000e9c80: sub dword ptr [rax - 0x30], edi; ret; 
0x0000000000114113: sub dword ptr [rax - 0x4b], edx; ret 0x366c; 
0x00000000000d8de8: sub dword ptr [rax - 0x54f51984], ebx; ret 0xef3f; 
0x00000000000e4993: sub dword ptr [rax], -0x7e; mov r15d, 0x8152093a; ret; 
0x00000000000bf942: sub dword ptr [rax], eax; add ch, al; ret; 
0x000000000004a7a3: sub dword ptr [rax], ebp; xor eax, 0x158d4800; ret 0x512; 
0x000000000004898f: sub dword ptr [rax], ecx; add byte ptr [rdi + 0x14], dh; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x00000000000dc06a: sub dword ptr [rax], esp; ret; 
0x00000000000c9b63: sub dword ptr [rbp + 0x10], edx; add rsp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020a33: sub dword ptr [rbp - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x000000000007b1ad: sub dword ptr [rbx + 0x10], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000007b275: sub dword ptr [rbx + 0x10], eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000758d5: sub dword ptr [rbx + 0x10], eax; jne 0x75a6d; add rsp, 0x50; pop rbx; ret; 
0x0000000000075ae0: sub dword ptr [rbx + 0x10], eax; jne 0x75aee; add rsp, 0x30; mov rax, rbx; pop rbx; ret; 
0x0000000000076b51: sub dword ptr [rbx + 0x10], ebp; jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x000000000007ab45: sub dword ptr [rbx + 0x10], ebx; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000078e63: sub dword ptr [rbx + 0x10], edi; add rsp, 0x70; pop rbx; ret; 
0x000000000007a44e: sub dword ptr [rbx + 0x10], edi; jne 0x7a968; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000078917: sub dword ptr [rbx + 0x10], edx; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000000799c0: sub dword ptr [rbx + 0x10], esi; jne 0x79cf4; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000079fa2: sub dword ptr [rbx + 0x10], esi; jne 0x7a331; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000007b181: sub dword ptr [rbx + 0x10], esp; add rsp, 0x10; pop rbx; ret; 
0x00000000000762d6: sub dword ptr [rbx + 0x10], esp; jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x00000000000bfbb4: sub dword ptr [rbx + rdx*8 - 0x3b], edx; ret; 
0x00000000000e8c8a: sub dword ptr [rbx], ebp; mov ah, dh; clc; mov esp, 0x1a5f8b99; ret 0x2e01; 
0x000000000007b17e: sub dword ptr [rbx], ebx; movaps xmmword ptr [rbx + 0x10], xmm4; add rsp, 0x10; pop rbx; ret; 
0x00000000000762d3: sub dword ptr [rbx], ebx; movaps xmmword ptr [rbx + 0x10], xmm4; jne 0x763c7; add rsp, 0x40; pop rbx; ret; 
0x000000000004e2a6: sub dword ptr [rbx], ecx; add byte ptr [rcx + 0x2e0f0045], cl; ror dword ptr [rdi], 0x82; ret; 
0x000000000007b1aa: sub dword ptr [rbx], ecx; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x10; pop rbx; ret; 
0x000000000007b272: sub dword ptr [rbx], ecx; movaps xmmword ptr [rbx + 0x10], xmm0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000007c624: sub dword ptr [rbx], edx; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000078e60: sub dword ptr [rbx], esi; movaps xmmword ptr [rbx + 0x10], xmm7; add rsp, 0x70; pop rbx; ret; 
0x0000000000076b4e: sub dword ptr [rbx], esp; movaps xmmword ptr [rbx + 0x10], xmm5; jne 0x76de7; add rsp, 0x50; pop rbx; ret; 
0x00000000000895f1: sub dword ptr [rcx + rdx*8 - 0x3b], edx; pop r8; ret; 
0x000000000008e289: sub dword ptr [rcx + rdx*8 - 0x3b], edx; ret; 
0x00000000000896f0: sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x89725; fcmovb st(0), st(5); ret; 
0x000000000009fc6e: sub dword ptr [rcx + rdx*8 - 0x3c], edx; jns 0x9fca3; fcmovb st(0), st(5); ret; 
0x0000000000054773: sub dword ptr [rcx - 5], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000d0f83: sub dword ptr [rcx], ebx; ret 0x3fc6; 
0x000000000007545b: sub dword ptr [rdi + 0x10], eax; ret; 
0x000000000012f6a5: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x12f6ef; ret 0x3fe5; 
0x000000000013fa45: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x13fa8f; ret 0x3fe5; 
0x000000000015dec5: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x15df0f; ret 0x3fe5; 
0x000000000016e185: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x16e1cf; ret 0x3fe5; 
0x0000000000181f65: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x181faf; ret 0x3fe5; 
0x000000000018cd05: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0x18cd4f; ret 0x3fe5; 
0x00000000000df565: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xdf5af; ret 0x3fe5; 
0x00000000000fba05: sub dword ptr [rdi + rdi*4 + 0x6e60a234], 0x3fe9e001; adc ah, 0xac; jns 0xfba4f; ret 0x3fe5; 
0x000000000007544a: sub dword ptr [rdi], eax; movdqa xmm0, xmmword ptr [rsp + 0x18]; pxor xmm0, xmmword ptr [rip + 0x6e2e6]; movaps xmmword ptr [rdi + 0x10], xmm0; ret; 
0x00000000000745d6: sub dword ptr [rdi], eax; ret; 
0x00000000000729e2: sub dword ptr [rdi], esp; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a9791: sub dword ptr [rdx + rdx*8 - 0x3c], edx; ret; 
0x00000000000ca391: sub dword ptr [rdx + rsi*4 + 0x3fe8c6a9], 0x20dfd889; adc bl, dl; call 0xffffffffd64445e2; ret; 
0x00000000000ddc41: sub dword ptr [rdx], -0x10; sti; call rsi; 
0x00000000000dc065: sub dword ptr [rsi + 0x3c], eax; int1; sub dword ptr [rax], esp; ret; 
0x0000000000020d6e: sub dword ptr [rsi + 0xf], esp; sub al, cl; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000586e1: sub dword ptr [rsp + 0x20], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000007c375: sub dword ptr [rsp + 0x20], ebx; movdqa xmm0, xmmword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000006fa3b: sub dword ptr [rsp], eax; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006fa82: sub dword ptr [rsp], ebp; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000049611: sub dword ptr [rsp], ecx; call 0x43f10; movapd xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorpd xmm0, xmm1; ret; 
0x0000000000056d90: sub dword ptr [rsp], ecx; call 0x518d0; movaps xmm1, xmmword ptr [rsp]; add rsp, 0x18; xorps xmm0, xmm1; ret; 
0x000000000004898e: sub dword ptr ss:[rax], ecx; add byte ptr [rdi + 0x14], dh; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x000000000004def2: sub eax, 0x2e0f000b; ret 0x870f; 
0x00000000001006db: sub eax, 0x31ad6446; ret 0x9dff; 
0x00000000000cfe78: sub eax, 0x3e41e57a; ret; 
0x00000000000ca2ab: sub eax, 0x3fe76965; ret; 
0x000000000007c43a: sub eax, 0x446f0f66; and al, 0x10; add rsp, 0x28; ret; 
0x00000000000127a3: sub eax, 0x7a000b93; add dh, byte ptr [rbp + rax + 0x48]; add esp, 0x18; ret; 
0x00000000000e6e3c: sub eax, 0x7f3fefeb; stosd dword ptr [rdi], eax; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x0000000000050ee9: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000501af: sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x0000000000020381: sub eax, 0xaf6ea; fmulp st(2); add rsp, 0x28; ret; 
0x0000000000141b54: sub eax, 0xb03ff37c; jnp 0x141b52; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000170094: sub eax, 0xb03ff37c; jnp 0x170092; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000018ec14: sub eax, 0xb03ff37c; jnp 0x18ec12; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000fde74: sub eax, 0xb03ff37c; jnp 0xfde72; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000001dec6: sub eax, 0xb1b15; add rsp, 0x58; fxch st(1); ret; 
0x000000000001c164: sub eax, 0xb3877; add rsp, 0x18; fldz; ret; 
0x000000000001830e: sub eax, 0xb38dd; fmulp st(1); ret; 
0x000000000001aee3: sub eax, 0xb39c8; ret; 
0x00000000000ff8e4: sub eax, 0xb63fed07; ret 0x7ba2; 
0x00000000000183b6: sub eax, 0xb64a5; fmulp st(1); ret; 
0x00000000000183ae: sub eax, 0xb64ad; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x0000000000018308: sub eax, 0xb6573; fld xword ptr [rip + 0xb38dd]; fmulp st(1); ret; 
0x0000000000016e9b: sub eax, 0xb7330; fsubp st(1); fmulp st(1); fmul st(1); faddp st(1); ret; 
0x0000000000012bd8: sub eax, 0xb8f13; fsubrp st(1); jns 0x12b49; fchs; ret; 
0x0000000000012bab: sub eax, 0xb8f50; fld xword ptr [rsp + 8]; fmulp st(1); faddp st(1); ret; 
0x0000000000012c5b: sub eax, 0xb8f60; fsubp st(2); fdivrp st(1); fmul st(1); faddp st(1); ret; 
0x000000000002922c: sub eax, 0xbab87; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000029186: sub eax, 0xbac2d; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000002870c: sub eax, 0xbb30f; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x0000000000028666: sub eax, 0xbb3bd; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000001264c2: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x126470; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000136862: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x136810; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000154ce2: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x154c90; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000164fa2: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x164f50; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000178d82: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x178d30; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000183b22: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0x183ad0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000d6382: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0xd6330; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x00000000000f2822: sub eax, 0xc13e9ad2; mov edi, 0xd35c8c33; jg 0xf27d0; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x000000000009a777: sub eax, 0xc5000313; sti; pop rcx; ret; 
0x00000000001132d0: sub eax, 0xd163a1aa; ret 0x3fe9; 
0x00000000000dd291: sub eax, 0xe34773e5; ret; 
0x0000000000135250: sub eax, 0xe515b023; ja 0x135277; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000163990: sub eax, 0xe515b023; ja 0x1639b7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x00000000000d4a90: sub eax, 0xe515b023; ja 0xd4ab7; mov byte ptr [rsi - 0x12], al; sal dword ptr [rax + 0x4b], 0x40; ret; 
0x0000000000096272: sub eax, 0xebc88948; ret; 
0x00000000000806b2: sub eax, 0xebf08948; ret; 
0x0000000000029187: sub eax, 0xf2000bac; divps xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000c66ca: sub eax, 0xfc08548; xchg ebp, eax; ret; 
0x0000000000051cf5: sub eax, 1; neg rcx; test edx, edx; cmovs rax, rcx; ret; 
0x000000000004441d: sub eax, 1; neg rcx; test rdx, rdx; cmovs rax, rcx; ret; 
0x00000000000445a7: sub eax, 1; ret; 
0x00000000000c8081: sub eax, dword ptr [rax + rax]; add byte ptr [rcx + 1], cl; fmul dword ptr [rax + 0x11]; ret 0x8148; 
0x000000000010e99a: sub eax, dword ptr [rax + rdi*4]; int1; nop; mov edi, 0x947c13a; ret; 
0x000000000018f7d1: sub eax, dword ptr [rax]; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x000000000018f7c9: sub eax, dword ptr [rax]; add byte ptr [rax + 0x48ffe834], ch; sub eax, dword ptr [rax]; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x00000000000799c5: sub eax, dword ptr [rbx]; add byte ptr [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000090949: sub eax, dword ptr [rdi + 4]; add ch, al; ret; 
0x00000000000556ac: sub eax, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x000000000012e0f8: sub eax, dword ptr [rdx]; jp 0x12e153; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000013e498: sub eax, dword ptr [rdx]; jp 0x13e4f3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000015c918: sub eax, dword ptr [rdx]; jp 0x15c973; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000016cbd8: sub eax, dword ptr [rdx]; jp 0x16cc33; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000001809b8: sub eax, dword ptr [rdx]; jp 0x180a13; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x000000000018b758: sub eax, dword ptr [rdx]; jp 0x18b7b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000ddfb8: sub eax, dword ptr [rdx]; jp 0xde013; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x00000000000fa458: sub eax, dword ptr [rdx]; jp 0xfa4b3; mov esi, 0xe1bfab35; ret 0x2f4c; 
0x0000000000019e56: sub eax, edx; sar eax, 0x10; ret; 
0x0000000000050ecf: sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000042fcd: sub eax, edx; shr rax, 0x3f; ret; 
0x00000000000023e9: sub ebp, dword ptr [rax + 0x1b8ffa0f]; xsavec ptr [rcx]; call 0xffffffff82f4948d; mov esp, 0x87919e45; ret; 
0x00000000000d4245: sub ebp, dword ptr [rax + 0x613f023c]; ret 0x278; 
0x00000000001339d5: sub ebp, dword ptr [rdi]; jnp 0x133a10; outsd dx, dword ptr [rsi]; ret; 
0x0000000000162115: sub ebp, dword ptr [rdi]; jnp 0x162150; outsd dx, dword ptr [rsi]; ret; 
0x00000000000d3215: sub ebp, dword ptr [rdi]; jnp 0xd3250; outsd dx, dword ptr [rsi]; ret; 
0x0000000000114682: sub ebp, dword ptr [rsp + rsi*4 - 0x52f1463b]; fld dword ptr [rbx]; ret; 
0x00000000000ef652: sub ebp, ecx; ret 0xc50b; 
0x00000000001909fd: sub ebp, edi; call rax; 
0x00000000000b48c4: sub ebx, dword ptr [r11 + rdx*8 - 0x3b]; ret; 
0x000000000008902b: sub ebx, dword ptr [r12 + rdx*8 - 0x3b]; sti; pop rcx; ret 0x41c4; 
0x0000000000127e72: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x127eb4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000138212: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x138254; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000156692: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x1566d4; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x0000000000166952: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x166994; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x000000000017a732: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x17a774; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000001854d2: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0x185514; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000d7d32: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0xd7d74; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000f41d2: sub ebx, dword ptr [rax + rcx*4 - 0x64]; jbe 0xf4214; lea edi, [rdx - 0x14]; out 0x7b, eax; ret; 
0x00000000000a5b15: sub ebx, dword ptr [rax + rdx*8 - 0x3c]; ret; 
0x00000000000ef4c9: sub ebx, dword ptr [rbp + rsi*2 + 0x3f3e0b91]; add byte ptr [rax - 9], ah; ficomp word ptr [rcx - 0x3c]; ret; 
0x00000000000b48c5: sub ebx, dword ptr [rbx + rdx*8 - 0x3b]; ret; 
0x00000000000b3886: sub ebx, dword ptr [rcx + rdx*8 - 0x3b]; ret; 
0x00000000000c0002: sub ebx, dword ptr [rdi + rdx*8 - 0x3b]; ret; 
0x000000000008902c: sub ebx, dword ptr [rsp + rdx*8 - 0x3b]; sti; pop rcx; ret 0x41c4; 
0x0000000000090917: sub ebx, dword ptr [rsp + rdx*8 - 0x3c]; ret 0x99a9; 
0x00000000000a6ee9: sub ebx, dword ptr [rsp + rdx*8 - 0x3c]; ret; 
0x00000000000fd1b1: sub ebx, eax; or al, 0x88; out 0xa, al; lea ebx, [rdi]; sbb al, 0x14; ret; 
0x00000000000e8c8b: sub ecx, dword ptr [rax - 0x6643070c]; mov ebx, dword ptr [rdi + 0x1a]; ret 0x2e01; 
0x0000000000048ec5: sub ecx, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; sub al, cl; ret; 
0x000000000007dfba: sub ecx, dword ptr [rcx]; add byte ptr [rdi], cl; ror qword ptr [rbp - 0x76b2adfc], cl; ret; 
0x000000000006eb00: sub ecx, dword ptr [rcx]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x54e8; 
0x00000000000dc0a8: sub ecx, dword ptr [rcx]; cmpsb byte ptr [rsi], byte ptr [rdi]; adc ebx, edx; ret; 
0x0000000000103362: sub ecx, edi; insd dword ptr [rdi], dx; call qword ptr [rbx]; 
0x0000000000019aec: sub ecx, edi; shr edx, cl; imul rax, rdx; ret; 
0x0000000000019e0b: sub ecx, edx; not eax; and eax, ecx; ret; 
0x000000000007237b: sub ecx, edx; shr rsi, cl; imul rax, rsi; add rsp, 0x18; ret; 
0x0000000000019c0b: sub ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x00000000000724c5: sub ecx, esi; shr rdx, cl; imul rax, rdx; add rsp, 0x18; ret; 
0x00000000000e8130: sub ecx, esp; ret; 
0x000000000006f75b: sub edi, 0x3fff; call 0xc9110; add rsp, 0x18; ret; 
0x00000000000cee31: sub edi, dword ptr [rax + 0x23]; ret; 
0x0000000000118459: sub edi, dword ptr [rax]; xchg ebx, eax; wait; jo 0x11845b; mov ebx, 0xc1abdcd; ret; 
0x0000000000146df9: sub edi, dword ptr [rax]; xchg ebx, eax; wait; jo 0x146dfb; mov ebx, 0xc1abdcd; ret; 
0x0000000000174d39: sub edi, dword ptr [rax]; xchg ebx, eax; wait; jo 0x174d3b; mov ebx, 0xc1abdcd; ret; 
0x00000000000e4499: sub edi, dword ptr [rax]; xchg ebx, eax; wait; jo 0xe449b; mov ebx, 0xc1abdcd; ret; 
0x000000000012eb59: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x12ebc8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000013eef9: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x13ef68; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000015d379: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x15d3e8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000016d639: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x16d6a8; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x0000000000181419: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x181488; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000018c1b9: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0x18c228; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000dea19: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0xdea88; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x00000000000faeb9: sub edi, dword ptr [rbx]; lodsd eax, dword ptr [rsi]; ja 0xfaf28; out 0x3f, eax; xchg esi, eax; ret 0x74aa; 
0x000000000007709a: sub edi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000075feb: sub edi, esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000320de: sub edx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x00000000000cadaf: sub edx, dword ptr [rax]; jnp 0xcade8; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x00000000000e6613: sub edx, esp; add eax, 0xa7c13ff0; push rsp; sbb eax, 0x3ff005d2; imul esp, dword ptr [rax - 0x42], 0x11; ret 0xf005; 
0x00000000000d77d8: sub esi, 0x6c; add al, 0x12; push rax; ret; 
0x0000000000047541: sub esi, dword ptr [rbp + 0xb]; add byte ptr [rsi + 0xf], ah; sub bh, dl; movapd xmm1, xmm2; ret; 
0x0000000000086684: sub esi, ebx; ret; 
0x0000000000042dea: sub esi, ecx; mov ecx, esi; sar rdx, cl; imul rax, rdx; ret; 
0x0000000000050d93: sub esi, ecx; mov ecx, esi; shr edx, cl; imul rax, rdx; ret; 
0x000000000006796a: sub esp, -0x80; pop rbx; ret; 
0x00000000000ca1d9: sub esp, 8; add rsp, 8; ret; 
0x000000000000b7f1: sub esp, 8; mov rax, qword ptr [rip + 0x3917cd]; test rax, rax; je 0xb802; call rax; 
0x00000000000cadb3: sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x00000000000e4aa2: sub esp, dword ptr [rbx]; ret 0x3e01; 
0x00000000000cadae: sub r10d, dword ptr [rax]; jnp 0xcade8; sub esp, dword ptr [rax + 0x202ae1cf]; ret 0x2b19; 
0x00000000000e5699: sub r15b, byte ptr [r9 + 0x79]; ret 0xbc01; 
0x00000000000ff44b: sub r9b, dl; out 0x3f, eax; je 0xff3df; jmp qword ptr [rdx + 0x6a]; 
0x00000000000ff8e3: sub rax, -0x49c012f9; ret 0x7ba2; 
0x0000000000051cf4: sub rax, 1; neg rcx; test edx, edx; cmovs rax, rcx; ret; 
0x000000000004441c: sub rax, 1; neg rcx; test rdx, rdx; cmovs rax, rcx; ret; 
0x00000000000445a6: sub rax, 1; ret; 
0x000000000018f7d0: sub rax, qword ptr [rax]; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x0000000000042fcc: sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000006f75a: sub rdi, 0x3fff; call 0xc9110; add rsp, 0x18; ret; 
0x00000000000320dd: sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x0000000000067969: sub rsp, -0x80; pop rbx; ret; 
0x00000000000ca1d8: sub rsp, 8; add rsp, 8; ret; 
0x000000000000b7f0: sub rsp, 8; mov rax, qword ptr [rip + 0x3917cd]; test rax, rax; je 0xb802; call rax; 
0x00000000000ece72: sub sil, byte ptr [r9 + 0x3d]; ret 0x5cbf; 
0x00000000000e5a72: sub sil, byte ptr [r9 + 0x3d]; ret 0x69bf; 
0x00000000000a3cd4: sub spl, al; jns 0xa3d02; loope 0xa3ca0; ret; 
0x000000000002c509: subps xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x0000000000049c31: subps xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b2d6: subps xmm0, xmm0; ret; 
0x000000000004fdd9: subps xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fc0c: subps xmm0, xmm1; addss xmm0, xmm5; movd eax, xmm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000009b2a9: subps xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004fda0: subps xmm0, xmm1; movd eax, xmm0; add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000007ff0a: subps xmm0, xmm1; movsd qword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000031bf9: subps xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x000000000004fd31: subps xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x0000000000031af3: subps xmm0, xmm1; ret; 
0x000000000004a0a2: subps xmm0, xmm1; test edx, edx; jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x0000000000049ddc: subps xmm0, xmm2; movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x0000000000031c01: subps xmm0, xmm2; ret; 
0x000000000004fd39: subps xmm0, xmm4; ret; 
0x000000000004fdae: subps xmm0, xmm5; ret; 
0x0000000000032025: subps xmm0, xmm6; ret; 
0x0000000000031fb9: subps xmm0, xmm7; ret; 
0x000000000004fb08: subps xmm0, xmmword ptr [rip + 0x7a6f1]; ret; 
0x0000000000031940: subps xmm0, xmmword ptr [rip + 0x99979]; ret; 
0x000000000009aff7: subps xmm0, xmmword ptr [rip + 0xa7fda]; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000004eea9: subps xmm0, xmmword ptr [rip + 0xb14cc]; ret; 
0x000000000003177e: subps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007f448: subps xmm1, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000031c43: subps xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000004fd82: subps xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x000000000004f96d: subps xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000002de41: subps xmm1, xmm1; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004dc31: subps xmm1, xmm1; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x0000000000031aef: subps xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000004fc4b: subps xmm1, xmm1; subss xmm0, xmm1; ret; 
0x0000000000031430: subps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000004f69e: subps xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x000000000003cc29: subps xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x00000000000506f1: subps xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004e6e1: subps xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000002e036: subps xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x000000000004ddbc: subps xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004eb09: subps xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x0000000000049d10: subps xmm1, xmm4; divss xmm1, xmm3; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x0000000000031b7d: subps xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x000000000009b91c: subps xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000004ae6e: subps xmm1, xmmword ptr [rip + 0x80373]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000028663: subps xmm13, xmmword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000007e9f4: subps xmm2, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000003d015: subps xmm2, xmm1; movapd xmm1, xmm2; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000004ee47: subps xmm2, xmm1; movaps xmm0, xmm2; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x000000000004fdff: subps xmm2, xmm1; movd eax, xmm2; add eax, esi; movd xmm0, eax; ret; 
0x000000000004ea8e: subps xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000004e6da: subps xmm2, xmm4; movaps xmm1, xmm3; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004e77f: subps xmm2, xmm4; movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004e875: subps xmm2, xmmword ptr [rip + 0xb1b18]; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000005013d: subps xmm3, xmm0; subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050005: subps xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x000000000005123c: subps xmm3, xmm1; divsd xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x0000000000050001: subps xmm3, xmm1; subss xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000050139: subps xmm3, xmm2; subss xmm3, xmm0; subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050141: subps xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050009: subps xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000028664: subps xmm5, xmmword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000004e77b: subps xmm6, xmm3; subss xmm2, xmm4; movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x0000000000032021: subps xmm6, xmm4; subsd xmm0, xmm6; ret; 
0x0000000000031faf: subps xmm7, xmm1; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000009b971: subps xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x000000000003193f: subsd xmm0, qword ptr [rip + 0x99979]; ret; 
0x000000000009aff6: subsd xmm0, qword ptr [rip + 0xa7fda]; mulsd xmm0, xmm1; addsd xmm0, qword ptr [rip + 0x302b6]; cvtsd2ss xmm0, xmm0; ret; 
0x000000000002c508: subsd xmm0, xmm0; divsd xmm0, xmm0; ret; 
0x000000000009b2a8: subsd xmm0, xmm1; cvtsd2ss xmm0, xmm0; ret; 
0x000000000007ff09: subsd xmm0, xmm1; movsd qword ptr [rdi], xmm1; addsd xmm6, xmm0; movsd qword ptr [rdi + 8], xmm6; ret; 
0x0000000000031bf8: subsd xmm0, xmm1; mulsd xmm0, xmm2; subsd xmm0, xmm2; ret; 
0x0000000000031af2: subsd xmm0, xmm1; ret; 
0x0000000000031c00: subsd xmm0, xmm2; ret; 
0x0000000000032024: subsd xmm0, xmm6; ret; 
0x0000000000031fb8: subsd xmm0, xmm7; ret; 
0x000000000003177d: subsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007f447: subsd xmm1, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm7, xmm1; movsd qword ptr [rdi + 8], xmm7; ret; 
0x0000000000031c42: subsd xmm1, xmm0; movsd xmm0, qword ptr [rip + 0xb2282]; mulsd xmm0, xmm1; ret; 
0x000000000002de40: subsd xmm1, xmm1; add rsp, 0x18; divsd xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x0000000000031aee: subsd xmm1, xmm1; subsd xmm0, xmm1; ret; 
0x000000000003142f: subsd xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x000000000003cc28: subsd xmm1, xmm2; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000002e035: subsd xmm1, xmm3; movapd xmm0, xmm1; mulsd xmm0, xmm2; ret; 
0x0000000000031b7c: subsd xmm1, xmm4; subsd xmm0, xmm1; ret; 
0x0000000000028662: subsd xmm13, qword ptr [rip + 0xbb3bd]; divsd xmm13, xmm0; movapd xmm0, xmm13; ret; 
0x000000000007e9f3: subsd xmm2, xmm0; movsd qword ptr [rdi], xmm0; addsd xmm1, xmm2; movsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000003d014: subsd xmm2, xmm1; movapd xmm1, xmm2; divsd xmm1, qword ptr [rip + 0x92a5c]; subsd xmm0, xmm1; ret; 
0x000000000005123b: subsd xmm3, xmm1; divsd xmm3, xmm1; cvtsd2ss xmm4, xmm3; movss dword ptr [rsi], xmm4; ret; 
0x0000000000032020: subsd xmm6, xmm4; subsd xmm0, xmm6; ret; 
0x0000000000031fae: subsd xmm7, xmm1; mulsd xmm7, xmm6; jne 0x31fc0; subsd xmm0, xmm7; ret; 
0x000000000004fb07: subss xmm0, dword ptr [rip + 0x7a6f1]; ret; 
0x000000000004eea8: subss xmm0, dword ptr [rip + 0xb14cc]; ret; 
0x0000000000049c30: subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x000000000009b2d5: subss xmm0, xmm0; ret; 
0x000000000004fdd8: subss xmm0, xmm1; addss xmm0, xmm0; addss xmm0, xmm5; ret; 
0x000000000004fc0b: subss xmm0, xmm1; addss xmm0, xmm5; movd eax, xmm0; add eax, esi; movd xmm0, eax; ret; 
0x000000000004fd9f: subss xmm0, xmm1; movd eax, xmm0; add eax, esi; movd xmm0, eax; subss xmm0, xmm5; ret; 
0x000000000004fd30: subss xmm0, xmm1; mulss xmm0, xmm4; subss xmm0, xmm4; ret; 
0x0000000000049dea: subss xmm0, xmm1; ret; 
0x000000000004a0a1: subss xmm0, xmm1; test edx, edx; jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x0000000000049ddb: subss xmm0, xmm2; movaps xmm1, xmm0; movss xmm0, dword ptr [rip + 0xb658e]; subss xmm0, xmm1; ret; 
0x000000000004fd38: subss xmm0, xmm4; ret; 
0x000000000004fdad: subss xmm0, xmm5; ret; 
0x000000000004ae6d: subss xmm1, dword ptr [rip + 0x80373]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000004fd81: subss xmm1, xmm0; movss xmm0, dword ptr [rip + 0x7cf8b]; mulss xmm0, xmm1; ret; 
0x000000000004f96c: subss xmm1, xmm0; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004dc30: subss xmm1, xmm1; add rsp, 0x18; divss xmm1, xmm1; movaps xmm0, xmm1; ret; 
0x000000000004fc4a: subss xmm1, xmm1; subss xmm0, xmm1; ret; 
0x000000000004f69d: subss xmm1, xmm2; movaps xmm0, xmm1; ret; 
0x00000000000506f0: subss xmm1, xmm2; pop rbx; movaps xmm0, xmm1; ret; 
0x000000000004e6e0: subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004ddbb: subss xmm1, xmm3; movaps xmm0, xmm1; mulss xmm0, xmm2; ret; 
0x000000000004eb08: subss xmm1, xmm3; mulss xmm0, xmm1; ret; 
0x0000000000049d0f: subss xmm1, xmm4; divss xmm1, xmm3; addss xmm0, xmm1; addss xmm0, xmm2; addss xmm0, xmm0; ret; 
0x000000000009b91b: subss xmm1, xmm7; movss dword ptr [rsi], xmm1; ret; 
0x000000000004e874: subss xmm2, dword ptr [rip + 0xb1b18]; mulss xmm2, xmm4; addss xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x000000000004ee46: subss xmm2, xmm1; movaps xmm0, xmm2; jns 0x4ed25; xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x000000000004fdfe: subss xmm2, xmm1; movd eax, xmm2; add eax, esi; movd xmm0, eax; ret; 
0x000000000004ea8d: subss xmm2, xmm3; mulss xmm0, xmm2; ret; 
0x000000000004e6d9: subss xmm2, xmm4; movaps xmm1, xmm3; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000004e77e: subss xmm2, xmm4; movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000005013c: subss xmm3, xmm0; subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050004: subss xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000050000: subss xmm3, xmm1; subss xmm3, xmm0; subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x0000000000050138: subss xmm3, xmm2; subss xmm3, xmm0; subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050140: subss xmm4, xmm3; movaps xmm0, xmm4; ret; 
0x0000000000050008: subss xmm5, xmm3; movaps xmm0, xmm5; ret; 
0x000000000004e77a: subss xmm6, xmm3; subss xmm2, xmm4; movaps xmm1, xmm6; subss xmm1, xmm2; subss xmm0, xmm1; ret; 
0x000000000009b970: subss xmm7, xmm7; movss dword ptr [rdi], xmm7; movss dword ptr [rsi], xmm7; ret; 
0x0000000000003f39: syscall; 
0x000000000000236f: sysenter; 
0x0000000000095966: test ah, 0x41; pop r9; fld st(4); movabs eax, dword ptr [0xc4240c5933c5e19b]; ret 0x99b1; 
0x0000000000087266: test ah, 0xe2; leave; mov ebp, 0x90e501d; add ch, al; ret; 
0x000000000009d7e3: test ah, 0xe3; jnp 0x9d806; shr byte ptr [rax - 0x3acffff9], cl; ret; 
0x00000000000183aa: test ah, 2; fld xword ptr [rip + 0xb64ad]; jne 0x183d8; fld xword ptr [rip + 0xb64a5]; fmulp st(1); ret; 
0x000000000001fa34: test ah, 2; fldz; jne 0x1fa48; fld dword ptr [rip + 0xaca2f]; ret; 
0x000000000001c115: test ah, 2; jne 0x1c1b0; fchs; add rsp, 0x18; ret; 
0x0000000000015a6c: test ah, 4; jne 0x15a3d; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000015b00: test ah, 4; jne 0x15ad1; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000017f9d: test ah, 4; jne 0x17f71; fstp st(1); fstp st(1); fadd st(0); ret; 
0x0000000000018ac0: test ah, 4; jne 0x18a95; fstp st(1); fstp st(1); fadd st(0); ret; 
0x00000000000cc1b2: test ah, bh; ret 0x3d6f; 
0x00000000001982dc: test ah, bl; out dx, al; jmp qword ptr [rdx]; 
0x00000000000dde52: test ah, ch; jmp rdi; 
0x0000000000091ea0: test ah, cl; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe06], al; ret; 
0x000000000002d327: test ah, dh; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000190e91: test al, 0; add byte ptr [rax - 0x1d], ch; bnd call qword ptr [rax]; 
0x000000000006a447: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000190e2c: test al, 0x14; bnd jmp rax; 
0x00000000001902ac: test al, 0x19; in al, dx; jmp rax; 
0x0000000000112312: test al, 0x22; ret 0xefeb; 
0x0000000000190324: test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x00000000000cd9d9: test al, 0x27; add cl, dh; outsb dx, byte ptr [rsi]; ret; 
0x000000000018f714: test al, 0x27; call 0x41a81a; add byte ptr [rax], ch; sub al, ch; call rax; 
0x0000000000190374: test al, 0x2e; in al, dx; inc dword ptr [rax]; add byte ptr [rax], al; xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x0000000000001be1: test al, 0x2e; not dword ptr [rcx - 0x21]; adc eax, 0xd16fa95; out 0x94, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000001906a4: test al, 0x33; out dx, al; call rax; 
0x000000000018f7cc: test al, 0x34; call 0x4440d2; add al, cl; xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x00000000000f088e: test al, 0x3e; add byte ptr [rax - 0x2b4a186a], ah; sar dword ptr [rdi], 1; ret 0x97ba; 
0x00000000000478f4: test al, 0x41; or byte ptr [rax], al; movapd xmm1, xmm0; ret; 
0x00000000000ef64b: test al, 0x43; xor byte ptr [r15 - 0x32d64000], r15b; ret 0xc50b; 
0x0000000000190a64: test al, 0x49; out dx, eax; inc dword ptr [rax - 0x27ffff73]; pop rcx; out dx, eax; call rax; 
0x000000000019070c: test al, 0x4e; out dx, al; call qword ptr [rax + 0x7a]; 
0x00000000000d5635: test al, 0x58; cmp al, 0x18; xchg esp, eax; push rsp; mov esi, ecx; ret; 
0x0000000000190a74: test al, 0x6a; out dx, eax; jmp qword ptr [rax]; 
0x0000000000190820: test al, 0x80; add byte ptr [rax], al; sbb dh, cl; out dx, al; jmp rax; 
0x0000000000043004: test al, 0x82; or byte ptr [rax], al; andpd xmm1, xmmword ptr [rip + 0x882d0]; orpd xmm0, xmm1; ret; 
0x000000000000163b: test al, 0x84; ret; 
0x00000000000f14e2: test al, 0x99; ret 0xf357; 
0x00000000000e4cd1: test al, 0xa6; add dh, cl; call qword ptr [rbx]; 
0x00000000000d626b: test al, 0xc6; cdq; ret; 
0x0000000000190fb1: test al, 0xe7; jmp qword ptr [rax + 2]; 
0x000000000019a348: test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x0000000000051030: test al, 0xf3; or al, byte ptr [rax]; orps xmm0, xmmword ptr [rip + 0xafe65]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000049616: test al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d3810: test al, 2; jmp qword ptr [rbp - 0x36]; 
0x0000000000011a40: test al, al; jne 0x11a70; add rsp, 0x18; ret; 
0x000000000000e414: test al, al; jne 0xe440; add rsp, 0x28; ret; 
0x00000000000c9910: test al, cl; add byte ptr [rax], al; add byte ptr [rbp + 0x486a75ff], al; add esp, 0x30; pop rbx; ret; 
0x0000000000073d13: test bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000efeb5: test bl, 0x3f; mov ch, 0x78; ret; 
0x00000000000bffde: test bl, dh; sbb dword ptr [rax], eax; add ch, al; ret; 
0x00000000000186d0: test bx, bx; jns 0x186d7; fchs; pop rbx; ret; 
0x000000000010d2bc: test byte ptr [rax + 0x1a], dl; adc byte ptr [rbp + 0x77], al; mov cl, 0x3a; sbb ch, byte ptr [rcx]; ret; 
0x0000000000050b9e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507be: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x000000000005042e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe4e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f07e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x000000000003d1fe: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000003cd0e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x49ce7]; cmovne rax, rdx; ret; 
0x000000000003243e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x542f7]; cmovne rax, rdx; ret; 
0x0000000000031d0e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x547d7]; cmovne rax, rdx; ret; 
0x0000000000030d6e: test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x55827]; cmovne rax, rdx; ret; 
0x000000000007718f: test byte ptr [rax + 0xf660000], bh; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000c90b7: test byte ptr [rax + 0xf], 0x45; ret 0x8545; 
0x000000000007186e: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8949; 
0x0000000000077772: test byte ptr [rax + rax], 0xe8; mul byte ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0xf]; 
0x0000000000085bf0: test byte ptr [rax + rax], ah; add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal bl, 0xf; pop rsp; ret; 
0x000000000007c98e: test byte ptr [rax + rax], al; add rsp, 0x48; ret; 
0x0000000000092e5c: test byte ptr [rax + rbp*2], ah; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000037451: test byte ptr [rax + rcx*4], ah; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x00000000000325e7: test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x601b7f28], 0x39; ret; 
0x0000000000084b1c: test byte ptr [rax + riz*2], ah; add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; sal dl, 0xf; pop rsp; ret; 
0x0000000000079cbd: test byte ptr [rax + riz*4], ah; add byte ptr [rax], al; add al, ch; or byte ptr [rcx - 1], dh; jmp qword ptr [rsi + 0xf]; 
0x000000000007300f: test byte ptr [rax + riz*4], ah; add byte ptr [rax], al; add al, ch; push rsi; mov cl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000079a95: test byte ptr [rax + rsi*4], ah; add byte ptr [rax], al; add al, ch; sal al, 1; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000c245d: test byte ptr [rax - 0x16000045], dh; test dh, -1; inc ebp; ret; 
0x0000000000019b78: test byte ptr [rax - 0x75], 0x44; and al, 0xe8; ret; 
0x000000000001faea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x0000000000050b7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x0000000000042dfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cvttsd2si rax, xmm0; ret; 
0x000000000001b39a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; fadd st(0); pop rbx; ret; 
0x0000000000015d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; fld qword ptr [rip + 0xb558a]; ret; 
0x000000000001ae9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; fldz; ret; 
0x0000000000085eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3170e1]; mov dword ptr fs:[rax], edi; ret; 
0x000000000007546a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rsp + 8]; ret; 
0x00000000000478ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x841a8]; movapd xmm1, xmm0; ret; 
0x000000000004fe1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movss xmm0, dword ptr [rip + 0xb0768]; ret; 
0x0000000000050aba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000027e8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mulsd xmm0, xmm1; divsd xmm0, xmm0; ret; 
0x00000000000501ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mulss xmm0, xmm0; ret; 
0x0000000000044cd5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x00000000000421e6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000001be09: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; fld xword ptr [rsp + 8]; ret; 
0x0000000000086ac8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; roundsd xmm0, xmm0, 0xa; ret; 
0x000000000000bc6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000057e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; add rsp, 0x38; ret; 
0x0000000000086b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 0xb; ret; 
0x0000000000086b0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 0xc; ret; 
0x0000000000086b2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 4; ret; 
0x0000000000086aea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundsd xmm0, xmm0, 9; ret; 
0x0000000000086ada: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xa; ret; 
0x0000000000086b5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xb; ret; 
0x0000000000086b1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 0xc; ret; 
0x0000000000086b3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 4; ret; 
0x0000000000086afa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; roundss xmm0, xmm0, 9; ret; 
0x000000000002e0da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; sqrtsd xmm0, xmm0; ret; 
0x000000000004de9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; sqrtss xmm0, xmm0; ret; 
0x0000000000049c2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; subss xmm0, xmm0; divss xmm0, xmm0; ret; 
0x00000000000421fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050bea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009bc6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x0000000000053571: test byte ptr [rax], al; add byte ptr [rax], al; movq xmm0, qword ptr [rsp + 0x80]; add rsp, 0xc0; pop rbx; ret; 
0x00000000000fd1a8: test byte ptr [rax], bh; pop rax; fdivr dword ptr [rax + 8]; sar dword ptr [rdi], cl; ret 0xd82b; 
0x000000000003d523: test byte ptr [rax], bl; add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x41]; 
0x000000000007cd83: test byte ptr [rax], cl; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007cdf4: test byte ptr [rax], cl; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x60e8; 
0x000000000007cda4: test byte ptr [rax], cl; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xb0e8; 
0x00000000000c6dde: test byte ptr [rbp + 0x66000001], ch; cmp r8d, 0x89497fff; ret; 
0x0000000000195d14: test byte ptr [rbp], cl; add byte ptr [rax], ch; add al, 0xec; call qword ptr [rdi]; 
0x0000000000036217: test byte ptr [rbx + rbp*8 - 1], cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000016b53: test byte ptr [rbx - 0x7a0fdbbc], -0x40; jne 0x16c60; fstp st(0); fld1; ret; 
0x000000000002e8e9: test byte ptr [rbx - 0x97afe18], 0x7f; div ebx; ret; 
0x00000000000d4c03: test byte ptr [rcx + 0x1640f907], dh; nop; ret; 
0x00000000000fc673: test byte ptr [rcx + 0x5c40644c], dh; ret 0xc69a; 
0x0000000000017957: test byte ptr [rcx + rax - 0x40f10000], al; ret 0xe0c1; 
0x00000000000d74d8: test byte ptr [rcx + rbp*2], 0xd3; ret 0xc5a4; 
0x000000000004107a: test byte ptr [rcx + rcx*8 - 1], ah; jmp qword ptr [rsi + 0xf]; 
0x00000000000197b9: test byte ptr [rcx - 0x7d000000], cl; call 0xffffffffff26fe04; jg 0x1974f; ret 0xb70f; 
0x0000000000041262: test byte ptr [rcx - 0x9ffffff], bl; ret; 
0x000000000004417a: test byte ptr [rcx - 0xd000000], cl; ret; 
0x00000000000320f8: test byte ptr [rcx], bl; or eax, dword ptr [rax]; andpd xmm1, xmmword ptr [rip + 0x991ac]; divsd xmm0, xmm1; ret; 
0x000000000003fbb5: test byte ptr [rcx], ch; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000e5850: test byte ptr [rcx], dh; xor esi, dword ptr [rdi + 0x52]; ret 0xbfd3; 
0x000000000003e2cd: test byte ptr [rcx], dl; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000051b9c: test byte ptr [rdi + 0x48000001], ch; neg eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000478dc: test byte ptr [rdi + 0x66000001], cl; movaps xmm1, xmm0; ret; 
0x00000000000e46a5: test byte ptr [rdi - 0x41], dl; mov byte ptr [rax + 0xa], al; mov bh, 0xf5; ret 0xbbf1; 
0x0000000000108717: test byte ptr [rdi - 0x71], 0x9e; ret 0x874; 
0x00000000000c7199: test byte ptr [rdi], -0x6e; ret; 
0x0000000000048b53: test byte ptr [rdi], -0x76; inc byte ptr [rax + rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x00000000000724a7: test byte ptr [rdi], -0x78; ret 0; 
0x000000000002cf16: test byte ptr [rdi], -0x7b; ret; 
0x00000000000c8df4: test byte ptr [rdi], 0x45; ret 0x949; 
0x000000000003b946: test byte ptr [rdi], dh; ret; 
0x000000000003d130: test byte ptr [rdx + rcx + 0x540f6600], ah; or eax, 0x8e174; divsd xmm0, xmm1; ret; 
0x00000000000dbf36: test byte ptr [rdx + rcx*8], bh; and al, 0x54; ret; 
0x00000000000c88fb: test byte ptr [rdx + rdi*8 + 0x149ffff], dl; fmul dword ptr [rax + 0x11]; ret 0xf48; 
0x000000000003faaf: test byte ptr [rdx + riz*8 - 1], cl; jmp qword ptr [rsi + 0xf]; 
0x00000000001063fb: test byte ptr [rdx - 0x4400957], dl; ret 0x6c54; 
0x0000000000020383: test byte ptr [rdx], 0; fmulp st(2); add rsp, 0x28; ret; 
0x00000000000dcc89: test byte ptr [rdx], 0x17; popfq; cmc; mov bl, 0x3f; ret 0x71ac; 
0x000000000010345b: test byte ptr [rdx], bh; ret 0xbf8b; 
0x00000000000482b9: test byte ptr [rdx], bl; add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; push rax; ret; 
0x000000000005f2b5: test byte ptr [rdx], cl; add al, ch; ret; 
0x00000000000b9cf5: test byte ptr [rip + 0x54f9c500], al; ret; 
0x0000000000076946: test byte ptr [rip - 0x16000005], dh; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000747d5: test byte ptr [rsi + 0x48000000], bh; add esp, 0x18; ret; 
0x00000000000442bd: test byte ptr [rsi + 0x48000001], dh; neg eax; pop rbx; pop rbp; ret; 
0x00000000000461d8: test byte ptr [rsi - 4], dl; jmp qword ptr [rsi + 0xf]; 
0x00000000000e9528: test byte ptr [rsi], 0x2d; add al, byte ptr [rcx]; ret 0xbd2f; 
0x0000000000015c76: test byte ptr [rsp + 0x1f], 0x40; je 0x15c71; fstp st(1); ret; 
0x0000000000020845: test byte ptr [rsp + 0x1f], 0x40; je 0x2084f; fstp st(1); ret; 
0x0000000000020885: test byte ptr [rsp + 0x1f], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000020835: test byte ptr [rsp + 0xf], 0x40; je 0x2084f; fstp st(1); ret; 
0x0000000000020875: test byte ptr [rsp + 0xf], 0x40; je 0x2088f; fstp st(1); ret; 
0x0000000000015cdb: test byte ptr [rsp + 0xf], 0x40; jne 0x15cd2; fadd st(0); ret; 
0x0000000000056dc6: test byte ptr [rsp - 2], 0x40; je 0x56de5; movss xmm0, xmm1; ret; 
0x0000000000056ddd: test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e06: test byte ptr [rsp - 2], 0x40; je 0x56e25; movss xmm0, xmm1; ret; 
0x0000000000056e1d: test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000049648: test byte ptr [rsp - 2], 8; je 0x49668; movsd xmm0, xmm1; ret; 
0x0000000000049660: test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049688: test byte ptr [rsp - 2], 8; je 0x496a8; movsd xmm0, xmm1; ret; 
0x00000000000496a0: test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000048b52: test byte ptr cs:[rdi], -0x76; inc byte ptr [rax + rax]; add byte ptr [rsi + 0xf], ah; test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000095f32: test ch, 0xcb; pop rax; inc ebp; ret; 
0x000000000008d244: test ch, 0xcb; pop rax; out 0xc5, eax; ret; 
0x0000000000095e30: test ch, 0xcb; pop rsp; inc ebp; ret; 
0x00000000000bd926: test ch, 0xfb; pop rcx; ret 0xfbc5; 
0x00000000000dda64: test ch, bh; sar byte ptr [rdi + 0x5aabc13c], 1; ret 0xc5a4; 
0x000000000004a1ee: test ch, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x77], dl; ret; 
0x0000000000101cd4: test ch, dh; ret 0xe7fc; 
0x0000000000105af2: test cl, al; pop rax; ret; 
0x0000000000039e41: test cl, al; sbb eax, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; out dx, eax; jmp qword ptr [rsi + 0x44]; 
0x0000000000036742: test cl, bh; idiv bh; jmp qword ptr [rsi + 0x41]; 
0x0000000000073443: test cl, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cd0a0: test cl, bl; or ah, cl; ret 0x1291; 
0x00000000000c2463: test dh, -1; inc ebp; ret; 
0x000000000010dfe3: test dh, bl; ret 0x3cd4; 
0x00000000000c8df3: test dh, dh; cmovne eax, edx; or r8, rdi; jne 0xc8d6a; add rsp, 0x28; ret; 
0x00000000000c90b6: test dh, dh; cmovne rax, rdx; test r8d, r8d; jne 0xc8fed; add rsp, 0x28; ret; 
0x00000000000c863e: test dl, ah; add eax, dword ptr [rax]; add byte ptr [rcx], dh; dec dword ptr [rax + 9]; ret; 
0x0000000000105b42: test dl, ch; adc al, byte ptr [rdx + rdx*8 + 0x61]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000321fa: test dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000007c59b: test dl, dl; mov eax, 1; je 0x7c5b0; add rsp, 0x20; pop rbx; ret; 
0x0000000000076f39: test dword ptr [rax + 0x4800000e], edx; add esp, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009471e: test dword ptr [rax + rax], 0x581b41c4; ret 0x41c4; 
0x0000000000077605: test dword ptr [rax + rax], 0xff2663e8; jmp qword ptr [rsi + 0xf]; 
0x00000000000c6eb9: test dword ptr [rax + rax], ecx; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x00000000000c4b45: test dword ptr [rax - 0x27000000], esp; ret; 
0x000000000003bb34: test dword ptr [rax], 0xf45f200; ret 0x1d5; 
0x0000000000190931: test dword ptr [rax], eax; add byte ptr [rax + 0x40ffeee3], bl; test dword ptr [rax], eax; add byte ptr [rax - 0x1c], bl; out dx, al; jmp qword ptr [rax - 0x7b]; 
0x0000000000190939: test dword ptr [rax], eax; add byte ptr [rax - 0x1c], bl; out dx, al; jmp qword ptr [rax - 0x7b]; 
0x000000000007cc80: test dword ptr [rax], ecx; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000076b55: test dword ptr [rbp + 0x48000002], ecx; add esp, 0x50; pop rbx; ret; 
0x0000000000019082: test dword ptr [rbp + 0x48000008], ebx; add esp, 0xb0; pop rbx; pop rbp; pop r12; ret; 
0x000000000001aac7: test dword ptr [rbp + 2], esi; add byte ptr [rax], al; add rsp, 0x158; pop rbx; pop rbp; ret; 
0x000000000004519f: test dword ptr [rbp + 3], eax; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x0000000000041947: test dword ptr [rbp + rdi*8 - 1], esp; jmp qword ptr [rsi + 0xf]; 
0x00000000000887ef: test dword ptr [rbp - 0x3a000002], ebp; rol edx, cl; ret; 
0x00000000000ddc39: test dword ptr [rbp - 0x6b3e65b8], ebx; mov edi, 0xf02a83e4; sti; call rsi; 
0x000000000006bfbf: test dword ptr [rbx + 0x48000000], ebp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000000c115: test dword ptr [rbx + 0x48000000], edx; add esp, 0x38; ret; 
0x0000000000052b29: test dword ptr [rbx + 0x48000002], esi; add esp, 0x60; pop rbx; ret; 
0x000000000004c4df: test dword ptr [rbx + 0x48000002], esp; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d264: test dword ptr [rbx + 0x48000003], esp; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000060e17: test dword ptr [rbx + 0x48000024], esp; add esp, 0xb8; pop rbx; pop rbp; ret; 
0x000000000000ef5b: test dword ptr [rbx + 1], ecx; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000000681d8: test dword ptr [rbx + 2], esp; add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000809d0: test dword ptr [rbx + 3], ebx; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x0000000000075cbf: test dword ptr [rbx + 5], ecx; add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000015e37: test dword ptr [rbx + rcx], edx; fdiv qword ptr [rip + 0xb5c77]; ret; 
0x00000000000ab87d: test dword ptr [rbx], eax; add byte ptr [rax + 0x582341c4], al; ret 0x9c5; 
0x0000000000021f53: test dword ptr [rbx], ebx; sldt word ptr [rax]; add rsp, 0x48; ret; 
0x00000000000c8877: test dword ptr [rbx], ecx; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000c74a8: test dword ptr [rbx], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0x4c07; 
0x000000000004b36f: test dword ptr [rcx + 0x48000001], eax; add esp, 0x20; pop rbx; ret; 
0x00000000000559d2: test dword ptr [rcx + 0x48000002], edi; add esp, 0x50; pop rbx; ret; 
0x0000000000069595: test dword ptr [rcx + 2], eax; add byte ptr [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000d982c: test dword ptr [rcx + riz*8 + 0x3f], edx; ret; 
0x00000000000b3db8: test dword ptr [rdi + 0x10], ebp; add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000d0a73: test dword ptr [rdi + 0x31], edx; ret; 
0x000000000000dbc9: test dword ptr [rdi + 0x48000001], ebx; add esp, 0x38; ret; 
0x00000000000758d9: test dword ptr [rdi + 0x48000001], ecx; add esp, 0x50; pop rbx; ret; 
0x000000000000e0f7: test dword ptr [rdi + 0x48000001], esi; add esp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000164fe: test dword ptr [rdi + 0x48000001], esp; add esp, 0xa0; pop rbx; ret; 
0x0000000000102190: test dword ptr [rdi + 0x78], eax; retf; ret 0xf9f3; 
0x000000000002e308: test dword ptr [rdi + 1], eax; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x0000000000013bf6: test dword ptr [rdi + 1], edi; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x000000000006f077: test dword ptr [rdi + 6], edi; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x000000000007d9f4: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi + 0xf]; 
0x000000000003c43d: test dword ptr [rdi + rsi*8 - 1], edx; jmp qword ptr [rsi + 0x41]; 
0x00000000000424dc: test dword ptr [rdi - 0x9fffffe], eax; ret; 
0x00000000000b347d: test dword ptr [rdi], 0x196c86; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x0000000000048ab2: test dword ptr [rdi], 0x24786; add dl, dh; movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000c1b31: test dword ptr [rdi], 0x85384; add ch, al; ret; 
0x00000000000c1f9e: test dword ptr [rdi], 0xa6886; add ch, al; rcr dword ptr [rsi + rbp*8 - 0x3b], cl; ret; 
0x0000000000048d4d: test dword ptr [rdi], 0xfffd6587; jmp qword ptr [rsi + 0xf]; 
0x0000000000048b5d: test dword ptr [rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000016d1c: test dword ptr [rdi], ebp; add dword ptr [rax], eax; add ch, bl; fpatan; ret; 
0x00000000000c564c: test dword ptr [rdi], ebx; or al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000a2d17: test dword ptr [rdi], edi; add byte ptr es:[rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001013c2: test dword ptr [rdi], edi; hlt; ret 0x74e; 
0x000000000000f45f: test dword ptr [rdx + 0x24], ebx; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000070d20: test dword ptr [rdx + 0x48000000], ebx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000018cee: test dword ptr [rdx + 0x48000001], edx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000002e5f3: test dword ptr [rdx + 0x48000002], ebp; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000020e21: test dword ptr [rdx + 0xe], ebp; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000032445: test dword ptr [rdx + 5], 0x450f4800; ret 0x66c3; 
0x000000000001ed16: test dword ptr [rdx + rax - 0x36270000], ecx; leave; ret; 
0x000000000001f259: test dword ptr [rdx + rax], ebx; add cl, bl; leave; add rsp, 0x78; ret; 
0x0000000000100da6: test dword ptr [rip + 0x3ecbbbce], edi; sar cl, 0xd; mov ebx, 0x3d1151b3; ret 0xe31c; 
0x0000000000069f50: test dword ptr [rip + 0x48000001], ecx; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004b002: test dword ptr [rip + 0x48000002], eax; add esp, 0x20; pop rbx; ret; 
0x00000000000288a3: test dword ptr [rip + 0x48000002], esp; add esp, 0x40; pop rbx; ret; 
0x00000000000b16e7: test dword ptr [rip + 0x48000003], edx; add esp, 0x28; ret; 
0x00000000000279c7: test dword ptr [rip + 0x48000003], esp; add esp, 0x28; ret; 
0x00000000000a1c63: test dword ptr [rip + 0x4800000d], edx; add esp, 0x48; ret; 
0x000000000005c32f: test dword ptr [rip + 0x48000023], esp; add esp, 0xb8; ret; 
0x000000000008c767: test dword ptr [rip + 0x48000026], esi; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000230c7: test dword ptr [rip + 0x4800003e], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000680d0: test dword ptr [rip + 0x6f0f6600], 0x6f0f66d8; ret; 
0x0000000000044ab0: test dword ptr [rip + 0xc76400], esi; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004ff16: test dword ptr [rip - 0xcffffff], edi; movups xmm0, xmmword ptr [rip + 0xb0951]; divss xmm0, dword ptr [rip + 0x7bba9]; ret; 
0x00000000000800cf: test dword ptr [rsi + 0x48000000], ecx; add esp, 0x20; pop rbx; ret; 
0x0000000000014677: test dword ptr [rsi + 0x48000001], eax; add esp, 0x60; pop rbx; ret; 
0x000000000005313c: test dword ptr [rsi + 0x48000001], eax; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000043be3: test dword ptr [rsi + 0x48000002], ebp; add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000079fa6: test dword ptr [rsi + 0x48000003], eax; add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000028c57: test dword ptr [rsi + 1], edi; add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x0000000000013941: test dword ptr [rsi + 1], edi; add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x0000000000047f86: test dword ptr [rsi + 2], ebx; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x00000000000cdf48: test dword ptr [rsi - 0x6894ff7a], ebx; xchg esi, eax; add byte ptr [rdi], bl; leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x0000000000069d08: test dword ptr [rsi - 0x9fffffe], esi; ret; 
0x0000000000074355: test dword ptr [rsi], 0xf660009; outsd dx, dword ptr [rsi]; ret 0xfee8; 
0x0000000000089057: test dword ptr [rsi], eax; add ch, al; sti; pop rcx; ret 0xfbc5; 
0x00000000000de563: test dword ptr [rsi], eax; stosd dword ptr [rdi], eax; ret 0xbe3f; 
0x000000000001c36e: test dword ptr [rsi], ecx; add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000002dd2f: test dword ptr [rsp + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000000b347c: test dword ptr cs:[rdi], 0x196c86; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x0000000000048ab1: test dword ptr cs:[rdi], 0x24786; add dl, dh; movups xmm0, xmmword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x0000000000048d4c: test dword ptr cs:[rdi], 0xfffd6587; jmp qword ptr [rsi + 0xf]; 
0x0000000000048b5c: test dword ptr cs:[rdi], 0xffff5587; jmp qword ptr [rsi + 0xf]; 
0x0000000000088ffc: test eax, 0x1bc5dc9b; pop rcx; in eax, 0xc5; sti; pop rcx; ret 0xc1c4; 
0x0000000000012fc7: test eax, 0x200; je 0x12fd2; fstp st(0); fldz; ret; 
0x0000000000019d77: test eax, 0x200; je 0x19d82; fstp st(0); fldz; ret; 
0x0000000000020caf: test eax, 0x200; je 0x20cba; fstp st(0); fldz; ret; 
0x00000000001012b9: test eax, 0x29cd7378; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000d0a71: test eax, 0x3157855f; ret; 
0x00000000000e37f6: test eax, 0x379081bd; cld; xchg esi, eax; mov dl, 0x65; jle 0xe379d; ret; 
0x00000000000d960b: test eax, 0x3fa67c7b; call rax; 
0x00000000000e5e03: test eax, 0x3fb60658; push 0x1b; ret 0x458e; 
0x000000000001600d: test eax, 0x400; jne 0x16008; fstp st(1); ret; 
0x00000000000d4cfb: test eax, 0x41c2450e; mov esp, 0xbe9fd995; and eax, 0x33e63c7d; pop rbp; ret; 
0x00000000000e46a2: test eax, 0x5784518e; mov edi, 0xb70a4088; cmc; ret 0xbbf1; 
0x0000000000093f75: test eax, 0x5d59d2d; add ch, al; ret; 
0x000000000011b3a9: test eax, 0x67dce434; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x11b3b4; ret 0x56ca; 
0x0000000000149d49: test eax, 0x67dce434; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x149d54; ret 0x56ca; 
0x0000000000177c89: test eax, 0x67dce434; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0x177c94; ret 0x56ca; 
0x00000000000e7429: test eax, 0x67dce434; out 0x3f, eax; insd dword ptr [rdi], dx; jne 0xe7434; ret 0x56ca; 
0x0000000000087bc3: test eax, 0x6994f15; add ah, al; ret 0x99e1; 
0x0000000000086696: test eax, 0x7fffffff; mov edx, 0x80000000; mov eax, 0xbf800000; cmovne edx, eax; movd xmm0, edx; ret; 
0x000000000008d3bf: test eax, 0xa2ea33d; add ch, al; ret; 
0x000000000008cf5f: test eax, 0xa33033d; add ch, al; ret; 
0x000000000008ce49: test eax, 0xa34193d; add ch, al; ret; 
0x00000000000d8802: test eax, 0xa607c961; mov edi, 0x9e13b088; movabs byte ptr [0x6f06c336533fb208], al; ret 0xbf95; 
0x000000000009c41f: test eax, 0xa6e7b05; add ch, al; fistp dword ptr [rcx - 0x2e]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000103778: test eax, 0xa7eaeef1; add ecx, dword ptr [rbp - 0x7affffc1]; out dx, al; ret; 
0x00000000000d70ed: test eax, 0xa86c3fc8; ret; 
0x00000000000cdc80: test eax, 0xaa0047f7; ret; 
0x00000000000e498b: test eax, 0xbbb32d23; pop rsp; and eax, 0x822883a1; mov r15d, 0x8152093a; ret; 
0x0000000000088091: test eax, 0xc1c4d199; imul ebx, dword ptr [rax - 0x2f], -0x3b; ret; 
0x00000000000beaab: test eax, 0xc4000215; jns 0xbeadb; ret 0xc1c4; 
0x0000000000090e87: test eax, 0xc4102444; ret 0xbdc9; 
0x00000000000a704d: test eax, 0xc4c0d37b; ret; 
0x00000000000a5d93: test eax, 0xc500056a; ret; 
0x0000000000089063: test eax, 0xfbc50005; pop rcx; ret 0xe9c5; 
0x000000000004276d: test eax, eax; add al, byte ptr [rax]; add dh, dh; ret; 
0x00000000000501a7: test eax, eax; je 0x501e0; pxor xmm0, xmm0; sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x00000000000745c8: test eax, eax; je 0x74599; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000074709: test eax, eax; je 0x74750; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007ce84: test eax, eax; je 0x7ce98; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cf64: test eax, eax; je 0x7cf78; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dcc4: test eax, eax; je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000000b7fc: test eax, eax; je 0xb802; call rax; 
0x000000000000b7fc: test eax, eax; je 0xb802; call rax; add rsp, 8; ret; 
0x000000000000bc5f: test eax, eax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000bcb0: test eax, eax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000007cdb1: test eax, eax; jg 0x7cdc0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e6: test eax, eax; jg 0x7d0f8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007d811: test eax, eax; jg 0x7d820; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007db28: test eax, eax; jg 0x7db40; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dbf1: test eax, eax; jg 0x7dc00; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007ccae: test eax, eax; jle 0x7ccbc; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000016b58: test eax, eax; jne 0x16c60; fstp st(0); fld1; ret; 
0x000000000007c437: test eax, eax; jne 0x7c468; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c507: test eax, eax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c92f: test eax, eax; jne 0x7c948; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000007ca5f: test eax, eax; jne 0x7ca78; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x00000000000c90bd: test eax, eax; jne 0xc8fed; add rsp, 0x28; ret; 
0x0000000000072631: test eax, eax; jns 0x72670; movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000086524: test eax, eax; js 0x86580; not rdx; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000074aec: test eax, eax; pop rbx; cmovs rax, rdx; pop rbp; pop r12; ret; 
0x0000000000072da0: test eax, eax; setne al; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000050f3f: test eax, edx; jne 0x50f58; movss dword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000b4a47: test ebp, 0x583d10fb; mov bh, 7; add ch, al; ret; 
0x00000000000b1cf0: test ebp, 0xc4c12979; jns 0xb1d21; ret 0xc1c4; 
0x000000000008defa: test ebp, 0xc5c02879; cmp dword ptr [rcx + rax*8 - 0x3b], edx; ret; 
0x00000000000b7bce: test ebp, 0xc5c15439; ret; 
0x00000000000b1dbc: test ebp, 0xc5cf2979; ret; 
0x00000000000b83f6: test ebp, 0xc5e72979; ret; 
0x00000000000b4481: test ebp, 0xc5fb2979; ret; 
0x00000000000eb28c: test ebp, ecx; mov r15d, 0xd4600000; ret 0x41ce; 
0x000000000009c286: test ebp, edi; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000d8b52: test ebx, ebp; push rcx; mov eax, 0xe2a53c5e; in al, dx; ret; 
0x0000000000071f65: test ebx, ebx; cmovne rax, rdx; add rsp, 0x10; pop rbx; ret; 
0x00000000000186d1: test ebx, ebx; jns 0x186d7; fchs; pop rbx; ret; 
0x000000000003cbc7: test ebx, ebx; jns 0x3cba4; xorpd xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x0000000000050697: test ebx, ebx; jns 0x5067a; xorps xmm1, xmmword ptr [rip + 0x7b43e]; pop rbx; movaps xmm0, xmm1; ret; 
0x00000000000d5add: test ebx, edx; mov edi, 0x4487f4b8; ret; 
0x000000000007df18: test ecx, 0x7fff; cmove eax, edx; ret; 
0x00000000000441b8: test ecx, eax; cmovne rax, rdi; neg rdx; and rax, rdx; movq xmm0, rax; ret; 
0x000000000001bacd: test ecx, ecx; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000008046e: test ecx, ecx; setne al; neg eax; ret; 
0x00000000000c8c8e: test edi, edi; jne 0xc8bc0; add rsp, 0x38; ret; 
0x00000000000c9915: test edi, edi; jne 0xc9983; add rsp, 0x30; pop rbx; ret; 
0x0000000000051abd: test edx, eax; cmovne eax, edi; neg esi; and eax, esi; movd xmm0, eax; ret; 
0x000000000009c751: test edx, ebp; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000406a1: test edx, ebp; or dword ptr [rax], eax; add dh, dh; ret; 
0x00000000000632c1: test edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000443e9: test edx, edx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044424: test edx, edx; cmovs rax, rcx; ret; 
0x000000000001b5cd: test edx, edx; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000320d5: test edx, edx; je 0x32118; pxor xmm0, xmm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x000000000004a0a5: test edx, edx; jg 0x49fe1; xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x00000000000c951b: test edx, edx; jne 0xc962b; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c971d: test edx, edx; jne 0xc97f9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004465d: test edx, edx; jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb6: test edx, edx; jns 0x44c68; pop rbx; pop rbp; ret; 
0x0000000000051f17: test edx, edx; jns 0x51f90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052472: test edx, edx; jns 0x52518; pop rbx; pop rbp; pop r12; ret; 
0x00000000000448d1: test edx, edx; mov rax, r8; js 0x448ae; pop rbx; pop rbp; ret; 
0x00000000000734eb: test edx, edx; or byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000051cc0: test edx, edx; pop rbx; cmovs rax, rcx; pop rbp; pop r12; ret; 
0x0000000000103782: test esi, ebp; ret; 
0x0000000000031aad: test esi, ebx; add dword ptr [rax], eax; add byte ptr [rbp + 0x26880fd2], al; add al, byte ptr [rax]; add bl, dh; ret; 
0x000000000004d6a8: test esi, esi; jns 0x4d639; movss xmm1, dword ptr [rip + 0x7cb4c]; divss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000009c0d0: test esi, esi; jns 0x9c069; vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x0000000000086710: test esi, esi; js 0x86730; mov edx, 0x3f800000; cmovne eax, edx; movd xmm0, eax; ret; 
0x00000000001013c1: test qword ptr [r15], r15; hlt; ret 0x74e; 
0x000000000001b5cc: test r10d, r10d; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000c951a: test r10d, r10d; jne 0xc962b; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000c971c: test r10d, r10d; jne 0xc97f9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001b5cb: test r10w, r10w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000074aeb: test r8, r8; pop rbx; cmovs rax, rdx; pop rbp; pop r12; ret; 
0x00000000000c90bc: test r8d, r8d; jne 0xc8fed; add rsp, 0x28; ret; 
0x000000000001bacc: test r9d, r9d; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x000000000001bacb: test r9w, r9w; cmovs rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000745c7: test rax, rax; je 0x74599; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x0000000000074708: test rax, rax; je 0x74750; pxor xmm0, xmm0; mov eax, 1; movaps xmmword ptr [rdi], xmm0; ret; 
0x000000000007ce83: test rax, rax; je 0x7ce98; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007cf63: test rax, rax; je 0x7cf78; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dcc3: test rax, rax; je 0x7dcd8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000000b7fb: test rax, rax; je 0xb802; call rax; 
0x000000000000b7fb: test rax, rax; je 0xb802; call rax; add rsp, 8; ret; 
0x000000000000bc5e: test rax, rax; je 0xbc70; pop rbp; jmp rax; 
0x000000000000bcaf: test rax, rax; je 0xbcc0; pop rbp; jmp rax; 
0x000000000007cdb0: test rax, rax; jg 0x7cdc0; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007d0e5: test rax, rax; jg 0x7d0f8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x48; ret; 
0x000000000007d810: test rax, rax; jg 0x7d820; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007db27: test rax, rax; jg 0x7db40; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007dbf0: test rax, rax; jg 0x7dc00; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007ccad: test rax, rax; jle 0x7ccbc; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000007c436: test rax, rax; jne 0x7c468; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c506: test rax, rax; jne 0x7c538; movdqa xmm0, xmmword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000007c92e: test rax, rax; jne 0x7c948; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x000000000007ca5e: test rax, rax; jne 0x7ca78; nop dword ptr [rax + rax]; movdqa xmm0, xmmword ptr [rsp + 0x30]; add rsp, 0x48; ret; 
0x0000000000072630: test rax, rax; jns 0x72670; movdqa xmm0, xmmword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x0000000000086523: test rax, rax; js 0x86580; not rdx; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000072d9f: test rax, rax; setne al; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000071f64: test rbx, rbx; cmovne rax, rdx; add rsp, 0x10; pop rbx; ret; 
0x00000000000441b7: test rcx, rax; cmovne rax, rdi; neg rdx; and rax, rdx; movq xmm0, rax; ret; 
0x000000000008046d: test rcx, rcx; setne al; neg eax; ret; 
0x00000000000443e8: test rdx, rdx; cmovs rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044423: test rdx, rdx; cmovs rax, rcx; ret; 
0x00000000000320d4: test rdx, rdx; je 0x32118; pxor xmm0, xmm0; sub rdx, 0x3ff; cvtsi2sd xmm0, rdx; ret; 
0x000000000004465c: test rdx, rdx; jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb5: test rdx, rdx; jns 0x44c68; pop rbx; pop rbp; ret; 
0x00000000000448d0: test rdx, rdx; mov rax, r8; js 0x448ae; pop rbx; pop rbp; ret; 
0x00000000000c8df2: test sil, sil; cmovne eax, edx; or r8, rdi; jne 0xc8d6a; add rsp, 0x28; ret; 
0x00000000000c90b5: test sil, sil; cmovne rax, rdx; test r8d, r8d; jne 0xc8fed; add rsp, 0x28; ret; 
0x000000000000f223: ucomisd xmm0, qword ptr [rip + 0xbc0a5]; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x000000000000edbe: ucomisd xmm0, qword ptr [rip + 0xbc50a]; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000e5e3: ucomisd xmm0, qword ptr [rip + 0xbcce5]; jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000e563: ucomisd xmm0, qword ptr [rip + 0xbcd65]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x0000000000049654: ucomisd xmm0, xmm0; jp 0x49668; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049694: ucomisd xmm0, xmm0; jp 0x496a8; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000043302: ucomisd xmm0, xmm4; jp 0x43310; jne 0x43310; addsd xmm0, xmm0; ret; 
0x0000000000049852: ucomisd xmm0, xmm4; jp 0x49860; jne 0x49860; addsd xmm0, xmm0; ret; 
0x000000000000eb41: ucomisd xmm0, xmm5; jp 0xeb49; je 0xebb0; add rsp, 0x18; ret; 
0x0000000000049512: ucomisd xmm1, qword ptr [rip + 0x81dae]; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x000000000004898a: ucomisd xmm1, qword ptr [rip + 0x82936]; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x000000000000eeb4: ucomisd xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000043385: ucomisd xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x000000000002deb2: ucomisd xmm1, xmm2; jbe 0x2ded0; mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x0000000000045aa0: ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000000495da: ucomisd xmm1, xmm3; ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000c47ce: ucomisd xmm10, xmm10; setp dl; and al, dl; jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x0000000000032080: ucomisd xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x000000000000e6b7: ucomisd xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000044fc6: ucomisd xmm3, qword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x000000000000ecf1: ucomisd xmm3, xmm1; jae 0xed50; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000000e4ed: ucomisd xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x000000000000ee6d: ucomisd xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0dd: ucomisd xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f184: ucomisd xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x0000000000045a9a: ucomisd xmm3, xmm6; jae 0x45abc; ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x000000000004777b: ucomisd xmm4, xmm3; jbe 0x47785; mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x0000000000048aaf: ucomisd xmm6, xmm7; jbe 0x48d00; movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000478d1: ucomisd xmm7, qword ptr [rip + 0x839f7]; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x00000000000471c2: ucomisd xmm8, xmm7; jbe 0x471cd; mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x00000000000127a0: ucomiss xmm0, dword ptr [rip + 0xb932d]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000011c00: ucomiss xmm0, dword ptr [rip + 0xb9ecd]; jp 0x11c0b; je 0x11c10; add rsp, 0x18; ret; 
0x0000000000011b80: ucomiss xmm0, dword ptr [rip + 0xb9f4d]; jp 0x11b8b; je 0x11b90; add rsp, 0x18; ret; 
0x000000000000f224: ucomiss xmm0, dword ptr [rip + 0xbc0a5]; jp 0xf22f; je 0xf238; add rsp, 0x18; ret; 
0x000000000000edbf: ucomiss xmm0, dword ptr [rip + 0xbc50a]; jp 0xedca; je 0xedd0; add rsp, 0x18; ret; 
0x000000000000e5e4: ucomiss xmm0, dword ptr [rip + 0xbcce5]; jp 0xe5ef; je 0xe5f8; add rsp, 0x18; ret; 
0x000000000000e564: ucomiss xmm0, dword ptr [rip + 0xbcd65]; jp 0xe56f; je 0xe578; add rsp, 0x18; ret; 
0x0000000000049655: ucomiss xmm0, xmm0; jp 0x49668; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x49668; ret; 
0x0000000000049695: ucomiss xmm0, xmm0; jp 0x496a8; movsd qword ptr [rsp - 8], xmm1; test byte ptr [rsp - 2], 8; je 0x496a8; ret; 
0x0000000000056dd2: ucomiss xmm0, xmm0; jp 0x56de5; movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56de5; ret; 
0x0000000000056e12: ucomiss xmm0, xmm0; jp 0x56e25; movss dword ptr [rsp - 4], xmm1; test byte ptr [rsp - 2], 0x40; je 0x56e25; ret; 
0x0000000000043303: ucomiss xmm0, xmm4; jp 0x43310; jne 0x43310; addsd xmm0, xmm0; ret; 
0x0000000000049853: ucomiss xmm0, xmm4; jp 0x49860; jne 0x49860; addsd xmm0, xmm0; ret; 
0x000000000005114f: ucomiss xmm0, xmm4; jp 0x51160; jne 0x51160; addss xmm0, xmm0; ret; 
0x0000000000056fcf: ucomiss xmm0, xmm4; jp 0x56fe0; jne 0x56fe0; addss xmm0, xmm0; ret; 
0x0000000000012120: ucomiss xmm0, xmm5; jp 0x12127; je 0x12180; add rsp, 0x18; ret; 
0x000000000000eb42: ucomiss xmm0, xmm5; jp 0xeb49; je 0xebb0; add rsp, 0x18; ret; 
0x00000000000471c4: ucomiss xmm0, xmm7; jbe 0x471cd; mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x0000000000056d52: ucomiss xmm1, dword ptr [rip + 0x74d77]; ja 0x56d74; mov rax, qword ptr [rip + 0x346256]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000518f7: ucomiss xmm1, dword ptr [rip + 0x7a1d2]; ja 0x51928; movd xmm0, eax; ret; 
0x0000000000049513: ucomiss xmm1, dword ptr [rip + 0x81dae]; ja 0x49530; movsd xmm0, qword ptr [rip + 0x8257c]; movapd xmm1, xmm0; ret; 
0x000000000004898b: ucomiss xmm1, dword ptr [rip + 0x82936]; ja 0x489a8; movsd xmm0, qword ptr [rip + 0x83104]; movapd xmm1, xmm0; ret; 
0x0000000000012464: ucomiss xmm1, xmm0; ja 0x12470; sqrtss xmm0, xmm0; ret; 
0x000000000000eeb5: ucomiss xmm1, xmm0; ja 0xeec0; sqrtsd xmm0, xmm0; ret; 
0x0000000000043386: ucomiss xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x000000000002deb3: ucomiss xmm1, xmm2; jbe 0x2ded0; mulsd xmm0, xmm1; movapd xmm2, xmm0; movapd xmm0, xmm2; ret; 
0x000000000004dc89: ucomiss xmm1, xmm2; jbe 0x4dca8; mulss xmm0, xmm1; movaps xmm2, xmm0; movaps xmm0, xmm2; ret; 
0x0000000000045aa1: ucomiss xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000000495db: ucomiss xmm1, xmm3; ja 0x495f4; mov rax, qword ptr [rip + 0x3539d1]; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000c47cf: ucomiss xmm10, xmm10; setp dl; and al, dl; jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x0000000000032081: ucomiss xmm2, xmm1; jbe 0x31e4e; movapd xmm1, xmm0; mulsd xmm1, xmm0; ret; 
0x0000000000050042: ucomiss xmm2, xmm1; jbe 0x4fef0; movaps xmm1, xmm0; mulss xmm1, xmm0; ret; 
0x00000000000c47d0: ucomiss xmm2, xmm2; setp dl; and al, dl; jne 0xc47e0; movapd xmm0, xmm10; ret; 
0x0000000000011cd7: ucomiss xmm2, xmm5; jb 0x11ce8; add rsp, 0x18; ret; 
0x000000000000e6b8: ucomiss xmm2, xmm5; jb 0xe6c8; add rsp, 0x18; ret; 
0x0000000000044fc7: ucomiss xmm3, dword ptr [rip + 0x862fa]; jbe 0x45018; movsd xmm1, qword ptr [rip + 0x86ac8]; movsd xmm0, qword ptr [rip + 0x862b0]; ret; 
0x000000000000ecf2: ucomiss xmm3, xmm1; jae 0xed50; mov rax, qword ptr [rip + 0x38e2ba]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x0000000000011b1b: ucomiss xmm3, xmm4; jb 0x11b28; add rsp, 0x18; ret; 
0x000000000001242b: ucomiss xmm3, xmm4; jb 0x12438; add rsp, 0x18; ret; 
0x000000000001266b: ucomiss xmm3, xmm4; jb 0x12678; add rsp, 0x18; ret; 
0x0000000000012702: ucomiss xmm3, xmm4; jb 0x12710; add rsp, 0x18; ret; 
0x000000000000e4ee: ucomiss xmm3, xmm4; jb 0xe500; add rsp, 0x18; ret; 
0x000000000000ee6e: ucomiss xmm3, xmm4; jb 0xee80; add rsp, 0x18; ret; 
0x000000000000f0de: ucomiss xmm3, xmm4; jb 0xf0f0; add rsp, 0x18; ret; 
0x000000000000f185: ucomiss xmm3, xmm4; jb 0xf190; add rsp, 0x18; ret; 
0x0000000000045a9b: ucomiss xmm3, xmm6; jae 0x45abc; ucomisd xmm1, xmm2; jp 0x45abc; jne 0x45abc; ret; 
0x00000000000122b3: ucomiss xmm4, xmm1; jae 0x12310; mov rax, qword ptr [rip + 0x38acf9]; mov dword ptr fs:[rax], 0x22; add rsp, 0x18; ret; 
0x000000000004777c: ucomiss xmm4, xmm3; jbe 0x47785; mulsd xmm2, xmm2; add rsp, 0x68; ret; 
0x0000000000048ab0: ucomiss xmm6, xmm7; jbe 0x48d00; movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000478d2: ucomiss xmm7, dword ptr [rip + 0x839f7]; jp 0x478e1; je 0x47a70; movapd xmm1, xmm0; ret; 
0x00000000000471c3: ucomiss xmm8, xmm7; jbe 0x471cd; mulsd xmm3, xmm3; add rsp, 0x58; ret; 
0x0000000000098de2: vaddsd xmm1, xmm3, xmm1; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x0000000000099312: vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x000000000009ba50: vaddss xmm0, xmm0, xmm0; ret; 
0x000000000009c04c: vaddss xmm0, xmm7, xmm1; ret; 
0x000000000009cccb: vcvtpd2ps xmm0, xmm0; vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009cd2d: vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009ba03: vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009bc16: vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x000000000009c18b: vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000009cb25: vcvtsd2ss xmm6, xmm6, xmm2; vmovss dword ptr [rsi], xmm6; ret; 
0x000000000009c0dc: vdivss xmm0, xmm1, xmm0; ret; 
0x000000000009cccf: vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009cd35: vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009b9f8: vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c3d8: vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c64e: vfmadd132sd xmm0, xmm5, qword ptr [rip + 0xa6979]; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c307: vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c859: vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c657: vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x00000000000421f0: vfmadd213sd xmm0, xmm1, xmm2; ret; 
0x000000000009c41c: vfmadd213sd xmm0, xmm2, qword ptr [rip + 0xa6e7b]; vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c8a0: vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c88e: vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6691]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c897: vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c7bd: vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6762]; vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6ae1]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c7c6: vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6ae1]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c2fe: vfmadd213sd xmm1, xmm2, qword ptr [rip + 0xa6fa9]; vfmadd132sd xmm1, xmm3, xmm2; vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c847: vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa66d8]; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6a57]; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c850: vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6a57]; vfmadd132sd xmm2, xmm4, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c3cf: vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6ec0]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c962: vfmadd213sd xmm3, xmm1, qword ptr [rip + 0xa692d]; vmulsd xmm1, xmm2, xmm1; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000050be0: vfmadd213ss xmm0, xmm1, xmm2; ret; 
0x000000000009bc0d: vfmadd231sd xmm1, xmm0, xmm3; vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x000000000009c96f: vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009bc04: vfmadd231sd xmm3, xmm0, qword ptr [rip + 0x77813]; vfmadd231sd xmm1, xmm0, xmm3; vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x0000000000042200: vfmaddsd xmm0, xmm0, xmm1, xmm2; ret; 
0x0000000000050bf0: vfmaddss xmm0, xmm0, xmm1, xmm2; ret; 
0x000000000009c182: vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x0000000000099b9b: vmovapd xmm0, xmm2; ret; 
0x000000000008a7bc: vmovapd xmm0, xmm4; jne 0x8b497; add rsp, 0x40; pop rbx; ret; 
0x00000000000a0d2c: vmovapd xmm0, xmm4; jne 0xa1a0f; add rsp, 0x40; pop rbx; ret; 
0x0000000000098de6: vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x0000000000099316: vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x0000000000098dde: vmovsd qword ptr [rdi], xmm0; vaddsd xmm1, xmm3, xmm1; vmovsd qword ptr [rdi + 8], xmm1; ret; 
0x000000000009930e: vmovsd qword ptr [rdi], xmm1; vaddsd xmm5, xmm0, xmm5; vmovsd qword ptr [rdi + 8], xmm5; ret; 
0x000000000009c8b0: vmovsd xmm0, qword ptr [rip + 0x2ea08]; vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009cd29: vmovsd xmm0, xmm0, xmm1; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x00000000000b01d1: vmovsd xmm2, qword ptr [rip + 0x33547]; vmovapd xmm0, xmm2; ret; 
0x0000000000099be1: vmovsd xmm2, qword ptr [rip + 0x49b37]; vmovapd xmm0, xmm2; ret; 
0x000000000009cd31: vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cd5d: vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009ccd5: vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009cd59: vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009cb29: vmovss dword ptr [rsi], xmm6; ret; 
0x000000000009bc70: vmovss xmm0, dword ptr [rsp - 0xc]; ret; 
0x000000000009c0d4: vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x000000000005700b: vmovss xmm14, dword ptr [rbp + 0xe]; mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000005118b: vmovss xmm14, dword ptr [rbp + 0xe]; mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004988f: vmovss xmm14, dword ptr [rbp + 0xe]; mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000005700a: vmovss xmm14, dword ptr cs:[rbp + 0xe]; mov rax, qword ptr [rip + 0x345fa1]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000005118a: vmovss xmm14, dword ptr cs:[rbp + 0xe]; mov rax, qword ptr [rip + 0x34be21]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000004988e: vmovss xmm14, dword ptr cs:[rbp + 0xe]; mov rax, qword ptr [rip + 0x35371d]; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x000000000009c046: vmovss xmm7, dword ptr [rsp - 0x10]; vaddss xmm0, xmm7, xmm1; ret; 
0x000000000009ccc7: vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009ce54: vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cf5d: vmulpd xmm0, xmm0, xmm4; vcvtpd2ps xmm0, xmm0; vextractps dword ptr [rdi], xmm0, 1; vmovss dword ptr [rsi], xmm0; ret; 
0x000000000009cf94: vmulpd xmm0, xmm0, xmm4; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009b9fd: vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c30c: vmulsd xmm0, xmm0, xmm1; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c85e: vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c64a: vmulsd xmm0, xmm3, xmm1; vfmadd132sd xmm0, xmm5, qword ptr [rip + 0xa6979]; vfmadd213sd xmm0, xmm1, qword ptr [rip + 0x2ec60]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c3cb: vmulsd xmm0, xmm4, xmm1; vfmadd213sd xmm2, xmm1, qword ptr [rip + 0xa6ec0]; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009b9f4: vmulsd xmm1, xmm1, xmm1; vfmadd132sd xmm0, xmm2, xmm1; vmulsd xmm0, xmm0, qword ptr [rsp - 0x10]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c96b: vmulsd xmm1, xmm2, xmm1; vfmadd231sd xmm2, xmm3, xmm1; vmulsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c425: vmulsd xmm2, xmm4, xmm2; vfmadd132sd xmm0, xmm4, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c0ca: vmulss xmm0, xmm1, xmm1; ret; 
0x000000000002a1f8: vpslldq xmm2, xmm6, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000000beb7b: vpsubq ymm3, ymm7, ymmword ptr [rdi + rax*8 - 0x3b]; ret; 
0x000000000008bf5a: vpsubw ymm5, ymm7, ymmword ptr [rsi]; ret; 
0x000000000009c8b8: vsubsd xmm0, xmm0, xmm2; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x000000000009c8e5: vsubss xmm0, xmm0, xmm0; ret; 
0x000000000009cd55: vsubss xmm1, xmm0, xmm0; vmovss dword ptr [rsi], xmm1; vmovss dword ptr [rdi], xmm1; ret; 
0x000000000009cf90: vunpcklpd xmm0, xmm2, xmm1; vmulpd xmm0, xmm0, xmm4; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009ce50: vunpcklpd xmm0, xmm3, xmm0; vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x000000000009cf70: vunpcklpd xmm0, xmm3, xmm1; vmulpd xmm0, xmm0, xmm2; vcvtpd2ps xmm0, xmm0; vmovss dword ptr [rdi], xmm0; vextractps dword ptr [rsi], xmm0, 1; ret; 
0x0000000000099bdb: vxorpd xmm2, xmm2, xmm2; je 0x99b9b; vmovsd xmm2, qword ptr [rip + 0x49b37]; vmovapd xmm0, xmm2; ret; 
0x00000000000b01cb: vxorpd xmm2, xmm2, xmm2; je 0xb018b; vmovsd xmm2, qword ptr [rip + 0x33547]; vmovapd xmm0, xmm2; ret; 
0x000000000009c0c2: vxorps xmm0, xmm0, xmm0; cmp dl, al; jne 0x9c069; vmulss xmm0, xmm1, xmm1; ret; 
0x000000000009ba58: vxorps xmm0, xmm0, xmm0; ret; 
0x000000000009bc12: vxorps xmm0, xmm0, xmm0; vcvtsd2ss xmm0, xmm0, xmm1; ret; 
0x000000000009c17e: vxorps xmm0, xmm0, xmm0; vfnmadd132sd xmm4, xmm4, qword ptr [rip + 0xa6d6d]; vcvtsd2ss xmm0, xmm0, xmm4; ret; 
0x000000000004f86d: wait; adc eax, 0xff3000b; pop rcx; ret; 
0x00000000001012b2: wait; adc ebx, dword ptr [rsi - 0x17468c34]; test eax, 0x29cd7378; or byte ptr [rax + 0x27], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000003a29: wait; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000099be6: wait; add al, 0; vmovapd xmm0, xmm2; ret; 
0x00000000000dfca1: wait; add byte ptr [rip + 0x3fedfffe], dh; push rbx; retf; ret 0x19cf; 
0x000000000009e541: wait; add dword ptr [rax], eax; add ch, al; ret; 
0x00000000001011a8: wait; and byte ptr [rdx + 0x1600003e], bl; ret; 
0x00000000000da940: wait; cmc; jmp qword ptr [rax - 0x35]; 
0x0000000000112a98: wait; cmp byte ptr [rbx], bl; ret 0x5848; 
0x00000000000cd918: wait; fadd dword ptr fs:[rax]; fnstcw word ptr [rsi - 0x685bffcf]; ret; 
0x000000000008a3e8: wait; fcmovb st(0), st(4); ret 0x9999; 
0x000000000008cc56: wait; fcmovb st(0), st(5); jns 0x8cc83; int 0xc4; ret 0x99c1; 
0x0000000000093127: wait; ffree st(4); ret 0xb9c1; 
0x00000000001019b2: wait; fisub dword ptr [rax + 0x2b]; stosd dword ptr [rdi], eax; ret; 
0x0000000000012fea: wait; fnstsw ax; and ah, 4; jne 0x12fe8; fstp st(1); ret; 
0x000000000001600a: wait; fnstsw ax; test eax, 0x400; jne 0x16008; fstp st(1); ret; 
0x00000000000d0150: wait; imul ebp, dword ptr [rax - 0x76], 0xbf75b8b3; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x93f; 
0x00000000000f0c98: wait; insd dword ptr [rdi], dx; ret 0xafe6; 
0x0000000000015981: wait; jne 0x1598f; add dh, bl; ret 0xc9dc; 
0x000000000011845c: wait; jo 0x11845b; mov ebx, 0xc1abdcd; ret; 
0x0000000000146dfc: wait; jo 0x146dfb; mov ebx, 0xc1abdcd; ret; 
0x0000000000174d3c: wait; jo 0x174d3b; mov ebx, 0xc1abdcd; ret; 
0x00000000000e449c: wait; jo 0xe449b; mov ebx, 0xc1abdcd; ret; 
0x000000000009596f: wait; loope 0x95937; xor ebx, dword ptr [rcx + 0xc]; and al, 0xc4; ret 0x99b1; 
0x0000000000016adf: wait; mov eax, dword ptr [rsp - 4]; ret; 
0x00000000000dcf4d: wait; mov ebp, 0x45adfc3f; ret; 
0x0000000000019a88: wait; mov rax, qword ptr [rsp - 8]; ret; 
0x00000000000e1389: wait; out dx, eax; ret; 
0x0000000000100440: wait; popfq; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000c455b: wait; ret 0x2e0f; 
0x0000000000018f65: wait; ret 0x440f; 
0x00000000000193f5: wait; ret 0x450f; 
0x00000000000c47fa: wait; ret 0x4566; 
0x00000000000c4b1d: wait; ret 0xe1de; 
0x000000000001918a: wait; ret 0xf41; 
0x000000000005b4e1: wait; ret; 
0x000000000004268d: wait; ror byte ptr [rdi], 0x45; mov byte ptr [rdx + rax*8 + 0xf661a74], 0x2e; ret; 
0x000000000000cc66: wait; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000195c8: wait; ror byte ptr [rdi], 0x45; ret 0xe9df; 
0x0000000000042950: wait; ror byte ptr [rdi], 0x45; shl dword ptr [rsi + 0xf], 0x2e; int 0x89; ret 0x9b0f; 
0x00000000000d71aa: wait; std; div dword ptr [rdx - 0x2bbcc02e]; ret 0xcfc1; 
0x000000000007dfb9: wait; sub ecx, dword ptr [rcx]; add byte ptr [rdi], cl; ror qword ptr [rbp - 0x76b2adfc], cl; ret; 
0x000000000000163a: wait; test al, 0x84; ret; 
0x000000000010c854: wait; xchg esi, eax; xor al, byte ptr [rip + 0x2583811e]; ret; 
0x0000000000074335: wbinvd; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000008712a: wbinvd; add ch, al; retf; pop rax; fisttp dword ptr [rax - 0x77]; ret 0xfbc5; 
0x00000000000a4cee: xchg ah, al; add eax, dword ptr [rax]; add ch, al; ret; 
0x00000000000d8669: xchg ah, al; ret 0x801f; 
0x0000000000087557: xchg ah, cl; add eax, 0x89480000; ret 0xc089; 
0x00000000000bf940: xchg al, al; sub dword ptr [rax], eax; add ch, al; ret; 
0x00000000000dba34: xchg al, bh; pop rbx; mov esp, 0xe44a7335; ret 0xe243; 
0x0000000000087de4: xchg bh, dh; add eax, dword ptr [rax]; add ch, al; ret; 
0x0000000000049fdc: xchg bh, dl; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000009e370: xchg bl, ch; add eax, dword ptr [rax]; add ch, al; ret; 
0x000000000018ffbd: xchg bl, ch; call rax; 
0x000000000003d03e: xchg bl, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000087ed0: xchg bl, cl; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000d61ea: xchg byte ptr [r14 + 0x4e], r8b; ret; 
0x000000000010e73c: xchg byte ptr [r14 + 0x786045bf], cl; ret; 
0x00000000000e3e76: xchg byte ptr [rax + 0x7d], al; ret; 
0x00000000000b468f: xchg byte ptr [rax - 0x1c3b0000], ch; pop rsp; ffreep st(5); sti; pop rax; ret; 
0x00000000000a314f: xchg byte ptr [rax - 0x3bffffe6], dl; jnp 0xa31b4; ret 0x3bc5; 
0x000000000008d3df: xchg byte ptr [rax], bl; adc eax, 0x41c40000; jnp 0x8d444; ret; 
0x00000000000a4e55: xchg byte ptr [rax], bl; add al, byte ptr [rax]; add ch, al; ret; 
0x0000000000050046: xchg byte ptr [rbp + 0xffffffe], ah; sub al, cl; mulss xmm1, xmm0; ret; 
0x000000000009e217: xchg byte ptr [rbp + rax + 0x3bc50000], ah; pop rsp; ret; 
0x0000000000087d6e: xchg byte ptr [rbp - 0x3afffffc], cl; ret; 
0x000000000008e775: xchg byte ptr [rbx + rax], ch; add ch, al; ret; 
0x00000000000c0d39: xchg byte ptr [rbx + rbx], dh; add ch, al; ret; 
0x0000000000089ba0: xchg byte ptr [rbx - 0x3afffff7], bh; ret; 
0x00000000000b8329: xchg byte ptr [rbx - 0x3afffff7], dl; ret; 
0x000000000009e540: xchg byte ptr [rbx - 0x3affffff], bl; ret; 
0x0000000000079fa7: xchg byte ptr [rbx], al; add byte ptr [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000093530: xchg byte ptr [rbx], bl; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000a9af8: xchg byte ptr [rbx], ch; adc byte ptr [rax], al; add ch, al; ret; 
0x00000000000145ed: xchg byte ptr [rbx], cl; add al, bl; ret 0xcad8; 
0x0000000000014615: xchg byte ptr [rbx], cl; add dh, bl; ret 0xf1de; 
0x00000000000e7240: xchg byte ptr [rcx + 0xd], cl; rcl dword ptr [rax + rbx*2 - 0x70fc014]; ret; 
0x00000000000b347f: xchg byte ptr [rcx + rbx], ch; add ch, al; jns 0xb34b0; out 0xc5, eax; ret; 
0x0000000000014678: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x60; pop rbx; ret; 
0x000000000005313d: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000089612: xchg byte ptr [rcx], ch; adc dword ptr [rax], eax; add ch, al; ret; 
0x0000000000048ab4: xchg byte ptr [rdi + 2], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rip + 0x827cf]; add rsp, 0x40; pop rbx; ret; 
0x00000000000a9bdf: xchg byte ptr [rdi + rcx], bl; add ch, al; ret; 
0x00000000001142bd: xchg byte ptr [rdi + rdi*4 - 0x2087e7cb], cl; ret; 
0x000000000008ce69: xchg byte ptr [rdi + rdx + 0x41c40000], al; jnp 0x8cece; ret 0x3bc5; 
0x00000000000d8416: xchg byte ptr [rdi - 0x2117bde5], bh; ret; 
0x00000000000935a4: xchg byte ptr [rdi - 0x3afffff1], al; ret; 
0x0000000000087fbc: xchg byte ptr [rdi - 0x3affffff], bl; ret; 
0x000000000009e4cc: xchg byte ptr [rdi], ch; add al, byte ptr [rax]; add ch, al; ret; 
0x00000000000a3274: xchg byte ptr [rdi], ch; sbb al, 0; add ah, al; jnp 0xa32d9; ret; 
0x00000000000e906a: xchg byte ptr [rdi], cl; ret; 
0x00000000001006d2: xchg byte ptr [rdi], dh; std; insb byte ptr [rdi], dx; mov eax, 0x59567e3a; sub eax, 0x31ad6446; ret 0x9dff; 
0x000000000009fb94: xchg byte ptr [rdi], dl; adc dword ptr [rax], eax; add ch, al; ret; 
0x00000000000fd0dc: xchg byte ptr [rdx + 0x42c1bbdc], bh; idiv di; call rax; 
0x000000000008e867: xchg byte ptr [rdx + rax], cl; add ch, al; ret; 
0x000000000009fc09: xchg byte ptr [rdx - 0x3afffff0], al; ret; 
0x0000000000089689: xchg byte ptr [rdx - 0x3afffff0], dl; ret; 
0x00000000000a0111: xchg byte ptr [rdx - 0x3afffff7], bh; ret; 
0x000000000001fcc9: xchg byte ptr [rdx], dh; add eax, dword ptr [rax]; add dh, bl; ret; 
0x00000000000e2238: xchg byte ptr [rip + 0x37f09a83], bl; sub byte ptr [rsi], bh; add byte ptr [rax], al; add byte ptr [rax + 0x3fe7df9a], bh; pop rbx; ret; 
0x0000000000087f46: xchg byte ptr [rip - 0x3afffffe], dh; ret; 
0x00000000000d61eb: xchg byte ptr [rsi + 0x4e], al; ret; 
0x000000000010e73d: xchg byte ptr [rsi + 0x786045bf], cl; ret; 
0x000000000004533f: xchg byte ptr [rsi + rdi*8 - 1], cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000bf865: xchg byte ptr [rsi - 0x3affffd6], dh; ret; 
0x000000000002ae2d: xchg byte ptr [rsi], ah; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc089; 
0x00000000000d606a: xchg byte ptr [rsi], dh; add al, 0x60; ret 0x403f; 
0x00000000000e3e75: xchg byte ptr cs:[rax + 0x7d], al; ret; 
0x00000000001006d1: xchg byte ptr cs:[rdi], dh; std; insb byte ptr [rdi], dx; mov eax, 0x59567e3a; sub eax, 0x31ad6446; ret 0x9dff; 
0x00000000000e8904: xchg cl, al; xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x0000000000193e01: xchg cl, ch; call qword ptr [rcx]; 
0x00000000000aaeda: xchg cl, cl; adc al, 0; add ah, al; pop r12; ret; 
0x00000000000dde50: xchg dh, ah; test ah, ch; jmp rdi; 
0x000000000008e6fa: xchg dh, bh; add eax, dword ptr [rax]; add ch, al; ret; 
0x0000000000197b09: xchg dh, ch; jmp rbx; 
0x00000000000b74b7: xchg dh, dh; adc al, 0; add ch, al; and ebx, dword ptr [rax + rbx*8 - 0x3c]; jns 0xb74ec; ret; 
0x00000000000948d1: xchg dl, ah; adc al, 0; add ah, al; pop r12; ret; 
0x00000000000bfa1b: xchg dl, cl; sub byte ptr [rax], al; add ch, al; ret; 
0x0000000000014b11: xchg dl, dh; add dword ptr [rax], eax; add cl, bl; ret 0xe8d9; 
0x00000000000d6043: xchg dword ptr [rax + 0x5c3c871e], esi; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x000000000019975d: xchg dword ptr [rax], eax; add byte ptr [rax], dh; int1; jmp qword ptr [rcx + 3]; 
0x00000000000d0c33: xchg dword ptr [rbp + 0x39], esp; ret; 
0x000000000001562b: xchg dword ptr [rbp + 0x48fffffc], edi; lea edx, [rip + 0xb76cd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e41c5: xchg dword ptr [rbp - 0x41], esp; ret; 
0x000000000002922d: xchg dword ptr [rbx + 0x44f2000b], ebp; divps xmm5, xmm0; movapd xmm0, xmm13; ret; 
0x00000000000e6bd1: xchg dword ptr [rbx + rsi*8], ebx; ret; 
0x00000000000af3f8: xchg dword ptr [rbx - 0x3b000000], esp; sti; pop rsp; ret; 
0x00000000000d1fb0: xchg dword ptr [rbx - 0x73], esp; out dx, eax; cmp eax, 0xff3fdf66; fbld tbyte ptr [r10 + 0x3fe1dcbf]; in eax, 0xe4; ret 0x25e7; 
0x0000000000100208: xchg dword ptr [rbx - 0x7e], ecx; xor cl, byte ptr [rsp + rdx*4 + 0x3893ff5]; jmp qword ptr [rdi]; 
0x0000000000080237: xchg dword ptr [rcx], eax; add byte ptr [rax], al; movapd xmm0, xmm2; ret; 
0x000000000000162f: xchg dword ptr [rdi + 0x2df28d96], esi; movsd dword ptr [rdi], dword ptr [rsi]; xor eax, 0x9b39a10f; test al, 0x84; ret; 
0x00000000000e4d3d: xchg dword ptr [rdi + 0x7fd782bb], esi; add al, 0x70; jmp qword ptr [rdi]; 
0x000000000003ce5b: xchg dword ptr [rdi + rdi*8 - 1], ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000001139fe: xchg dword ptr [rdi - 0x16b9a736], edi; push rbx; sbb eax, 0xbaf4f12c; sbb eax, dword ptr [rsi]; ret 0xfeea; 
0x0000000000053332: xchg dword ptr [rdi], eax; add bl, dh; movups xmmword ptr [rsp - 0x28], xmm1; movss dword ptr [rsp - 0x24], xmm3; movq xmm0, qword ptr [rsp - 0x28]; ret; 
0x00000000000ff8e1: xchg dword ptr [rdi], eax; sub rax, -0x49c012f9; ret 0x7ba2; 
0x0000000000098dc1: xchg dword ptr [rdx - 0x3b000000], ebp; sti; pop rsp; ret; 
0x00000000001058fa: xchg dword ptr [rdx], eax; ret 0xf90d; 
0x0000000000105a40: xchg dword ptr [rdx], edi; cmp eax, 0x1dfbc179; stc; mov edx, 0xcb7c5b8; ret; 
0x00000000000d8ae1: xchg dword ptr [rip + 0x1569aa83], ebx; cmp al, 0x36; mov esp, 0xdabe0f10; ret; 
0x0000000000044800: xchg dword ptr [rip + 0xc76400], esi; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000002cb3d: xchg dword ptr [rsi - 0x76ffffff], edx; ret 0xe281; 
0x00000000000153ed: xchg dword ptr [rsi], esp; add eax, 0x8d480000; adc eax, 0xb78ef; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000040fd5: xchg dword ptr [rsi], esp; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000d6046: xchg dword ptr [rsp + rbx*2], edi; out 0x36, eax; outsb dx, byte ptr [rsi]; fucompi st(1); ret; 
0x00000000001931a9: xchg eax, ebp; call qword ptr [rbx + 2]; 
0x000000000008690c: xchg eax, ebp; mov cs, word ptr [rdi - 8]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fd2e1: xchg eax, esi; idiv edi; call rsp; 
0x0000000000199245: xchg eax, esi; jmp qword ptr [rdx + 0xf]; 
0x0000000000052057: xchg ebp, eax; add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0xe981; 
0x00000000000d9d38: xchg ebp, eax; add eax, 0xb0479c62; out 0x3f, al; ret 0xd7f0; 
0x000000000006b93e: xchg ebp, eax; add eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000d0b24: xchg ebp, eax; cld; ret; 
0x00000000000d4d01: xchg ebp, eax; fstp dword ptr [rdi + 0x3c7d25be]; out 0x33, al; pop rbp; ret; 
0x0000000000105c09: xchg ebp, eax; in al, dx; add eax, 0x3fe815e6; add dl, bl; ret; 
0x0000000000015977: xchg ebp, eax; jne 0x15985; add dh, bl; ret 0xc9dc; 
0x000000000007d6b7: xchg ebp, eax; jnp 0x7d6c2; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007d0b7: xchg ebp, eax; or dword ptr [rax], 0x6f0f6600; ret 0x290f; 
0x0000000000031cf5: xchg ebp, eax; or dword ptr [rax], eax; ret; 
0x00000000000cdc7d: xchg ebp, eax; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x000000000010d1cc: xchg ebp, eax; pop rbx; or eax, dword ptr [rax - 0x23]; movabs al, byte ptr [0x3919721fe0961524]; ret; 
0x00000000000c9540: xchg ebp, eax; ret 0x145; 
0x000000000001b573: xchg ebp, eax; ret 0xb60f; 
0x00000000000e5f15: xchg ebp, eax; ret 0xbf3f; 
0x00000000000c71ed: xchg ebp, eax; ret 0xc149; 
0x00000000000d68e8: xchg ebp, eax; ret 0xc4e2; 
0x000000000001b7a7: xchg ebp, eax; ret 0xd284; 
0x00000000000c751c: xchg ebp, eax; ret 0xd349; 
0x00000000000c7810: xchg ebp, eax; ret 0xf45; 
0x00000000000ef375: xchg ebp, eax; ret 0xfc3f; 
0x000000000001b522: xchg ebp, eax; ret; 
0x000000000001b740: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xea; add dword ptr [rax + 0x21], ecx; ret 0x950f; 
0x0000000000080471: xchg ebp, eax; sal bh, 0xd8; ret; 
0x00000000000e5693: xchg ebp, eax; scasb al, byte ptr [rdi]; sbb dword ptr [rdi + rdi - 0x74], esp; sub r15b, byte ptr [r9 + 0x79]; ret 0xbc01; 
0x00000000000e6e3b: xchg ebp, eax; sub eax, 0x7f3fefeb; stosd dword ptr [rdi], eax; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x000000000009c0d3: xchg ebp, eax; vmovss xmm1, dword ptr [rip + 0x2e124]; vdivss xmm0, xmm1, xmm0; ret; 
0x00000000001967d1: xchg ebp, ebp; call qword ptr [rax + 7]; 
0x000000000004f879: xchg ebx, eax; adc eax, 0xff3000b; pop rcx; ret; 
0x000000000019a345: xchg ebx, eax; add byte ptr [rax], al; test al, 0xeb; bnd jmp qword ptr [rsi]; 
0x00000000000ef62b: xchg ebx, eax; call rdx; 
0x0000000000103065: xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; 
0x0000000000103065: xchg ebx, eax; imul edx, esp, 0xfffffffd; call qword ptr [rdi - 0xb]; mov edi, 0xd92491fb; call qword ptr [rsi]; 
0x000000000010e180: xchg ebx, eax; jle 0x10e161; ret 0x2234; 
0x00000000000f11eb: xchg ebx, eax; mov bh, 0; xor edi, dword ptr [rdi]; add al, dl; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000002504: xchg ebx, eax; mov dl, dh; mov esp, 0x14843efa; ret; 
0x00000000000d58d1: xchg ebx, eax; movabs al, byte ptr [0x8e939cbc473a0d13]; push rbx; ret; 
0x0000000000027111: xchg ebx, eax; or al, byte ptr [r8]; add rsp, 0x18; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000b832a: xchg ebx, eax; or dword ptr [rax], eax; add ch, al; ret; 
0x00000000000127a4: xchg ebx, eax; or eax, dword ptr [rax]; jp 0x127ab; je 0x127b0; add rsp, 0x18; ret; 
0x0000000000015d19: xchg ebx, eax; pop rbp; or eax, dword ptr [rax]; fld qword ptr [rcx + rdx*4]; ret; 
0x00000000000d5dfa: xchg ebx, eax; pop rdi; push rsp; push rax; ret 0xc83f; 
0x00000000000a69e9: xchg ebx, eax; pop rsi; add eax, 0x5883c500; ret; 
0x00000000000c5799: xchg ebx, eax; ret 0x2045; 
0x00000000000405d9: xchg ebx, eax; ret 0xb; 
0x00000000000208c4: xchg ebx, eax; ret 0xc084; 
0x000000000006aaf9: xchg ebx, eax; ret 5; 
0x00000000000ced22: xchg ebx, eax; ret; 
0x0000000000056e44: xchg ebx, eax; ror byte ptr [rdi], 0x2e; ror dword ptr [rdi], 0x93; ret 0xc084; 
0x00000000000935e9: xchg ebx, eax; ror byte ptr [rdx], 1; add ch, al; ret; 
0x00000000000f06cd: xchg ebx, eax; sbb bh, byte ptr [rdi]; add byte ptr [rax], ah; xchg ecx, eax; ret; 
0x00000000000496c5: xchg ebx, eax; shl byte ptr [rsi + 0xf], 0x2e; ror dword ptr [rdi], 0x93; ret 0xc084; 
0x00000000000dda83: xchg ebx, eax; std; call rsp; 
0x0000000000107e02: xchg ebx, eax; sub dh, ah; ret; 
0x000000000011845b: xchg ebx, eax; wait; jo 0x11845b; mov ebx, 0xc1abdcd; ret; 
0x0000000000146dfb: xchg ebx, eax; wait; jo 0x146dfb; mov ebx, 0xc1abdcd; ret; 
0x0000000000174d3b: xchg ebx, eax; wait; jo 0x174d3b; mov ebx, 0xc1abdcd; ret; 
0x00000000000e449b: xchg ebx, eax; wait; jo 0xe449b; mov ebx, 0xc1abdcd; ret; 
0x00000000000bf493: xchg ecx, eax; adc cl, byte ptr [rax]; add ch, al; sti; pop rcx; ret; 
0x00000000000e5563: xchg ecx, eax; adc eax, 0x7b3f61bb; pop rbx; ret; 
0x00000000000c728b: xchg ecx, eax; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x000000000019a13d: xchg ecx, eax; add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; bnd call rax; 
0x0000000000103071: xchg ecx, eax; and al, 0xd9; call qword ptr [rsi]; 
0x00000000001060e6: xchg ecx, eax; cmc; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x00000000000e4d0e: xchg ecx, eax; cmp esi, dword ptr [rax]; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x000000000010b775: xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x0000000000196869: xchg ecx, eax; in eax, dx; jmp rcx; 
0x000000000011f068: xchg ecx, eax; ja 0x11f042; ret 0xb2ad; 
0x000000000014d8c8: xchg ecx, eax; ja 0x14d8a2; ret 0xb2ad; 
0x00000000000eb0e8: xchg ecx, eax; ja 0xeb0c2; ret 0xb2ad; 
0x000000000010d0a5: xchg ecx, eax; jns 0x10d125; and ah, dh; cmp al, 0x64; ret 0x1353; 
0x000000000009c893: xchg ecx, eax; or al, byte ptr [rax]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0xa6a10]; vfmadd213sd xmm0, xmm3, qword ptr [rip + 0x2ea17]; vcvtsd2ss xmm0, xmm0, xmm0; ret; 
0x0000000000032101: xchg ecx, eax; or dword ptr [rax], eax; divsd xmm0, xmm1; ret; 
0x00000000000dd169: xchg ecx, eax; pop r11; fsubr st(1); ret; 
0x000000000010d318: xchg ecx, eax; push -0x24; add ebp, esi; xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x00000000000dd7dc: xchg ecx, eax; push 0x5aaf3fa2; xor al, 0x2d; std; call rcx; 
0x000000000000178b: xchg ecx, eax; push rbx; ret; 
0x000000000010a46a: xchg ecx, eax; ret 0x29ce; 
0x00000000000ec7eb: xchg ecx, eax; ret 0x3f31; 
0x00000000000d8643: xchg ecx, eax; ret 0x84f6; 
0x0000000000015d1f: xchg ecx, eax; ret; 
0x00000000000dd042: xchg ecx, eax; sbb esp, dword ptr [rsi + 0x5f]; ret 0x2c3f; 
0x0000000000073124: xchg ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000dca52: xchg edi, eax; iretd; call qword ptr [rbx]; 
0x0000000000106bd4: xchg edi, eax; jns 0x106c29; ret; 
0x0000000000106bcd: xchg edi, eax; loope 0x106c0f; jb 0x106bfe; xor eax, 0x527997d1; ret; 
0x000000000009c065: xchg edi, eax; loope 0x9c06a; add bl, dh; ret; 
0x0000000000018ef3: xchg edi, eax; mov byte ptr [rcx - 0x7f], 0xf8; mov ebp, 0xf0000bf; lahf; ret 0xf209; 
0x000000000010c5d4: xchg edi, eax; mov dword ptr [rsi], ebp; cmpsb byte ptr [rsi], byte ptr [rdi]; ror cl, 1; xchg edx, eax; ret 0x32be; 
0x0000000000012381: xchg edi, eax; or eax, dword ptr [rax]; jp 0x12388; je 0x12390; add rsp, 0x18; ret; 
0x00000000000d7c60: xchg edi, eax; pop rsp; sub bh, byte ptr [rcx + 0x57]; pop rsi; cmp al, 0x63; ret; 
0x000000000010c60a: xchg edi, eax; push rdx; ret 0x512; 
0x000000000000e645: xchg edi, eax; ret 0x1777; 
0x0000000000011c62: xchg edi, eax; ret 0x1a77; 
0x00000000000e8484: xchg edi, eax; ret 0x3f39; 
0x0000000000042281: xchg edi, eax; ret 0xca08; 
0x000000000004d68d: xchg edi, eax; ret 0xe8c1; 
0x00000000000e2c3b: xchg edi, eax; ret 0xf256; 
0x0000000000071027: xchg edi, eax; ret; 
0x00000000000dda82: xchg edi, eax; xchg ebx, eax; std; call rsp; 
0x00000000000cdf4d: xchg edi, eax; xchg esi, eax; add byte ptr [rdi], bl; leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x0000000000080285: xchg edi, eax; xor al, 6; add byte ptr [rsi + 0xf], ah; sub dl, al; ret; 
0x00000000000e4d34: xchg edi, edi; and eax, 0xd3dc063f; push rbx; movabs dword ptr [0x70047fd782bbb787], eax; jmp qword ptr [rdi]; 
0x000000000008968a: xchg edx, eax; adc byte ptr [rax], al; add ch, al; ret; 
0x0000000000190ba1: xchg edx, eax; add byte ptr [rax], al; loope 0x190b76; out dx, eax; call qword ptr [rax]; 
0x00000000000b8faa: xchg edx, eax; add eax, 0x5439c500; ret; 
0x000000000006bc6e: xchg edx, eax; add eax, 0xc4834800; pop rbx; pop rbp; ret; 
0x000000000011b49b: xchg edx, eax; and al, 0x49; ret 0x1c3f; 
0x00000000000e74db: xchg edx, eax; and al, 0x49; ret 0x3f; 
0x0000000000130233: xchg edx, eax; and al, 0x49; ret 0x55bf; 
0x00000000000d52c3: xchg edx, eax; and al, 0x49; ret 0x9abf; 
0x00000000000e7583: xchg edx, eax; and al, 0x49; ret 0xfc3f; 
0x00000000000d52fb: xchg edx, eax; and al, 0x49; ret 0xfdbf; 
0x000000000011b498: xchg edx, eax; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x1c3f; 
0x00000000000e74d8: xchg edx, eax; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x3f; 
0x0000000000130230: xchg edx, eax; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x55bf; 
0x00000000000d52c0: xchg edx, eax; and al, 0x49; xchg edx, eax; and al, 0x49; ret 0x9abf; 
0x00000000000e83bd: xchg edx, eax; and byte ptr [rbp - 0x2532e311], bh; retf; ret 0x3f3a; 
0x000000000008200a: xchg edx, eax; cwde; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000007b71a: xchg edx, eax; fdivp st(5); jmp qword ptr [rsi + 0xf]; 
0x000000000000fdba: xchg edx, eax; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000e7403: xchg edx, eax; mov bl, 0xbe; out 0x3f, eax; ret; 
0x00000000000d7080: xchg edx, eax; movabs dword ptr [0xc31ebfc0a732485b], eax; push rax; ret 0x7477; 
0x0000000000074893: xchg edx, eax; nop dword ptr [rax]; movdqa xmm1, xmm0; call 0xc4e80; add rsp, 0x18; ret; 
0x0000000000032019: xchg edx, eax; or dword ptr [rax], eax; ret; 
0x0000000000070c3d: xchg edx, eax; ret 0x2149; 
0x000000000010c5da: xchg edx, eax; ret 0x32be; 
0x00000000001106f6: xchg edx, eax; ret 0x3fbd; 
0x0000000000106188: xchg edx, eax; ret 0x74e3; 
0x00000000000cd48d: xchg edx, eax; ret 0x7b00; 
0x00000000000c71b2: xchg edx, eax; ret 0xc031; 
0x0000000000114844: xchg edx, eax; ret 0xee38; 
0x00000000000c719b: xchg edx, eax; ret; 
0x000000000003d206: xchg esi, eax; add al, 0; cmovne rax, rdx; ret; 
0x00000000000cdf4e: xchg esi, eax; add byte ptr [rdi], bl; leave; sub al, byte ptr [rax]; ret 0x8a26; 
0x00000000000d7441: xchg esi, eax; call 0xffffffff8fd6957a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000f38e1: xchg esi, eax; call 0xffffffff8fd85a1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000127581: xchg esi, eax; call 0xffffffff8fdb96ba; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000137921: xchg esi, eax; call 0xffffffff8fdc9a5a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000155da1: xchg esi, eax; call 0xffffffff8fde7eda; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000166061: xchg esi, eax; call 0xffffffff8fdf819a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000179e41: xchg esi, eax; call 0xffffffff8fe0bf7a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x0000000000184be1: xchg esi, eax; call 0xffffffff8fe16d1a; mov esp, 0x3a49e254; ret 0xd0dc; 
0x00000000000421df: xchg esi, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000007b7d6: xchg esi, eax; in al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000196961: xchg esi, eax; in eax, dx; call qword ptr [rdi]; 
0x0000000000126ff5: xchg esi, eax; ja 0x126fb4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000137395: xchg esi, eax; ja 0x137354; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000155815: xchg esi, eax; ja 0x1557d4; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000165ad5: xchg esi, eax; ja 0x165a94; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000001798b5: xchg esi, eax; ja 0x179874; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000184655: xchg esi, eax; ja 0x184614; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000d6eb5: xchg esi, eax; ja 0xd6e74; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x00000000000f3355: xchg esi, eax; ja 0xf3314; stosb byte ptr [rdi], al; stosd dword ptr [rdi], eax; ret 0xe1cb; 
0x0000000000001c12: xchg esi, eax; jl 0x1c56; ret; 
0x00000000000e37fc: xchg esi, eax; mov dl, 0x65; jle 0xe379d; ret; 
0x0000000000080046: xchg esi, eax; mov dl, 4; add byte ptr [rsi + 0xf], ah; push rdi; ret 0xf66; 
0x00000000001068c3: xchg esi, eax; or dword ptr [rax - 0x6342fe18], ecx; imul ecx, dword ptr [rbp + 0x2e], 0xd4a23ffb; ret; 
0x000000000002a850: xchg esi, eax; or eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004316d: xchg esi, eax; or eax, dword ptr [rax]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000cb1a0: xchg esi, eax; pop rdi; ret 0x65fc; 
0x0000000000103457: xchg esi, eax; push rsp; mov ss, edx; test byte ptr [rdx], bh; ret 0xbf8b; 
0x0000000000015e26: xchg esi, eax; push rsp; or eax, dword ptr [rax]; fdiv qword ptr [rip + 0xb5c88]; fchs; ret; 
0x00000000000d8d64: xchg esi, eax; ret 0x3c4b; 
0x0000000000107797: xchg esi, eax; ret 0x427c; 
0x00000000001149aa: xchg esi, eax; ret 0x65ae; 
0x00000000000dea20: xchg esi, eax; ret 0x74aa; 
0x00000000000e0eda: xchg esi, eax; ret 0xbdcf; 
0x000000000001b03f: xchg esi, eax; ret 0xc031; 
0x00000000000e527d: xchg esi, eax; ret; 
0x0000000000049f76: xchg esi, eax; sbb bh, ah; jmp qword ptr [rsi + 0xf]; 
0x000000000001b0aa: xchg esi, eax; shl byte ptr [rcx], 0xf0; ret; 
0x00000000000d982b: xchg esi, eax; test dword ptr [rcx + riz*8 + 0x3f], edx; ret; 
0x000000000010c855: xchg esi, eax; xor al, byte ptr [rip + 0x2583811e]; ret; 
0x000000000004a53c: xchg esp, eax; adc eax, 0x280f0008; ret 0xa8eb; 
0x000000000019a46d: xchg esp, eax; add byte ptr [rax], al; adc dh, dh; bnd call qword ptr [rbp + 7]; 
0x00000000000a79c8: xchg esp, eax; add rax, 0x5639c500; ret; 
0x000000000001a4d4: xchg esp, eax; and al, 0x20; add dword ptr [rax], eax; add byte ptr [rax - 0x337f0f1c], al; add esp, dword ptr [rsi + 0x39]; ret 0x8966; 
0x0000000000075e49: xchg esp, eax; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x290f; 
0x00000000000769e9: xchg esp, eax; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rdi], cl; push rax; ret 0x8a8; 
0x00000000000823b4: xchg esp, eax; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000010d521: xchg esp, eax; fadd dword ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; sahf; ret; 
0x0000000000077a22: xchg esp, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000001968f9: xchg esp, eax; in eax, dx; jmp rcx; 
0x00000000000ecd4c: xchg esp, eax; lodsd eax, dword ptr [rsi]; adc al, 0xbf; add byte ptr [rax - 0x74c161fe], al; ret; 
0x00000000000dd5e5: xchg esp, eax; mov al, 0x3f; ret; 
0x00000000000ddc3e: xchg esp, eax; mov edi, 0xf02a83e4; sti; call rsi; 
0x00000000001015da: xchg esp, eax; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000001873b: xchg esp, eax; nop dword ptr [rax]; fsubrp st(1); pop rbx; ret; 
0x0000000000001bec: xchg esp, eax; or eax, 0xd94660b6; ret 0x3d4d; 
0x00000000000d5639: xchg esp, eax; push rsp; mov esi, ecx; ret; 
0x0000000000074dd6: xchg esp, eax; ret 0x22e9; 
0x000000000001bd52: xchg esp, eax; ret 0x33e9; 
0x0000000000103094: xchg esp, eax; ret 0x5106; 
0x00000000000c733f: xchg esp, eax; ret 0x5422; 
0x000000000001b846: xchg esp, eax; ret 0x5ce9; 
0x00000000000d9173: xchg esp, eax; ret 0x6a8c; 
0x00000000000cf611: xchg esp, eax; ret 0x6dbf; 
0x000000000001b885: xchg esp, eax; ret 0x8548; 
0x00000000000c8af3: xchg esp, eax; ret 0xd231; 
0x000000000000d2e8: xchg esp, eax; ret 0xf883; 
0x000000000007537a: xchg esp, eax; ret 0xfee9; 
0x00000000000c8468: xchg esp, eax; ret 0xff31; 
0x0000000000071074: xchg esp, eax; ret; 
0x000000000010fc04: xchg esp, eax; sal bl, 1; ret 0x3ffd; 
0x00000000000ebf35: xchg esp, eax; sar byte ptr [rdi - 0x48cf1d75], cl; ret 0x3210; 
0x0000000000019dc7: xchg esp, eax; shl byte ptr [rcx], 0xc8; ret; 
0x000000000001b047: xchg esp, eax; shl byte ptr [rcx], 0xd0; ret; 
0x00000000000f0bfb: xchg esp, eax; stosd dword ptr [rdi], eax; sbb byte ptr [rip], r15b; add byte ptr [rax - 0x2c4dc019], bh; ret 0xf481; 
0x00000000000725b8: xchg esp, eax; sub al, 9; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000007dd20: xchg esp, eax; xor dword ptr [rax], eax; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x0000000000045a5f: xchg esp, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x85874; ret; 
0x000000000011b49a: xchg r10, rax; and al, 0x49; ret 0x1c3f; 
0x00000000000e74da: xchg r10, rax; and al, 0x49; ret 0x3f; 
0x0000000000130232: xchg r10, rax; and al, 0x49; ret 0x55bf; 
0x00000000000d52c2: xchg r10, rax; and al, 0x49; ret 0x9abf; 
0x00000000000cd48c: xchg r10d, eax; ret 0x7b00; 
0x00000000000e6e3a: xchg r13d, eax; sub eax, 0x7f3fefeb; stosd dword ptr [rdi], eax; cli; mov esi, 0x3fefeb0d; ret 0xf138; 
0x0000000000196868: xchg rcx, rax; in eax, dx; jmp rcx; 
0x0000000000049fdd: xlatb; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000031d15: xlatb; add eax, 0x450f4800; ret 0x66c3; 
0x000000000010b8e6: xlatb; call qword ptr [rbp - 0x58]; 
0x00000000000e9b3c: xlatb; call qword ptr [rcx]; 
0x00000000000dba40: xlatb; call rcx; 
0x00000000000d4e2d: xlatb; in eax, 0x40; ret 0x3b36; 
0x0000000000196f31: xlatb; in eax, dx; call qword ptr [rdi]; 
0x00000000000e9a24: xlatb; jmp qword ptr [rcx]; 
0x0000000000125c98: xlatb; loope 0x125d11; stosb byte ptr [rdi], al; ret; 
0x0000000000136038: xlatb; loope 0x1360b1; stosb byte ptr [rdi], al; ret; 
0x00000000001544b8: xlatb; loope 0x154531; stosb byte ptr [rdi], al; ret; 
0x0000000000164778: xlatb; loope 0x1647f1; stosb byte ptr [rdi], al; ret; 
0x0000000000178558: xlatb; loope 0x1785d1; stosb byte ptr [rdi], al; ret; 
0x00000000001832f8: xlatb; loope 0x183371; stosb byte ptr [rdi], al; ret; 
0x00000000000d5b58: xlatb; loope 0xd5bd1; stosb byte ptr [rdi], al; ret; 
0x00000000000f1ff8: xlatb; loope 0xf2071; stosb byte ptr [rdi], al; ret; 
0x00000000000dc0dd: xlatb; mov ah, 0x3f; ret; 
0x00000000000d5e1c: xlatb; mov ebx, dword ptr [rdi + rdi]; add byte ptr [rax], al; ret; 
0x0000000000100435: xlatb; mov edx, 0x83681345; jns 0x100475; lodsd eax, dword ptr [rsi]; ret; 
0x00000000000e981e: xlatb; mov esi, 0x80000000; sti; call rdi; 
0x0000000000032355: xlatb; mov qword ptr [rsp - 0x20], rdi; movsd xmm0, qword ptr [rsp - 0x20]; ret; 
0x0000000000044fb3: xlatb; movapd xmm1, xmm2; ret; 
0x0000000000050ff7: xlatb; movd xmm1, edi; movaps xmm0, xmm1; ret; 
0x00000000000324a9: xlatb; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000743a5: xlatb; or al, byte ptr [rip - 0x3b7cb800]; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001104e2: xlatb; outsb dx, byte ptr [rsi]; ret 0x5c23; 
0x00000000000e8478: xlatb; push r11; xor esp, dword ptr [rdx + 0x48]; xor byte ptr [rbp + 0x52b89211], bh; xchg edi, eax; ret 0x3f39; 
0x000000000010cc24: xlatb; ret 0x6adc; 
0x00000000000eb0ea: xlatb; ret 0xb2ad; 
0x00000000000eb6a9: xlatb; ret 0xb2e5; 
0x00000000001037c5: xlatb; ret 0xffbb; 
0x000000000005aab5: xlatb; ret 6; 
0x00000000000d1d48: xlatb; ret; 
0x00000000000d4095: xlatb; sahf; cmp esi, dword ptr [rax + 0x3b]; pop rbx; or cl, byte ptr [rax]; ret 0xdd40; 
0x00000000000fe7b1: xlatb; sal dh, 0xff; jmp qword ptr [rbx]; 
0x00000000000fdada: xlatb; sbb bl, byte ptr [rbx]; ret; 
0x0000000000109867: xlatb; sti; call qword ptr [rdi]; 
0x0000000000017f87: xor ah, 0x80; cmp eax, 0xc040; jae 0x17f97; fadd qword ptr [rip + 0xb68b3]; fyl2x; ret; 
0x00000000000924e6: xor ah, al; ret 0x99d1; 
0x00000000000e9a21: xor ah, byte ptr [rcx - 0x80]; xlatb; jmp qword ptr [rcx]; 
0x00000000000d7084: xor ah, byte ptr [rdi - 0x3ce14040]; push rax; ret 0x7477; 
0x0000000000050b95: xor al, 0; lea rdx, [rip + 0x35f82]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x35d77]; cmovne rax, rdx; ret; 
0x00000000000507b5: xor al, 0; lea rdx, [rip + 0x363a2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x362a7]; cmovne rax, rdx; ret; 
0x0000000000050425: xor al, 0; lea rdx, [rip + 0x36712]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x36377]; cmovne rax, rdx; ret; 
0x000000000004fe45: xor al, 0; lea rdx, [rip + 0x36cb2]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x367e7]; cmovne rax, rdx; ret; 
0x000000000004f075: xor al, 0; lea rdx, [rip + 0x37a62]; test byte ptr [rax + 0x7a], 8; lea rax, [rip + 0x37637]; cmovne rax, rdx; ret; 
0x0000000000051bc1: xor al, 0; mov dword ptr fs:[rax], 0x21; xor eax, eax; ret; 
0x0000000000051195: xor al, 0; mov dword ptr fs:[rax], 0x22; add rsp, 0x28; ret; 
0x0000000000056d60: xor al, 0; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000050360: xor al, 0; mov dword ptr fs:[rdx], 0x22; movd xmm0, eax; ret; 
0x000000000005024d: xor al, 0; mov dword ptr fs:[rdx], 0x22; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x000000000004fdbd: xor al, 0; movss xmm0, dword ptr [rip + 0xb05ed]; mulss xmm0, xmm0; mov dword ptr fs:[rax], 0x22; ret; 
0x00000000000e9524: xor al, 0; or eax, 0x2d0ef6bf; add al, byte ptr [rcx]; ret 0xbd2f; 
0x00000000000f0d2b: xor al, 0x1e; ret 0x3f37; 
0x0000000000070be9: xor al, 0x24; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000007482d: xor al, 0x24; movhps xmm2, qword ptr [rsp]; add rsp, 0x18; movdqa xmm0, xmm2; ret; 
0x000000000000c10e: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c3dd: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xc3fc; add rsp, 0x18; ret; 
0x00000000000dd7e2: xor al, 0x2d; std; call rcx; 
0x00000000000edc0d: xor al, 0x31; mov edi, 0x58b70000; ret 0x9b5c; 
0x00000000001005b2: xor al, 0x3e; ret 0xf280; 
0x0000000000027e56: xor al, 0x48; add eax, edx; or rax, rdi; or rax, r9; movq xmm0, rax; ret; 
0x00000000000324a3: xor al, 0x48; and edx, eax; or rdi, rdx; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000d0b0a: xor al, 0x4f; sbb dword ptr [rax], esp; ret 0xde3f; 
0x00000000000fe3b4: xor al, 0x62; movabs dword ptr [0xede4bf88c17bd63f], eax; mov edi, 0x630e5489; ret 0xc374; 
0x00000000000ea28c: xor al, 0x7f; sub al, 0x3f; pop rdi; ret 0xcae2; 
0x00000000000d71eb: xor al, 0xa2; ret; 
0x000000000010d321: xor al, 0xa7; ret; 
0x000000000008ce4c: xor al, 0xa; add ch, al; ret; 
0x00000000000ef46e: xor al, 0xbf; add byte ptr [rax + 0x71fc201e], al; ret; 
0x00000000000ea6ee: xor al, 0xbf; add byte ptr [rax], al; or byte ptr [rax + 0x3f341f35], 0x2f; cld; ret; 
0x00000000000e88c6: xor al, 0xbf; ret 0x1de7; 
0x0000000000112983: xor al, 0xca; pop rbx; fnstsw word ptr [rdi]; pushfq; ret 0xa75f; 
0x00000000000e65a2: xor al, 0xda; ret 0xf006; 
0x000000000010c516: xor al, 0xdb; cmp al, 0xb9; ret; 
0x000000000018f7d5: xor al, 0xe8; jmp qword ptr [rax + 0x2b]; 
0x0000000000191dc4: xor al, 0xe; add byte ptr [rax], al; pop rax; add ch, al; call qword ptr [rcx]; 
0x0000000000068442: xor al, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000112304: xor al, 0xfc; mov cl, 0x3f; movabs r14, 0xef9fbc5f3d32e6f3; test al, 0x22; ret 0xefeb; 
0x0000000000080286: xor al, 6; add byte ptr [rsi + 0xf], ah; sub dl, al; ret; 
0x0000000000047e05: xor al, 8; add byte ptr [rsi + 0xf], ah; push rsp; ret 0xf66; 
0x0000000000087f8b: xor al, 9; add ch, al; ret; 
0x0000000000105fbc: xor al, bl; add eax, dword ptr [rax + 0x16]; ret; 
0x0000000000107306: xor al, bl; ret 0xf46e; 
0x000000000007cee2: xor al, byte ptr [rax]; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x000000000007d98b: xor al, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000010c856: xor al, byte ptr [rip + 0x2583811e]; ret; 
0x00000000001055fa: xor al, byte ptr [rsi + 0x3ffee5f0]; fist dword ptr [rbx + 0x2fa584f]; ret; 
0x0000000000077166: xor al, ch; and al, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000073f27: xor al, ch; push rbx; syscall; 
0x000000000007b718: xor al, ch; xchg edx, eax; fdivp st(5); jmp qword ptr [rsi + 0xf]; 
0x0000000000018640: xor bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000007c7da: xor bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d99f6: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56418db; ret 0x3f84; 
0x00000000000f5e96: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe565dd7b; ret 0x3f84; 
0x0000000000129b36: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe5691a1b; ret 0x3f84; 
0x0000000000139ed6: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56a1dbb; ret 0x3f84; 
0x0000000000158356: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56c023b; ret 0x3f84; 
0x0000000000168616: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56d04fb; ret 0x3f84; 
0x000000000017c3f6: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56e42db; ret 0x3f84; 
0x0000000000187196: xor bh, byte ptr [rdi + rbp*8]; insb byte ptr [rdi], dx; and dword ptr [rdi + 0x19], 0x4f; mov ch, 0xbf; call 0xffffffffe56ef07b; ret 0x3f84; 
0x00000000000e4db6: xor bh, byte ptr [rdi]; ret; 
0x000000000011230c: xor bh, byte ptr [rip - 0x106043a1]; test al, 0x22; ret 0xefeb; 
0x0000000000050f8a: xor bl, 0xf; adc dword ptr [rdi], eax; je 0x50fa0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000058e88: xor bl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000108084: xor bl, cl; cmc; dec dword ptr [rax]; leave; cmc; jmp qword ptr [rax]; 
0x00000000000e4d10: xor bl, dh; in eax, 1; scasd eax, dword ptr [rdi]; jmp qword ptr [rcx]; 
0x00000000000ed5e8: xor bl, dl; mov bl, 0x82; ret; 
0x000000000011095c: xor bpl, byte ptr [r10 + 0x41]; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000ef64d: xor byte ptr [r15 - 0x32d64000], r15b; ret 0xc50b; 
0x00000000000e8ba5: xor byte ptr [r15], dil; add byte ptr [rax], al; or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x000000000006fb3c: xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x0000000000081e62: xor byte ptr [rax + 0x63], cl; ret; 
0x0000000000086a87: xor byte ptr [rax + 0x7fffff], bh; sar eax, cl; not eax; and eax, edx; movd xmm0, eax; ret; 
0x000000000007262c: xor byte ptr [rax + 5], dh; add byte ptr [rax - 0x7b], cl; sar byte ptr [rcx + 0x3b], 0x66; movq mm0, qword ptr [rip + 0x8eff3]; add rsp, 0x28; ret; 
0x00000000000717c0: xor byte ptr [rax + 9], cl; ret 0x8948; 
0x0000000000190320: xor byte ptr [rax + rax], ah; test al, 0x24; in al, dx; jmp qword ptr [rax + 0x64]; 
0x000000000001bb84: xor byte ptr [rax + rdi], dl; add byte ptr [rdi + rax*8], ah; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000190810: xor byte ptr [rax - 0x3a080000], al; out dx, al; jmp qword ptr [rax - 0x80]; 
0x00000000000c96a8: xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x00000000000c8d4d: xor byte ptr [rax - 0x77], cl; ret 0x8166; 
0x0000000000071c88: xor byte ptr [rax - 0x77], cl; ret 0xb848; 
0x000000000006fda7: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000019a468: xor byte ptr [rax], al; add byte ptr [rax], al; fcom qword ptr [rax + rax - 0xd09f000]; call qword ptr [rbp + 7]; 
0x000000000009b2cc: xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; subss xmm0, xmm0; ret; 
0x000000000009c8dc: xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x21; vsubss xmm0, xmm0, xmm0; ret; 
0x00000000000489ad: xor byte ptr [rax], cl; add dl, dh; movups xmm0, xmmword ptr [rip + 0x828d8]; ret; 
0x0000000000190570: xor byte ptr [rax], dh; add byte ptr [rax], cl; mov dl, 0xed; jmp qword ptr [rax + 0x70]; 
0x00000000000e847e: xor byte ptr [rbp + 0x52b89211], bh; xchg edi, eax; ret 0x3f39; 
0x00000000000e847d: xor byte ptr [rbp + 0x52b89211], dil; xchg edi, eax; ret 0x3f39; 
0x00000000000867f2: xor byte ptr [rbp - 0x10], 0xf3; addps xmm0, xmm0; ret; 
0x0000000000193c80: xor byte ptr [rbp - 0x17], bl; call qword ptr [rsi + 6]; 
0x00000000000d6391: xor byte ptr [rbx + 0x2a], dh; out dx, al; ret 0x3fbb; 
0x00000000000d0140: xor byte ptr [rbx + 0x4ff9c8e0], dl; ret 0x3f; 
0x000000000002e5fb: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000006e75e: xor byte ptr [rbx + 0x66], bl; movq mm0, mm2; ret; 
0x0000000000027bcc: xor byte ptr [rbx + 0xff2000b], bh; ret 0x1cb; 
0x0000000000044fac: xor byte ptr [rbx + 8], ah; add byte ptr [rsi + 0xf], ah; push rsi; xlatb; movapd xmm1, xmm2; ret; 
0x0000000000194d80: xor byte ptr [rbx - 0x15], cl; jmp qword ptr [rax]; 
0x00000000001309c0: xor byte ptr [rbx - 0x1f03dc78], bh; jo 0x130987; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000015f100: xor byte ptr [rbx - 0x1f03dc78], bh; jo 0x15f0c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x00000000000d0200: xor byte ptr [rbx - 0x1f03dc78], bh; jo 0xd01c7; add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000001fdcb: xor byte ptr [rbx - 0x27], bl; leave; ret; 
0x000000000003177b: xor byte ptr [rbx - 0xe], bl; subps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000003142d: xor byte ptr [rbx - 0xe], bl; subps xmm1, xmm2; movapd xmm0, xmm1; ret; 
0x0000000000114a46: xor byte ptr [rbx], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x000000000011fcf1: xor byte ptr [rbx], dh; ja 0x11fd47; ret 0xbfd3; 
0x000000000014e551: xor byte ptr [rbx], dh; ja 0x14e5a7; ret 0xbfd3; 
0x00000000000ebd71: xor byte ptr [rbx], dh; ja 0xebdc7; ret 0xbfd3; 
0x00000000000c8b85: xor byte ptr [rcx + 0x21], cl; ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000010fa50: xor byte ptr [rcx + 0x33], al; ret; 
0x000000000004a2a8: xor byte ptr [rcx + 0xb], ah; add bl, dh; addps xmm2, xmmword ptr [rip + 0xb60f8]; pop rbx; movaps xmm0, xmm2; ret; 
0x000000000005956b: xor byte ptr [rcx + 9], cl; ret 0x94d; 
0x00000000000c7401: xor byte ptr [rcx + 9], cl; retf 0x2149; ret 0x949; 
0x0000000000192ea0: xor byte ptr [rcx - 0x18], dh; call qword ptr [rcx]; 
0x00000000001003f6: xor byte ptr [rcx], 0x17; jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x000000000004c994: xor byte ptr [rcx], al; add byte ptr [rax], al; lea rdx, [rip + 0xb3dcd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001979b0: xor byte ptr [rdi - 0x12], bl; jmp rsi; 
0x00000000000ef64e: xor byte ptr [rdi - 0x32d64000], bh; ret 0xc50b; 
0x00000000000ef4ee: xor byte ptr [rdi - 0x4f134000], bh; ret 0xc3df; 
0x00000000000e8ba6: xor byte ptr [rdi], bh; add byte ptr [rax], al; or byte ptr [rip - 0x40cfbf7c], 0xfa; ret; 
0x000000000007b17c: xor byte ptr [rdi], cl; sub dword ptr [rbx], ebx; movaps xmmword ptr [rbx + 0x10], xmm4; add rsp, 0x10; pop rbx; ret; 
0x00000000000559d0: xor byte ptr [rdi], cl; test dword ptr [rcx + 0x48000002], edi; add esp, 0x50; pop rbx; ret; 
0x000000000005b4ac: xor byte ptr [rdx - 0x3417fff6], ah; ret; 
0x0000000000108c82: xor byte ptr [rdx - 0x5804f48], ah; ret; 
0x0000000000199760: xor byte ptr [rdx - 0xf], cl; jmp qword ptr [rcx + 3]; 
0x000000000010d31d: xor byte ptr [rdx], dl; xor al, 0xa7; ret; 
0x000000000009e4b7: xor byte ptr [rip + 0x2879c500], al; ffreep st(5); ret; 
0x0000000000190e38: xor byte ptr [rsi + 0x1a880000], ah; inc dword ptr [rax + 0x380000a6]; sbb esi, edx; call rax; 
0x000000000007c985: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; and al, 0x20; call 0xc4e80; add rsp, 0x48; ret; 
0x00000000000644e0: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x96e8; 
0x000000000006e506: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc35b; 
0x0000000000061182: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf4e8; 
0x0000000000072e91: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf5e8; 
0x000000000006a5ed: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000068b39: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000005978c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xe6e8; 
0x0000000000041955: xor byte ptr [rsi + 0xf], ah; push rsp; ret; 
0x00000000000cbea5: xor byte ptr [rsi], ah; ret 0x4001; 
0x0000000000198dc0: xor byte ptr [rsi], bh; add byte ptr [rsi + rax - 0x10], bl; jmp qword ptr [rbp + 5]; 
0x000000000018ffa8: xor byte ptr [rsi], dl; add al, bh; jp 0x18ff9a; jmp qword ptr [rax + 0x56]; 
0x000000000018f7b5: xor ch, al; jmp rax; 
0x000000000008e749: xor ch, al; ret; 
0x00000000000a9d7e: xor ch, al; sti; pop rax; ret 0xe3c5; 
0x00000000000d70ec: xor ch, byte ptr [rcx - 0x5793c038]; ret; 
0x000000000011095d: xor ch, byte ptr [rdx + 0x41]; add byte ptr [rax], al; add byte ptr [rax - 0x43], ah; ret; 
0x00000000000dd290: xor ch, byte ptr [rip - 0x1cb88c1b]; ret; 
0x00000000001094ca: xor ch, byte ptr [rsi - 0x3c]; ret 0x402d; 
0x000000000004f06a: xor cl, al; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000000c7d8: xor cl, bl; ret 0xc1d8; 
0x000000000001c716: xor cl, byte ptr [rbx]; add cl, bl; add eax, 0xb0611; add rsp, 8; ret; 
0x000000000010020b: xor cl, byte ptr [rsp + rdx*4 + 0x3893ff5]; jmp qword ptr [rdi]; 
0x0000000000079680: xor cl, ch; retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000000fdb8: xor cl, ch; xchg edx, eax; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000077a20: xor cl, ch; xchg esp, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000049321: xor dh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d61e5: xor dh, byte ptr [rcx - 0x44]; retf 0x4781; xchg byte ptr [rsi + 0x4e], al; ret; 
0x000000000007db1a: xor dh, byte ptr [rdi + 8]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x39e8; 
0x0000000000043060: xor dl, 0xf; adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000015d11: xor dl, ah; and edx, 2; lea rcx, [rip + 0xb5d93]; fld qword ptr [rcx + rdx*4]; ret; 
0x00000000000df999: xor dl, bh; xlatb; ret; 
0x0000000000105201: xor dl, byte ptr [rbx]; ret 0x1f07; 
0x00000000000cd9d8: xor dword ptr [rax + 0x6ef10027], ebp; ret; 
0x00000000000cdc7a: xor dword ptr [rax], eax; mov bh, 0x95; pop rax; add byte ptr [rcx - 0x55ffb809], ch; ret; 
0x0000000000085ee5: xor dword ptr [rax], eax; mov dword ptr fs:[rax], 0x22; ret; 
0x0000000000085ed5: xor dword ptr [rax], eax; mov dword ptr fs:[rax], edi; ret; 
0x000000000007cfc2: xor dword ptr [rax], eax; movdqa xmm0, xmmword ptr [rsp]; mov dword ptr fs:[rax], 0x22; add rsp, 0x38; ret; 
0x00000000000cd91e: xor dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; xchg edi, eax; ret; 
0x0000000000048999: xor dword ptr [rax], ecx; add byte ptr [rsi + 0xf], ah; sub al, cl; ret; 
0x000000000011437a: xor dword ptr [rax], esp; cdq; ret 0xbf8b; 
0x00000000000dde93: xor dword ptr [rbp + 0x1bbfbcb9], esp; mov cl, 0xdb; ret 0xcc23; 
0x0000000000087d4d: xor dword ptr [rbp + rcx*8 - 0x3b], edx; pop r8; ret 0xfbc5; 
0x00000000000dbf29: xor dword ptr [rbp - 0x43], ebx; imul ecx, dword ptr [rdi + 0x37403fe7], -0x80; mov dword ptr [rax - 0x35c37bfa], esp; and al, 0x54; ret; 
0x00000000000a7872: xor dword ptr [rbx + 0x3d], ebp; jbe 0xa784f; add al, byte ptr [rax]; jo 0xa7840; ret; 
0x00000000000e7b15: xor dword ptr [rbx - 0x41], eax; ret; 
0x0000000000119811: xor dword ptr [rbx], esi; ja 0x119867; ret 0xbfd3; 
0x00000000001481b1: xor dword ptr [rbx], esi; ja 0x148207; ret 0xbfd3; 
0x00000000001760f1: xor dword ptr [rbx], esi; ja 0x176147; ret 0xbfd3; 
0x00000000000e5851: xor dword ptr [rbx], esi; ja 0xe58a7; ret 0xbfd3; 
0x000000000011fceb: xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0x11fd47; ret 0xbfd3; 
0x000000000014e54b: xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0x14e5a7; ret 0xbfd3; 
0x00000000000ebd6b: xor dword ptr [rcx + 0x3f3882], edi; xor byte ptr [rbx], dh; ja 0xebdc7; ret 0xbfd3; 
0x0000000000089f43: xor dword ptr [rcx + rcx*8 - 0x3b], edx; ret; 
0x000000000008e57b: xor dword ptr [rcx + rcx*8 - 0x3c], edx; jns 0x8e5b0; loope 0x8e549; ret; 
0x00000000000a4b4d: xor dword ptr [rcx + rcx*8 - 0x3c], edx; jns 0xa4b82; loope 0xa4b1b; ret; 
0x00000000000edc0e: xor dword ptr [rdi + 0x58b70000], edi; ret 0x9b5c; 
0x000000000004eacb: xor dword ptr [rdi + 0xff30007], esi; pop rsi; ret; 
0x00000000000ddb81: xor dword ptr [rdi + rdi*4 + 0x4c], 0xffffffb3; ret; 
0x000000000010b773: xor dword ptr [rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x00000000001003f7: xor dword ptr [rdi], edx; jb 0x1003ac; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x00000000000aa9fc: xor dword ptr [rdx + rcx*8 - 0x3c], edx; ret; 
0x000000000010b772: xor dword ptr ds:[rdi], ebp; xchg ecx, eax; fdivr st(6), st(0); ret 0xa9aa; 
0x00000000000d5548: xor eax, 0x114d22b6; ret 0xbfb3; 
0x000000000003d1f5: xor eax, 0x158d4800; adc bl, byte ptr [rcx + 0x40f60004]; jp 0x3d20a; lea rax, [rip + 0x49617]; cmovne rax, rdx; ret; 
0x000000000004a7a5: xor eax, 0x158d4800; ret 0x512; 
0x00000000000ea6f4: xor eax, 0x2f3f341f; cld; ret; 
0x00000000000d70e8: xor eax, 0x32bd0625; test eax, 0xa86c3fc8; ret; 
0x00000000000dfca3: xor eax, 0x3fedfffe; push rbx; retf; ret 0x19cf; 
0x0000000000050e74: xor eax, 0x400000; and eax, 0x7fffffff; cmp eax, 0x7fc00000; seta al; movzx eax, al; ret; 
0x000000000008c768: xor eax, 0x48000026; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000106bd2: xor eax, 0x527997d1; ret; 
0x000000000004d350: xor eax, 0x540f000b; or eax, 0x7e766; divss xmm0, xmm1; ret; 
0x00000000000e9964: xor eax, 0x5d3d0555; ret; 
0x00000000000fccd9: xor eax, 0x65530669; ret; 
0x00000000000d5b56: xor eax, 0x76e1d7bc; stosb byte ptr [rdi], al; ret; 
0x000000000004a4e5: xor eax, 0x815f6; orps xmm0, xmm6; add rsp, 0x28; ret; 
0x00000000000209d2: xor eax, 0x8c48348; ret; 
0x0000000000001636: xor eax, 0x9b39a10f; test al, 0x84; ret; 
0x00000000000d8d5a: xor eax, 0xa1074cf3; mov edi, 0xc71ad288; xchg esi, eax; ret 0x3c4b; 
0x0000000000026ffb: xor eax, 0xa42e0; orpd xmm0, xmm6; add rsp, 0x28; ret; 
0x0000000000015e3c: xor eax, 0xb5c77; ret; 
0x0000000000015e2b: xor eax, 0xb5c88; fchs; ret; 
0x0000000000012d65: xor eax, 0xb8d6a; add rsp, 0x10; pop rbx; ret; 
0x00000000000ddb7b: xor eax, 0xbfd1988c; sbb dword ptr [rbx - 0x4cb3408c], eax; ret; 
0x00000000000501aa: xor eax, 0xc0ef0f66; sub eax, 0x7f; cvtsi2ss xmm0, eax; ret; 
0x0000000000100e1d: xor eax, 0xc275419d; int1; ret; 
0x0000000000087f47: xor eax, 0xc5000002; ret; 
0x0000000000043349: xor eax, 0xc76400; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000000000495e5: xor eax, 0xc76400; and al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000442e1: xor eax, 0xc76400; and dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cadb2: xor eax, 0xe1cfa02b; sub ah, byte ptr [rax]; ret 0x2b19; 
0x0000000000076947: xor eax, 0xe9fffffb; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000b01d6: xor eax, 0xf9c50003; sub dl, al; ret; 
0x00000000000fcd90: xor eax, 0xfef86e90; ret 0x4018; 
0x0000000000012860: xor eax, dword ptr [0x28]; jne 0x128bf; add rsp, 0x28; ret; 
0x00000000000172b5: xor eax, dword ptr [0x28]; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017396: xor eax, dword ptr [0x28]; jne 0x174a0; add rsp, 0x38; ret; 
0x0000000000018458: xor eax, dword ptr [0x28]; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860c: xor eax, dword ptr [0x28]; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3bc: xor eax, dword ptr [0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c366: xor eax, dword ptr [0x28]; jne 0x1c681; leave; ret; 
0x00000000000279bf: xor eax, dword ptr [0x28]; jne 0x27cf1; add rsp, 0x28; ret; 
0x0000000000030d2b: xor eax, dword ptr [0x28]; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000049b8f: xor eax, dword ptr [0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004f041: xor eax, dword ptr [0x28]; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000005061b: xor eax, dword ptr [0x28]; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b42: xor eax, dword ptr [0x28]; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c327: xor eax, dword ptr [0x28]; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006c24e: xor eax, dword ptr [0x28]; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc6e: xor eax, dword ptr [0x28]; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc6: xor eax, dword ptr [0x28]; jne 0x6fe3c; add rsp, 0x48; ret; 
0x000000000008689b: xor eax, dword ptr [0x28]; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086994: xor eax, dword ptr [0x28]; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087205: xor eax, dword ptr [0x28]; jne 0x874d9; add rsp, 0x28; ret; 
0x000000000009d787: xor eax, dword ptr [0x28]; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b16df: xor eax, dword ptr [0x28]; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000dbc1: xor eax, dword ptr [0x28]; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfd7: xor eax, dword ptr [0x28]; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e3: xor eax, dword ptr [0x28]; jne 0xf34f; add rsp, 0x28; ret; 
0x0000000000044079: xor eax, dword ptr [rax + rax]; add byte ptr [rcx], ch; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x00000000001003f3: xor eax, dword ptr [rax]; add byte ptr [rax - 0x4e8de8cf], al; mov spl, 0xf1; iretd; ret 0x8ecf; 
0x000000000011305f: xor eax, dword ptr [rax]; add byte ptr [rsi + rbp + 0x2b500000], al; add byte ptr [rax], al; ret 0x27; 
0x000000000009a9c1: xor eax, dword ptr [rbp + 0xff2000a]; pop rcx; ret; 
0x000000000000bdce: xor eax, eax; add rsp, 0x18; ret; 
0x000000000000bd79: xor eax, eax; add rsp, 0x48; ret; 
0x0000000000019dba: xor eax, eax; and dx, 0x7fff; cmp dx, 0x7fff; sete al; and eax, ecx; ret; 
0x000000000001b0a5: xor eax, eax; cmp ecx, edx; setbe al; and eax, esi; ret; 
0x000000000004e618: xor eax, eax; cmp edx, 0x7f800000; setne al; add eax, 0x7fffffff; ret; 
0x00000000000804a8: xor eax, eax; cmp r8, rcx; setl al; lea eax, [rax + rax - 1]; ret; 
0x000000000001b041: xor eax, eax; cmp r9d, r8d; sete al; and eax, edx; ret; 
0x000000000001b1d0: xor eax, eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x000000000004337e: xor eax, eax; mov edx, 1; ucomisd xmm1, xmm0; setp al; cmovne eax, edx; ret; 
0x00000000000519ba: xor eax, eax; movd xmm0, eax; mov eax, 1; movss dword ptr [rdi], xmm0; ret; 
0x0000000000044062: xor eax, eax; movq xmm0, rax; mov eax, 1; movsd qword ptr [rdi], xmm0; ret; 
0x00000000000440bf: xor eax, eax; movsd qword ptr [rdi], xmm0; ret; 
0x0000000000051a04: xor eax, eax; movss dword ptr [rdi], xmm0; ret; 
0x000000000002e906: xor eax, eax; or edx, ecx; setne al; add eax, 0x7fffffff; ret; 
0x000000000006ac14: xor eax, eax; or rdx, rcx; setne al; add eax, 0x7fffffff; ret; 
0x0000000000074d23: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000074978: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000001b7c9: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000049741: xor eax, eax; pop rbx; ret; 
0x000000000000bd20: xor eax, eax; ret; 
0x000000000000c382: xor eax, eax; stmxcsr dword ptr [rdi + 4]; ret; 
0x00000000000c8c8c: xor eax, eax; test edi, edi; jne 0xc8bc0; add rsp, 0x38; ret; 
0x000000000008046b: xor eax, eax; test rcx, rcx; setne al; neg eax; ret; 
0x000000000004465a: xor eax, eax; test rdx, rdx; jns 0x446e0; pop rbx; pop rbp; ret; 
0x0000000000044bb3: xor eax, eax; test rdx, rdx; jns 0x44c68; pop rbx; pop rbp; ret; 
0x000000000004db53: xor eax, ebx; pop rbx; movd xmm0, eax; pop rbp; ret; 
0x0000000000051946: xor eax, esi; xor edx, ecx; cmp edx, eax; setle al; movzx eax, al; ret; 
0x0000000000043fdf: xor eax, esi; xor rdx, rcx; cmp rdx, rax; setle al; movzx eax, al; ret; 
0x0000000000101877: xor eax, esp; iretd; ret 0x10f4; 
0x00000000000dc154: xor ebp, ebx; cmp al, 0x11; ret 0xead4; 
0x00000000001906a5: xor ebp, esi; call rax; 
0x00000000000b39ab: xor ebx, dword ptr [r11 + rcx*8 - 0x3b]; ret; 
0x00000000000b9eb3: xor ebx, dword ptr [r8 + rcx*8 - 0x3c]; jns 0xb9ee3; ret; 
0x0000000000092564: xor ebx, dword ptr [rax + 0x14]; and al, 0xc4; ret 0xb9b9; 
0x00000000000dd7da: xor ebx, dword ptr [rax + 0x3fa26891]; scasd eax, dword ptr [rdi]; pop rdx; xor al, 0x2d; std; call rcx; 
0x000000000008ea5e: xor ebx, dword ptr [rax + 0xd]; ret; 
0x00000000000bfd7e: xor ebx, dword ptr [rax + rcx*8 - 0x3b]; ret; 
0x00000000000a5b11: xor ebx, dword ptr [rax + rcx*8 - 0x3b]; sub ebx, dword ptr [rax + rdx*8 - 0x3c]; ret; 
0x00000000000b9eb4: xor ebx, dword ptr [rax + rcx*8 - 0x3c]; jns 0xb9ee3; ret; 
0x00000000000b8e69: xor ebx, dword ptr [rbp + rcx*8 - 0x3b]; ret; 
0x000000000009298a: xor ebx, dword ptr [rbp + rcx*8 - 0x3c]; ret 0x99b1; 
0x00000000000a8fb6: xor ebx, dword ptr [rbp + rcx*8 - 0x3c]; ret; 
0x00000000000b39ac: xor ebx, dword ptr [rbx + rcx*8 - 0x3b]; ret; 
0x00000000000b3617: xor ebx, dword ptr [rbx + rcx*8 - 0x3b]; sti; pop rcx; ret; 
0x0000000000095972: xor ebx, dword ptr [rcx + 0xc]; and al, 0xc4; ret 0x99b1; 
0x00000000000abf79: xor ebx, dword ptr [rcx + 0xc]; and al, 0xc4; ret; 
0x0000000000087636: xor ebx, dword ptr [rcx + 0xc]; ret 0x8d48; 
0x00000000000c23a5: xor ebx, dword ptr [rdi + rcx*8 - 0x3b]; ret; 
0x00000000000c1879: xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc18a7; ret 0xc1c4; 
0x00000000000c270e: xor ebx, dword ptr [rdx + rcx*8 - 0x3b]; jns 0xc273c; ret 0xc1c4; 
0x00000000000a7f41: xor ebx, dword ptr [rsi + rcx*8 - 0x3c]; ret; 
0x00000000000c0fbd: xor ebx, dword ptr [rsp + rcx*8 - 0x3b]; ret; 
0x0000000000112464: xor ebx, ebp; ret; 
0x000000000000bfd5: xor ecx, dword ptr [0x28]; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c26b: xor ecx, dword ptr [0x28]; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2cf: xor ecx, dword ptr [0x28]; jne 0xc2dd; add rsp, 0x18; ret; 
0x00000000000724a4: xor ecx, dword ptr [rax - 0x7b]; test byte ptr [rdi], -0x78; ret 0; 
0x0000000000042f19: xor ecx, dword ptr [rbx + 0x1f0ffffc]; add dl, dh; mulps xmm1, xmm1; movapd xmm0, xmm1; ret; 
0x000000000004cfea: xor ecx, dword ptr [rbx]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0xf]; 
0x00000000000b6b69: xor ecx, dword ptr [rcx + 6]; add ch, al; ret; 
0x0000000000078e61: xor ecx, dword ptr [rdi]; sub dword ptr [rbx + 0x10], edi; add rsp, 0x70; pop rbx; ret; 
0x000000000008cf62: xor ecx, dword ptr [rdx]; add ch, al; ret; 
0x00000000000d6388: xor ecx, dword ptr [rsp + rbx*2 - 0x5e80c12d]; mov edi, 0x2a73307e; out dx, al; ret 0x3fbb; 
0x0000000000043290: xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000e893e: xor edi, dword ptr [rdi - 0x1f491a0b]; ret; 
0x00000000000f11ee: xor edi, dword ptr [rdi]; add al, dl; lodsd eax, dword ptr [rsi]; ret; 
0x00000000000e8906: xor edi, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdx], dl; ret; 
0x00000000000e9064: xor edi, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x00000000000784fb: xor edi, ecx; jmp qword ptr [rsi - 0x70]; 
0x0000000000018561: xor edi, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000076860: xor edi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000c8c8a: xor edi, edi; xor eax, eax; test edi, edi; jne 0xc8bc0; add rsp, 0x38; ret; 
0x0000000000098711: xor edi, esi; jmp qword ptr [rsi - 0x70]; 
0x000000000004859b: xor edi, esp; jmp qword ptr [rsi - 0x70]; 
0x000000000002e900: xor edx, 0x7ff00000; xor eax, eax; or edx, ecx; setne al; add eax, 0x7fffffff; ret; 
0x000000000000be59: xor edx, dword ptr [0x28]; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bf1f: xor edx, dword ptr [0x28]; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf68: xor edx, dword ptr [0x28]; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000c31a: xor edx, dword ptr [0x28]; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35c: xor edx, dword ptr [0x28]; jne 0xc36a; add rsp, 0x18; ret; 
0x00000000000b8fa9: xor edx, dword ptr [rdx + 0x39c50005]; push rsp; ret; 
0x000000000006ac12: xor edx, eax; xor eax, eax; or rdx, rcx; setne al; add eax, 0x7fffffff; ret; 
0x000000000018fdb5: xor edx, ebp; call rax; 
0x0000000000051948: xor edx, ecx; cmp edx, eax; setle al; movzx eax, al; ret; 
0x0000000000043fe2: xor edx, ecx; cmp rdx, rax; setle al; movzx eax, al; ret; 
0x0000000000020952: xor edx, edx; mov eax, edx; fstp xword ptr [rbx]; add rsp, 0x10; pop rbx; ret; 
0x000000000006ef49: xor edx, edx; mov qword ptr [rsp], rdx; movhps xmm0, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000c10d: xor esi, dword ptr [0x28]; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c3dc: xor esi, dword ptr [0x28]; jne 0xc3fc; add rsp, 0x18; ret; 
0x00000000000e5852: xor esi, dword ptr [rdi + 0x52]; ret 0xbfd3; 
0x0000000000105efb: xor esi, ecx; add ebp, edi; mov edi, 0x121a3180; ret 0x3f9; 
0x00000000000ec7e9: xor esi, esi; xchg ecx, eax; ret 0x3f31; 
0x000000000007b119: xor esp, dword ptr [rcx + 0xf660008]; outsd dx, dword ptr [rsi]; ret 0x3ae8; 
0x00000000000e847b: xor esp, dword ptr [rdx + 0x48]; xor byte ptr [rbp + 0x52b89211], bh; xchg edi, eax; ret 0x3f39; 
0x000000000010926d: xor esp, dword ptr [rsi]; jb 0x1092af; ret 0xe192; 
0x000000000019037d: xor esp, ebp; call qword ptr [rax + 0x66]; 
0x0000000000048791: xor esp, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000001027d2: xor esp, esi; call qword ptr [rbx + 0x6d]; 
0x000000000008e748: xor r13b, al; ret; 
0x00000000000e9063: xor r15d, dword ptr [rsi + 0x394dbd2a]; xchg byte ptr [rdi], cl; ret; 
0x000000000001285f: xor rax, qword ptr [0x28]; jne 0x128bf; add rsp, 0x28; ret; 
0x00000000000172b4: xor rax, qword ptr [0x28]; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017395: xor rax, qword ptr [0x28]; jne 0x174a0; add rsp, 0x38; ret; 
0x0000000000018457: xor rax, qword ptr [0x28]; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860b: xor rax, qword ptr [0x28]; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3bb: xor rax, qword ptr [0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c365: xor rax, qword ptr [0x28]; jne 0x1c681; leave; ret; 
0x00000000000279be: xor rax, qword ptr [0x28]; jne 0x27cf1; add rsp, 0x28; ret; 
0x0000000000030d2a: xor rax, qword ptr [0x28]; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000049b8e: xor rax, qword ptr [0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004f040: xor rax, qword ptr [0x28]; jne 0x4f069; add rsp, 0x28; ret; 
0x000000000005061a: xor rax, qword ptr [0x28]; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b41: xor rax, qword ptr [0x28]; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c326: xor rax, qword ptr [0x28]; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006c24d: xor rax, qword ptr [0x28]; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc6d: xor rax, qword ptr [0x28]; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc5: xor rax, qword ptr [0x28]; jne 0x6fe3c; add rsp, 0x48; ret; 
0x000000000008689a: xor rax, qword ptr [0x28]; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086993: xor rax, qword ptr [0x28]; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087204: xor rax, qword ptr [0x28]; jne 0x874d9; add rsp, 0x28; ret; 
0x000000000009d786: xor rax, qword ptr [0x28]; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b16de: xor rax, qword ptr [0x28]; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000dbc0: xor rax, qword ptr [0x28]; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfd6: xor rax, qword ptr [0x28]; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e2: xor rax, qword ptr [0x28]; jne 0xf34f; add rsp, 0x28; ret; 
0x000000000001285e: xor rax, qword ptr fs:[0x28]; jne 0x128bf; add rsp, 0x28; ret; 
0x00000000000172b3: xor rax, qword ptr fs:[0x28]; jne 0x172fc; add rsp, 0x38; ret; 
0x0000000000017394: xor rax, qword ptr fs:[0x28]; jne 0x174a0; add rsp, 0x38; ret; 
0x0000000000018456: xor rax, qword ptr fs:[0x28]; jne 0x1855d; add rsp, 0x38; ret; 
0x000000000001860a: xor rax, qword ptr fs:[0x28]; jne 0x1863c; add rsp, 0x38; ret; 
0x000000000001a3ba: xor rax, qword ptr fs:[0x28]; jne 0x1a416; add rsp, 0x58; ret; 
0x000000000001c364: xor rax, qword ptr fs:[0x28]; jne 0x1c681; leave; ret; 
0x00000000000279bd: xor rax, qword ptr fs:[0x28]; jne 0x27cf1; add rsp, 0x28; ret; 
0x0000000000030d29: xor rax, qword ptr fs:[0x28]; jne 0x30d5a; add rsp, 0x28; ret; 
0x0000000000049b8d: xor rax, qword ptr fs:[0x28]; jne 0x49bdf; add rsp, 0x58; ret; 
0x000000000004f03f: xor rax, qword ptr fs:[0x28]; jne 0x4f069; add rsp, 0x28; ret; 
0x0000000000050619: xor rax, qword ptr fs:[0x28]; jne 0x50640; add rsp, 0x18; ret; 
0x0000000000059b40: xor rax, qword ptr fs:[0x28]; jne 0x5c03b; add rsp, 0xb8; ret; 
0x000000000005c325: xor rax, qword ptr fs:[0x28]; jne 0x5e659; add rsp, 0xb8; ret; 
0x000000000006c24c: xor rax, qword ptr fs:[0x28]; jne 0x6c33e; add rsp, 0x48; ret; 
0x000000000006fc6c: xor rax, qword ptr fs:[0x28]; jne 0x6fd53; add rsp, 0x48; ret; 
0x000000000006fdc4: xor rax, qword ptr fs:[0x28]; jne 0x6fe3c; add rsp, 0x48; ret; 
0x0000000000086899: xor rax, qword ptr fs:[0x28]; jne 0x8690d; add rsp, 0x48; ret; 
0x0000000000086992: xor rax, qword ptr fs:[0x28]; jne 0x869ed; add rsp, 0x48; ret; 
0x0000000000087203: xor rax, qword ptr fs:[0x28]; jne 0x874d9; add rsp, 0x28; ret; 
0x000000000009d785: xor rax, qword ptr fs:[0x28]; jne 0x9da59; add rsp, 0x28; ret; 
0x00000000000b16dd: xor rax, qword ptr fs:[0x28]; jne 0xb1a01; add rsp, 0x28; ret; 
0x000000000000dbbf: xor rax, qword ptr fs:[0x28]; jne 0xdd6d; add rsp, 0x38; ret; 
0x000000000000dfd5: xor rax, qword ptr fs:[0x28]; jne 0xe059; add rsp, 0x18; ret; 
0x000000000000f2e1: xor rax, qword ptr fs:[0x28]; jne 0xf34f; add rsp, 0x28; ret; 
0x0000000000043fde: xor rax, rsi; xor rdx, rcx; cmp rdx, rax; setle al; movzx eax, al; ret; 
0x000000000000bfd4: xor rcx, qword ptr [0x28]; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c26a: xor rcx, qword ptr [0x28]; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2ce: xor rcx, qword ptr [0x28]; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000bfd3: xor rcx, qword ptr fs:[0x28]; jne 0xbfef; add rsp, 0x18; ret; 
0x000000000000c269: xor rcx, qword ptr fs:[0x28]; jne 0xc279; add rsp, 0x18; ret; 
0x000000000000c2cd: xor rcx, qword ptr fs:[0x28]; jne 0xc2dd; add rsp, 0x18; ret; 
0x000000000000be58: xor rdx, qword ptr [0x28]; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bf1e: xor rdx, qword ptr [0x28]; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf67: xor rdx, qword ptr [0x28]; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000c319: xor rdx, qword ptr [0x28]; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35b: xor rdx, qword ptr [0x28]; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000000be57: xor rdx, qword ptr fs:[0x28]; jne 0xbe67; add rsp, 0x38; ret; 
0x000000000000bf1d: xor rdx, qword ptr fs:[0x28]; jne 0xbf2d; add rsp, 0x18; ret; 
0x000000000000bf66: xor rdx, qword ptr fs:[0x28]; jne 0xbf76; add rsp, 0x18; ret; 
0x000000000000c318: xor rdx, qword ptr fs:[0x28]; jne 0xc328; add rsp, 0x18; ret; 
0x000000000000c35a: xor rdx, qword ptr fs:[0x28]; jne 0xc36a; add rsp, 0x18; ret; 
0x000000000006ac11: xor rdx, rax; xor eax, eax; or rdx, rcx; setne al; add eax, 0x7fffffff; ret; 
0x0000000000043fe1: xor rdx, rcx; cmp rdx, rax; setle al; movzx eax, al; ret; 
0x000000000000c10c: xor rsi, qword ptr [0x28]; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c3db: xor rsi, qword ptr [0x28]; jne 0xc3fc; add rsp, 0x18; ret; 
0x000000000000c10b: xor rsi, qword ptr fs:[0x28]; jne 0xc1ad; add rsp, 0x38; ret; 
0x000000000000c3da: xor rsi, qword ptr fs:[0x28]; jne 0xc3fc; add rsp, 0x18; ret; 
0x000000000019037c: xor rsp, rbp; call qword ptr [rax + 0x66]; 
0x00000000000e9a20: xor spl, byte ptr [rcx - 0x80]; xlatb; jmp qword ptr [rcx]; 
0x00000000000d7083: xor spl, byte ptr [rdi - 0x3ce14040]; push rax; ret 0x7477; 
0x0000000000049622: xorpd xmm0, xmm1; ret; 
0x0000000000044e48: xorpd xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000044ce0: xorpd xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x000000000003cbcb: xorpd xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000004552a: xorpd xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x0000000000049623: xorps xmm0, xmm1; ret; 
0x000000000004ee53: xorps xmm0, xmmword ptr [rip + 0x7cc86]; ret; 
0x000000000004a0ad: xorps xmm0, xmmword ptr [rip + 0x81a2c]; ret; 
0x000000000005069b: xorps xmm1, xmmword ptr [rip + 0x7b43e]; pop rbx; movaps xmm0, xmm1; ret; 
0x0000000000044e49: xorps xmm1, xmmword ptr [rip + 0x86490]; add rsp, 0x18; ret; 
0x0000000000044ce1: xorps xmm1, xmmword ptr [rip + 0x865f8]; ret; 
0x000000000003cbcc: xorps xmm1, xmmword ptr [rip + 0x8e70d]; pop rbx; movapd xmm0, xmm1; ret; 
0x000000000004552b: xorps xmm2, xmm0; movapd xmm0, xmm1; movapd xmm1, xmm2; ret; 
0x00000000000023ef: xsavec ptr [rcx]; call 0xffffffff82f4948d; mov esp, 0x87919e45; ret; 

21736 gadgets found
