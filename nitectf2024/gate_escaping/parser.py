#!/usr/bin/env python3



def parser(opcodes):
#    instructions = {'svc':0xff,'sub':0x20,'mov':0x22,'mov_mem':0x24,'invor':0x26,'imm':0x28,'mov_from_mem':0x2a,'jne':0x2b,'invadd':0x2c,'add':0x30,'lsl':0x5a,'mul':0x5e,'lsr':0x67,'complex_math':0x72,'more_complex_math':0x8f,'gadget':0x91,'jump':0x98,'and':0xbf,'or':0xb9}
    instructions = {0xff:'svc',0x20:'sub',0x22:'mov',0x24:'mov_mem',0x26:'invor',0x28:'imm',0x2a:'mov_from_mem',0x2b:'conditional_jump',0x2c:'invadd',0x30:'add',0x5a:'lsl',0x5e:'mul',0x67:'lsr',0x72:'complex_math',0x8f:'more_complex_math',0x91:'gadget',0x98:'jump',0xbf:'and',0xb9:'or',0xdd:'atoi_move'}
    registers = {0xe1:'al',0xe2:'bl',0xe3:'cl',0xe4:'dl'}
    syscalls = {0x2e:"write",0x2d:"read",0x23:"open",0x25:"exit"}
    i = 0
    while(i < len(opcodes)):
        op = opcodes[i]
        if(op == 0x98):
            print(str(i) + "." + instructions.get(op) + " " + registers.get(opcodes[i+1]))
            i+=2
        elif(op == 0x91):
            print(str(i) + "." + instructions.get(op))
            i+=1
        elif(op == 0xff):
            print(str(i) + "." + instructions.get(op) + " " + syscalls.get(opcodes[i+1]))
            i+=2
        elif(op == 43):
            print(str(i) + "." + instructions.get(op) + " " + registers.get(opcodes[i+2]) + " " + str(opcodes[i+1]))
            i+=3
        elif(op == 0x5e):
            print(str(i) + "." + instructions.get(op) + " " + registers.get(opcodes[i+1]) + " " + registers.get(opcodes[i+2]))
            i+=3
        elif(op == 0x30):
            print(str(i) + "." + instructions.get(op) + " " + registers.get(opcodes[i+1]) + " " + registers.get(opcodes[i+2]))
            i+=3

        else:
            try:
                print(str(i) + "." + instructions.get(op) + "  " + registers.get(opcodes[i+1]) + "  " + str(opcodes[i+2]))
            except Exception:
                print(op)
                print(opcodes[i+1])
                print(opcodes[i+2])
                exit()
            i+=3



opcodes = [ 0x28, 0xe1, 0x01, 0x28, 0xe2, 0x00, 0x28, 0xe3, 0x18, 0xff, 0x2e, 0x28, 0xe1, 0x00, 0x28, 0xe2, 0x98, 0x28, 0xe3, 0x02, 0xff, 0x2d, 0xdd, 0xe1, 0x98, 0x28, 0xe2, 0x19, 0x5e, 0xe1, 0xe2, 0x28, 0xe2, 0x28, 0x30, 0xe1, 0xe2, 0x2b, 0x00, 0xe1, 0x28, 0xe1, 0x01, 0x28, 0xe2, 0x18, 0x28, 0xe3, 0x28, 0xff, 0x2e, 0x2b, 0x00, 0xe4, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x28, 0xe1, 0x01, 0x28, 0xe2, 0x40, 0x28, 0xe3, 0x1d, 0xff, 0x2e, 0x28, 0xe1, 0x00, 0x28, 0xe2, 0xa0, 0x28, 0xe3, 0x60, 0xff, 0x2d, 0x2b, 0x00, 0xe4, 0x28, 0xe1, 0x01, 0x28, 0xe2, 0x5d, 0x28, 0xe3, 0x27, 0xff, 0x2e, 0x2b, 0x00, 0xe4, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x28, 0xe1, 0x01, 0x28, 0xe2, 0x84, 0x28, 0xe3, 0x13, 0xff, 0x2e, 0xff, 0x25 ]
parser(opcodes)
