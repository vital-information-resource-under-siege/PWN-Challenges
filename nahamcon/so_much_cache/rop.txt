


Gadgets
=======


0x00000000004c3080: adc ah, 0xf7; call qword ptr [rcx]; 
0x000000000048c70b: adc ah, byte ptr [rax + rax]; call rax; 
0x0000000000421052: adc ah, byte ptr [rdi + 0x3d83002a]; call rcx; 
0x0000000000430c9d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004a4424: adc ah, ch; clc; call qword ptr [rax]; 
0x000000000042a83f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a8a9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c3608: adc al, 0; add byte ptr [rax], al; add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x000000000049cc95: adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004734f2: adc al, 0; add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x00000000004c1e38: adc al, 0; add byte ptr [rax], al; jl 0xc1e6c; add byte ptr [rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004c3938: adc al, 0; add byte ptr [rax], al; jl 0xc3987; add byte ptr [rax], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004c6e38: adc al, 0; add byte ptr [rax], al; jl 0xc6ebc; add byte ptr [rax], al; or ah, 0xfa; jmp rsp; 
0x00000000004bfb78: adc al, 0; add byte ptr [rax], al; mov esp, 0x4000000b; cmc; hlt; call qword ptr [rax]; 
0x0000000000472ee2: adc al, 0; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000004737ea: adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000004737ea: adc al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004bf550: adc al, 0; add byte ptr [rax], al; xchg esp, eax; add eax, 0x5b680000; hlt; call qword ptr [rax]; 
0x00000000004c39f0: adc al, 0; add byte ptr [rax], al; xor al, 0x4a; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x0000000000430e25: adc al, 0x13; jmp rdx; 
0x000000000042f415: adc al, 0x16; sub eax, edx; ret; 
0x0000000000424820: adc al, 0x16; test r8d, r8d; je 0x24828; xchg edx, eax; sub eax, edx; ret; 
0x0000000000440f5a: adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x000000000049c98a: adc al, 0x24; mov edi, 1; call rax; 
0x000000000044333a: adc al, 0x24; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000047c931: adc al, 0x25; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x48; mov dword ptr [rip + 0x2514d1], eax; add rsp, 8; ret; 
0x000000000040edd8: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000419cc7: adc al, 0x41; pop rsp; ret; 
0x000000000043cc20: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x0000000000417a03: adc al, 0x48; mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x00000000004c4cd4: adc al, 0x5d; add byte ptr [rax], al; test al, 0xbb; clc; call qword ptr [rsi]; 
0x0000000000420eba: adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x00000000004406c6: adc al, 0x89; ret 0xdaf7; 
0x000000000042bcd0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042a3fe: adc al, 0x91; sub eax, edx; ret; 
0x0000000000430e21: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f583: adc al, 0xa; sub eax, edx; ret; 
0x000000000049ebcb: adc al, 0xb6; jmp qword ptr [rsi - 0x70]; 
0x00000000004737e8: adc al, 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000004404a8: adc al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000440508: adc al, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000440568: adc al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000473658: adc al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049d5b0: adc al, 0xb8; or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004beeb4: adc al, 0xd6; std; jmp rsp; 
0x0000000000401999: adc al, 0xdd; fsubr dword ptr [rsi - 0x7cb7ff94]; ret; 
0x000000000049131a: adc al, 0xe; lea rcx, [rip + 0x1717d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f3ba: adc al, 0xe; lea rcx, [rip + 0x190dd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bf21: adc al, 0xe; lea rcx, [rip + 0x7c576]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a3f1: adc al, 0xe; lea rcx, [rip + 0x7e0a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000423be1: adc al, 0xe; sub eax, edx; ret; 
0x000000000049cd6a: adc al, 0xf7; add rsp, 8; ret; 
0x00000000004a3fe5: adc al, 0xf8; jmp qword ptr [rax]; 
0x00000000004a493d: adc al, 0xf9; call qword ptr [rax + 0x14]; 
0x00000000004a4901: adc al, 0xf9; call rax; 
0x00000000004a47c1: adc al, 0xf9; inc dword ptr [rdx]; adc al, 0xf9; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004a48fd: adc al, 0xf9; jmp qword ptr [rax + 0x14]; 
0x00000000004a4881: adc al, 0xf9; jmp rsp; 
0x00000000004a47c5: adc al, 0xf9; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004a487d: adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x00000000004be2e9: adc al, 0xfd; inc dword ptr [rax + 0x60fffd16]; sbb ch, bh; inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x000000000047f342: adc al, 3; add byte ptr [rax], al; or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x000000000048a0ee: adc al, 9; ret 0xa074; 
0x00000000004a448c: adc al, ah; clc; call qword ptr [rax - 0x35]; 
0x00000000004a448c: adc al, ah; clc; call qword ptr [rax - 0x35]; clc; jmp qword ptr [rax]; 
0x000000000045064c: adc al, bl; insb byte ptr [rdi], dx; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x000000000042a9e7: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aa51: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048155a: adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000047bf5b: adc al, ch; lahf; std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x000000000047f50c: adc al, ch; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040db37: adc al, ch; push rbx; ret; 
0x000000000045cbc7: adc al, ch; ret; 
0x000000000047e35a: adc bh, byte ptr [rax]; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000499bce: adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004a43a8: adc bh, ch; clc; call qword ptr [rax]; 
0x00000000004a4711: adc bh, cl; call qword ptr [rax + 0x1a]; 
0x00000000004a4711: adc bh, cl; call qword ptr [rax + 0x1a]; stc; call rax; 
0x00000000004a490d: adc bh, cl; inc dword ptr [rax + 0x12]; stc; jmp rax; 
0x00000000004a494d: adc bh, cl; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x00000000004a4791: adc bh, cl; jmp qword ptr [rdx]; 
0x00000000004a4911: adc bh, cl; jmp rax; 
0x00000000004a48d1: adc bh, cl; push rax; sbb ecx, edi; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x000000000048c98c: adc bh, dh; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000048a692: adc bl, ch; jno 0x8a6df; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000466524: adc bl, ch; ret 0x8348; 
0x00000000004361b0: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000427894: adc bl, dh; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000043cbf6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc16: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c566: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c556: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cc77: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc97: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cbb7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c527: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cd78: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6c8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004361af: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043cbf5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc15: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c565: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c555: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cc76: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc96: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cbb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c526: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000041429f: adc byte ptr [r11 + 0x15], sil; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000047d070: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000414136: adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000498b60: adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000450d8d: adc byte ptr [r15], cl; xchg ebx, eax; ret 0x3948; 
0x00000000004518eb: adc byte ptr [r15], r9b; xchg ebx, eax; ret 0x3949; 
0x0000000000450d86: adc byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000480e6f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000047af2d: adc byte ptr [r8 + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x0000000000417b3c: adc byte ptr [r8 - 0x77], cl; ret 0x348; 
0x0000000000415cac: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047a0c4: adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000441a32: adc byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004116f3: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004117a8: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000047afa3: adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a762: adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x0000000000440adc: adc byte ptr [rax + 0x101], bh; syscall; 
0x000000000045b13e: adc byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x000000000048a28c: adc byte ptr [rax + 0x29], cl; ret; 
0x000000000043c99a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x680eb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x6868b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000419883: adc byte ptr [rax + 0x39], cl; ret 0xef75; 
0x0000000000450d87: adc byte ptr [rax + 0x39], cl; ret; 
0x00000000004453ff: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000443ef0: adc byte ptr [rax + 0x4800443e], ah; mov dword ptr [rax + 8], edx; ret; 
0x0000000000443eef: adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x0000000000480e70: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000049a3ca: adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x000000000048ad2e: adc byte ptr [rax + 1], cl; ret; 
0x0000000000440b5e: adc byte ptr [rax + 3], bh; syscall; 
0x000000000047af2e: adc byte ptr [rax + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000040043d: adc byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x000000000047d3e4: adc byte ptr [rax - 0x6df0fe06], al; ret 0x8348; 
0x00000000004279b0: adc byte ptr [rax - 0x73], cl; jbe 0x279c5; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x00000000004279b4: adc byte ptr [rax - 0x73], cl; jg 0x279c9; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000473905: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000473904: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004816cc: adc byte ptr [rax - 0x74b80000], 0x75; add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x00000000004416a2: adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000448608: adc byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x0000000000448f6b: adc byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000042d82a: adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000049a201: adc byte ptr [rax - 0x77], cl; cmp al, 0x24; mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x0000000000412e88: adc byte ptr [rax - 0x77], cl; jae 0x12ebd; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000046c1d7: adc byte ptr [rax - 0x77], cl; jo 0x6c1ec; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047cb0c: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046d50c: adc byte ptr [rax - 0x77], cl; or cl, byte ptr [rax - 0x77]; ret; 
0x000000000046d133: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000417b3d: adc byte ptr [rax - 0x77], cl; ret 0x348; 
0x000000000046884f: adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x0000000000482b84: adc byte ptr [rax - 0x77], cl; ret 0x875; 
0x000000000041d8e1: adc byte ptr [rax - 0x77], cl; ret 0x8d4e; 
0x000000000040e773: adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000497419: adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x0000000000433b0f: adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000415cad: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416077: adc byte ptr [rax - 0x77], cl; sbb r11b, bpl; fldenv [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000441168: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411a9: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004a1121: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x0000000000452ec8: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x77], 0xc7; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x00000000004392c7: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000439303: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000401a4f: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x0000000000421dc3: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000420d9b: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000048b269: adc byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000400dba: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000450bc3: adc byte ptr [rax - 1], bh; add rsp, 0xd0; ret; 
0x000000000047591c: adc byte ptr [rax], al; add byte ptr [rax + 0x9e], bh; syscall; 
0x00000000004af315: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000047d1ee: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c492f53; ret; 
0x000000000047d248: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c492fad; ret; 
0x0000000000423dd0: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000042a7d2: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000042c29c: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042abf1: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046bde1: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440606: adc byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000043f5fa: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004736dd: adc byte ptr [rax], al; add byte ptr [rax], al; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000045ed19: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004af30d: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000437418: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000442904: adc byte ptr [rax], al; jne 0x41e78; mov esi, 3; mov rdi, r12; call rbx; 
0x000000000044297b: adc byte ptr [rax], al; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429bb: adc byte ptr [rax], al; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bfb: adc byte ptr [rax], al; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c5b: adc byte ptr [rax], al; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a1b: adc byte ptr [rax], al; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442c9b: adc byte ptr [rax], al; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c7b: adc byte ptr [rax], al; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044293b: adc byte ptr [rax], al; jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429fb: adc byte ptr [rax], al; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442c3b: adc byte ptr [rax], al; jne 0x4215f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c1b: adc byte ptr [rax], al; jne 0x421d8; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004429db: adc byte ptr [rax], al; jne 0x42264; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bdb: adc byte ptr [rax], al; jne 0x42284; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bbb: adc byte ptr [rax], al; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004428e4: adc byte ptr [rax], al; jne 0x423a5; mov esi, 3; mov rdi, r12; call rbx; 
0x000000000044295b: adc byte ptr [rax], al; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442a9b: adc byte ptr [rax], al; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442adb: adc byte ptr [rax], al; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442abb: adc byte ptr [rax], al; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a7b: adc byte ptr [rax], al; jne 0x42513; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b9b: adc byte ptr [rax], al; jne 0x42533; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b7b: adc byte ptr [rax], al; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044299b: adc byte ptr [rax], al; jne 0x42648; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442a5b: adc byte ptr [rax], al; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b5b: adc byte ptr [rax], al; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b3b: adc byte ptr [rax], al; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a3b: adc byte ptr [rax], al; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b1b: adc byte ptr [rax], al; jne 0x427b1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442afb: adc byte ptr [rax], al; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000048103b: adc byte ptr [rax], al; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x000000000048bd58: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000400c65: adc byte ptr [rax], bh; call rdx; 
0x000000000046d3c8: adc byte ptr [rbp + 0x15], dh; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000419c5a: adc byte ptr [rbp + 0x39], cl; ret; 
0x000000000049ab38: adc byte ptr [rbp + rbp*8 - 0x18], dh; adc byte ptr [rip - 0x74b70009], dh; xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x000000000043c3bf: adc byte ptr [rbp + rcx*4 + 0x1d], cl; xchg byte ptr [r14], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048a235: adc byte ptr [rbp + rcx*4 + 0x34], cl; ret 0x8d4a; 
0x0000000000410e29: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x18; call qword ptr [rbp + 0x18]; 
0x0000000000411b6c: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x30; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x00000000004279b8: adc byte ptr [rbp - 0x1b], dh; mov rax, rdi; ret; 
0x0000000000498b61: adc byte ptr [rbp - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000441517: adc byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], -0x7c; ret 0; 
0x00000000004be358: adc byte ptr [rbp - 3], al; inc eax; std; jmp qword ptr [rax]; 
0x00000000004142a0: adc byte ptr [rbx + 0x15], dh; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000048c5c7: adc byte ptr [rbx + 0x31], bl; test byte ptr [rbx + 0x2413f33d], 0; jmp rax; 
0x0000000000400e96: adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x0000000000400eea: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000049d88c: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000041fcdb: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000410de3: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c18ba: adc byte ptr [rbx + 0xa], cl; ret; 
0x00000000004bfe6f: adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x00000000004c7d4b: adc byte ptr [rbx + 0xe], bl; or byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x000000000043c627: adc byte ptr [rbx + 0xff3174e], cl; jg 0x3c636; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043ccd7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x3cce6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c647: adc byte ptr [rbx + 0xff3184e], cl; jg 0x3c656; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccf7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x3cd06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000414137: adc byte ptr [rbx + 6], dh; movzx eax, byte ptr [rax]; ret; 
0x00000000004175f2: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000043f2aa: adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x00000000004a4a54: adc byte ptr [rbx - 7], bh; push qword ptr [rax]; jnp 0xa4a54; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x000000000043fda8: adc byte ptr [rbx], al; add byte ptr [rax - 0x7d], cl; call 0xffffffffc48745b3; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a3f70: adc byte ptr [rbx], al; clc; jmp rax; 
0x00000000004116f4: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004117a9: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000044d834: adc byte ptr [rcx + 0x39], cl; ret; 
0x00000000004a40c8: adc byte ptr [rcx + 0x7da0fff8], dl; clc; call qword ptr [rax]; 
0x00000000004a40c8: adc byte ptr [rcx + 0x7da0fff8], dl; clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x000000000047afa4: adc byte ptr [rcx + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a763: adc byte ptr [rcx + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000041c740: adc byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000421683: adc byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000420be3: adc byte ptr [rcx + rcx*4 - 0x1a], cl; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000046aa60: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a4190: adc byte ptr [rcx - 0x5dcf0008], ah; clc; call qword ptr [rax - 0x5d]; 
0x000000000049f738: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000040d73c: adc byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000419c07: adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x0000000000423c63: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000048f4f7: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004a4ad0: adc byte ptr [rcx - 0x7edf0007], al; stc; inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a40d0: adc byte ptr [rcx - 8], al; jmp qword ptr [rax]; 
0x00000000004010dd: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043fa24: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004215c9: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000475919: adc byte ptr [rdi + 0x1002], bh; mov eax, 0x9e; syscall; 
0x0000000000475918: adc byte ptr [rdi + 0x1002], r15b; mov eax, 0x9e; syscall; 
0x000000000043fd91: adc byte ptr [rdi + 1], bh; mov eax, 0xe5; syscall; 
0x000000000043fb0f: adc byte ptr [rdi + rdx*8 + 0x48], dh; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000411c25: adc byte ptr [rdi - 1], dl; jo 0x11c62; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004be340: adc byte ptr [rdi*8 - 0x2c26f01], bh; call qword ptr [rax]; 
0x00000000004c3f40: adc byte ptr [rdi], bh; clc; call qword ptr [rax]; 
0x000000000049a2a6: adc byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], ecx; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000043ce33: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000049296b: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049146f: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x000000000049266f: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491d6f: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049206f: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491767: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491a14: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492614: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492914: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492014: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491d14: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000049170c: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049079d: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004905bd: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000490f95: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048feb5: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490db5: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000450d8e: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3948; 
0x00000000004518ec: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3949; 
0x000000000045130c: adc byte ptr [rdi], r9b; xchg ebx, eax; ret 0x3948; 
0x0000000000426ea6: adc byte ptr [rdx + 0x4268d0], bh; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x00000000004c9b94: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + rax], ch; add byte ptr [rax], al; fsubr qword ptr [rbx + 0x39f00000]; std; jmp qword ptr [rdi]; 
0x00000000004c336b: adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x00000000004c0b23: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x00000000004c922c: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004c054b: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x00000000004c0a2b: adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x0000000000468b2a: adc byte ptr [rdx + rdx*8 - 0x76b7d08c], al; ret; 
0x00000000004a41b0: adc byte ptr [rdx - 0x54cf0008], ch; clc; call qword ptr [rax - 0x54]; 
0x00000000004a4a14: adc byte ptr [rdx - 7], bh; jmp qword ptr [rax]; 
0x00000000004c3550: adc byte ptr [rdx], al; clc; jmp qword ptr [rbx]; 
0x00000000004406ce: adc byte ptr [rdx], al; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x000000000043e906: adc byte ptr [rdx], al; jne 0x3e920; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9b6: adc byte ptr [rdx], al; jne 0x3e9d0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x000000000043027b: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043e905: adc byte ptr [rdx], r8b; jne 0x3e920; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9b5: adc byte ptr [rdx], r8b; jne 0x3e9d0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x000000000049ab3c: adc byte ptr [rip - 0x74b70009], dh; xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x00000000004406ac: adc byte ptr [rsi + 0x10], bh; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004c74d3: adc byte ptr [rsi + 0x60d4602], al; pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x000000000042f725: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043012a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000042f720: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000422855: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042830b: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000049e91f: adc byte ptr [rsi + rsi*2 + 0x49], dh; lea ebp, [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000043ce03: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004369ba: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043c607: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004be2ec: adc byte ptr [rsi], 0xfd; jmp qword ptr [rax + 0x18]; 
0x00000000004c8b70: adc byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x000000000048be4f: adc byte ptr [rsp - 4], al; ret; 
0x000000000048be95: adc byte ptr [rsp - 8], al; ret; 
0x0000000000491a17: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004be2e1: adc ch, bh; call rax; 
0x00000000004bcc19: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004a43a4: adc ch, ch; clc; call qword ptr [rax]; 
0x000000000045349f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x0000000000424965: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x00000000004534a2: adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x000000000047d9ca: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000049bf6c: adc cl, byte ptr [rcx + 1]; ret 0x3ee9; 
0x000000000046cdb4: adc cl, byte ptr [rcx - 0x7d]; ret 0x4410; 
0x000000000048b261: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000004be36c: adc cl, dh; cld; jmp qword ptr [rax - 0xd]; 
0x00000000004a4314: adc dh, ah; clc; push rax; out 0xf8, eax; call rax; 
0x0000000000427920: adc dh, bh; ret; 
0x00000000004a4428: adc dh, ch; clc; call qword ptr [rax]; 
0x000000000041c251: adc dh, dh; ret 0xf0f; 
0x00000000004a4910: adc dil, cl; jmp rax; 
0x00000000004a48d0: adc dil, cl; push rax; sbb ecx, edi; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x00000000004a44a0: adc dl, dl; clc; jmp qword ptr [rax - 0x2d]; 
0x000000000048abd3: adc dword ptr [rax + 1], ecx; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x000000000040edd4: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040ee1c: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000412c92: adc dword ptr [rax - 0x39], ecx; ret 0xffd0; 
0x00000000004507e5: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004116e5: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000048b2ac: adc dword ptr [rax - 0x73], ecx; add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x00000000004508bc: adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000480a7c: adc dword ptr [rax - 0x77], ecx; je 0x80aa5; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x0000000000418e0e: adc dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000041759c: adc dword ptr [rax - 0x77], ecx; ret 0x8b48; 
0x000000000047ea7a: adc dword ptr [rax - 0x7d], ecx; ret 0x4808; 
0x000000000042c29b: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x0000000000458cd9: adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x000000000042ab87: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c19f: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047ca12: adc dword ptr [rax], ebx; and eax, 0x8750000; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x0000000000433d56: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x7076e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004bb0d7: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000473900: adc dword ptr [rcx + 0x104e23c1], ecx; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000436c89: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c90: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c97: adc dword ptr [rcx + 7], edi; ret; 
0x00000000004783d0: adc dword ptr [rcx + rcx*4 + 4], ecx; and al, 0x48; lea edi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000436932: adc dword ptr [rcx - 1], ebx; ret; 
0x00000000004368f6: adc dword ptr [rcx - 1], edi; ret; 
0x000000000043692b: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436b29: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368ef: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b22: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e8: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b1b: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e1: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000417a46: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004005cb: adc dword ptr [rdi + 0x4be21c], edi; mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000480c0e: adc dword ptr [rdi + 0x6cc140], edi; add rsp, 8; jmp rax; 
0x0000000000403314: adc dword ptr [rdi + 0x6ccfe0], edi; call rax; 
0x0000000000436924: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eee1: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436de4: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436deb: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df2: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df9: adc dword ptr [rdi - 8], edi; ret; 
0x000000000043691e: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043e430: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000043eedb: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eefc: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000472235: adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000043f021: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f028: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f02f: adc dword ptr [rsi + 3], edx; ret; 
0x000000000043f0be: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c5: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0cc: adc dword ptr [rsi + 7], edx; ret; 
0x000000000043eece: adc dword ptr [rsi - 1], edx; ret; 
0x000000000043eec7: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eec0: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eeb9: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f01b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042ab86: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046d3ca: adc eax, 0x10502b48; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000495038: adc eax, 0x13463; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000495013: adc eax, 0x13488; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004a4939: adc eax, 0x14d0fff9; stc; call qword ptr [rax + 0x14]; 
0x00000000004a48f9: adc eax, 0x14e0fff9; stc; jmp qword ptr [rax + 0x14]; 
0x00000000004a4879: adc eax, 0x14f4fff9; stc; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x00000000004a4935: adc eax, 0x1550fff9; stc; call rax; 
0x00000000004a48f5: adc eax, 0x1560fff9; stc; jmp rax; 
0x00000000004a4875: adc eax, 0x1574fff9; stc; push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x0000000000492a58: adc eax, 0x15a43; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a33: adc eax, 0x15a68; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004910a8: adc eax, 0x173f3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491083: adc eax, 0x17418; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f0b3: adc eax, 0x193e8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049ea72: adc eax, 0x1f0fffb6; add byte ptr [rax - 0x75], cl; add eax, 0x22f2d1; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004a1126: adc eax, 0x20478b48; test rax, rax; je 0xa1137; call rax; 
0x000000000049a3e5: adc eax, 0x23374e; add word ptr [rdx + rax*2], 1; ret; 
0x000000000040f1d8: adc eax, 0x23850f00; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000479bed: adc eax, 0x252596; xor eax, eax; add rsp, 8; ret; 
0x00000000004c053d: adc eax, 0x26700000; cmc; call qword ptr [rbx]; 
0x00000000004c0595: adc eax, 0x26e80000; cmc; jmp qword ptr [rsi]; 
0x0000000000445447: adc eax, 0x285b4c; pop rbx; ret; 
0x0000000000417963: adc eax, 0x2b5c40; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000400ee1: adc eax, 0x2cc75a; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000479c9a: adc eax, 0x3158f80; add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x0000000000479c9d: adc eax, 0x4000003; add rsp, 8; ret; 
0x0000000000479bd9: adc eax, 0x4000003; xor eax, eax; ret; 
0x00000000004b9b3e: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000436665: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436660: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004142a2: adc eax, 0x4800b60f; add esp, 0x98; pop rbx; pop rbp; ret; 
0x000000000044054b: adc eax, 0x50; add byte ptr [rax], al; ret; 
0x00000000004390be: adc eax, 0x6f3dd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d388: adc eax, 0x7b113; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d36e: adc eax, 0x7b12d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bd18: adc eax, 0x7c783; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bcfe: adc eax, 0x7c79d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a168: adc eax, 0x7e333; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a14e: adc eax, 0x7e34d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a711: adc eax, 0x83480000; ret 0xe910; 
0x0000000000476ea9: adc eax, 0x89000003; ret 0xe8c0; 
0x000000000044061a: adc eax, 0xac24448b; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x000000000042f40a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000046ee7a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000040f698: adc eax, 0xf2850f00; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000049d614: adc eax, dword ptr [rax - 0x80]; push qword ptr [rax]; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d674: adc eax, dword ptr [rax - 0x80]; push qword ptr [rax]; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000042bffe: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048fcd9: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048c3b9: adc eax, dword ptr [rcx]; add byte ptr [rax], al; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000049170f: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a159: adc eax, eax; ret; 
0x00000000004a3fdd: adc eax, edi; jmp qword ptr [rax]; 
0x000000000048bcd6: adc eax, edx; pop rbp; pop rbx; ret; 
0x00000000004baf65: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x000000000049c5d2: adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x000000000044327f: adc ecx, dword ptr [rax - 0x39]; ret 0xffd0; 
0x000000000041660a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x00000000004485a1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000044db04: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000044f33c: adc ecx, dword ptr [rcx - 0x77]; add al, 0x24; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x00000000004a4214: adc ecx, eax; clc; jmp rcx; 
0x0000000000416621: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450774: adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4749: adc edi, ecx; call qword ptr [rax]; 
0x00000000004a4905: adc edi, ecx; inc dword ptr [rax + 0x13]; stc; push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x00000000004a47c9: adc edi, ecx; jmp rdx; 
0x00000000004a4909: adc edi, ecx; push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x000000000048ad6a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000048a151: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004bc47e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x000000000042d389: adc esi, dword ptr [rcx + 0xc8b0007]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000049d8cc: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048c5ce: adc esp, dword ptr [rax + rax]; jmp rax; 
0x000000000047ca7e: adc esp, dword ptr [rip + 0x6894800]; ret; 
0x0000000000480ee9: adc esp, edx; stc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000004918f2: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000436c88: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c8f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c96: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000436931: adc qword ptr [rcx - 1], rbx; ret; 
0x00000000004368f5: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000043692a: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436b28: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368ee: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b21: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e7: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b1a: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e0: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436923: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eee0: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436de3: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436dea: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df1: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df8: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000043691d: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eeda: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eefb: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f020: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f027: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f02e: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000043f0bd: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c4: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0cb: adc qword ptr [rsi + 7], rdx; ret; 
0x000000000043eecd: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000043eec6: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eebf: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eeb8: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f01a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000048a150: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000427893: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000047f50b: adc r8b, bpl; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048fe40: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048bcd5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048ad69: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042791f: adc sil, r15b; ret; 
0x00000000004c36a3: add ah, ah; add byte ptr [rax], r8b; clc; add bh, al; call qword ptr [rsi]; 
0x00000000004c2170: add ah, ah; cmc; jmp qword ptr [rdx]; 
0x00000000004c8da3: add ah, ah; popfq; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c74a3: add ah, ah; test byte ptr [rax], al; add al, bl; sub bl, bh; call rdx; 
0x00000000004c77a3: add ah, ah; xchg dword ptr [rax], eax; add byte ptr [rax + 0x52], ch; sti; call qword ptr [rsi]; 
0x00000000004c7383: add ah, al; add dword ptr [rax], 0; cmp byte ptr [rbx], ah; sti; jmp qword ptr [rdi]; 
0x000000000043f55e: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043f57e: add ah, bh; add eax, dword ptr [rax]; ret; 
0x000000000043f60d: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f53d: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004c9dbb: add ah, bh; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; mov al, 0x42; std; call qword ptr [rcx + 1]; 
0x00000000004c4fbb: add ah, bh; pop rdi; add byte ptr [rax], al; mov al, 0xde; clc; call qword ptr [rbx]; 
0x00000000004c9abb: add ah, bh; stosb byte ptr [rdi], al; add byte ptr [rax], al; nop; cmp ch, bh; call qword ptr [rdi]; 
0x00000000004c76bb: add ah, bh; xchg byte ptr [rax], al; add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x00000000004bff9b: add ah, bl; sldt word ptr [rax]; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004c879b: add ah, bl; xchg edi, eax; add byte ptr [rax], al; jo 0xc87c9; cld; call qword ptr [rbp + 5]; 
0x00000000004c239b: add ah, bl; xor eax, dword ptr [rax]; add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x00000000004726b2: add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x00000000004c0927: add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x00000000004476eb: add ah, byte ptr [rcx + 0x4a]; add al, ch; jl 0x47696; sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004c0a00: add ah, byte ptr [rdx + 0x41280e0a]; ret; 
0x000000000043f02a: add ah, byte ptr [rdx - 0xf]; jl 0x3f077; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043bfa3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004c35ab: add ah, ch; add byte ptr [r8], r8b; nop; add bh, al; call qword ptr [rcx]; 
0x00000000004c658b: add ah, cl; jne 0xc658f; add byte ptr [rax], ah; xchg ebx, eax; cli; jmp qword ptr [rax]; 
0x00000000004c0d8b: add ah, cl; sbb eax, 0x50000000; cmc; jmp qword ptr [rcx]; 
0x00000000004c3ab3: add ah, dh; add byte ptr [rax], al; cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004c15b3: add ah, dh; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004c0593: add ah, dl; adc eax, 0x26e80000; cmc; jmp qword ptr [rsi]; 
0x00000000004c1293: add ah, dl; and al, byte ptr [rax]; add byte ptr [rax], cl; cmc; jmp qword ptr [rdx]; 
0x00000000004bfb93: add ah, dl; or eax, dword ptr [rax]; add byte ptr [rax], bh; cmc; hlt; call qword ptr [rdx]; 
0x00000000004c8c93: add ah, dl; pushfq; add byte ptr [rax], al; pop rax; cld; call qword ptr [rax]; 
0x00000000004c9893: add ah, dl; test al, 0; add byte ptr [rax + 0x34], bh; std; jmp qword ptr [rcx]; 
0x00000000004bf3dd: add al, 0; add al, al; cmp esi, esp; call qword ptr [rbp + 9]; 
0x000000000044ac41: add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000044ac79: add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000042439d: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042cebf: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004243c1: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049d5d1: add al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000042241d: add al, 0; add byte ptr [rax], al; je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x000000000044247d: add al, 0; add byte ptr [rax], al; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442404: add al, 0; add byte ptr [rax], al; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442820: add al, 0; add byte ptr [rax], al; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426fb: add al, 0; add byte ptr [rax], al; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442682: add al, 0; add byte ptr [rax], al; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425a2: add al, 0; add byte ptr [rax], al; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f3: add al, 0; add byte ptr [rax], al; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044227a: add al, 0; add byte ptr [rax], al; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed7: add al, 0; add byte ptr [rax], al; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442155: add al, 0; add byte ptr [rax], al; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f50: add al, 0; add byte ptr [rax], al; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442075: add al, 0; add byte ptr [rax], al; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffc: add al, 0; add byte ptr [rax], al; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f02: add al, 0; add byte ptr [rax], al; mov esi, 1; call rbx; 
0x0000000000441f24: add al, 0; add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000427f38: add al, 0; add byte ptr [rax], al; ret; 
0x000000000044040f: add al, 0; add byte ptr [rax], al; syscall; 
0x000000000049e343: add al, 0; add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000044afa1: add al, 0; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000041934d: add al, 0; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000403015: add al, 0; add byte ptr [rdi + 0x6cd720], bh; call rbx; 
0x00000000004408c6: add al, 0; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x00000000004b29b5: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000419e76: add al, 0; add dh, dh; ret; 
0x000000000040fcd4: add al, 0; add rsp, 0xd8; ret; 
0x00000000004003fe: add al, 0; mov edx, 0x1d; mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000047390b: add al, 0x11; ret; 
0x000000000043f5ad: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000047d019: add al, 0x16; jae 0x7cfc1; xor eax, eax; ret; 
0x000000000042462b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042421b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000423d27: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000424537: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423fab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004242eb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000424607: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004246d7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042448b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423c7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042407b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042455b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000423d4b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000423ded: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042414b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x00000000004243bb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423e11: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049500f: add al, 0x17; lea rdx, [rip + 0x13488]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a2f: add al, 0x17; lea rdx, [rip + 0x15a68]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049107f: add al, 0x17; lea rdx, [rip + 0x17418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f0af: add al, 0x17; lea rdx, [rip + 0x193e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004390ba: add al, 0x17; lea rdx, [rip + 0x6f3dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d36a: add al, 0x17; lea rdx, [rip + 0x7b12d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bcfa: add al, 0x17; lea rdx, [rip + 0x7c79d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a14a: add al, 0x17; lea rdx, [rip + 0x7e34d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f411: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000423a9a: add al, 0x17; sub eax, ecx; ret; 
0x00000000004403ed: add al, 0x24; add rsp, 0x18; ret; 
0x000000000047a0cc: add al, 0x24; call rax; 
0x00000000004783d3: add al, 0x24; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000440528: add al, 0x24; mov eax, 0; syscall; 
0x0000000000473808: add al, 0x24; mov eax, 0x14; syscall; 
0x0000000000440588: add al, 0x24; mov eax, 1; syscall; 
0x00000000004404c8: add al, 0x24; mov eax, 2; syscall; 
0x0000000000473678: add al, 0x24; mov eax, 3; syscall; 
0x000000000047afa7: add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a766: add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000044f33f: add al, 0x24; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x0000000000411775: add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004432fc: add al, 0x24; mov rdx, rax; mov eax, r12d; syscall; 
0x00000000004811a3: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x000000000045082a: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004967d5: add al, 0x25; rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x000000000040ee20: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000044e25d: add al, 0x29; ret 0x8941; 
0x000000000046e1fe: add al, 0x31; ret; 
0x000000000046e0fa: add al, 0x37; ret; 
0x0000000000452f4e: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x0000000000416cef: add al, 0x3a; ret; 
0x00000000004c29a8: add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x0000000000479ca1: add al, 0x48; add esp, 8; ret; 
0x000000000043ca8b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000043bf99: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000043bfab: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000046c6c3: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000046c603: add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000489f6f: add al, 0x48; mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000043637a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000046c4e4: add al, 0x48; mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000043a7d9: add al, 0x48; mov eax, edi; ret; 
0x0000000000436373: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443ee5: add al, 0x48; mov edx, dword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004733cd: add al, 0x48; sub esp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x000000000046ddf4: add al, 0x48; xor eax, eax; ret; 
0x000000000047d016: add al, 0x4c; cmp eax, dword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x000000000047c906: add al, 0x4c; cmp edx, eax; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046f4d6: add al, 0x4c; lea ecx, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000440518: add al, 0x51; add byte ptr [rax], al; ret; 
0x000000000043bfa7: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e7: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000044db02: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x00000000004369a7: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004339f2: add al, 0x72; or eax, 0xfc164c8b; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000041ceb4: add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000049d5ae: add al, 0x75; adc al, 0xb8; or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000479c98: add al, 0x75; adc eax, 0x3158f80; add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x000000000042109a: add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x00000000004c09bf: add al, 0x79; ret; 
0x000000000047dc51: add al, 0x80; cli; add dword ptr [rdi], ecx; xchg edx, eax; ret 0xb60f; 
0x000000000042a3fb: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bcd3: add al, 0x81; sub eax, edx; ret; 
0x000000000042a157: add al, 0x82; sub eax, ecx; ret; 
0x000000000043fa21: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a60d: add al, 0x83; cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x0000000000473b60: add al, 0x85; leave; jne 0x73b11; xor eax, eax; ret; 
0x000000000049c47b: add al, 0x86; add rax, r14; jmp rax; 
0x000000000043bf96: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000043a7d6: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000040e64a: add al, 0x89; add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000045d220: add al, 0x8b; or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x000000000043f576: add al, 0x8d; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000482853: add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004c624e: add al, 0x8e; add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x000000000047970e: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004c80c4: add al, 0x91; add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x000000000049bef3: add al, 0x98; add rax, r8; jmp rax; 
0x000000000045864c: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045dd7a: add al, 0xd8; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453afa: add al, 0xd8; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000040d651: add al, 0xe9; stosd dword ptr [rdi], eax; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000044f343: add al, 0xed; movabs al, byte ptr [0x274c08548004a6e]; call rax; 
0x00000000004366e3: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000044046b: add al, 0xf3; ret; 
0x0000000000427979: add al, 0xf6; ret 0x7408; 
0x00000000004c3731: add al, 0xf8; call rsp; 
0x000000000048c655: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423bdd: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044ee2d: add al, 0xfd; retf 0x6c; ret; 
0x000000000049e720: add al, 1; add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000463eb8: add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000047cfcc: add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000041035d: add al, 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004bf1c4: add al, 2; add byte ptr [rax], al; sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x00000000004c0a37: add al, 2; hlt; ret; 
0x0000000000430987: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004c9238: add al, 3; mov dword ptr [rcx], eax; ret; 
0x000000000042247d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042dfa8: add al, 7; ret; 
0x000000000042f57f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004c5a2f: add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c145f: add al, ah; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c8bdf: add al, ah; cmp al, 0xfc; jmp qword ptr [rcx]; 
0x000000000048c377: add al, ah; fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x000000000048c765: add al, ah; retf 0x6c; add rsp, 8; ret; 
0x00000000004c360f: add al, al; add bh, al; call qword ptr [rdi]; 
0x00000000004c0d6f: add al, al; cmc; call qword ptr [rsi]; 
0x00000000004bf3df: add al, al; cmp esi, esp; call qword ptr [rbp + 9]; 
0x00000000004c600f: add al, al; js 0xc600d; call rsi; 
0x00000000004c17df: add al, al; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rsi]; 
0x00000000004c8d8f: add al, al; ret 0xfffc; 
0x000000000048116f: add al, al; retf 0x6c; add rsp, 0x48; ret; 
0x00000000004af1c7: add al, al; sldt word ptr [rax]; ret; 
0x0000000000412d48: add al, al; sub dword ptr [rdx], ecx; pop rbx; ret; 
0x00000000004c36a7: add al, bh; add bh, al; call qword ptr [rsi]; 
0x00000000004be378: add al, bh; cld; call qword ptr [rax - 6]; 
0x00000000004a3f65: add al, bh; push qword ptr [rax + 1]; clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004c8da7: add al, bh; ret 0xfffc; 
0x00000000004c8e6f: add al, bl; iretd; cld; call qword ptr [rdi + 9]; 
0x00000000004bf07f: add al, bl; sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004c74a7: add al, bl; sub bl, bh; call rdx; 
0x00000000004476ed: add al, bpl; jl 0x47696; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000400b38: add al, bpl; jno 0xb3b; add byte ptr [rax], al; nop; leave; ret; 
0x000000000041bd75: add al, bpl; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041c6c6: add al, bpl; ret; 
0x000000000046da9f: add al, bpl; retf 0xf940; jmp qword ptr [rsi + 0x2e]; 
0x0000000000450770: add al, bpl; stc; adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000004927f2: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000424961: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x000000000046b683: add al, byte ptr [rax]; add bl, ch; or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000041a2dd: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000426f53: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000004117c5: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004508b6: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000049b64d: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; jl 0x9b678; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000040049f: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000418800: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x00000000004727f6: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000479741: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000041f2e1: add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret 0x8548; 
0x00000000004209d6: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000040f1dd: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042453d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000497a7c: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x000000000042ba91: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000424561: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000446fdd: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048bd71: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000049d5e1: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000442111: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423c0: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e93: add al, byte ptr [rax]; add byte ptr [rax], al; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004410f2: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000443559: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000472f7c: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000441fbb: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000004420e0: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000442372: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000004420e5: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000441fb1: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000441f29: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000046eee3: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000400430: add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004404aa: add al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000472f0a: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000403c15: add al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x000000000040258e: add al, byte ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x0000000000403308: add al, byte ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000427edd: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 0x67]; ret; 
0x0000000000422671: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 3]; ret; 
0x0000000000427f30: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 4]; ret; 
0x0000000000427217: add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, [rip + 0x1d]; ret; 
0x00000000004173fd: add al, byte ptr [rax]; add byte ptr [rbp - 0x44], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041ceac: add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x00000000004205b0: add al, byte ptr [rax]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg esp, eax; ret 0x8548; 
0x0000000000478cbe: add al, byte ptr [rax]; add byte ptr [rbx + 0x2555d115], cl; add bh, dh; ret 0x804; 
0x000000000043e434: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000047dbbd: add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x0000000000400463: add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x0000000000465c0e: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; dec dword ptr [r8 + 0x39]; ret; 
0x000000000041e167: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b72c: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000419928: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000448e8c: add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x000000000044850c: add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x0000000000427dc1: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x12ad3]; ret; 
0x0000000000424891: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x14853]; ret; 
0x000000000047bfa1: add al, byte ptr [rax]; add rsp, 0x140; pop rbx; ret; 
0x0000000000418d6a: add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000417958: add al, byte ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000418577: add al, byte ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041f0eb: add al, byte ptr [rax]; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000421083: add al, byte ptr [rax]; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000042780e: add al, byte ptr [rax]; je 0x27819; lea rax, [rip + 0x17647]; ret; 
0x0000000000401559: add al, byte ptr [rax]; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x00000000004015ca: add al, byte ptr [rax]; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x00000000004ca19c: add al, byte ptr [rax]; ret; 
0x0000000000462b2b: add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041989b: add al, byte ptr [rbx - 0x76b7fe38]; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004439ae: add al, byte ptr [rcx + 0x39]; ret; 
0x00000000004c5cd5: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rax + rbp*2], 0xa; ret; 
0x00000000004c0e3d: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rsi + riz*2], 0xa; ret; 
0x00000000004c0a2d: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c0558: add al, byte ptr [rdi + 0xa]; ret; 
0x0000000000434257: add al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046ee76: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x6eea0; ret; 
0x00000000004c5e2d: add al, byte ptr [rdx]; pop rsi; ret; 
0x00000000004c5c05: add al, byte ptr [rdx]; push rsi; ret; 
0x000000000048c215: add al, byte ptr [rip + 0x5b000000]; ret; 
0x0000000000481558: add al, ch; adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000047e358: add al, ch; adc bh, byte ptr [rax]; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004816ca: add al, ch; adc byte ptr [rax - 0x74b80000], 0x75; add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x000000000045fc68: add al, ch; add bl, byte ptr [rdi]; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000045da70: add al, ch; cli; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c0597: add al, ch; cmc; jmp qword ptr [rsi]; 
0x0000000000453c94: add al, ch; imul dh; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000418d66: add al, ch; in al, 0xab; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000454624: add al, ch; in ax, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000047bcfe: add al, ch; insb byte ptr [rdi], dx; pop rsi; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004476ee: add al, ch; jl 0x47696; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000400b39: add al, ch; jno 0xb3b; add byte ptr [rax], al; nop; leave; ret; 
0x00000000004537f0: add al, ch; jp 0x537d7; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c2ae7: add al, ch; loope 0xc2ae1; jmp qword ptr [rdi + 0x2b]; 
0x000000000041bd76: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c57e7: add al, ch; pop rbp; cli; jmp rax; 
0x000000000047e210: add al, ch; pop rdx; cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e500: add al, ch; push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047ca00: add al, ch; push 0x51; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000466818: add al, ch; push rdx; mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x0000000000489f14: add al, ch; push rsi; jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x000000000041b1b8: add al, ch; ret 0x287; 
0x000000000041c6c7: add al, ch; ret; 
0x000000000046daa0: add al, ch; retf 0xf940; jmp qword ptr [rsi + 0x2e]; 
0x000000000045589f: add al, ch; retf; ret 0xfffa; 
0x000000000047eb6c: add al, ch; sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000454350: add al, ch; sbb bl, al; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000450771: add al, ch; stc; adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000045586d: add al, ch; std; ret 0xfffa; 
0x000000000045df24: add al, ch; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004c7f77: add al, ch; xchg ebx, eax; std; call rcx; 
0x00000000004c2a27: add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c7607: add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c7547: add al, cl; sti; jmp qword ptr [rbp + 1]; 
0x00000000004be2df: add al, dh; adc ch, bh; call rax; 
0x00000000004c9b9f: add al, dh; cmp ebp, edi; jmp qword ptr [rdi]; 
0x00000000004c62ff: add al, dh; mov dl, bh; jmp qword ptr [rsi]; 
0x00000000004c495f: add al, dh; popfq; clc; jmp rbx; 
0x00000000004c3bef: add al, dh; ret; 
0x00000000004c0c1f: add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c540f: add al, dl; jl 0xc540c; call rdi; 
0x00000000004c48cf: add al, dl; popfq; clc; call qword ptr [rdx]; 
0x00000000004a43d8: add bh, ah; clc; jmp rax; 
0x00000000004c7c2a: add bh, ah; ret; 
0x000000000048bd6f: add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000445cdf: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041ed47: add bh, al; add eax, 0x2ae8b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004a3f6d: add bh, al; call qword ptr [rax]; 
0x00000000004a3f6d: add bh, al; call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004c35b1: add bh, al; call qword ptr [rcx]; 
0x00000000004c3611: add bh, al; call qword ptr [rdi]; 
0x00000000004c36a9: add bh, al; call qword ptr [rsi]; 
0x00000000004c3551: add bh, al; jmp qword ptr [rbx]; 
0x0000000000460ecd: add bh, al; test dword ptr [rax + 0xffffef], eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000046054e: add bh, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000041451a: add bh, bh; nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000400db7: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000400960: add bh, bh; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x00000000004980df: add bh, bh; ror dword ptr [rax - 0x77], cl; ret; 
0x00000000004277c9: add bh, byte ptr [rax + 0x433d40]; mov edx, 0x430cd0; cmove rax, rdx; ret; 
0x000000000048bd40: add bh, byte ptr [rax + 1]; ret; 
0x0000000000413482: add bh, byte ptr [rax - 1]; pop rbx; ret; 
0x000000000040e01b: add bh, byte ptr [rax - 1]; ret; 
0x0000000000443557: add bh, byte ptr [rbx + 2]; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x00000000004c015b: add bh, byte ptr [rcx + 0x41380e0a]; ret; 
0x00000000004a4458: add bh, cl; clc; call qword ptr [rax - 0x30]; 
0x00000000004a49b5: add bh, cl; jmp qword ptr [rax]; 
0x00000000004bef11: add bh, dh; jmp rax; 
0x00000000004443af: add bh, dh; ret 0; 
0x0000000000478cc6: add bh, dh; ret 0x804; 
0x00000000004222e4: add bl, al; mov rsi, rbx; mov rdi, rax; call rcx; 
0x00000000004438e5: add bl, al; nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x0000000000441062: add bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000441042: add bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x00000000004c6a6f: add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x000000000046c6c8: add bl, byte ptr [rbx - 0x3d]; nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004c5bd7: add bl, byte ptr [rcx + 0xa]; ret; 
0x000000000045fc6a: add bl, byte ptr [rdi]; cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004c6b2d: add bl, byte ptr [rdx + 0xa]; ret; 
0x00000000004a43c0: add bl, ch; clc; call rax; 
0x0000000000480bdd: add bl, ch; lodsb al, byte ptr [rsi]; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80bf0; ret; 
0x000000000046b685: add bl, ch; or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004729fa: add bl, ch; ret 0x1f0f; 
0x000000000049b6e5: add bl, ch; xchg ebx, eax; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x000000000043c51f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c53f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5bf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c57f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c59f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c6bf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c65f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c67f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c69f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cb8f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cb9f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c50f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042788f: add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004066f7: add bl, dh; ret; 
0x000000000043c51e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447d8a: add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d80: add byte ptr [ecx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d76: add byte ptr [ecx - 0x41f0b7b8], cl; mov bh, byte ptr [rcx]; add byte ptr [ecx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d91: add byte ptr [edi], cl; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004277cd: add byte ptr [r10 + 0x430cd0], dil; cmove rax, rdx; ret; 
0x000000000040ed9e: add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x000000000046fbf1: add byte ptr [r15 + 0x4b5d58], dil; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fbf1: add byte ptr [r15 + 0x4b5d58], dil; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x000000000045c4d3: add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x000000000045b4bf: add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000047d051: add byte ptr [r8 + 0x39], r9b; ret; 
0x000000000040ed98: add byte ptr [r8 + 0x3d], cl; sub bh, 0x4b; add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x000000000049df9f: add byte ptr [r8 + 1], r9b; ret; 
0x0000000000420118: add byte ptr [r8 + rax*8 - 0x74b7d58b], r8b; add eax, 0x2ad4cb; test rax, rax; je 0x2012c; call rax; 
0x000000000046cfe3: add byte ptr [r8 - 0x75], r9b; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000416d33: add byte ptr [r8 - 0x77], cl; out 0xe8, eax; ret; 
0x0000000000470e25: add byte ptr [r8 - 0x77], cl; ret; 
0x0000000000444841: add byte ptr [r8 - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x00000000004480a5: add byte ptr [r8 - 0x7d], r9b; ret 0x4901; 
0x00000000004b860a: add byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdx], bh; mov esp, 0x130; add byte ptr [rax], al; ret 0x4b7d; 
0x00000000004c393d: add byte ptr [r8], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004c3f3d: add byte ptr [r8], r8b; adc byte ptr [rdi], bh; clc; call qword ptr [rax]; 
0x00000000004c354d: add byte ptr [r8], r8b; adc byte ptr [rdx], al; clc; jmp qword ptr [rbx]; 
0x00000000004c372d: add byte ptr [r8], r8b; and byte ptr [rax + rdi*8], al; call rsp; 
0x00000000004c35ad: add byte ptr [r8], r8b; nop; add bh, al; call qword ptr [rcx]; 
0x00000000004c357d: add byte ptr [r8], r8b; push rax; add bh, al; jmp qword ptr [rbx]; 
0x0000000000440e60: add byte ptr [r8], r8b; ret; 
0x00000000004005cf: add byte ptr [r9 + 0xe], dil; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x0000000000459027: add byte ptr [r9 - 0x42], al; ret 0x4b40; 
0x000000000045b4a3: add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x0000000000481037: add byte ptr [rax + 0x10247c], al; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004736db: add byte ptr [rax + 0x10], bh; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004222df: add byte ptr [rax + 0x16], bh; ret; 
0x00000000004403af: add byte ptr [rax + 0x18], bh; syscall; 
0x00000000004403af: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047ca0f: add byte ptr [rax + 0x2518113d], al; add byte ptr [rax], al; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000049a97f: add byte ptr [rax + 0x26], bh; syscall; 
0x000000000049a97f: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004c053f: add byte ptr [rax + 0x26], dh; cmc; call qword ptr [rbx]; 
0x000000000043edcf: add byte ptr [rax + 0x27201fa], al; mov byte ptr [rdi], cl; ret; 
0x00000000004c879f: add byte ptr [rax + 0x27], dh; cld; call qword ptr [rbp + 5]; 
0x0000000000453b80: add byte ptr [rax + 0x29], cl; bnd call qword ptr [rax + 0x38]; 
0x000000000044d4b8: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000419e35: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000044c630: add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x0000000000405827: add byte ptr [rax + 0x29], cl; ret; 
0x000000000045de09: add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000004c0737: add byte ptr [rax + 0x2f], cl; cmc; call qword ptr [rax]; 
0x00000000004c3eaf: add byte ptr [rax + 0x34], ah; clc; jmp rsp; 
0x00000000004c9897: add byte ptr [rax + 0x34], bh; std; jmp qword ptr [rcx]; 
0x00000000004667fb: add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000418816: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000044fc9b: add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x00000000004187d7: add byte ptr [rax + 0x39], cl; ret 0x8948; 
0x00000000004767d9: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004183cb: add byte ptr [rax + 0x39], cl; ret; 
0x000000000040ed99: add byte ptr [rax + 0x3d], cl; sub bh, 0x4b; add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x000000000047351f: add byte ptr [rax + 0x3f], bh; syscall; 
0x000000000047351f: add byte ptr [rax + 0x3f], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000426eab: add byte ptr [rax + 0x43e820], bh; cmove rax, rdx; ret; 
0x0000000000426eaa: add byte ptr [rax + 0x43e820], dil; cmove rax, rdx; ret; 
0x000000000045098f: add byte ptr [rax + 0x441f0f], dl; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000048c096: add byte ptr [rax + 0x4740000], al; mov eax, edx; pop rbx; ret; 
0x000000000041ed30: add byte ptr [rax + 0x480041e4], dh; mov dword ptr [rip + 0x2aca38], 0x41dba0; ret; 
0x0000000000413816: add byte ptr [rax + 0x48004a2a], al; mov eax, dword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x00000000004141d9: add byte ptr [rax + 0x48004a2a], al; mov eax, dword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000041401a: add byte ptr [rax + 0x48004a2a], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004c9fb7: add byte ptr [rax + 0x4c], ch; std; jmp qword ptr [rbx]; 
0x0000000000412a5e: add byte ptr [rax + 0x4cc2894c], dl; mov esi, ebp; mov rdi, r14; mov eax, r9d; syscall; 
0x00000000004c76bf: add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x00000000004c77a7: add byte ptr [rax + 0x52], ch; sti; call qword ptr [rsi]; 
0x00000000004c0f5f: add byte ptr [rax + 0x56], ah; cmc; call qword ptr [rcx]; 
0x00000000004c0fbf: add byte ptr [rax + 0x57], dl; cmc; jmp qword ptr [rbx]; 
0x00000000004bf557: add byte ptr [rax + 0x5b], ch; hlt; call qword ptr [rax]; 
0x0000000000440e4f: add byte ptr [rax + 0x61], bh; syscall; 
0x0000000000440e4f: add byte ptr [rax + 0x61], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438ef: add byte ptr [rax + 0x63], bh; syscall; 
0x00000000004438ef: add byte ptr [rax + 0x63], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000044ee27: add byte ptr [rax + 0x63], cl; dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x00000000004003c4: add byte ptr [rax + 0x63], cl; fnstsw word ptr [rdx + 0x1d]; mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000412c7f: add byte ptr [rax + 0x63], cl; jg 0x12cf4; mov eax, 3; syscall; 
0x0000000000440ad7: add byte ptr [rax + 0x63], cl; jl 0x40b00; adc byte ptr [rax + 0x101], bh; syscall; 
0x0000000000413468: add byte ptr [rax + 0x63], cl; jnp 0x134dd; syscall; 
0x000000000046d28f: add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000045dcce: add byte ptr [rax + 0x63], cl; ret; 
0x000000000046be13: add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040dfe2: add byte ptr [rax + 0x63], cl; stc; syscall; 
0x0000000000440710: add byte ptr [rax + 0x63], cl; sti; mov eax, 0x48; syscall; 
0x000000000044dd98: add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x0000000000453e9f: add byte ptr [rax + 0x63], cl; xchg ebp, eax; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x00000000004c8c97: add byte ptr [rax + 0x64], bl; cld; call qword ptr [rax]; 
0x000000000047355f: add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047355f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004c157f: add byte ptr [rax + 0x69], dh; cmc; call qword ptr [rsi]; 
0x000000000047354f: add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047354f: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047356f: add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047356f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x0000000000418d72: add byte ptr [rax + 0x6cb800], bh; ret; 
0x000000000042495f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000047f274: add byte ptr [rax + 0x75], al; cmp bl, dh; ret; 
0x000000000049cbde: add byte ptr [rax + 0x75], al; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x00000000004c5fdf: add byte ptr [rax + 0x78], dl; cli; call qword ptr [rcx]; 
0x000000000043ca2f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004c604f: add byte ptr [rax + 0x7a], ah; cli; jmp qword ptr [rdx]; 
0x000000000041037a: add byte ptr [rax + 0x8740000], al; mov eax, edx; pop rbx; ret; 
0x000000000047591e: add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000043ed9f: add byte ptr [rax + 0xb7208fa], al; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000044102f: add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044102f: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000046fbff: add byte ptr [rax + 0xc9], bh; syscall; 
0x000000000046fbff: add byte ptr [rax + 0xc9], bh; syscall; ret; 
0x0000000000443991: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000443991: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000443a38: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043fd96: add byte ptr [rax + 0xe5], bh; syscall; 
0x00000000004c9357: add byte ptr [rax + 0xe], bl; std; jmp qword ptr [rax]; 
0x00000000004c0b20: add byte ptr [rax + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x000000000048117f: add byte ptr [rax + 0xf247c], al; je 0x81174; mov rdi, qword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x0000000000480f5f: add byte ptr [rax + 0xf247c], al; jne 0x80f70; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004810ef: add byte ptr [rax + 0xf247c], al; jne 0x81100; xor eax, eax; add rsp, 0x48; ret; 
0x0000000000447e4f: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000046e065: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000401870: add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x00000000004221b1: add byte ptr [rax + 0xfd63948], al; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000046ee8f: add byte ptr [rax + 0xfe580f5], cl; je 0x6eeb0; add rax, 2; ret; 
0x000000000043fa93: add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b874: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d387: add byte ptr [rax + 1], bh; ret; 
0x0000000000426f55: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000004813df: add byte ptr [rax + 1], cl; ret 0x1a75; 
0x000000000049543c: add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000004990a7: add byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000004117c7: add byte ptr [rax + 1], cl; ret; 
0x000000000048b1d0: add byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x000000000049d5df: add byte ptr [rax + 2], bh; add rsp, 8; ret; 
0x000000000040042e: add byte ptr [rax + 2], bh; syscall; 
0x000000000040042d: add byte ptr [rax + 2], dil; syscall; 
0x00000000004c357f: add byte ptr [rax + 2], dl; clc; jmp qword ptr [rbx]; 
0x0000000000413463: add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044ff54: add byte ptr [rax + 3], bh; syscall; 
0x000000000049d5cf: add byte ptr [rax + 4], bh; add rsp, 8; ret; 
0x000000000049b6ef: add byte ptr [rax + 5], bh; ret; 
0x000000000049c9fe: add byte ptr [rax + 7], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043f5ce: add byte ptr [rax + 8], bh; pop rbx; ret; 
0x00000000004438af: add byte ptr [rax + 8], bh; syscall; 
0x00000000004438af: add byte ptr [rax + 8], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000043f5cd: add byte ptr [rax + 8], dil; pop rbx; ret; 
0x00000000004bff9f: add byte ptr [rax + 8], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004bf07b: add byte ptr [rax + rax + 0x1ad80000], bh; hlt; call qword ptr [rsi + 1]; 
0x00000000004bf05b: add byte ptr [rax + rax + 0x1ae20000], bl; hlt; call qword ptr [rsi]; 
0x00000000004c401f: add byte ptr [rax + rax + 0x50640000], al; add byte ptr [rax], al; cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x00000000004ae16b: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004c703b: add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x0000000000420119: add byte ptr [rax + rax*8 - 0x74b7d58b], al; add eax, 0x2ad4cb; test rax, rax; je 0x2012c; call rax; 
0x00000000004bff97: add byte ptr [rax + rax], ah; add ah, bl; sldt word ptr [rax]; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004bf36f: add byte ptr [rax + rax], ah; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f6f: add byte ptr [rax + rax], ah; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c6677: add byte ptr [rax + rax], ah; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004c8d9f: add byte ptr [rax + rax], al; add ah, ah; popfq; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c2397: add byte ptr [rax + rax], al; add ah, bl; xor eax, dword ptr [rax]; add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x000000000042241c: add byte ptr [rax + rax], al; add byte ptr [rax], al; je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x00000000004408c5: add byte ptr [rax + rax], al; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x00000000004c75ff: add byte ptr [rax + rax], al; add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c7a97: add byte ptr [rax + rax], bh; add byte ptr [rax], al; fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x00000000004c15af: add byte ptr [rax + rax], bh; add byte ptr [rax], al; hlt; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004c6007: add byte ptr [rax + rax], bh; add byte ptr [rax], al; jo 0xc600f; add al, al; js 0xc600d; call rsi; 
0x00000000004c0d67: add byte ptr [rax + rax], bl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; sbb eax, 0x4fc00000; cmc; call qword ptr [rsi]; 
0x00000000004bf077: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004bf0c7: add byte ptr [rax + rax], bl; add byte ptr [rax], al; or al, 1; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x00000000004c76d7: add byte ptr [rax + rax], bl; add byte ptr [rax], al; sbb al, 0x87; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x00000000004c13ef: add byte ptr [rax + rax], bl; add byte ptr [rax], al; xor al, 0x24; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004c2167: add byte ptr [rax + rax], bl; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x00000000004c3727: add byte ptr [rax + rax], bl; add byte ptr [rdi + rax*2], ch; add byte ptr [rax], ah; add al, 0xf8; call rsp; 
0x00000000004c2a1f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; cmp al, byte ptr fs:[rax]; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c8077: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0x30000090; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004c3577: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x00000000004c3547: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov word ptr [rbp], es; add byte ptr [rax], dl; add bh, al; jmp qword ptr [rbx]; 
0x00000000004bf3d7: add byte ptr [rax + rax], ch; add byte ptr [rax], al; sbb al, 4; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004c7037: add byte ptr [rax + rax], cl; add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x00000000004c97df: add byte ptr [rax + rax], cl; add byte ptr [rax + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004737d1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041db89: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004c753f: add byte ptr [rax + rax], cl; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c7d4f: add byte ptr [rax + rax], cl; add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x00000000004c5507: add byte ptr [rax + rax], cl; add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x00000000004c8747: add byte ptr [rax + rax], cl; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c675f: add byte ptr [rax + rax], cl; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004c5a27: add byte ptr [rax + rax], cl; add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c55ef: add byte ptr [rax + rax], cl; add byte ptr [rsi + riz*2], dh; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c5407: add byte ptr [rax + rax], cl; add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004c710f: add byte ptr [rax + rax], dh; add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x00000000004c3607: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x00000000004734f1: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x00000000004c1e37: add byte ptr [rax + rax], dl; add byte ptr [rax], al; jl 0xc1e6c; add byte ptr [rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004c3937: add byte ptr [rax + rax], dl; add byte ptr [rax], al; jl 0xc3987; add byte ptr [rax], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004c6e37: add byte ptr [rax + rax], dl; add byte ptr [rax], al; jl 0xc6ebc; add byte ptr [rax], al; or ah, 0xfa; jmp rsp; 
0x00000000004bfb77: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x4000000b; cmc; hlt; call qword ptr [rax]; 
0x0000000000472ee1: add byte ptr [rax + rax], dl; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000004bf54f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg esp, eax; add eax, 0x5b680000; hlt; call qword ptr [rax]; 
0x00000000004c39ef: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor al, 0x4a; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004c226f: add byte ptr [rax + rax], dl; add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004c1457: add byte ptr [rax + rax], dl; add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c97e3: add byte ptr [rax + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004c181b: add byte ptr [rax + rbp], bl; add byte ptr [rax], dh; outsd dx, dword ptr [rsi]; cmc; call qword ptr [rcx + 5]; 
0x000000000042722d: add byte ptr [rax + rcx + 0x48], dh; lea eax, [rip + 0x8449]; ret; 
0x000000000048119f: add byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x00000000004508b8: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x75], ecx; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000479ca0: add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x000000000041c67f: add byte ptr [rax + rcx*4 + 0x5c], al; and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x00000000004c780b: add byte ptr [rax + rcx*4], cl; add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x00000000004af317: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000048bfe5: add byte ptr [rax + rdx - 0x75], dh; jo 0x8bf71; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000004c4023: add byte ptr [rax + rdx*2], ah; add byte ptr [rax], bh; clc; call qword ptr [rbx + 5]; 
0x00000000004c8063: add byte ptr [rax + rdx*4 - 0x6ec80000], ah; sti; call qword ptr [rax]; 
0x00000000004c807b: add byte ptr [rax + rdx*4 - 0x6ed00000], bh; sti; call qword ptr [rdx]; 
0x000000000046b757: add byte ptr [rax + riz + 0x5b], dh; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004c604b: add byte ptr [rax + rsi*2 + 0x7a600000], cl; cli; jmp qword ptr [rdx]; 
0x00000000004c5fdb: add byte ptr [rax + rsi*2], bl; add byte ptr [rax], al; push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c600b: add byte ptr [rax + rsi*2], cl; add al, al; js 0xc600d; call rsi; 
0x000000000049cc2f: add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x0000000000459975: add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x0000000000458cdb: add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000400ca7: add byte ptr [rax - 0x13b17], dl; jmp qword ptr [rsi - 0x70]; 
0x0000000000403676: add byte ptr [rax - 0x188b7f80], 0x89; ret 0x8948; 
0x00000000004c20e7: add byte ptr [rax - 0x21], ch; cmc; jmp qword ptr [rdi + 3]; 
0x000000000046de85: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004c6d77: add byte ptr [rax - 0x36], ch; cli; call qword ptr [rcx]; 
0x00000000004c6cff: add byte ptr [rax - 0x37], dl; cli; call qword ptr [rcx]; 
0x0000000000443eec: add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x000000000046d1d5: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004179d3: add byte ptr [rax - 0x39], cl; add eax, 0x2b5bc9; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000446913: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041345b: add byte ptr [rax - 0x39], cl; cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000041ecc1: add byte ptr [rax - 0x39], cl; cmp byte ptr [rax + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000004167a8: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000415d6c: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045348f: add byte ptr [rax - 0x39], cl; ret 0xffb0; 
0x000000000040e00f: add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x00000000004221bb: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x00000000004508bf: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000045947f: add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x000000000041154c: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000440eb1: add byte ptr [rax - 0x39], cl; ret; 
0x000000000046eeef: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046eecf: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef2f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046eedf: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef1f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045099f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000041656b: add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000459e78: add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000049cd96: add byte ptr [rax - 0x3f], cl; call 0x481056dd; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000044dcad: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004c4d1f: add byte ptr [rax - 0x44], al; clc; jmp qword ptr [rsi]; 
0x00000000004b29af: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000481df2: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000004c55f7: add byte ptr [rax - 0x55], bh; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c6767: add byte ptr [rax - 0x64], bl; cli; jmp rdi; 
0x000000000041d34f: add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x00000000004c80af: add byte ptr [rax - 0x6f], ah; sti; call qword ptr [rax]; 
0x00000000004c80c7: add byte ptr [rax - 0x6f], bl; sti; call qword ptr [rdx]; 
0x0000000000450d83: add byte ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], r9b; ret; 
0x000000000046c6bf: add byte ptr [rax - 0x73], cl; add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000046f4d2: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000047970b: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000042247a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044ac5f: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044ac43: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000044ac7b: add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000468b45: add byte ptr [rax - 0x73], cl; add qword ptr [rax - 0x77], rcx; lea esi, [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410061: add byte ptr [rax - 0x73], cl; call 0x415d41c5; pop rbp; pop rbp; ret; 
0x0000000000480a06: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x80a18; ret; 
0x000000000041bc97: add byte ptr [rax - 0x73], cl; je 0x1bcc0; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x000000000049573a: add byte ptr [rax - 0x73], cl; jl 0x95763; js 0x95782; call rsp; 
0x0000000000495a4f: add byte ptr [rax - 0x73], cl; jl 0x95a78; js 0x95a97; call rsp; 
0x0000000000495e16: add byte ptr [rax - 0x73], cl; jl 0x95e3f; js 0x95e5e; call rsp; 
0x000000000049b64f: add byte ptr [rax - 0x73], cl; jl 0x9b678; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000041064c: add byte ptr [rax - 0x73], cl; mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423bd5: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000041c24d: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000046d063: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x000000000047af2a: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 3], cl; or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000047a75f: add byte ptr [rax - 0x75], cl; adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047d9c7: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x0000000000400ede: add byte ptr [rax - 0x75], cl; adc eax, 0x2cc75a; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049c5cf: add byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x000000000047cfc9: add byte ptr [rax - 0x75], cl; add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004667f2: add byte ptr [rax - 0x75], cl; add byte ptr [rbx + 0xa880], cl; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000043c04f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000043a71f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000049ea77: add byte ptr [rax - 0x75], cl; add eax, 0x22f2d1; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000047ca6f: add byte ptr [rax - 0x75], cl; add eax, 0x24e619; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x00000000004708a4: add byte ptr [rax - 0x75], cl; add eax, 0x25db6c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044dcdf: add byte ptr [rax - 0x75], cl; add eax, 0x27fa19; ret; 
0x000000000044696f: add byte ptr [rax - 0x75], cl; add eax, 0x2879f1; ret; 
0x00000000004178cf: add byte ptr [rax - 0x75], cl; add eax, 0x2b37e9; ret; 
0x0000000000418e9c: add byte ptr [rax - 0x75], cl; add eax, 0x2b473c; test rax, rax; je 0x18eab; call rax; 
0x000000000041ac9b: add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000048106a: add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x68; ret; 
0x000000000048c41e: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000432ccf: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eaf: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043349f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000400e91: add byte ptr [rax - 0x75], cl; je 0xeba; adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x0000000000400ee5: add byte ptr [rax - 0x75], cl; je 0xf0e; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000044a0dd: add byte ptr [rax - 0x75], cl; jl 0x4a106; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000450d9f: add byte ptr [rax - 0x75], cl; jl 0x50dc8; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000045f76f: add byte ptr [rax - 0x75], cl; mov ebp, 0xfffffb60; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045d477: add byte ptr [rax - 0x75], cl; mov edi, 0x218; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004530c7: add byte ptr [rax - 0x75], cl; mov edi, 0xe0; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046d57f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000043309f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043329f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049753d: add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x000000000041412f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000480c5f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046cfe4: add byte ptr [rax - 0x75], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000419bff: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x0000000000417e77: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x29], cl; ret 0x149; 
0x00000000004362ff: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043274f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435b3f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435aaf: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435d4f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000480f4d: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000450b7b: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x00000000004207f7: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x00000000004141dd: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000413e3f: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041401e: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004100bf: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000413808: add byte ptr [rax - 0x75], cl; test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046cf48: add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000043290f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000041754f: add byte ptr [rax - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x000000000049ab4f: add byte ptr [rax - 0x75], cl; xchg byte ptr [rax + 0x48000000], ch; add esp, 8; ret; 
0x000000000046cfff: add byte ptr [rax - 0x75], cl; xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000041619f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x00000000004165bf: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x0000000000415d0f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046d26f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x000000000046d157: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfbf: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6cf: add byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000044169a: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x416c6; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000049cd67: add byte ptr [rax - 0x77], cl; adc al, 0xf7; add rsp, 8; ret; 
0x0000000000417960: add byte ptr [rax - 0x77], cl; adc eax, 0x2b5c40; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000440525: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0; syscall; 
0x0000000000440585: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x00000000004404c5: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x0000000000401938: add byte ptr [rax - 0x77], cl; add eax, 0x2c9750; xor eax, eax; ret; 
0x000000000040fd5c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fccb: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6bf: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf5c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8bf70; add rsp, 0xd8; ret; 
0x0000000000410566: add byte ptr [rax - 0x77], cl; call 0x5c4262c9; ret; 
0x000000000047c601: add byte ptr [rax - 0x77], cl; call 0x5c492364; pop r13; ret; 
0x000000000047d1f0: add byte ptr [rax - 0x77], cl; call 0x5c492f53; ret; 
0x000000000047d24a: add byte ptr [rax - 0x77], cl; call 0x5c492fad; ret; 
0x0000000000413c48: add byte ptr [rax - 0x77], cl; call 0x8c5bf98; pop rbx; pop rbp; ret; 
0x00000000004178ff: add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004107c2: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004004a1: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x000000000046b971: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000410a4e: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x00000000004127dc: add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x00000000004003d1: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x0000000000417556: add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411d16: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e12: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f82: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x0000000000499e5e: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000472239: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000004425e5: add byte ptr [rax - 0x77], cl; fsubp st(0); movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000004427c5: add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x00000000004426c5: add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x000000000045ee17: add byte ptr [rax - 0x77], cl; iretd; call qword ptr [rax + 0x38]; 
0x0000000000410611: add byte ptr [rax - 0x77], cl; mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x00000000004017e2: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000443d16: add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000416d34: add byte ptr [rax - 0x77], cl; out 0xe8, eax; ret; 
0x000000000043fcfc: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046cf4f: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000410da4: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000442381: add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x0000000000415bc4: add byte ptr [rax - 0x77], cl; push -0x9617; jmp qword ptr [rsi - 0x70]; 
0x000000000041f7b0: add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000418802: add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x000000000041eccc: add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000048c1b3: add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x0000000000472acf: add byte ptr [rax - 0x77], cl; ret 0x3e9; 
0x0000000000468824: add byte ptr [rax - 0x77], cl; ret 0x53e8; 
0x000000000043feaa: add byte ptr [rax - 0x77], cl; ret 0x6b8; 
0x0000000000402e1e: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000047509f: add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x000000000041ab8f: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000045a7f9: add byte ptr [rax - 0x77], cl; ret 0x858b; 
0x000000000044fff4: add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004562c1: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000043fd13: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004503c7: add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x00000000004797a7: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000426e5b: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000045b79f: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000045af04: add byte ptr [rax - 0x77], cl; ret 0xf0e9; 
0x0000000000414520: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004037ac: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423dd2: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000042a7d4: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x00000000004616dd: add byte ptr [rax - 0x77], cl; retf 0x8948; lea eax, [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000045429f: add byte ptr [rax - 0x77], cl; retf 0x8948; lea eax, [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045ea27: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x3f], 1; clc; add cl, byte ptr [rax + 0x29]; ret; 
0x000000000047aa7f: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000410365: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x000000000048c797: add byte ptr [rax - 0x77], cl; sal dword ptr [rcx], 1; shr cl, cl; mov rbx, r15; jmp qword ptr [rsi + 0x2e]; 
0x00000000004478d0: add byte ptr [rax - 0x77], cl; shr r8b, 0xa6; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000441e4d: add byte ptr [rax - 0x77], cl; std; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x00000000004164fd: add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000049eb0d: add byte ptr [rax - 0x77], cl; sub bl, r14b; ret; 
0x000000000049ebc3: add byte ptr [rax - 0x77], cl; sub byte ptr [r11 - 0x17], bl; xor dl, byte ptr [rsi + rsi*4]; jmp qword ptr [rsi - 0x70]; 
0x0000000000479743: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000043fb6f: add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000049ebd6: add byte ptr [rax - 0x77], cl; xor eax, 0x22f172; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea7e: add byte ptr [rax - 0x77], cl; xor eax, 0x22f2ca; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000043f75f: add byte ptr [rax - 0x77], cl; xor ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000046ddef: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000470a4f: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax + 0xf]; fucompp; ret 0xfffe; 
0x000000000049f6ba: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x22debb; jne 0x9f6a8; pop rbx; ret; 
0x00000000004407c7: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 + 0x48]; mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000046d06a: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x0000000000444842: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x000000000044393f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000412697: add byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x77], 4; and al, 0x74; ret 0x8b4c; 
0x000000000048c5c2: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdx + 0x5b], 0x31; test byte ptr [rbx + 0x2413f33d], 0; jmp rax; 
0x000000000049cdef: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000047ed37: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402595: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x000000000047e89e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000412c60: add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000041f2e3: add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret 0x8548; 
0x000000000043fdaa: add byte ptr [rax - 0x7d], cl; call 0xffffffffc48745b3; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041f6c8: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000401b08: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004573cf: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000455da8: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000049d6bf: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000041f7f2: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000448e1f: add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83480b89; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000041ce5f: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x000000000043e8ff: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000047262f: add byte ptr [rax - 0x7d], cl; ret 0x4401; 
0x000000000040f1df: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047e95f: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a143f: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453daf: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000004016ff: add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x00000000004480a6: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000044d090: add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x0000000000423c5f: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046cf87: add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000042714f: add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x00000000004270df: add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000497a7e: add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x000000000044849f: add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000046af37: add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000046756f: add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x00000000004266f0: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042a573: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423c83: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046ff7f: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000040199e: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f4bf: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000046df2f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x000000000044d814: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000047c933: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x48; mov dword ptr [rip + 0x2514d1], eax; add rsp, 8; ret; 
0x000000000044f29f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000041b1b1: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x287; 
0x000000000047d112: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x0000000000447d8c: add byte ptr [rax - 0x7f], cl; ret 0x6720; 
0x0000000000433ecb: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000049d63f: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x000000000049d63f: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x00000000004c2850: add byte ptr [rax - 0xa], dl; jmp rbx; 
0x00000000004bfb4f: add byte ptr [rax - 0xb], al; hlt; call qword ptr [rax]; 
0x00000000004c0d90: add byte ptr [rax - 0xb], dl; jmp qword ptr [rcx]; 
0x00000000004c703f: add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x000000000044de4e: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000452c6d: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c5f2: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000411312: add byte ptr [rax - 1], bh; ret; 
0x0000000000417a2e: add byte ptr [rax - 1], dil; ret; 
0x00000000004c76e0: add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x000000000044561f: add byte ptr [rax - 9], cl; fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x000000000041b1b5: add byte ptr [rax], 0; add al, ch; ret 0x287; 
0x000000000048c184: add byte ptr [rax], 0; add al, ch; ret; 
0x00000000004154e9: add byte ptr [rax], 0; add bl, dh; ret; 
0x0000000000418d6f: add byte ptr [rax], 0; add byte ptr [rax + 0x6cb800], bh; ret; 
0x0000000000411549: add byte ptr [rax], 0; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000044a0da: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; jl 0x4a106; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041795d: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2b5c40; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000410563: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0x5c4262c9; ret; 
0x0000000000443d13: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041451d: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000483f20: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000412c5d: add byte ptr [rax], 0; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000042718b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000004271ab: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000497f3b: add byte ptr [rax], 0; add byte ptr [rax], al; call rax; 
0x000000000041ed43: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rip + 0x2ae8b6], 0; ret; 
0x00000000004403ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000041618b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000047377b: add byte ptr [rax], 0; add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x00000000004366eb: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000049cd63: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000476a43: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000499eb3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004717d3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041db7b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048bff3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000480c4b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000046cffb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000046e99b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043652b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000043c50b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000412c7b: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044ee23: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044ffbb: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000043683b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004367cb: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044561b: add byte ptr [rax], 0; add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000043ed8b: add byte ptr [rax], 0; add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000041db93: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000418d7b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042df4b: add byte ptr [rax], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000045b27a: add byte ptr [rax], 0; add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000046b7b5: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000410af6: add byte ptr [rax], 0; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x00000000004963e5: add byte ptr [rax], 0; add byte ptr [rcx], bh; ret; 
0x000000000044395c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000435767: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000449e2b: add byte ptr [rax], 0; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000042f9a1: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041b35e: add byte ptr [rax], 0; add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000448292: add byte ptr [rax], 0; add dh, dh; ret 0x4801; 
0x000000000041e51b: add byte ptr [rax], 0; add dh, dh; ret; 
0x000000000041037b: add byte ptr [rax], 0; je 0x10388; mov eax, edx; pop rbx; ret; 
0x000000000048c097: add byte ptr [rax], 0; je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x00000000004c372f: add byte ptr [rax], ah; add al, 0xf8; call rsp; 
0x00000000004c335f: add byte ptr [rax], ah; out 0xf7, al; call qword ptr [rbx]; 
0x00000000004c658f: add byte ptr [rax], ah; xchg ebx, eax; cli; jmp qword ptr [rax]; 
0x00000000004c307e: add byte ptr [rax], al; adc ah, 0xf7; call qword ptr [rcx]; 
0x00000000004c3606: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x00000000004c4cd2: add byte ptr [rax], al; adc al, 0x5d; add byte ptr [rax], al; test al, 0xbb; clc; call qword ptr [rsi]; 
0x000000000048bd56: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004a418e: add byte ptr [rax], al; adc byte ptr [rcx - 0x5dcf0008], ah; clc; call qword ptr [rax - 0x5d]; 
0x00000000004c3f3e: add byte ptr [rax], al; adc byte ptr [rdi], bh; clc; call qword ptr [rax]; 
0x00000000004c354e: add byte ptr [rax], al; adc byte ptr [rdx], al; clc; jmp qword ptr [rbx]; 
0x00000000004c8b6e: add byte ptr [rax], al; adc byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c36a1: add byte ptr [rax], al; add ah, ah; add byte ptr [rax], r8b; clc; add bh, al; call qword ptr [rsi]; 
0x00000000004c216e: add byte ptr [rax], al; add ah, ah; cmc; jmp qword ptr [rdx]; 
0x00000000004c8da1: add byte ptr [rax], al; add ah, ah; popfq; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c74a1: add byte ptr [rax], al; add ah, ah; test byte ptr [rax], al; add al, bl; sub bl, bh; call rdx; 
0x00000000004c77a1: add byte ptr [rax], al; add ah, ah; xchg dword ptr [rax], eax; add byte ptr [rax + 0x52], ch; sti; call qword ptr [rsi]; 
0x00000000004c7381: add byte ptr [rax], al; add ah, al; add dword ptr [rax], 0; cmp byte ptr [rbx], ah; sti; jmp qword ptr [rdi]; 
0x00000000004c76b9: add byte ptr [rax], al; add ah, bh; xchg byte ptr [rax], al; add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x00000000004bff99: add byte ptr [rax], al; add ah, bl; sldt word ptr [rax]; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004c2399: add byte ptr [rax], al; add ah, bl; xor eax, dword ptr [rax]; add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x00000000004c35a9: add byte ptr [rax], al; add ah, ch; add byte ptr [r8], r8b; nop; add bh, al; call qword ptr [rcx]; 
0x00000000004c0d89: add byte ptr [rax], al; add ah, cl; sbb eax, 0x50000000; cmc; jmp qword ptr [rcx]; 
0x00000000004c3ab1: add byte ptr [rax], al; add ah, dh; add byte ptr [rax], al; cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004c15b1: add byte ptr [rax], al; add ah, dh; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004c0591: add byte ptr [rax], al; add ah, dl; adc eax, 0x26e80000; cmc; jmp qword ptr [rsi]; 
0x00000000004c1291: add byte ptr [rax], al; add ah, dl; and al, byte ptr [rax]; add byte ptr [rax], cl; cmc; jmp qword ptr [rdx]; 
0x00000000004c9891: add byte ptr [rax], al; add ah, dl; test al, 0; add byte ptr [rax + 0x34], bh; std; jmp qword ptr [rcx]; 
0x0000000000479c9f: add byte ptr [rax], al; add al, 0x48; add esp, 8; ret; 
0x00000000004bf1c2: add byte ptr [rax], al; add al, 2; add byte ptr [rax], al; sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x00000000004bf07d: add byte ptr [rax], al; add al, bl; sbb dh, ah; call qword ptr [rsi + 1]; 
0x0000000000427edb: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 0x67]; ret; 
0x000000000042266f: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 3]; ret; 
0x0000000000427f2e: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 4]; ret; 
0x0000000000427215: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, [rip + 0x1d]; ret; 
0x0000000000427dbf: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x12ad3]; ret; 
0x000000000042488f: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x14853]; ret; 
0x000000000042780c: add byte ptr [rax], al; add al, byte ptr [rax]; je 0x27819; lea rax, [rip + 0x17647]; ret; 
0x00000000004015c8: add byte ptr [rax], al; add al, byte ptr [rax]; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x000000000041b1b6: add byte ptr [rax], al; add al, ch; ret 0x287; 
0x0000000000486fd5: add byte ptr [rax], al; add al, ch; ret; 
0x000000000047eb6a: add byte ptr [rax], al; add al, ch; sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000048bd6d: add byte ptr [rax], al; add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000445cdd: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041ed45: add byte ptr [rax], al; add bh, al; add eax, 0x2ae8b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004611c6: add byte ptr [rax], al; add bh, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000414518: add byte ptr [rax], al; add bh, bh; nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004443ad: add byte ptr [rax], al; add bh, dh; ret 0; 
0x00000000004222e2: add byte ptr [rax], al; add bl, al; mov rsi, rbx; mov rdi, rax; call rcx; 
0x00000000004729f8: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x000000000043cb8d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043c50d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042788d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004154ea: add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000481035: add byte ptr [rax], al; add byte ptr [rax + 0x10247c], al; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004222dd: add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x00000000004403ad: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; 
0x00000000004403ad: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047ca0d: add byte ptr [rax], al; add byte ptr [rax + 0x2518113d], al; add byte ptr [rax], al; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x0000000000453b7e: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; bnd call qword ptr [rax + 0x38]; 
0x000000000045d4ab: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000045de07: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000004667f9: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000044fc99: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000045098d: add byte ptr [rax], al; add byte ptr [rax + 0x441f0f], dl; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000004438ed: add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; 
0x00000000004438ed: add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000044ee25: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x0000000000412c7d: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; jg 0x12cf4; mov eax, 3; syscall; 
0x0000000000413466: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; jnp 0x134dd; syscall; 
0x000000000046d28d: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000046be11: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040dfe0: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; stc; syscall; 
0x000000000044070e: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 0x48; syscall; 
0x000000000044dd96: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x000000000047355d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047355d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000047354d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047354d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047356d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047356d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x0000000000418d70: add byte ptr [rax], al; add byte ptr [rax + 0x6cb800], bh; ret; 
0x000000000049cbdc: add byte ptr [rax], al; add byte ptr [rax + 0x75], al; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x000000000043ca2d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000044102d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044102d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000044398f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044398f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000443a36: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043fd94: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x00000000004c0b1e: add byte ptr [rax], al; add byte ptr [rax + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x000000000040186e: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x00000000004221af: add byte ptr [rax], al; add byte ptr [rax + 0xfd63948], al; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000046ee8d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x6eeb0; add rax, 2; ret; 
0x000000000043fa91: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048bd73: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000004813dd: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x1a75; 
0x0000000000481504: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000413461: add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044ff52: add byte ptr [rax], al; add byte ptr [rax + 3], bh; syscall; 
0x000000000049b6ed: add byte ptr [rax], al; add byte ptr [rax + 5], bh; ret; 
0x00000000004438ad: add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; 
0x00000000004438ad: add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004bf079: add byte ptr [rax], al; add byte ptr [rax + rax + 0x1ad80000], bh; hlt; call qword ptr [rsi + 1]; 
0x00000000004bf059: add byte ptr [rax], al; add byte ptr [rax + rax + 0x1ae20000], bl; hlt; call qword ptr [rsi]; 
0x00000000004ae169: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004c7039: add byte ptr [rax], al; add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x00000000004bf36d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f6d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c75fd: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c7a95: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rax], al; fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x00000000004bf075: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004c3575: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x00000000004c7035: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x00000000004c5505: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x00000000004c8745: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c675d: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004c5a25: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c5405: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004c3605: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x00000000004c226d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004c1455: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c97e1: add byte ptr [rax], al; add byte ptr [rax + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004c7809: add byte ptr [rax], al; add byte ptr [rax + rcx*4], cl; add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x00000000004c4021: add byte ptr [rax], al; add byte ptr [rax + rdx*2], ah; add byte ptr [rax], bh; clc; call qword ptr [rbx + 5]; 
0x00000000004c8061: add byte ptr [rax], al; add byte ptr [rax + rdx*4 - 0x6ec80000], ah; sti; call qword ptr [rax]; 
0x00000000004c8079: add byte ptr [rax], al; add byte ptr [rax + rdx*4 - 0x6ed00000], bh; sti; call qword ptr [rdx]; 
0x00000000004c6049: add byte ptr [rax], al; add byte ptr [rax + rsi*2 + 0x7a600000], cl; cli; jmp qword ptr [rdx]; 
0x00000000004c5fd9: add byte ptr [rax], al; add byte ptr [rax + rsi*2], bl; add byte ptr [rax], al; push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c6009: add byte ptr [rax], al; add byte ptr [rax + rsi*2], cl; add al, al; js 0xc600d; call rsi; 
0x000000000049cc2d: add byte ptr [rax], al; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x000000000046d1d3: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004179d1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2b5bc9; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004167a6: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004143cd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x000000000045947d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x000000000041154a: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000440eaf: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046eeed: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046eecd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef2d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046eedd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef1d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045099d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000049cd94: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; call 0x481056dd; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000044dcab: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000422478: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000041bc95: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; je 0x1bcc0; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x0000000000495738: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95763; js 0x95782; call rsp; 
0x0000000000495a4d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95a78; js 0x95a97; call rsp; 
0x0000000000495e14: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95e3f; js 0x95e5e; call rsp; 
0x000000000041064a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047cfc7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 1; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043a71d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000044696d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2879f1; ret; 
0x00000000004178cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2b37e9; ret; 
0x000000000041ac99: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000044a0db: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jl 0x4a106; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046d57d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000043309d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043329d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049753b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000419bfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x000000000043274d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435d4d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000413806: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000043290d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000046cffd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x0000000000415ebd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046d26d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x000000000049cd65: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc al, 0xf7; add rsp, 8; ret; 
0x000000000041795e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2b5c40; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x000000000040fd5a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fcc9: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf5a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8bf70; add rsp, 0xd8; ret; 
0x0000000000410564: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4262c9; ret; 
0x0000000000413c46: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x8c5bf98; pop rbx; pop rbp; ret; 
0x00000000004178fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004419c5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046b96f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000410a4c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x00000000004127da: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x0000000000417554: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411d14: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e10: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f80: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x0000000000499e5c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000472237: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000004427c3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x00000000004426c3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x000000000045ee15: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; iretd; call qword ptr [rax + 0x38]; 
0x000000000041060f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x0000000000443d14: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043fcfa: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046cf4d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000410da2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000044237f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000041ecca: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000468822: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x53e8; 
0x000000000047509d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x0000000000497564: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000043fd11: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000426e59: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000045b79d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000041451e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000410651: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047aa7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000410363: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x00000000004164fb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043fb6d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000047ed35: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402593: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x000000000047e89c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000412c5e: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000049d6bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000043e8fd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000445ce3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047e95d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a143d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453dad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000044d08e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x000000000042bbc7: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042714d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x00000000004270dd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x000000000044849d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000046764d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x000000000042bc31: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046ff7d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000443d1c: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f4bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000044f29d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004356d8: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000049d63d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x00000000004c284e: add byte ptr [rax], al; add byte ptr [rax - 0xa], dl; jmp rbx; 
0x00000000004c0d8e: add byte ptr [rax], al; add byte ptr [rax - 0xb], dl; jmp qword ptr [rcx]; 
0x0000000000452c6b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411310: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004c76de: add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x000000000044561d: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x00000000004a418c: add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rcx - 0x5dcf0008], ah; clc; call qword ptr [rax - 0x5d]; 
0x00000000004443ab: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0; 
0x000000000042788b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004178bb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004222db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x000000000047d03b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004438eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], bh; syscall; 
0x000000000046d28b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d4c; 
0x000000000044dec0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x000000000047355b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047355b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000047354b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047354b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047356b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047356b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000043ca2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000044102b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000049b6eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 5], bh; ret; 
0x00000000004438ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; 
0x00000000004bf36b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c675b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004143cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x000000000045947b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xfff0; 
0x000000000049b75b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000046b68b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046eeeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000046eecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046eedb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000046ef1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045099b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000044696b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2879f1; ret; 
0x00000000004178cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2b37e9; ret; 
0x000000000046d57b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000004178fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000041ecc8: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000468820: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x53e8; 
0x000000000045f6ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000043fb6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, esi; syscall; 
0x000000000043e8fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000047e95b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004a143b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000453dab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000042714b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x00000000004270db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x000000000044849b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000046764b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x000000000049b0cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000458e6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f4bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000044f29b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000049d63b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x75]; 
0x000000000041787b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004afff2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004b04e2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x00000000004166fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004c8744: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c675c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x000000000049f14b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x000000000043c44b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000043bf7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000435fcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000004180db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000049eb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000049bdab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043eb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000049822b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000423c3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042280b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004144cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x144e0; ret; 
0x0000000000412ecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042df0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042719b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000043bf3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000043a78b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000004b860b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx], bh; mov esp, 0x130; add byte ptr [rax], al; ret 0x4b7d; 
0x0000000000473629: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x0000000000441069: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x0000000000473539: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x0000000000473539: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x0000000000441049: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x00000000004438c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004bf36c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f6c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004811a5: add byte ptr [rax], al; add byte ptr [rax], al; add rax, -8; ret; 
0x000000000046eeac: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x0000000000472eae: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004469d5: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480a2f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000427a5c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x1f; jne 0x27946; mov rax, rdi; ret; 
0x000000000042718c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042719c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004271ac: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042df0c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000049a95a: add byte ptr [rax], al; add byte ptr [rax], al; call 0x9a630; add rsp, 0x28; ret; 
0x0000000000497f3c: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004b201c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000400c67: add byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x00000000004b11cc: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x000000000047ca0c: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip + 0x251811], 0; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x00000000004223fa: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000049cc2c: add byte ptr [rax], al; add byte ptr [rax], al; je 0x9cbe2; add rsp, 0x18; ret; 
0x00000000004605d4: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x000000000043d05c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000043d06c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000043d07c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000043d08c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000043d09c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfdc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000043cfec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000043cffc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000043d00c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000043d01c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000043d02c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000043d03c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000043d04c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000422477: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043cfcc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x000000000043bf3c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000043a78c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000043bf4c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000043a79c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000043ca2c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c40c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000043c42c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004605b6: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004605c0: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004605ca: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000455d19: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455d0f: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x000000000048bd6c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000041ed44: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rip + 0x2ae8b6], 0; ret; 
0x000000000043ca3c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000043c41c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004222dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004403ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x00000000004438ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x000000000047355c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047355c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047354c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047354c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047356c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047356c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044102c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000041618c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000048bd72: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000413460: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000049b6ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 5; ret; 
0x00000000004438ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; syscall; 
0x000000000043bf7c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000004175bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a5ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x000000000047377c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043c44c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000435fcc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004366ec: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000443984: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000046d1d2: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000455d23: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x00000000004168c5: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cdac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000049cd64: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000004179d0: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2b5bc9], 0; ret; 
0x0000000000476a44: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000045099c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000499eb4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004717d4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041db7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048bff4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000045085c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045083c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045081c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041786c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eecc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046eedc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046eeec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046eefc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046ef0c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046ef1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046ef2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000480c4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000462270: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000047cfc6: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043becc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000043a71c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000046d57c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046cffc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000049cdbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049ce1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049ce0c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cdcc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000415ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d26c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000041629c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000044696c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x00000000004178fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043c48c: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000044fea3: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rdi]; syscall; 
0x000000000043fb6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x000000000048c84f: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000043274c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043652c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000049822c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000043cb8c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043c50c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042788c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000412c7c: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044dec1: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044ee24: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044ffbc: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000043e2cc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000042f6ac: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000412ecc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000423aac: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043615c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043683c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004360dc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004367cc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044561c: add byte ptr [rax], al; add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000047362a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x000000000044106a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x000000000047353a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x000000000047353a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; ret; 
0x000000000044104a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x00000000004438ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004134ec: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047d375: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x00000000004008ec: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043f578: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000416570: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415d71: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b0fec: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b1784: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004afff4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004b04e4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x00000000004b8614: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4b7d; 
0x00000000004be0ec: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4bd7; 
0x00000000004166fd: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004affec: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000044050a: add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000044050a: add byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047f33c: add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rdi + 0x314], 8; je 0x7f3ad; pop rbx; ret; 
0x0000000000402592: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004027de: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004030bd: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x000000000040330c: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403500: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403a63: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000043f7a9: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000044529a: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x000000000044ec88: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c2: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044ede8: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef61: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f241: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000047d771: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d799: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d80f: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed34: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f2dc: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000480a97: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000498671: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x000000000049869d: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x00000000004009a1: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x998; call rax; 
0x000000000049a22b: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2d3: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049f484: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x000000000042213c: add byte ptr [rax], al; add byte ptr [rax], al; test sil, 7; mov eax, 0x16; je 0x22150; ret; 
0x000000000043ed8c: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000041db94: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000412c3c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004144cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test rdx, rdx; jne 0x144e0; ret; 
0x0000000000400f2c: add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000042df4c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004be0e5: add byte ptr [rax], al; add byte ptr [rax], bh; fmul qword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4bd7; 
0x0000000000403a5f: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000047d80b: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed30: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f2d8: add byte ptr [rax], al; add byte ptr [rax], bh; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000427229: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, [rip + 0x8449]; ret; 
0x00000000004c7036: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x00000000004c5506: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x00000000004c8746: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c675e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004c5a26: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c75fe: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c5406: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004c360a: add byte ptr [rax], al; add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x000000000045d1ac: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000045d27c: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000416120: add byte ptr [rax], al; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004733fd: add byte ptr [rax], al; add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c0546: add byte ptr [rax], al; add byte ptr [rbp + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x00000000004bf551: add byte ptr [rax], al; add byte ptr [rbp + rax + 0x5b680000], dl; hlt; call qword ptr [rax]; 
0x00000000004c3549: add byte ptr [rax], al; add byte ptr [rbp + rax*2 + 0x2100000], cl; clc; jmp qword ptr [rbx]; 
0x00000000004c3579: add byte ptr [rax], al; add byte ptr [rbp + rax*2 + 0x2500000], bh; clc; jmp qword ptr [rbx]; 
0x00000000004c7541: add byte ptr [rax], al; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c0d69: add byte ptr [rax], al; add byte ptr [rbp + rbx + 0x4fc00000], ch; cmc; call qword ptr [rsi]; 
0x00000000004c4d19: add byte ptr [rax], al; add byte ptr [rbp + rbx*2], bl; add byte ptr [rax - 0x44], al; clc; jmp qword ptr [rsi]; 
0x000000000045d4a3: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046d6cc: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004c7d51: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x00000000004c6d71: add byte ptr [rax], al; add byte ptr [rbp + rdi*2 - 0x35980000], dh; cli; call qword ptr [rcx]; 
0x00000000004c0539: add byte ptr [rax], al; add byte ptr [rbp + rdx], bh; add byte ptr [rax + 0x26], dh; cmc; call qword ptr [rbx]; 
0x00000000004c1579: add byte ptr [rax], al; add byte ptr [rbp + riz + 0x69700000], bh; cmc; call qword ptr [rsi]; 
0x00000000004c5509: add byte ptr [rax], al; add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x000000000043fd88: add byte ptr [rax], al; add byte ptr [rbp - 0x35], dh; lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000443848: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004c1cd9: add byte ptr [rax], al; add byte ptr [rbp - 0x3f500000], bl; cmc; call qword ptr [rcx]; 
0x00000000004736b9: add byte ptr [rax], al; add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000004ae161: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x000000000043f570: add byte ptr [rax], al; add byte ptr [rbp - 0x63], dh; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000046a95d: add byte ptr [rax], al; add byte ptr [rbp - 0x76bb7ffc], cl; ret 0xf229; 
0x000000000043f22a: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; fild dword ptr [rcx + 0xf]; xchg esp, eax; ret 0xfe83; 
0x0000000000458843: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x000000000047d376: add byte ptr [rax], al; add byte ptr [rbx + 0x24edf00d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000043f579: add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x0000000000495a7f: add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000049f14d: add byte ptr [rax], al; add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x0000000000443adc: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004101f9: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045b27b: add byte ptr [rax], al; add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000043ca6d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043c44d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000043bf7d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x00000000004161a4: add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x00000000004334bd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332bd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004330bd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435fcd: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000412683: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000416571: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000414030: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049eb3d: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000043667d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043660d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043659d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004bf371: add byte ptr [rax], al; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c8b69: add byte ptr [rax], al; add byte ptr [rbx + rbx*4 + 0x3c100000], ch; cld; jmp qword ptr [rdx]; 
0x00000000004bfb79: add byte ptr [rax], al; add byte ptr [rbx + rcx - 0xac00000], bh; hlt; call qword ptr [rax]; 
0x00000000004bfb49: add byte ptr [rax], al; add byte ptr [rbx + rcx - 0xac00000], cl; hlt; call qword ptr [rax]; 
0x000000000049ec34: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x25], cl; stosb byte ptr [rdi], al; ret; 
0x0000000000472f54: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x00000000004c7b41: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x69c80000], al; sti; jmp qword ptr [rdx]; 
0x00000000004530cc: add byte ptr [rax], al; add byte ptr [rbx + riz*2 - 0x1e], cl; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004c9351: add byte ptr [rax], al; add byte ptr [rbx + riz*4 + 0xe580000], dl; std; jmp qword ptr [rax]; 
0x0000000000461346: add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049cced: add byte ptr [rax], al; add byte ptr [rbx - 0x118af706], al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000411c9d: add byte ptr [rax], al; add byte ptr [rbx - 0x3b7cb7fe], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045eaec: add byte ptr [rax], al; add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x00000000004560f2: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456143: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458233: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d66: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x000000000046cfdf: add byte ptr [rax], al; add byte ptr [rbx - 0x74b7ffb3], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000046b7b6: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004176fc: add byte ptr [rax], al; add byte ptr [rbx - 0xd], bl; ret; 
0x00000000004c4cd1: add byte ptr [rax], al; add byte ptr [rbx*2 - 0x44580000], dl; clc; call qword ptr [rsi]; 
0x00000000004c8cf1: add byte ptr [rax], al; add byte ptr [rbx*4 + 0x3da80000], dh; cld; call qword ptr [rax]; 
0x00000000004c8cc1: add byte ptr [rax], al; add byte ptr [rbx*4 - 0x7c080000], al; cld; call qword ptr [rax]; 
0x000000000047bf9b: add byte ptr [rax], al; add byte ptr [rcx + 0x2c6d8], cl; add rsp, 0x140; pop rbx; ret; 
0x0000000000410af7: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x00000000004165c4: add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d0da: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000047377d: add byte ptr [rax], al; add byte ptr [rcx + 0xc], bh; mov eax, ecx; syscall; 
0x000000000041623f: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000045e0f2: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000045e075: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000476ea2: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000049bdad: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043eb3d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000049cc90: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004218a8: add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x00000000004c7111: add byte ptr [rax], al; add byte ptr [rcx + rax*4], dl; add byte ptr [rax], bh; cli; cli; jmp rdi; 
0x00000000004bf0e9: add byte ptr [rax], al; add byte ptr [rcx + rax], ch; add byte ptr [rax], al; rcr byte ptr [rsi], 1; hlt; call rdi; 
0x00000000004bf0c9: add byte ptr [rax], al; add byte ptr [rcx + rax], cl; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x00000000004c4959: add byte ptr [rax], al; add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x0000000000441fc1: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000046bde2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000453fbf: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049822d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004420f5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000046d7aa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x0000000000454745: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f5c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b739: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000460d0a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000456b7a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410cae: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000410cb8: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x32], cl; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004168c6: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000413a8d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fd0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000413e9b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000441f2a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000441f39: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x00000000004c7901: add byte ptr [rax], al; add byte ptr [rcx + rcx*4], al; add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x00000000004c8109: add byte ptr [rax], al; add byte ptr [rcx + rdx*4], cl; add byte ptr [rax - 0x6f], ah; sti; call qword ptr [rax]; 
0x00000000004c2169: add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x000000000046c98e: add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x0000000000499f9a: add byte ptr [rax], al; add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046d20f: add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x00000000004602e0: add byte ptr [rax], al; add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044ff4c: add byte ptr [rax], al; add byte ptr [rcx - 0x43], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x0000000000426a51: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004597dc: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000423c3d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042280d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041e215: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000496c7f: add byte ptr [rax], al; add byte ptr [rcx - 0xb37b], cl; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000427260: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000427286: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004c7ce9: add byte ptr [rax], al; add byte ptr [rcx*4 - 0x7c100000], ch; sti; jmp rsi; 
0x00000000004c3a3e: add byte ptr [rax], al; add byte ptr [rcx], ah; clc; call qword ptr [rax]; 
0x00000000004963e6: add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x000000000044395d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000045c57a: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd089; 
0x000000000043fcc9: add byte ptr [rax], al; add byte ptr [rcx], dh; idiv byte ptr [rax + 2]; syscall; 
0x000000000040f02a: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004144cd: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x144e0; ret; 
0x000000000041d347: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000044dd19: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6dc8]; mov eax, ecx; syscall; 
0x0000000000415602: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000473513: add byte ptr [rax], al; add byte ptr [rcx], dh; shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x00000000004100c4: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x10]; 
0x00000000004c3366: add byte ptr [rax], al; add byte ptr [rdi + 0xe], al; adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000049ca6f: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x000000000042241e: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x1a966]; ret; 
0x00000000004c3729: add byte ptr [rax], al; add byte ptr [rdi + rax*2], ch; add byte ptr [rax], ah; add al, 0xf8; call rsp; 
0x00000000004c76d9: add byte ptr [rax], al; add byte ptr [rdi + rax*4], bl; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x00000000004c0f59: add byte ptr [rax], al; add byte ptr [rdi + rbx + 0x56600000], bl; cmc; call qword ptr [rcx]; 
0x00000000004c7f71: add byte ptr [rax], al; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c8749: add byte ptr [rax], al; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c0731: add byte ptr [rax], al; add byte ptr [rdi + rdx], dh; add byte ptr [rax + 0x2f], cl; cmc; call qword ptr [rax]; 
0x00000000004c6761: add byte ptr [rax], al; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004c550e: add byte ptr [rax], al; add byte ptr [rdi - 7], bh; call rdx; 
0x0000000000435768: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000043f4d5: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x00000000004367cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043683d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000449e2c: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046b3d5: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x0000000000423aad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000412ecd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042f6ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042df0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000004271ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042719d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004271bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x27200; add rax, rdi; ret; 
0x000000000042718d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000004425a3: add byte ptr [rax], al; add byte ptr [rdi], cl; test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x000000000044239c: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x0000000000441ed8: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000461917: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000497a76: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000444684: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xc985; 
0x00000000004745a7: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xc283; 
0x000000000046bddd: add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043fcf5: add byte ptr [rax], al; add byte ptr [rdx + 0x1f], bh; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000043bf3d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000043a78d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000044398a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000004bf1c1: add byte ptr [rax], al; add byte ptr [rdx + rax], al; add byte ptr [rax], al; sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x00000000004c5a29: add byte ptr [rax], al; add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x0000000000445441: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x285b4c; pop rbx; ret; 
0x00000000004c3a39: add byte ptr [rax], al; add byte ptr [rdx + rcx*2], bh; add byte ptr [rax], al; and eax, edi; call qword ptr [rax]; 
0x00000000004c39f1: add byte ptr [rax], al; add byte ptr [rdx + rcx*2], dh; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004c2a21: add byte ptr [rax], al; add byte ptr [rdx + rdi], ah; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c1279: add byte ptr [rax], al; add byte ptr [rdx + riz + 0x63800000], bh; cmc; call qword ptr [rsi]; 
0x00000000004c2271: add byte ptr [rax], al; add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004c44d9: add byte ptr [rax], al; add byte ptr [rdx*2 + 0x7b800000], bl; clc; call qword ptr [rcx]; 
0x000000000042780b: add byte ptr [rax], al; add byte ptr [rdx], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x17647]; ret; 
0x00000000004b860d: add byte ptr [rax], al; add byte ptr [rdx], bh; mov esp, 0x130; add byte ptr [rax], al; ret 0x4b7d; 
0x0000000000400f23: add byte ptr [rax], al; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000446a09: add byte ptr [rax], al; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c67c: add byte ptr [rax], al; add byte ptr [rsi + 0x48c590], bh; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003ca: add byte ptr [rax], al; add byte ptr [rsi + 0x4a2b28], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400402: add byte ptr [rax], al; add byte ptr [rsi + 0x4a2b46], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000044355a: add byte ptr [rax], al; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x000000000047952e: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443985: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000472f7d: add byte ptr [rax], al; add byte ptr [rsi + 0x90800], bh; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004c0a26: add byte ptr [rax], al; add byte ptr [rsi + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x000000000042f9a2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004270a2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000441f03: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call rbx; 
0x00000000004420f0: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x0000000000441fbc: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x0000000000441f34: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x000000000044236e: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x00000000004420e1: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x0000000000441fad: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x0000000000441f25: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x000000000049f155: add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x00000000004c3609: add byte ptr [rax], al; add byte ptr [rsi + rax*2], cl; add al, al; add bh, al; call qword ptr [rdi]; 
0x00000000004c7601: add byte ptr [rax], al; add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c9f0e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c7c46: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7bd6: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7c0e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c7e59: add byte ptr [rax], al; add byte ptr [rsi + rcx*4 - 0x70f00000], bl; sti; jmp qword ptr [rdx]; 
0x00000000004c0651: add byte ptr [rax], al; add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x00000000004c1661: add byte ptr [rax], al; add byte ptr [rsi + riz + 0x6a980000], ah; cmc; call qword ptr [rdx]; 
0x00000000004c55f1: add byte ptr [rax], al; add byte ptr [rsi + riz*2], dh; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c6679: add byte ptr [rax], al; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x000000000047364b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp dword ptr [rip + 0x25ac05], 0; jne 0x7366d; mov eax, 3; syscall; 
0x000000000047362b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x000000000044106b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x000000000047353b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x000000000047353b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x000000000044104b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x00000000004438cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000450c0b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000043a79d: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004112a9: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416ca4: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000413e44: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9c: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004c1441: add byte ptr [rax], al; add byte ptr [rsp + 0x65980000], al; cmc; call qword ptr [rsi]; 
0x00000000004c1459: add byte ptr [rax], al; add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004bf3d9: add byte ptr [rax], al; add byte ptr [rsp + rax], bl; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004c4c71: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 - 0x44780000], dh; clc; call qword ptr [rdi]; 
0x00000000004c0c19: add byte ptr [rax], al; add byte ptr [rsp + rbx], bl; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c3c51: add byte ptr [rax], al; add byte ptr [rsp + rcx*2 + 0x21b80000], dl; clc; call qword ptr [rsi + 0xb]; 
0x00000000004c5409: add byte ptr [rax], al; add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004c13f1: add byte ptr [rax], al; add byte ptr [rsp], dh; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004bf36e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f6e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c6676: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004c550a: add byte ptr [rax], al; add byte ptr gs:[rax], al; add byte ptr [rdi - 7], bh; call rdx; 
0x000000000043ed8d: add byte ptr [rax], al; add ch, al; cli; jg 0x3ed9b; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004594cd: add byte ptr [rax], al; add ch, bl; fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x00000000004c9227: add byte ptr [rax], al; add cl, byte ptr [rcx + 0xe]; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x000000000046615a: add byte ptr [rax], al; add cl, ch; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000464856: add byte ptr [rax], al; add cl, ch; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047ae62: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x000000000044acc5: add byte ptr [rax], al; add cl, ch; ret; 
0x00000000004174ae: add byte ptr [rax], al; add cl, ch; sar ebp, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b35f: add byte ptr [rax], al; add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004c239e: add byte ptr [rax], al; add dh, dh; cmc; call qword ptr [rdx]; 
0x0000000000448293: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000043e291: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004686f0: add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x00000000004185d8: add byte ptr [rax], al; add dh, dh; ret; 
0x000000000047f33d: add byte ptr [rax], al; add dh, dh; xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x00000000004bf05d: add byte ptr [rax], al; add dl, ah; sbb dh, ah; call qword ptr [rsi]; 
0x000000000049b895: add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004c299f: add byte ptr [rax], al; add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004811a7: add byte ptr [rax], al; add rax, -8; ret; 
0x000000000046eeae: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000049cc91: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x0000000000426f54: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000479534: add byte ptr [rax], al; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000473160: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f74e: add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000043fb25: add byte ptr [rax], al; add rsp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000043fa97: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049cc98: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000046b646: add byte ptr [rax], al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000004734f4: add byte ptr [rax], al; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000472eb0: add byte ptr [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040153c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000040fecf: add byte ptr [rax], al; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450b86: add byte ptr [rax], al; add rsp, 0xd0; ret; 
0x000000000040fd65: add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x0000000000410c69: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000492ac1: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000040ef8d: add byte ptr [rax], al; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x00000000004469d7: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000413c75: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000040e03e: add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004249b6: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004c97e2: add byte ptr [rax], al; and al, 0xa8; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004c372e: add byte ptr [rax], al; and byte ptr [rax + rdi*8], al; call rsp; 
0x00000000004303e1: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004c3a3f: add byte ptr [rax], al; and eax, edi; call qword ptr [rax]; 
0x0000000000430cb3: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000004303e6: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000427a5e: add byte ptr [rax], al; and edx, 0x1f; jne 0x27946; mov rax, rdi; ret; 
0x000000000040192d: add byte ptr [rax], al; and rax, 0xffffffffffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x000000000042718e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042719e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004271ae: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042df0e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004271be: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x27200; add rax, rdi; ret; 
0x0000000000424a50: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000423a8e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e064: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e0f2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000418dc0: add byte ptr [rax], al; call 0x18460; test rax, rax; je 0x18dce; pop rbx; ret; 
0x0000000000418d65: add byte ptr [rax], al; call 0x43950; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000417953: add byte ptr [rax], al; call 0x43950; add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x00000000004103b9: add byte ptr [rax], al; call 0x43980; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004733d3: add byte ptr [rax], al; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x0000000000452e5b: add byte ptr [rax], al; call 0x43980; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000042107e: add byte ptr [rax], al; call 0x43980; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000049a95c: add byte ptr [rax], al; call 0x9a630; add rsp, 0x28; ret; 
0x00000000004141e3: add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000004141e3: add byte ptr [rax], al; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004530da: add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x0000000000413820: add byte ptr [rax], al; call qword ptr [rax + 0x40]; 
0x0000000000414492: add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000046d045: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000401a5a: add byte ptr [rax], al; call rax; 
0x0000000000441f09: add byte ptr [rax], al; call rbx; 
0x00000000004b201e: add byte ptr [rax], al; call rdi; 
0x0000000000400c69: add byte ptr [rax], al; call rdx; 
0x00000000004b11ce: add byte ptr [rax], al; call rsp; 
0x00000000004c36a6: add byte ptr [rax], al; clc; add bh, al; call qword ptr [rsi]; 
0x00000000004c8da6: add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c76ba: add byte ptr [rax], al; cld; xchg byte ptr [rax], al; add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x00000000004bfb4e: add byte ptr [rax], al; cmc; hlt; call qword ptr [rax]; 
0x0000000000496808: add byte ptr [rax], al; cmove edx, eax; call 0x76e40; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004c7a96: add byte ptr [rax], al; cmp al, 0; add byte ptr [rax], al; fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x00000000004c2a22: add byte ptr [rax], al; cmp al, byte ptr fs:[rax]; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c7386: add byte ptr [rax], al; cmp byte ptr [rbx], ah; sti; jmp qword ptr [rdi]; 
0x00000000004c4026: add byte ptr [rax], al; cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x000000000047ca0e: add byte ptr [rax], al; cmp byte ptr [rip + 0x251811], 0; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x0000000000481036: add byte ptr [rax], al; cmp byte ptr [rsp + 0x10], 0; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004bfb66: add byte ptr [rax], al; cmp ch, dh; hlt; call qword ptr [rdx]; 
0x000000000049d63e: add byte ptr [rax], al; cmp dil, 0x50; jne 0x9d633; xor eax, eax; add rsp, 8; ret; 
0x000000000049d69e: add byte ptr [rax], al; cmp dil, 0x50; jne 0x9d693; xor eax, eax; add rsp, 8; ret; 
0x000000000043ed9e: add byte ptr [rax], al; cmp dl, 8; jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004c7116: add byte ptr [rax], al; cmp dl, bh; cli; jmp rdi; 
0x000000000044055e: add byte ptr [rax], al; cmp dword ptr [rip + 0x28dcf5], 0; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004404fe: add byte ptr [rax], al; cmp dword ptr [rip + 0x28dd55], 0; jne 0x4051d; mov eax, 0; syscall; 
0x0000000000411d07: add byte ptr [rax], al; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x0000000000443b3e: add byte ptr [rax], al; cmp eax, -1; jne 0x43b38; xor eax, eax; leave; ret; 
0x000000000046c5e8: add byte ptr [rax], al; cmp eax, 1; je 0x6c700; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c7a8: add byte ptr [rax], al; cmp eax, 1; je 0x6c8e0; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000400bb2: add byte ptr [rax], al; cmp eax, 5; ja 0xc9e; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x000000000043e748: add byte ptr [rax], al; cmp eax, ecx; jne 0x3e805; xor eax, eax; ret; 
0x000000000044395e: add byte ptr [rax], al; cmp eax, edx; jne 0x4396c; nop; mov eax, 0xca; syscall; 
0x000000000049ccee: add byte ptr [rax], al; cmp edx, 8; jne 0x9cce3; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000442976: add byte ptr [rax], al; cmp qword ptr [r13 + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442956: add byte ptr [rax], al; cmp qword ptr [r13 + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429b6: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a16: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f6: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a96: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a56: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a36: add byte ptr [rax], al; cmp qword ptr [r14 + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bf6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c56: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c96: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c76: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b76: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b56: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b36: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af6: add byte ptr [rax], al; cmp qword ptr [r15 + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000046d005: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x00000000004223fc: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000049abe5: add byte ptr [rax], al; cmp sil, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x00000000004bf516: add byte ptr [rax], al; cwde; add dh, bh; call rdi; 
0x00000000004c3ab6: add byte ptr [rax], al; cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004c1446: add byte ptr [rax], al; cwde; cmc; call qword ptr [rsi]; 
0x00000000004c8b26: add byte ptr [rax], al; cwde; jp 0xc8b1e; jmp qword ptr [rsi]; 
0x00000000004c1ba6: add byte ptr [rax], al; cwde; lodsb al, byte ptr [rsi]; cmc; call rsp; 
0x00000000004c1666: add byte ptr [rax], al; cwde; push -0xb; call qword ptr [rdx]; 
0x00000000004c7786: add byte ptr [rax], al; cwde; push rcx; sti; jmp rsi; 
0x00000000004c239f: add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x00000000004c2866: add byte ptr [rax], al; fcom dword ptr [rax - 0xa]; call qword ptr [rdx + 4]; 
0x00000000004c2966: add byte ptr [rax], al; fcom dword ptr [rbp - 0xa]; call qword ptr [rax]; 
0x00000000004c879a: add byte ptr [rax], al; fcom qword ptr [rdi + 0x27700000]; cld; call qword ptr [rbp + 5]; 
0x00000000004bf07e: add byte ptr [rax], al; fcomp dword ptr [rdx]; hlt; call qword ptr [rsi + 1]; 
0x00000000004c239a: add byte ptr [rax], al; fdiv qword ptr [rbx]; add byte ptr [rax], al; add dh, dh; cmc; call qword ptr [rdx]; 
0x00000000004bff9a: add byte ptr [rax], al; fmul qword ptr [rdi]; add byte ptr [rax], al; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004c7a9a: add byte ptr [rax], al; fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x00000000004c8e6e: add byte ptr [rax], al; fmul st(7); cld; call qword ptr [rdi + 9]; 
0x00000000004c74a6: add byte ptr [rax], al; fsubr dword ptr [rax]; sti; call rdx; 
0x00000000004c9b9a: add byte ptr [rax], al; fsubr qword ptr [rbx + 0x39f00000]; std; jmp qword ptr [rdi]; 
0x00000000004c3ab2: add byte ptr [rax], al; hlt; add byte ptr [rax], al; cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004c15b2: add byte ptr [rax], al; hlt; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004c11a2: add byte ptr [rax], al; in al, 0x21; add byte ptr [rax], al; test al, 0x60; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c36a2: add byte ptr [rax], al; in al, 0x46; add byte ptr [rax], al; clc; add bh, al; call qword ptr [rsi]; 
0x00000000004c74a2: add byte ptr [rax], al; in al, 0x84; add byte ptr [rax], al; fsubr dword ptr [rax]; sti; call rdx; 
0x00000000004c8da2: add byte ptr [rax], al; in al, 0x9d; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c216f: add byte ptr [rax], al; in al, 0xf5; jmp qword ptr [rdx]; 
0x00000000004c35aa: add byte ptr [rax], al; in al, dx; add byte ptr [r8], r8b; nop; add bh, al; call qword ptr [rcx]; 
0x00000000004c372a: add byte ptr [rax], al; insb byte ptr [rdi], dx; add byte ptr [r8], r8b; and byte ptr [rax + rdi*8], al; call rsp; 
0x00000000004c5a2a: add byte ptr [rax], al; insb byte ptr [rdi], dx; push 0; add al, ah; cli; call qword ptr [rsi]; 
0x0000000000433d53: add byte ptr [rax], al; jae 0x33df0; lea r11, [rip + 0x7076e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041037c: add byte ptr [rax], al; je 0x10388; mov eax, edx; pop rbx; ret; 
0x0000000000422147: add byte ptr [rax], al; je 0x22150; ret; 
0x000000000042241f: add byte ptr [rax], al; je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x0000000000424892: add byte ptr [rax], al; je 0x2489d; lea rax, [rip + 0x14853]; ret; 
0x0000000000427dc2: add byte ptr [rax], al; je 0x27dcd; lea rax, [rip + 0x12ad3]; ret; 
0x000000000044239d: add byte ptr [rax], al; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e70: add byte ptr [rax], al; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000442113: add byte ptr [rax], al; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423c2: add byte ptr [rax], al; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e95: add byte ptr [rax], al; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000442640: add byte ptr [rax], al; je 0x42998; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441eb9: add byte ptr [rax], al; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044225c: add byte ptr [rax], al; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442137: add byte ptr [rax], al; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fde: add byte ptr [rax], al; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442789: add byte ptr [rax], al; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442664: add byte ptr [rax], al; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044250b: add byte ptr [rax], al; je 0x42a78; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e6: add byte ptr [rax], al; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044247f: add byte ptr [rax], al; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442406: add byte ptr [rax], al; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442822: add byte ptr [rax], al; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004427a9: add byte ptr [rax], al; je 0x42b18; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426fd: add byte ptr [rax], al; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442684: add byte ptr [rax], al; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425a4: add byte ptr [rax], al; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044252b: add byte ptr [rax], al; je 0x42b98; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f5: add byte ptr [rax], al; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044227c: add byte ptr [rax], al; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed9: add byte ptr [rax], al; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004421d0: add byte ptr [rax], al; je 0x42c18; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442157: add byte ptr [rax], al; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f52: add byte ptr [rax], al; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442077: add byte ptr [rax], al; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffe: add byte ptr [rax], al; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000445442: add byte ptr [rax], al; je 0x45450; mov dword ptr [rip + 0x285b4c], edx; pop rbx; ret; 
0x000000000048bdbf: add byte ptr [rax], al; je 0x8bdc9; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c098: add byte ptr [rax], al; je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x000000000048c3b5: add byte ptr [rax], al; je 0x8c4d0; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000049cc2e: add byte ptr [rax], al; je 0x9cbe2; add rsp, 0x18; ret; 
0x00000000004c550f: add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x00000000004c053a: add byte ptr [rax], al; jl 0xc0553; add byte ptr [rax], al; jo 0xc0568; cmc; call qword ptr [rbx]; 
0x00000000004c1e3a: add byte ptr [rax], al; jl 0xc1e6c; add byte ptr [rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004c393a: add byte ptr [rax], al; jl 0xc3987; add byte ptr [rax], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004c3a3a: add byte ptr [rax], al; jl 0xc3a88; add byte ptr [rax], al; add byte ptr [rcx], ah; clc; call qword ptr [rax]; 
0x00000000004c3f3a: add byte ptr [rax], al; jl 0xc3f8d; add byte ptr [rax], al; adc byte ptr [rdi], bh; clc; call qword ptr [rax]; 
0x00000000004c6e3a: add byte ptr [rax], al; jl 0xc6ebc; add byte ptr [rax], al; or ah, 0xfa; jmp rsp; 
0x00000000004410f4: add byte ptr [rax], al; jmp rax; 
0x000000000041129a: add byte ptr [rax], al; jne 0x10f90; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412ee2: add byte ptr [rax], al; jne 0x12e60; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004173fe: add byte ptr [rax], al; jne 0x173be; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000422672: add byte ptr [rax], al; jne 0x2267d; lea rax, [rip + 3]; ret; 
0x0000000000427218: add byte ptr [rax], al; jne 0x27224; lea rax, [rip + 0x1d]; ret; 
0x0000000000427ede: add byte ptr [rax], al; jne 0x27ee9; lea rax, [rip + 0x67]; ret; 
0x0000000000427f31: add byte ptr [rax], al; jne 0x27f3c; lea rax, [rip + 4]; ret; 
0x000000000043f571: add byte ptr [rax], al; jne 0x3f512; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043fd89: add byte ptr [rax], al; jne 0x3fd58; lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004404a5: add byte ptr [rax], al; jne 0x404bd; mov eax, 2; syscall; 
0x0000000000440505: add byte ptr [rax], al; jne 0x4051d; mov eax, 0; syscall; 
0x0000000000440565: add byte ptr [rax], al; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004439bd: add byte ptr [rax], al; jne 0x439a8; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x0000000000473655: add byte ptr [rax], al; jne 0x7366d; mov eax, 3; syscall; 
0x00000000004737e5: add byte ptr [rax], al; jne 0x737fd; mov eax, 0x14; syscall; 
0x000000000047ca15: add byte ptr [rax], al; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000048c7d8: add byte ptr [rax], al; jne 0x8c870; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048ca3e: add byte ptr [rax], al; jne 0x8ca49; lea rax, [rip + 0x67]; ret; 
0x000000000048ca91: add byte ptr [rax], al; jne 0x8ca9c; lea rax, [rip + 4]; ret; 
0x000000000049cbdd: add byte ptr [rax], al; jne 0x9cc28; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x00000000004c053e: add byte ptr [rax], al; jo 0xc0568; cmc; call qword ptr [rbx]; 
0x00000000004c157e: add byte ptr [rax], al; jo 0xc15eb; cmc; call qword ptr [rsi]; 
0x00000000004c600a: add byte ptr [rax], al; jo 0xc600f; add al, al; js 0xc600d; call rsi; 
0x00000000004c76be: add byte ptr [rax], al; jo 0xc7711; sti; jmp qword ptr [rdx]; 
0x00000000004c879e: add byte ptr [rax], al; jo 0xc87c9; cld; call qword ptr [rbp + 5]; 
0x00000000004c55f6: add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c9896: add byte ptr [rax], al; js 0xc98ce; std; jmp qword ptr [rcx]; 
0x0000000000433d59: add byte ptr [rax], al; lea r11, [rip + 0x7076e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046d6cd: add byte ptr [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047970a: add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000043d05e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000043d06e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000043d07e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000043d08e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000043d09e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfbd: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000043cfde: add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000043cfee: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000043cffe: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000043d00e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000043d01e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000043d02e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000043cf6a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000043d03e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000043d04e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000422479: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043cfce: add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x000000000046c6be: add byte ptr [rax], al; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423bd4: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004017d5: add byte ptr [rax], al; lea rsi, [rcx + r15]; mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041bc96: add byte ptr [rax], al; lea rsi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000004c44d6: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rdx*2 + 0x7b800000], bl; clc; call qword ptr [rcx]; 
0x00000000004c0d6a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; sbb eax, 0x4fc00000; cmc; call qword ptr [rsi]; 
0x00000000004c8b6a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; wait; add byte ptr [rax], al; adc byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c216a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; xor dword ptr [rax], eax; add byte ptr [rax], al; in al, 0xf5; jmp qword ptr [rdx]; 
0x00000000004c2272: add byte ptr [rax], al; mov ah, 0x32; add byte ptr [rax], al; sbb bh, ch; cmc; call qword ptr [rax + 2]; 
0x00000000004bf372: add byte ptr [rax], al; mov ah, 3; add byte ptr [rax], al; or byte ptr [rax], dh; hlt; call qword ptr [rdx]; 
0x00000000004c9dbe: add byte ptr [rax], al; mov al, 0x42; std; call qword ptr [rcx + 1]; 
0x00000000004c1cde: add byte ptr [rax], al; mov al, 0xc0; cmc; call qword ptr [rcx]; 
0x00000000004c4c1e: add byte ptr [rax], al; mov al, 0xc4; std; call qword ptr [rbx]; 
0x00000000004c4fbe: add byte ptr [rax], al; mov al, 0xde; clc; call qword ptr [rbx]; 
0x000000000043bf3e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000043a78e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000043bf4e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000043a79e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000047374b: add byte ptr [rax], al; mov byte ptr [rax + 0xc], 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004c7486: add byte ptr [rax], al; mov byte ptr [rax], ch; sti; jmp qword ptr [rcx]; 
0x00000000004c780a: add byte ptr [rax], al; mov byte ptr [rax], r8b; add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x00000000004c15b6: add byte ptr [rax], al; mov byte ptr [rcx - 0xb], ch; call qword ptr [rsi]; 
0x00000000004c9b56: add byte ptr [rax], al; mov byte ptr [rcx], bh; std; jmp qword ptr [rdx]; 
0x00000000004c0656: add byte ptr [rax], al; mov byte ptr [rcx], ch; cmc; call qword ptr [rsi + 4]; 
0x000000000043ca2e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c40e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000004c6186: add byte ptr [rax], al; mov byte ptr [rsi - 6], bh; jmp rdx; 
0x000000000046ee8e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x6eeb0; add rax, 2; ret; 
0x000000000043ca4e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c42e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000472ea9: add byte ptr [rax], al; mov dword ptr [rax + 0x28], 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004c7902: add byte ptr [rax], al; mov dword ptr [rax], r8d; add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x0000000000462268: add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462315: add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000046148b: add byte ptr [rax], al; mov dword ptr [rbp - 0x1078], r9d; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000462794: add byte ptr [rax], al; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x00000000004605b8: add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004625e8: add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004605c2: add byte ptr [rax], al; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004605ae: add byte ptr [rax], al; mov dword ptr [rbp - 0x10a8], 0; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004605cc: add byte ptr [rax], al; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000455d1b: add byte ptr [rax], al; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455ff0: add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455d07: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455d11: add byte ptr [rax], al; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000414350: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046d0db: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044fe96: add byte ptr [rax], al; mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048bd6e: add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000041ed46: add byte ptr [rax], al; mov dword ptr [rip + 0x2ae8b6], 0; ret; 
0x000000000043675e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043ca3e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000043c41e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040258f: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x0000000000403309: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403a60: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000047d76e: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d80c: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed31: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f2d9: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x000000000049869a: add byte ptr [rax], al; mov eax, 0; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x00000000004736da: add byte ptr [rax], al; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004222de: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004403ae: add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x00000000004403ae: add byte ptr [rax], al; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047351e: add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x000000000047351e: add byte ptr [rax], al; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438ee: add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x00000000004438ee: add byte ptr [rax], al; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047355e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047355e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047354e: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047354e: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047356e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047356e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x0000000000418d71: add byte ptr [rax], al; mov eax, 0x6cb800; ret; 
0x000000000047591d: add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x000000000044102e: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000044102e: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000443990: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000443990: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000443a37: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043fd95: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x0000000000452c6c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c5f1: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000411311: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000043fa92: add byte ptr [rax], al; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b873: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d386: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000049d5de: add byte ptr [rax], al; mov eax, 2; add rsp, 8; ret; 
0x0000000000413462: add byte ptr [rax], al; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000044ff53: add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000049d5ce: add byte ptr [rax], al; mov eax, 4; add rsp, 8; ret; 
0x000000000049b6ee: add byte ptr [rax], al; mov eax, 5; ret; 
0x00000000004438ae: add byte ptr [rax], al; mov eax, 8; syscall; 
0x00000000004438ae: add byte ptr [rax], al; mov eax, 8; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000043bf7e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000004175be: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000411c9e: add byte ptr [rax], al; mov eax, dword ptr [rdx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049a5ee: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x0000000000400bbb: add byte ptr [rax], al; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000410191: add byte ptr [rax], al; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047bf9c: add byte ptr [rax], al; mov eax, ebx; mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x0000000000410af8: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047bfc6: add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x0000000000473783: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000004103c5: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x0000000000445c83: add byte ptr [rax], al; mov eax, edx; ret; 
0x000000000040fed6: add byte ptr [rax], al; mov eax, esi; pop rbx; ret; 
0x00000000004af1c2: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004aef12: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000047377e: add byte ptr [rax], al; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043ca6e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043c44e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043c45e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000499f9b: add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004165c5: add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000412753: add byte ptr [rax], al; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000403016: add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000049ca70: add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000046bdde: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043fcf6: add byte ptr [rax], al; mov edx, 0x1f; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x00000000004408c7: add byte ptr [rax], al; mov edx, 0x80000; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440acc: add byte ptr [rax], al; mov edx, 0x80000; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472e0e: add byte ptr [rax], al; mov edx, 0x90800; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000044398b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000043667e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043660e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043659e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435fce: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004330be: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332be: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334be: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004366ee: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000446a0a: add byte ptr [rax], al; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x000000000048c3bb: add byte ptr [rax], al; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000048c67d: add byte ptr [rax], al; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003cb: add byte ptr [rax], al; mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400403: add byte ptr [rax], al; mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000044355b: add byte ptr [rax], al; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000443a46: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047952f: add byte ptr [rax], al; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443986: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041274e: add byte ptr [rax], al; mov esi, 0x902; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000472f7e: add byte ptr [rax], al; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004112aa: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416ca5: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000046cfc5: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000413e45: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9d: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000441f04: add byte ptr [rax], al; mov esi, 1; call rbx; 
0x00000000004420f1: add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x0000000000441fbd: add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x0000000000441f35: add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x000000000044236f: add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000004420e2: add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441fae: add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000441f26: add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000472f55: add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000046d210: add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046c98f: add byte ptr [rax], al; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004c807a: add byte ptr [rax], al; mov esp, 0x30000090; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004bfb7a: add byte ptr [rax], al; mov esp, 0x4000000b; cmc; hlt; call qword ptr [rax]; 
0x00000000004c357a: add byte ptr [rax], al; mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x00000000004c667a: add byte ptr [rax], al; mov esp, 0x90000076; cwde; cli; jmp qword ptr [rax + 1]; 
0x00000000004b2bb6: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004bf07a: add byte ptr [rax], al; mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x000000000041380e: add byte ptr [rax], al; mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d1d4: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000048c858: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000455d25: add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x000000000041656a: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a1e2: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049a266: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000041345a: add byte ptr [rax], al; mov qword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000415d6b: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x00000000004134d2: add byte ptr [rax], al; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000004469d0: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043f75e: add byte ptr [rax], al; mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x00000000004168c7: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000044fe9d: add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x0000000000479714: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000049cdae: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004168ce: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cd66: add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x000000000048bd60: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000004179d2: add byte ptr [rax], al; mov qword ptr [rip + 0x2b5bc9], 0; ret; 
0x000000000041795f: add byte ptr [rax], al; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000401937: add byte ptr [rax], al; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x0000000000476a46: add byte ptr [rax], al; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000475911: add byte ptr [rax], al; mov qword ptr [rsi], rax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000040fd5b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fcca: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6be: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf5b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8bf70; add rsp, 0xd8; ret; 
0x0000000000440524: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x0000000000440584: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000004404c4: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x000000000041857e: add byte ptr [rax], al; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004508cf: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450a8e: add byte ptr [rax], al; mov r10d, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000043272e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000403592: add byte ptr [rax], al; mov r13, rcx; test rax, rax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x000000000044ff4d: add byte ptr [rax], al; mov r13d, 1; mov eax, 3; syscall; 
0x000000000045099e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000440436: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499eb6: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004717d6: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004737c6: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041db7e: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000048bff6: add byte ptr [rax], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000045085e: add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045083e: add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045081e: add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041786e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eece: add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046eede: add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046eeee: add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046eefe: add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046ef0e: add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046ef1e: add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046ef2e: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000046c988: add byte ptr [rax], al; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046d156: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfbe: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6ce: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000415da9: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000411d20: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004162a5: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000480c4e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000480c5e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000460f4e: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x0000000000462272: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462756: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000460fe4: add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000413807: add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046cf47: add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000047a75e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a55e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000048c7ee: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000413e3e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004100be: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000047cfc8: add byte ptr [rax], al; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043bece: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000043a71e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000004180fe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d57e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178ee: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd7e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046cffe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000049cdbe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049ce1e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049ce0e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cdce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004165be: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000415d0e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046d26e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000041629e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000041619e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000041412e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x000000000047ca6e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x24e619]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x00000000004708a3: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x25db6c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044696e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x0000000000418e9b: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b473c]; test rax, rax; je 0x18eab; call rax; 
0x0000000000481069: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000048c41d: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048119e: add byte ptr [rax], al; mov rax, qword ptr fs:[0]; add rax, -8; ret; 
0x0000000000413c47: add byte ptr [rax], al; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000410565: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049cf27: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004143ba: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004107c1: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f0f2: add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000004178fe: add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000004404db: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000041ee15: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041f7af: add byte ptr [rax], al; mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c1d9: add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x0000000000441e4c: add byte ptr [rax], al; mov rbp, rdi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x00000000004164fc: add byte ptr [rax], al; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000410364: add byte ptr [rax], al; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000432aee: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cce: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043309e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043329e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043349e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043290e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043cabe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c48e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043c49e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045f76e: add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004530c6: add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000044fea5: add byte ptr [rax], al; mov rdi, qword ptr [rdi]; syscall; 
0x000000000044a0dc: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004420f6: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000046d7ab: add byte ptr [rax], al; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x0000000000441fc2: add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000441f3a: add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000441f2b: add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000400464: add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x0000000000400aae: add byte ptr [rax], al; mov rdi, rax; call 0x10b80; nop; pop rbp; ret; 
0x000000000046cf4e: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000410da3: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000442380: add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x0000000000414024: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416c4f: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000410d03: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041177c: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000046aa1b: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004004a0: add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000417555: add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000499e5d: add byte ptr [rax], al; mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000411d15: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e11: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f81: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045ee16: add byte ptr [rax], al; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043fb6e: add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x0000000000450c2e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048c7de: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048c851: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000400edd: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2cc75a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004364be: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043644e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004363de: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004362fe: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043628e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043621e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cce: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435b3e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435aae: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043274e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435d4e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043652e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000450b7a: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000456b7b: add byte ptr [rax], al; mov rdx, r10; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410caf: add byte ptr [rax], al; mov rdx, r10; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000460d0b: add byte ptr [rax], al; mov rdx, r11; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000454746: add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f5d: add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b73a: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356e: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453fc0: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049822e: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000413e9c: add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000043fd12: add byte ptr [rax], al; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x000000000041453b: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ec0f: add byte ptr [rax], al; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b970: add byte ptr [rax], al; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410a4d: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000004616dc: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000045429e: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049e722: add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000456635: add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000441699: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041eeb6: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000046bde3: add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000413a8e: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fd1: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410cb9: add byte ptr [rax], al; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000450127: add byte ptr [rax], al; mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d4: add byte ptr [rax], al; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000043fcfb: add byte ptr [rax], al; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x00000000004127db: add byte ptr [rax], al; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000047d118: add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x00000000004c354a: add byte ptr [rax], al; mov word ptr [rbp], es; add byte ptr [rax], dl; add bh, al; jmp qword ptr [rbx]; 
0x00000000004bfb4a: add byte ptr [rax], al; mov word ptr [rbx], cs; add byte ptr [rax], al; cmc; hlt; call qword ptr [rax]; 
0x00000000004c874a: add byte ptr [rax], al; mov word ptr [rdi + 0x26300000], ss; cld; call qword ptr [rax + 1]; 
0x000000000043c53e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5be: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c57e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c59e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c6be: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c65e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c67e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c69e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cb8e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043c50e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042788e: add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004c1662: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr es:[rax], al; cwde; push -0xb; call qword ptr [rdx]; 
0x00000000004c6762: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; ja 0xc6767; add byte ptr [rax - 0x64], bl; cli; jmp rdi; 
0x0000000000440fe6: add byte ptr [rax], al; movsxd r10, r10d; syscall; 
0x00000000004530cd: add byte ptr [rax], al; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045d47d: add byte ptr [rax], al; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049abef: add byte ptr [rax], al; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000413467: add byte ptr [rax], al; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000412c7e: add byte ptr [rax], al; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044070f: add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000044dd97: add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000040dfe1: add byte ptr [rax], al; movsxd rdi, ecx; syscall; 
0x0000000000440608: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000450c14: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450a94: add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000044ee26: add byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000403d12: add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000044ff44: add byte ptr [rax], al; movsxd rdi, r13d; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000044ffbe: add byte ptr [rax], al; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000458535: add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be12: add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040dfd6: add byte ptr [rax], al; movsxd rsi, eax; movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000040dfbe: add byte ptr [rax], al; movsxd rsi, eax; test esi, esi; jne 0xdff8; mov eax, 0xba; syscall; 
0x000000000049bb93: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000043e2ce: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043e32e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043e31e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e30e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e2fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043e2de: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043e688: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e805; xor eax, eax; ret; 
0x000000000043054e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000430301: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042f6ae: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000412ece: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000447e4e: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000423aae: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043615e: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043683e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004360de: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004367ce: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000416240: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000044561e: add byte ptr [rax], al; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000440559: add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x28dcf5], 0; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004404f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x28dd55], 0; jne 0x4051d; mov eax, 0; syscall; 
0x000000000044541b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x288f2a]; test eax, eax; je 0x45430; ret; 
0x0000000000415512: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046ddeb: add byte ptr [rax], al; nop dword ptr [rax]; test rsi, rsi; jne 0x6ddf9; xor rax, rax; ret; 
0x0000000000435fc4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450994: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450854: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450834: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000049cd74: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000436154: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000400f24: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004c35ae: add byte ptr [rax], al; nop; add bh, al; call qword ptr [rcx]; 
0x00000000004c142e: add byte ptr [rax], al; nop; cmc; jmp qword ptr [rax]; 
0x00000000004c9abe: add byte ptr [rax], al; nop; cmp ch, bh; call qword ptr [rdi]; 
0x000000000047364c: add byte ptr [rax], al; nop; cmp dword ptr [rip + 0x25ac05], 0; jne 0x7366d; mov eax, 3; syscall; 
0x00000000004c667e: add byte ptr [rax], al; nop; cwde; cli; jmp qword ptr [rax + 1]; 
0x0000000000400a03: add byte ptr [rax], al; nop; leave; ret; 
0x000000000047362c: add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x000000000044106c: add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x000000000047353c: add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x000000000047353c: add byte ptr [rax], al; nop; mov eax, 0x66; syscall; ret; 
0x000000000044104c: add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x00000000004438cc: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000450c0c: add byte ptr [rax], al; nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000045098e: add byte ptr [rax], al; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004c921e: add byte ptr [rax], al; nop; or ch, bh; call qword ptr [rbx + 2]; 
0x0000000000400a73: add byte ptr [rax], al; nop; pop rbp; ret; 
0x00000000004c581e: add byte ptr [rax], al; nop; pop rsi; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c7a9e: add byte ptr [rax], al; nop; pop rsi; sti; jmp qword ptr [rdx]; 
0x00000000004c8d5e: add byte ptr [rax], al; nop; popfq; cld; call qword ptr [rax]; 
0x00000000004c1f2e: add byte ptr [rax], al; nop; sal ebp, cl; jmp rdx; 
0x00000000004c6e3e: add byte ptr [rax], al; or ah, 0xfa; jmp rsp; 
0x00000000004bf0ca: add byte ptr [rax], al; or al, 1; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x000000000042722a: add byte ptr [rax], al; or byte ptr [rax], al; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x000000000041bc70: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x000000000044352f: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x000000000044355e: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000450651: add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x00000000004408ca: add byte ptr [rax], al; or byte ptr [rax], al; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440acf: add byte ptr [rax], al; or byte ptr [rax], al; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000045004c: add byte ptr [rax], al; or byte ptr [rax], al; mov rdi, r13; mov eax, r15d; syscall; 
0x00000000004bf376: add byte ptr [rax], al; or byte ptr [rax], dh; hlt; call qword ptr [rdx]; 
0x00000000004c941e: add byte ptr [rax], al; or byte ptr [rdi], 0xfd; call qword ptr [rax]; 
0x000000000047f344: add byte ptr [rax], al; or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x00000000004134ee: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047d377: add byte ptr [rax], al; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x0000000000413f92: add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004270c9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004c8c96: add byte ptr [rax], al; pop rax; cld; call qword ptr [rax]; 
0x00000000004c6766: add byte ptr [rax], al; pop rax; pushfq; cli; jmp rdi; 
0x00000000004c80c6: add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x000000000045d1ad: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000045d27d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000004008ee: add byte ptr [rax], al; pop rbp; ret; 
0x000000000043f57a: add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x000000000046b7b7: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b27c: add byte ptr [rax], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000443add: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000412684: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000400606: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004004ce: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000412c6b: add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c2166: add byte ptr [rax], al; pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x00000000004c941a: add byte ptr [rax], al; pop rsp; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; or byte ptr [rdi], 0xfd; call qword ptr [rax]; 
0x00000000004c0c1a: add byte ptr [rax], al; pop rsp; sbb al, 0; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c357e: add byte ptr [rax], al; push rax; add bh, al; jmp qword ptr [rbx]; 
0x00000000004c4022: add byte ptr [rax], al; push rax; add byte ptr [rax], al; cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x00000000004c0d8f: add byte ptr [rax], al; push rax; cmc; jmp qword ptr [rcx]; 
0x00000000004c5fde: add byte ptr [rax], al; push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c6cfe: add byte ptr [rax], al; push rax; leave; cli; call qword ptr [rcx]; 
0x00000000004bff9e: add byte ptr [rax], al; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004c0fbe: add byte ptr [rax], al; push rax; push rdi; cmc; jmp qword ptr [rbx]; 
0x00000000004c76df: add byte ptr [rax], al; push rax; sti; jmp qword ptr [rdx]; 
0x00000000004733fe: add byte ptr [rax], al; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004161a5: add byte ptr [rax], al; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000004c226e: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004c1456: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c7112: add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x00000000004bf05a: add byte ptr [rax], al; pushfq; add byte ptr [rax], al; add dl, ah; sbb dh, ah; call qword ptr [rsi]; 
0x00000000004c145a: add byte ptr [rax], al; pushfq; and al, 0; add al, ah; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c297e: add byte ptr [rax], al; rcl byte ptr [rbp - 0xa]; jmp qword ptr [rsi]; 
0x00000000004bf0ee: add byte ptr [rax], al; rcr byte ptr [rsi], 1; hlt; call rdi; 
0x00000000004a83a6: add byte ptr [rax], al; ret 0; 
0x00000000004af31e: add byte ptr [rax], al; ret 0x10; 
0x00000000004b0fee: add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b1786: add byte ptr [rax], al; ret 0x1d5; 
0x00000000004afff6: add byte ptr [rax], al; ret 0x24; 
0x00000000004b04e6: add byte ptr [rax], al; ret 0x33; 
0x00000000004b8616: add byte ptr [rax], al; ret 0x4b7d; 
0x00000000004be0ee: add byte ptr [rax], al; ret 0x4bd7; 
0x00000000004aeb1e: add byte ptr [rax], al; ret 0xa; 
0x00000000004aef1e: add byte ptr [rax], al; ret 0xd; 
0x00000000004c828f: add byte ptr [rax], al; ret 0xfffb; 
0x00000000004b23c2: add byte ptr [rax], al; ret 1; 
0x00000000004b25c2: add byte ptr [rax], al; ret 2; 
0x00000000004b27c2: add byte ptr [rax], al; ret 3; 
0x00000000004b29c2: add byte ptr [rax], al; ret 4; 
0x00000000004b2bc2: add byte ptr [rax], al; ret 5; 
0x00000000004ae6c6: add byte ptr [rax], al; ret 6; 
0x00000000004b2fc2: add byte ptr [rax], al; ret 7; 
0x00000000004b31c2: add byte ptr [rax], al; ret 8; 
0x00000000004b33c2: add byte ptr [rax], al; ret 9; 
0x0000000000401543: add byte ptr [rax], al; ret; 
0x00000000004b29be: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004c360e: add byte ptr [rax], al; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x00000000004aedc6: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000004c0c1e: add byte ptr [rax], al; ror byte ptr [rax - 0xb], 1; call qword ptr [rcx + 2]; 
0x00000000004c1e3e: add byte ptr [rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004bf3de: add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004602e1: add byte ptr [rax], al; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046de84: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004bf076: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004c1cda: add byte ptr [rax], al; sbb al, 0x2d; add byte ptr [rax], al; mov al, 0xc0; cmc; call qword ptr [rcx]; 
0x00000000004c5fda: add byte ptr [rax], al; sbb al, 0x70; add byte ptr [rax], al; push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c76da: add byte ptr [rax], al; sbb al, 0x87; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x00000000004bf3da: add byte ptr [rax], al; sbb al, 4; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004c2276: add byte ptr [rax], al; sbb bh, ch; cmc; call qword ptr [rax + 2]; 
0x00000000004c13f6: add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004c7906: add byte ptr [rax], al; sbb byte ptr [rdi - 5], dl; call rsi; 
0x00000000004bf1c6: add byte ptr [rax], al; sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x00000000004c393e: add byte ptr [rax], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004bf0ce: add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x000000000049d3ff: add byte ptr [rax], al; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004affee: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000412d3c: add byte ptr [rax], al; shr byte ptr [rdx + rcx*2], 0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x000000000049cd95: add byte ptr [rax], al; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004c9a02: add byte ptr [rax], al; stosb byte ptr [rdi], al; add byte ptr [rax], al; test al, 0x36; std; call rcx; 
0x00000000004c3576: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x00000000004bf0ea: add byte ptr [rax], al; sub al, 1; add byte ptr [rax], al; rcr byte ptr [rsi], 1; hlt; call rdi; 
0x00000000004c39f6: add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004141d8: add byte ptr [rax], al; sub byte ptr [rdx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000004c97e6: add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004560f3: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456144: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458234: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d67: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x00000000004303ec: add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000416cf6: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000046d2c6: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000046d3de: add byte ptr [rax], al; sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000453b7f: add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000045de08: add byte ptr [rax], al; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000047d111: add byte ptr [rax], al; sub rsp, 0x1000; mov rsi, rsp; syscall; 
0x00000000004736df: add byte ptr [rax], al; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004a1abe: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000480bf3: add byte ptr [rax], al; sub rsp, 8; test rax, rax; je 0x80c05; mov edi, 0x6cc140; call rax; 
0x00000000004003d8: add byte ptr [rax], al; syscall; 
0x0000000000473203: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x73218; pop rbx; ret; 
0x00000000004403b3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000443995: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x000000000046fc03: add byte ptr [rax], al; syscall; ret; 
0x000000000043cfb4: add byte ptr [rax], al; test ah, 0x40; jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x00000000004c9a06: add byte ptr [rax], al; test al, 0x36; std; call rcx; 
0x00000000004c8cf6: add byte ptr [rax], al; test al, 0x3d; cld; call qword ptr [rax]; 
0x000000000043cf62: add byte ptr [rax], al; test al, 0x40; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x00000000004c11a6: add byte ptr [rax], al; test al, 0x60; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c4cd6: add byte ptr [rax], al; test al, 0xbb; clc; call qword ptr [rsi]; 
0x00000000004bfa96: add byte ptr [rax], al; test al, 0xf3; hlt; call qword ptr [rbx]; 
0x00000000004c7542: add byte ptr [rax], al; test byte ptr [rbp + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c7b42: add byte ptr [rax], al; test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x000000000047f33e: add byte ptr [rax], al; test byte ptr [rdi + 0x314], 8; je 0x7f3ad; pop rbx; ret; 
0x0000000000413cbe: add byte ptr [rax], al; test byte ptr [rdi + 0x74], 2; je 0x13cf8; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000426e9e: add byte ptr [rax], al; test byte ptr [rip + 0x2a6821], 0x10; mov edx, 0x4268d0; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x000000000043ced5: add byte ptr [rax], al; test dh, 0x40; jne 0x3ce10; lea rax, [rdi + 0xf]; ret; 
0x000000000043cf1b: add byte ptr [rax], al; test dh, 4; jne 0x3ce10; lea rax, [rdi + 0xb]; ret; 
0x000000000043ce52: add byte ptr [rax], al; test dl, 0x40; jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x000000000043ce80: add byte ptr [rax], al; test dl, 4; jne 0x3ce10; lea rax, [rdi + 3]; ret; 
0x0000000000443849: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x0000000000440f54: add byte ptr [rax], al; test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x00000000004967c0: add byte ptr [rax], al; test eax, eax; jne 0x967af; mov ecx, 0x27; mov eax, ecx; syscall; 
0x00000000004403df: add byte ptr [rax], al; test eax, eax; mov rax, 0xffffffffffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000004736ba: add byte ptr [rax], al; test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000004223ce: add byte ptr [rax], al; test edi, edi; je 0x223e0; mov eax, 0x16; ret; 
0x0000000000416121: add byte ptr [rax], al; test edx, edx; jle 0x16170; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000402594: add byte ptr [rax], al; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004027e0: add byte ptr [rax], al; test rax, rax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004030bf: add byte ptr [rax], al; test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x000000000040330e: add byte ptr [rax], al; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403502: add byte ptr [rax], al; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403a65: add byte ptr [rax], al; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000043f7ab: add byte ptr [rax], al; test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000044529c: add byte ptr [rax], al; test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x000000000044ec5b: add byte ptr [rax], al; test rax, rax; je 0x4ec69; mov edi, 0x6cd720; call rax; 
0x000000000044ec8a: add byte ptr [rax], al; test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c4: add byte ptr [rax], al; test rax, rax; je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044edea: add byte ptr [rax], al; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef63: add byte ptr [rax], al; test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f243: add byte ptr [rax], al; test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000047921e: add byte ptr [rax], al; test rax, rax; je 0x7923a; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479295: add byte ptr [rax], al; test rax, rax; je 0x792af; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x000000000047d773: add byte ptr [rax], al; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d79b: add byte ptr [rax], al; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d811: add byte ptr [rax], al; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed36: add byte ptr [rax], al; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f327: add byte ptr [rax], al; test rax, rax; je 0x7f349; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f2de: add byte ptr [rax], al; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000480a99: add byte ptr [rax], al; test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000480c08: add byte ptr [rax], al; test rax, rax; je 0x80c20; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c6fa: add byte ptr [rax], al; test rax, rax; je 0x8c610; mov rsi, rbx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x00000000004008d8: add byte ptr [rax], al; test rax, rax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400926: add byte ptr [rax], al; test rax, rax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000498673: add byte ptr [rax], al; test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x000000000049869f: add byte ptr [rax], al; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x0000000000498945: add byte ptr [rax], al; test rax, rax; je 0x98955; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a3: add byte ptr [rax], al; test rax, rax; je 0x998; call rax; 
0x000000000049a22d: add byte ptr [rax], al; test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2d5: add byte ptr [rax], al; test rax, rax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049cdee: add byte ptr [rax], al; test rax, rax; je 0x9ce00; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049f486: add byte ptr [rax], al; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x0000000000412c5f: add byte ptr [rax], al; test rax, rax; js 0x12c70; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x000000000049f6b9: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x22debb], rbx; jne 0x9f6a8; pop rbx; ret; 
0x000000000047e89d: add byte ptr [rax], al; test rdx, rdx; je 0x7e8ae; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c4e1: add byte ptr [rax], al; test rdx, rdx; je 0x8c4fe; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c674: add byte ptr [rax], al; test rdx, rdx; je 0x8c72e; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000042213e: add byte ptr [rax], al; test sil, 7; mov eax, 0x16; je 0x22150; ret; 
0x000000000043ed8e: add byte ptr [rax], al; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004c8b22: add byte ptr [rax], al; wait; add byte ptr [rax], al; cwde; jp 0xc8b1e; jmp qword ptr [rsi]; 
0x00000000004c7602: add byte ptr [rax], al; xchg byte ptr [rax], r8b; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004bf552: add byte ptr [rax], al; xchg esp, eax; add eax, 0x5b680000; hlt; call qword ptr [rax]; 
0x00000000004c13f2: add byte ptr [rax], al; xor al, 0x24; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004c39f2: add byte ptr [rax], al; xor al, 0x4a; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004c55f2: add byte ptr [rax], al; xor al, 0x66; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c8cf2: add byte ptr [rax], al; xor al, 0x9d; add byte ptr [rax], al; test al, 0x3d; cld; call qword ptr [rax]; 
0x00000000004c780e: add byte ptr [rax], al; xor byte ptr [rbx - 5], dl; jmp rdi; 
0x00000000004c181e: add byte ptr [rax], al; xor byte ptr [rdi - 0xb], ch; call qword ptr [rcx + 5]; 
0x00000000004c874e: add byte ptr [rax], al; xor byte ptr [rsi], ah; cld; call qword ptr [rax + 1]; 
0x00000000004c722e: add byte ptr [rax], al; xor byte ptr [rsi], al; sti; call rsi; 
0x0000000000452e67: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000040f02b: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472ef5: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041db96: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000412c3e: add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004144ce: add byte ptr [rax], al; xor eax, eax; test rdx, rdx; jne 0x144e0; ret; 
0x0000000000400f2e: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000049a391: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044dd1a: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov edi, 0x4a6dc8; mov eax, ecx; syscall; 
0x0000000000415603: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000040e037: add byte ptr [rax], al; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x000000000043fcca: add byte ptr [rax], al; xor esi, esi; mov eax, 2; syscall; 
0x0000000000403c17: add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000441e76: add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e9b: add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441ebf: add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441edf: add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004100c5: add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000443a3c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000042713d: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004c7387: add byte ptr [rax], bh; and edi, ebx; jmp qword ptr [rdi]; 
0x00000000004c4027: add byte ptr [rax], bh; clc; call qword ptr [rbx + 5]; 
0x00000000004c7117: add byte ptr [rax], bh; cli; cli; jmp rdi; 
0x00000000004bfb67: add byte ptr [rax], bh; cmc; hlt; call qword ptr [rdx]; 
0x00000000004be0e7: add byte ptr [rax], bh; fmul qword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4bd7; 
0x0000000000402590: add byte ptr [rax], bh; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x000000000040330a: add byte ptr [rax], bh; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403a61: add byte ptr [rax], bh; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000044f23f: add byte ptr [rax], bh; test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000047d76f: add byte ptr [rax], bh; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d797: add byte ptr [rax], bh; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d80d: add byte ptr [rax], bh; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed32: add byte ptr [rax], bh; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f2da: add byte ptr [rax], bh; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x000000000049866f: add byte ptr [rax], bh; test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x000000000049869b: add byte ptr [rax], bh; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x00000000004c8067: add byte ptr [rax], bh; xchg ecx, eax; sti; call qword ptr [rax]; 
0x00000000004c13f7: add byte ptr [rax], bl; cmc; jmp qword ptr [rax]; 
0x00000000004c2277: add byte ptr [rax], bl; out dx, eax; cmc; call qword ptr [rax + 2]; 
0x00000000004c7907: add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x00000000004c39f7: add byte ptr [rax], ch; sbb al, 0xf8; call qword ptr [rax]; 
0x00000000004c97e7: add byte ptr [rax], ch; xor bh, ch; call rsp; 
0x000000000042722b: add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, [rip + 0x8449]; ret; 
0x000000000045004d: add byte ptr [rax], cl; add byte ptr [rcx + rcx*4 - 0x11], cl; mov eax, r15d; syscall; 
0x000000000041bc71: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a3560], bh; mov eax, 2; syscall; 
0x0000000000443530: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a597d], bh; mov eax, ebx; syscall; 
0x000000000044355f: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a5988], bh; mov eax, ebx; syscall; 
0x0000000000450652: add byte ptr [rax], cl; add byte ptr [rdi + 0x4a78c0], bh; mov eax, ecx; syscall; 
0x00000000004408cb: add byte ptr [rax], cl; add byte ptr [rsi + 0x4a5850], bh; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440ad0: add byte ptr [rax], cl; add byte ptr [rsi + 0x4a5850], bh; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x00000000004c1297: add byte ptr [rax], cl; cmc; jmp qword ptr [rdx]; 
0x000000000047f345: add byte ptr [rax], cl; je 0x7f3ad; pop rbx; ret; 
0x000000000049b4ce: add byte ptr [rax], cl; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4c7: add byte ptr [rax], cl; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4c0: add byte ptr [rax], cl; mov byte ptr [rip + 0x232695], 8; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4b9: add byte ptr [rax], cl; mov byte ptr [rip + 0x23269b], 8; mov byte ptr [rip + 0x232695], 8; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x0000000000472f81: add byte ptr [rax], cl; or dword ptr [rax], eax; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000472e11: add byte ptr [rax], cl; or dword ptr [rax], eax; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000049b4d5: add byte ptr [rax], cl; ret; 
0x00000000004bf377: add byte ptr [rax], cl; xor ah, dh; call qword ptr [rdx]; 
0x00000000004c874f: add byte ptr [rax], dh; cld; call qword ptr [rax + 1]; 
0x00000000004c181f: add byte ptr [rax], dh; outsd dx, dword ptr [rsi]; cmc; call qword ptr [rcx + 5]; 
0x00000000004c780f: add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x00000000004c807f: add byte ptr [rax], dh; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x000000000047d796: add byte ptr [rax], dil; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x00000000004c354f: add byte ptr [rax], dl; add bh, al; jmp qword ptr [rbx]; 
0x000000000047d116: add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x00000000004c8b6f: add byte ptr [rax], dl; cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004c26bf: add byte ptr [rax], dl; idiv dil; ret; 
0x0000000000426ea5: add byte ptr [rax], dl; mov edx, 0x4268d0; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x00000000004c8da0: add byte ptr [rax], r8b; add ah, ah; popfq; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c2398: add byte ptr [rax], r8b; add ah, bl; xor eax, dword ptr [rax]; add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x00000000004c7038: add byte ptr [rax], r8b; add byte ptr [rax + rax*4], bh; add byte ptr [rax - 0xd], ah; cli; jmp qword ptr [rbx + 5]; 
0x00000000004c97e0: add byte ptr [rax], r8b; add byte ptr [rax + rbp*4], ah; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x00000000004733fc: add byte ptr [rax], r8b; add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c7540: add byte ptr [rax], r8b; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c7d50: add byte ptr [rax], r8b; add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x00000000004c5508: add byte ptr [rax], r8b; add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x00000000004c8748: add byte ptr [rax], r8b; add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c6760: add byte ptr [rax], r8b; add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004c5a28: add byte ptr [rax], r8b; add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c7600: add byte ptr [rax], r8b; add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c0650: add byte ptr [rax], r8b; add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x00000000004c55f0: add byte ptr [rax], r8b; add byte ptr [rsi + riz*2], dh; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c0c18: add byte ptr [rax], r8b; add byte ptr [rsp + rbx], bl; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c5408: add byte ptr [rax], r8b; add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004797fd: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480c1d: add byte ptr [rax], r8b; add rsp, 8; ret; 
0x00000000004249b5: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042483d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004980dd: add byte ptr [rax], r8b; call rbx; 
0x00000000004c36a5: add byte ptr [rax], r8b; clc; add bh, al; call qword ptr [rsi]; 
0x000000000043ed9d: add byte ptr [rax], r8b; cmp dl, 8; jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000044055d: add byte ptr [rax], r8b; cmp dword ptr [rip + 0x28dcf5], 0; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004404fd: add byte ptr [rax], r8b; cmp dword ptr [rip + 0x28dd55], 0; jne 0x4051d; mov eax, 0; syscall; 
0x0000000000443b3d: add byte ptr [rax], r8b; cmp eax, -1; jne 0x43b38; xor eax, eax; leave; ret; 
0x0000000000442975: add byte ptr [rax], r8b; cmp qword ptr [r13 + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442955: add byte ptr [rax], r8b; cmp qword ptr [r13 + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429b5: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a15: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f5: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a95: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a55: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a35: add byte ptr [rax], r8b; cmp qword ptr [r14 + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bf5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c55: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c95: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c75: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b75: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b55: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b35: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af5: add byte ptr [rax], r8b; cmp qword ptr [r15 + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000043ca4d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000047351d: add byte ptr [rax], r8b; mov eax, 0x3f; syscall; 
0x000000000047351d: add byte ptr [rax], r8b; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047d385: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x000000000049d5dd: add byte ptr [rax], r8b; mov eax, 2; add rsp, 8; ret; 
0x000000000049d5cd: add byte ptr [rax], r8b; mov eax, 4; add rsp, 8; ret; 
0x000000000043c43d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000440435: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004737c5: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046d155: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfbd: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6cd: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413e3d: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004180fd: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000415d0d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041412d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x000000000043cabd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c49d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000450c2d: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043c47d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000041eeb5: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000043e32d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043e31d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e30d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e2fd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2ed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043e2dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000447e4d: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000435fc3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450993: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450853: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450833: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000049cd73: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000436153: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000048c5d5: add byte ptr [rax], r8b; pop rbx; ret; 
0x000000000049cf3d: add byte ptr [rax], r8b; ret; 
0x00000000004c360d: add byte ptr [rax], r8b; rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x0000000000416cf5: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000046d2c5: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004223cd: add byte ptr [rax], r8b; test edi, edi; je 0x223e0; mov eax, 0x16; ret; 
0x000000000049ab25: add byte ptr [rax], r8b; xor eax, eax; add rsp, 8; ret; 
0x00000000004144ad: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000440f55: add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x0000000000440506: add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x00000000004737e6: add byte ptr [rbp + 0x14], dh; mov eax, 0x14; syscall; 
0x0000000000440566: add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x00000000004404a6: add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x0000000000473656: add byte ptr [rbp + 0x14], dh; mov eax, 3; syscall; 
0x000000000047c92a: add byte ptr [rbp + 0x1b], dh; mov rax, qword ptr [rip + 0x2514dc]; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x0000000000400db2: add byte ptr [rbp + 0x20], dh; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000400db1: add byte ptr [rbp + 0x20], sil; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000049f47f: add byte ptr [rbp + 0x31], al; idiv byte ptr [rax]; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x0000000000479528: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x000000000046fe27: add byte ptr [rbp + 0x39440750], cl; ret 0x8d0f; 
0x000000000041c361: add byte ptr [rbp + 0x39], cl; ret 0x8948; 
0x000000000041c4de: add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x000000000048103c: add byte ptr [rbp + 0x39], dh; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000470063: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000045d1ae: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000045d27e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000040070a: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000497eb0: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000416122: add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004733ff: add byte ptr [rbp + 0x53], dl; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047d157: add byte ptr [rbp + 0x6348ff59], cl; ret; 
0x000000000041bc6c: add byte ptr [rbp + 0x64], dh; mov esi, 0x80000; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x0000000000480ec2: add byte ptr [rbp + 0xb], dh; add rsp, 0x38; ret; 
0x000000000044d80c: add byte ptr [rbp + 0xd840fd2], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000047d664: add byte ptr [rbp + 0xd], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004c0548: add byte ptr [rbp + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x000000000048a7ff: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000048a6ef: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000427edf: add byte ptr [rbp + 7], dh; lea rax, [rip + 0x67]; ret; 
0x0000000000422673: add byte ptr [rbp + 7], dh; lea rax, [rip + 3]; ret; 
0x0000000000427f32: add byte ptr [rbp + 7], dh; lea rax, [rip + 4]; ret; 
0x0000000000427219: add byte ptr [rbp + 8], dh; lea rax, [rip + 0x1d]; ret; 
0x000000000047ca16: add byte ptr [rbp + 8], dh; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x0000000000480f64: add byte ptr [rbp + 9], dh; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004bf553: add byte ptr [rbp + rax + 0x5b680000], dl; hlt; call qword ptr [rax]; 
0x00000000004c354b: add byte ptr [rbp + rax*2 + 0x2100000], cl; clc; jmp qword ptr [rbx]; 
0x00000000004c357b: add byte ptr [rbp + rax*2 + 0x2500000], bh; clc; jmp qword ptr [rbx]; 
0x00000000004c7543: add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x0000000000481184: add byte ptr [rbp + rbp*8 + 0x48], dh; mov edi, dword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x00000000004c0d6b: add byte ptr [rbp + rbx + 0x4fc00000], ch; cmc; call qword ptr [rsi]; 
0x00000000004c4d1b: add byte ptr [rbp + rbx*2], bl; add byte ptr [rax - 0x44], al; clc; jmp qword ptr [rsi]; 
0x00000000004aef17: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x00000000004315cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rip + 0x63490007], ebp; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043219f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul esp, dword ptr [rcx], 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431eff: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rdi + rax], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431daf: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; and eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub qword ptr [r15], rax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045d4a5: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000419ea9: add byte ptr [rbp + rcx*4 + 0x34], cl; sub eax, dword ptr [rbx + rcx*4 + 0x2d]; sbb qword ptr [r11], r13; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046d6ce: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004c7d53: add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x00000000004c6d73: add byte ptr [rbp + rdi*2 - 0x35980000], dh; cli; call qword ptr [rcx]; 
0x00000000004c053b: add byte ptr [rbp + rdx], bh; add byte ptr [rax + 0x26], dh; cmc; call qword ptr [rbx]; 
0x00000000004c157b: add byte ptr [rbp + riz + 0x69700000], bh; cmc; call qword ptr [rsi]; 
0x00000000004c550b: add byte ptr [rbp + riz*2], cl; add byte ptr [rax], al; jg 0xc550c; call rdx; 
0x0000000000443a21: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x000000000047139d: add byte ptr [rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004439be: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x000000000049f6c4: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x0000000000410cfb: add byte ptr [rbp - 0x2e], dh; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000043fd8a: add byte ptr [rbp - 0x35], dh; lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000044384a: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004c1cdb: add byte ptr [rbp - 0x3f500000], bl; cmc; call qword ptr [rcx]; 
0x00000000004736bb: add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000004af1c3: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x00000000004173ff: add byte ptr [rbp - 0x44], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004ae163: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x000000000043f572: add byte ptr [rbp - 0x63], dh; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000441104: add byte ptr [rbp - 0x69], dh; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x00000000004535b9: add byte ptr [rbp - 0x75], cl; jl 0x535e2; and byte ptr [rax + 1], cl; ret; 
0x000000000045d839: add byte ptr [rbp - 0x75], cl; jl 0x5d862; and byte ptr [rax + 1], cl; ret; 
0x000000000046a95f: add byte ptr [rbp - 0x76bb7ffc], cl; ret 0xf229; 
0x0000000000478939: add byte ptr [rbp - 0x77], cl; mov bh, 8; ret 0x6c; 
0x000000000041ceae: add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x000000000043f22c: add byte ptr [rbp - 0x7b], al; fild dword ptr [rcx + 0xf]; xchg esp, eax; ret 0xfe83; 
0x0000000000478c1f: add byte ptr [rbp - 0x7b], cl; in al, 0x75; or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000458845: add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x00000000004205b2: add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg esp, eax; ret 0x8548; 
0x0000000000440b54: add byte ptr [rbp - 0x7c], al; in eax, dx; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000046327f: add byte ptr [rbp - 0x7cb776f4], cl; ret 0x8d01; 
0x000000000044e71f: add byte ptr [rbp - 0x7cf78140], al; call 0x848702b; pop rbx; ret; 
0x0000000000478cb8: add byte ptr [rbp - 0x7f7bf037], al; add al, byte ptr [rax]; add byte ptr [rbx + 0x2555d115], cl; add bh, dh; ret 0x804; 
0x000000000040ed9f: add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x000000000042a3f9: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x000000000043f655: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x3f668; xor eax, eax; ret; 
0x0000000000499bc5: add byte ptr [rbx + 0x233e7405], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x000000000047d378: add byte ptr [rbx + 0x24edf00d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000478cc0: add byte ptr [rbx + 0x2555d115], cl; add bh, dh; ret 0x804; 
0x000000000043f57b: add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000004737df: add byte ptr [rbx + 0x25aa753d], al; add byte ptr [rax], al; jne 0x737fd; mov eax, 0x14; syscall; 
0x0000000000411d08: add byte ptr [rbx + 0x275fff8], al; pop rbx; ret; 
0x000000000044383f: add byte ptr [rbx + 0x28aaba05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000044055f: add byte ptr [rbx + 0x28dcf53d], al; add byte ptr [rax], al; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004404ff: add byte ptr [rbx + 0x28dd553d], al; add byte ptr [rax], al; jne 0x4051d; mov eax, 0; syscall; 
0x000000000044049f: add byte ptr [rbx + 0x28ddb53d], al; add byte ptr [rax], al; jne 0x404bd; mov eax, 2; syscall; 
0x0000000000417967: add byte ptr [rbx + 0x2b5c3505], al; add byte ptr [rcx], al; ret; 
0x000000000043ca9f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043c46f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000495a81: add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000049f14f: add byte ptr [rbx + 0x3b801ff], al; add byte ptr [rax], al; add byte ptr [rsi + rax - 0xd], dh; ret; 
0x0000000000443ade: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004101fb: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045b27d: add byte ptr [rbx + 0x44], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000043ca6f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043c44f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000430270: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x000000000043bf7f: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000041ce2f: add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000043f2e2: add byte ptr [rbx + 0x48], bl; add eax, 1; pop rbp; pop r12; pop r13; ret; 
0x00000000004501ff: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5020f; call rax; 
0x00000000004161a6: add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x00000000004213a7: add byte ptr [rbx + 0x4c], bl; mov esi, esp; pop rbp; pop r12; jmp rax; 
0x00000000004334bf: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332bf: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004330bf: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e5db: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x00000000004304d2: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x0000000000435fcf: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000004797f6: add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000041f8b7: add byte ptr [rbx + 0x5d], bl; pop r12; jmp rax; 
0x0000000000413701: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000412685: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000400607: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004004cf: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043fcbd: add byte ptr [rbx + 0x60bf03fb], al; push rax; add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x000000000049f15f: add byte ptr [rbx + 0x67502e6], al; mov eax, 8; ret; 
0x000000000049eb3f: add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004112ff: add byte ptr [rbx + 0x78920c8], al; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004667f5: add byte ptr [rbx + 0xa880], cl; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000049a3e0: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043667f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043660f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043659f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000049ec2c: add byte ptr [rbx + 0xfc08507], cl; test cl, bl; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x25], cl; stosb byte ptr [rdi], al; ret; 
0x00000000004bf373: add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004507ca: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004c9b53: add byte ptr [rbx + rbp*4 + 0x39880000], dl; std; jmp qword ptr [rdx]; 
0x00000000004c8b6b: add byte ptr [rbx + rbx*4 + 0x3c100000], ch; cld; jmp qword ptr [rdx]; 
0x00000000004bfb7b: add byte ptr [rbx + rcx - 0xac00000], bh; hlt; call qword ptr [rax]; 
0x00000000004bfb4b: add byte ptr [rbx + rcx - 0xac00000], cl; hlt; call qword ptr [rax]; 
0x00000000004bfb63: add byte ptr [rbx + rcx - 0xac80000], ah; hlt; call qword ptr [rdx]; 
0x000000000049ec36: add byte ptr [rbx + rcx*4 + 0x25], cl; stosb byte ptr [rdi], al; ret; 
0x0000000000472f56: add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x000000000047db82: add byte ptr [rbx + rcx*4 + 0x45], al; test byte ptr [rax - 0x77], cl; ret; 
0x000000000049e345: add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000048bcc7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000499de7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004034fa: add byte ptr [rbx + rcx*4 + 0x68], cl; sub byte ptr [rax], bh; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x00000000004c7b43: add byte ptr [rbx + rcx*4 + 0x69c80000], al; sti; jmp qword ptr [rdx]; 
0x0000000000460626: add byte ptr [rbx + rcx*4 - 0x63], cl; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000460b7f: add byte ptr [rbx + rcx*4 - 0x73], al; sub bh, 0xff; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000044f33a: add byte ptr [rbx + rdx + 0x49], dh; mov dword ptr [rsp], eax; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x00000000004530ce: add byte ptr [rbx + riz*2 - 0x1e], cl; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004c9353: add byte ptr [rbx + riz*4 + 0xe580000], dl; std; jmp qword ptr [rax]; 
0x00000000004104f2: add byte ptr [rbx + rsi + 0x48], dh; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000461348: add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049ccef: add byte ptr [rbx - 0x118af706], al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000419895: add byte ptr [rbx - 0x377cfbb9], cl; add al, byte ptr [rbx - 0x76b7fe38]; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x000000000047051a: add byte ptr [rbx - 0x38b7cf18], al; ret; 
0x0000000000411c9f: add byte ptr [rbx - 0x3b7cb7fe], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045ecce: add byte ptr [rbx - 0x4af43], al; call qword ptr [rbx + 0xf]; 
0x000000000045eaee: add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x0000000000415e1f: add byte ptr [rbx - 0x4f8b0008], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043f345: add byte ptr [rbx - 0x50f0fe40], al; ret 0x72e9; 
0x000000000043f330: add byte ptr [rbx - 0x50f0fe40], al; ret 0xaf0f; 
0x000000000047d3e1: add byte ptr [rbx - 0x57fef1e], al; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8348; 
0x000000000047dc4e: add byte ptr [rbx - 0x57ffb1e], al; add dword ptr [rdi], ecx; xchg edx, eax; ret 0xb60f; 
0x00000000004560f4: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456145: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458235: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d68: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x000000000046cfe1: add byte ptr [rbx - 0x74b7ffb3], cl; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000043bf8f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000043a7cf: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000046cf7f: add byte ptr [rbx - 0x76be69c4], cl; jl 0x6cf1c; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000046b7b8: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000400bb3: add byte ptr [rbx - 0x78f0fa08], al; loope 0xbbb; add byte ptr [rax], al; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000411504: add byte ptr [rbx - 0x7af0fd03], al; ret 0; 
0x0000000000401534: add byte ptr [rbx - 0x7bf00008], al; in eax, 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000043e436: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000040a81f: add byte ptr [rbx - 0x7bf0fc08], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x0000000000406bb3: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000040a816: add byte ptr [rbx - 0x7bf0fd08], al; movabs byte ptr [0x840f03f883000008], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000046b3e4: add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x000000000040a828: add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x00000000004440f0: add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x0000000000443b3f: add byte ptr [rbx - 0xc8a0008], al; xor eax, eax; leave; ret; 
0x00000000004176fe: add byte ptr [rbx - 0xd], bl; ret; 
0x00000000004a4a50: add byte ptr [rbx - 7], bh; call qword ptr [rax]; 
0x00000000004c4cd3: add byte ptr [rbx*2 - 0x44580000], dl; clc; call qword ptr [rsi]; 
0x00000000004c8cf3: add byte ptr [rbx*4 + 0x3da80000], dh; cld; call qword ptr [rax]; 
0x00000000004c8cc3: add byte ptr [rbx*4 - 0x7c080000], al; cld; call qword ptr [rax]; 
0x0000000000479708: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004c29a0: add byte ptr [rbx], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rsi + 0x48d4503], ecx; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x000000000045014f: add byte ptr [rcx + 0x29], cl; ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x000000000047bf9d: add byte ptr [rcx + 0x2c6d8], cl; add rsp, 0x140; pop rbx; ret; 
0x000000000041c29f: add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x000000000048232d: add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x000000000046df5f: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000427ab6: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x000000000049832e: add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x87f6; 
0x0000000000410af9: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000410192: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x000000000047dbbf: add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x00000000004165c6: add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d0dc: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000430e1e: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000403d13: add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000042f69c: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043c2c8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049abf0: add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x000000000044ff45: add byte ptr [rcx + 0x63], cl; std; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000047377f: add byte ptr [rcx + 0xc], bh; mov eax, ecx; syscall; 
0x00000000004005d0: add byte ptr [rcx + 0xe], bh; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000043f557: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000441715: add byte ptr [rcx + 0xf], al; lahf; ret; 
0x0000000000416241: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000045e0f4: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000045e077: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000476ea4: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000041bf97: add byte ptr [rcx + 0xf], al; xchg ebp, eax; ret; 
0x0000000000477e6e: add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0x8545; 
0x000000000049bdaf: add byte ptr [rcx + 1], cl; ret 0xde89; 
0x000000000043eb3f: add byte ptr [rcx + 1], cl; ret; 
0x000000000049cc92: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004218aa: add byte ptr [rcx + 9], al; ret; 
0x00000000004c7113: add byte ptr [rcx + rax*4], dl; add byte ptr [rax], bh; cli; cli; jmp rdi; 
0x00000000004bf0eb: add byte ptr [rcx + rax], ch; add byte ptr [rax], al; rcr byte ptr [rsi], 1; hlt; call rdi; 
0x00000000004bf0cb: add byte ptr [rcx + rax], cl; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x000000000044550a: add byte ptr [rcx + rbp - 0x3f], al; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x00000000004c495b: add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x00000000004726b5: add byte ptr [rcx + rcx*4 + 0x2d], cl; ret; 
0x00000000004726ae: add byte ptr [rcx + rcx*4 + 0x35], cl; add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x000000000042dbdf: add byte ptr [rcx + rcx*4 + 0x4f], cl; cmp bl, dh; ret; 
0x0000000000443525: add byte ptr [rcx + rcx*4 + 0x65], cl; mov eax, 0xc065894c; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x000000000046c981: add byte ptr [rcx + rcx*4 - 0x11], cl; call 0x6d8d0; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000441fc3: add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000045004f: add byte ptr [rcx + rcx*4 - 0x11], cl; mov eax, r15d; syscall; 
0x000000000046bde4: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000453fc1: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049822f: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004420f7: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000046d7ac: add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x0000000000446602: add byte ptr [rcx + rcx*4 - 0x19], cl; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000454747: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f5e: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b73b: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356f: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000445c2c: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x0000000000443747: add byte ptr [rcx + rcx*4 - 0x20], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000462b68: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000460e29: add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460d0c: add byte ptr [rcx + rcx*4 - 0x26], cl; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000456b7c: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004571d2: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410cb0: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000041bcc8: add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, 3; syscall; 
0x0000000000410cba: add byte ptr [rcx + rcx*4 - 0x32], cl; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000400465: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x00000000004168c8: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000413a8f: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fd2: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000413e9d: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000441f2c: add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000441f3b: add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x00000000004c7903: add byte ptr [rcx + rcx*4], al; add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x00000000004c8123: add byte ptr [rcx + rdx*4], ah; add byte ptr [rax - 0x6f], bl; sti; call qword ptr [rdx]; 
0x00000000004c80c3: add byte ptr [rcx + rdx*4], al; add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004c810b: add byte ptr [rcx + rdx*4], cl; add byte ptr [rax - 0x6f], ah; sti; call qword ptr [rax]; 
0x00000000004c80f3: add byte ptr [rcx + rdx*4], dh; add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x0000000000410a97: add byte ptr [rcx + riz - 0x77], dh; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004c216b: add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x000000000046c990: add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x0000000000499f9c: add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046d211: add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000048778b: add byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x00000000004848d3: add byte ptr [rcx - 0x39], cl; ret 0xfc01; 
0x00000000004816d3: add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x000000000045bdf4: add byte ptr [rcx - 0x39], cl; ret 0xffe0; 
0x0000000000478940: add byte ptr [rcx - 0x39], cl; xchg dword ptr [rax], esp; ret 0x6c; 
0x00000000004602e2: add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000447d82: add byte ptr [rcx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d78: add byte ptr [rcx - 0x41f0b7b8], cl; mov bh, byte ptr [rcx]; add byte ptr [ecx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000459028: add byte ptr [rcx - 0x42], al; ret 0x4b40; 
0x000000000044ff4e: add byte ptr [rcx - 0x43], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x00000000004aef13: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000045b4a4: add byte ptr [rcx - 0x44], al; ret 0x4b40; 
0x0000000000450a8f: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000405934: add byte ptr [rcx - 0x55551e], al; call rcx; 
0x000000000044afa3: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000044afc0: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044afdd: add byte ptr [rcx - 0x73], cl; add r9d, dword ptr [r8 + 0x39]; ret; 
0x0000000000465c10: add byte ptr [rcx - 0x73], cl; dec dword ptr [r8 + 0x39]; ret; 
0x0000000000499bcb: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000441a2f: add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000049e723: add byte ptr [rcx - 0x75], cl; jbe 0x9e730; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000040ed3f: add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x000000000046c989: add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x000000000047dbb7: add byte ptr [rcx - 0x75], cl; xchg esp, eax; and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x00000000004439a7: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000403593: add byte ptr [rcx - 0x77], cl; int 0x48; test eax, eax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x0000000000426a53: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000041448a: add byte ptr [rcx - 0x7874b7f9], cl; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x00000000004967ca: add byte ptr [rcx - 0x7afaf038], cl; sal byte ptr [rbp - 0x24], cl; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000463be9: add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000412573: add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x00000000004597de: add byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000447057: add byte ptr [rcx - 0x7d], cl; ret 0x4901; 
0x00000000004753cf: add byte ptr [rcx - 0x7d], cl; ret 0x4b30; 
0x0000000000423c3f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000420ef0: add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x000000000042280f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004452e7: add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004a4acc: add byte ptr [rcx - 0x7eef0007], al; stc; jmp qword ptr [rax]; 
0x000000000049cc27: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x000000000041b259: add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b263: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000041934f: add byte ptr [rcx - 0xa], al; ret; 
0x0000000000496c81: add byte ptr [rcx - 0xb37b], cl; inc dword ptr [rcx - 0x77]; ret; 
0x000000000040300b: add byte ptr [rcx - 0xc37b], cl; dec dword ptr [rdi]; test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x00000000004967aa: add byte ptr [rcx - 0xcf68130], cl; ret; 
0x0000000000427262: add byte ptr [rcx - 9], cl; ret 1; 
0x0000000000427288: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004c7ceb: add byte ptr [rcx*4 - 0x7c100000], ch; sti; jmp rsi; 
0x00000000004c3a40: add byte ptr [rcx], ah; clc; call qword ptr [rax]; 
0x0000000000444682: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xc985; 
0x000000000049a38f: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044ede5: add byte ptr [rcx], al; mov eax, 0; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000047d37e: add byte ptr [rcx], al; pop rbx; ret; 
0x000000000041796d: add byte ptr [rcx], al; ret; 
0x00000000004783ca: add byte ptr [rcx], al; test rdx, rdx; je 0x783e2; mov qword ptr [rsp], r8; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000400efc: add byte ptr [rcx], bh; ret 0x860f; 
0x000000000044543c: add byte ptr [rcx], bh; ret; 
0x0000000000470b39: add byte ptr [rcx], bh; ror dword ptr [rdi], 0x94; ret; 
0x000000000044395f: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000045c57c: add byte ptr [rcx], ch; ret 0xd089; 
0x000000000041130e: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000401935: add byte ptr [rcx], cl; add byte ptr [rax], al; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x000000000048be44: add byte ptr [rcx], cl; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000041495a: add byte ptr [rcx], cl; ret 0x8948; 
0x000000000049ed0f: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043fccb: add byte ptr [rcx], dh; idiv byte ptr [rax + 2]; syscall; 
0x00000000004953a7: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x000000000040f02c: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004813f7: add byte ptr [rcx], dh; ror byte ptr [rax + 1], cl; ret 0xe974; 
0x00000000004144cf: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], 0xd2; jne 0x144e0; ret; 
0x000000000048c088: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg esp, eax; ret 0xdaf7; 
0x000000000041d349: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000049a392: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000448e8e: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x0000000000448087: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x000000000044850e: add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x000000000044dd1b: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6dc8]; mov eax, ecx; syscall; 
0x0000000000415604: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x000000000044545b: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x0000000000473515: add byte ptr [rcx], dh; shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x00000000004100c6: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x10]; 
0x0000000000446a0d: add byte ptr [rdi + 0x44], dh; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x0000000000400b34: add byte ptr [rdi + 0x4a1bd7], bh; call 0x109b0; nop; leave; ret; 
0x000000000040155a: add byte ptr [rdi + 0x4a1d73], bh; mov eax, 2; syscall; 
0x00000000004015cb: add byte ptr [rdi + 0x4a1d7d], bh; mov eax, 2; syscall; 
0x0000000000412754: add byte ptr [rdi + 0x4a2b87], bh; mov eax, 2; syscall; 
0x00000000004a1ab3: add byte ptr [rdi + 0x4a2f10], bh; call 0x18120; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x00000000004a1ab2: add byte ptr [rdi + 0x4a2f10], dil; call 0x18120; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000041bc73: add byte ptr [rdi + 0x4a3560], bh; mov eax, 2; syscall; 
0x0000000000443532: add byte ptr [rdi + 0x4a597d], bh; mov eax, ebx; syscall; 
0x0000000000443561: add byte ptr [rdi + 0x4a5988], bh; mov eax, ebx; syscall; 
0x0000000000450654: add byte ptr [rdi + 0x4a78c0], bh; mov eax, ecx; syscall; 
0x000000000046fbf2: add byte ptr [rdi + 0x4b5d58], bh; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fbf2: add byte ptr [rdi + 0x4b5d58], bh; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000446a10: add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x0000000000446a0f: add byte ptr [rdi + 0x6cd6d8], r15b; call rax; 
0x0000000000403017: add byte ptr [rdi + 0x6cd720], bh; call rbx; 
0x000000000048c3c1: add byte ptr [rdi + 0x6cd9c0], bh; call rax; 
0x000000000048c3c0: add byte ptr [rdi + 0x6cd9c0], dil; call rax; 
0x000000000048c4ec: add byte ptr [rdi + 0x6cd9c4], bh; call rdx; 
0x000000000048c4eb: add byte ptr [rdi + 0x6cd9c4], dil; call rdx; 
0x00000000004c3368: add byte ptr [rdi + 0xe], al; adc byte ptr [rdx + rax - 0x79e7f1bc], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x000000000049ca71: add byte ptr [rdi + 1], bh; call rax; 
0x000000000044ffeb: add byte ptr [rdi + r9 - 0x4a], al; mov dl, 0x18; outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x0000000000427dc3: add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x12ad3]; ret; 
0x0000000000424893: add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x14853]; ret; 
0x000000000042780f: add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x17647]; ret; 
0x0000000000422420: add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x1a966]; ret; 
0x00000000004c372b: add byte ptr [rdi + rax*2], ch; add byte ptr [rax], ah; add al, 0xf8; call rsp; 
0x00000000004c76db: add byte ptr [rdi + rax*4], bl; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x00000000004c0f5b: add byte ptr [rdi + rbx + 0x56600000], bl; cmc; call qword ptr [rcx]; 
0x000000000045c4d4: add byte ptr [rdi + rcx + 0x44], cl; ret 0xf4c; 
0x000000000045b4c0: add byte ptr [rdi + rcx + 0x45], cl; ret 0xf4c; 
0x000000000044ffec: add byte ptr [rdi + rcx - 0x4a], al; mov dl, 0x18; outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004c7f73: add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c874b: add byte ptr [rdi + rdx*4 + 0x26300000], cl; cld; call qword ptr [rax + 1]; 
0x00000000004c0733: add byte ptr [rdi + rdx], dh; add byte ptr [rax + 0x2f], cl; cmc; call qword ptr [rax]; 
0x00000000004c6763: add byte ptr [rdi + rsi*2 - 0x63a80000], ah; cli; jmp rdi; 
0x00000000004af1bb: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004c5510: add byte ptr [rdi - 7], bh; call rdx; 
0x00000000004c6cfb: add byte ptr [rdi*2 - 0x36b00000], bh; cli; call qword ptr [rcx]; 
0x00000000004343d7: add byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d54: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x7076e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000472233: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000043576a: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000043f4d7: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x00000000004367cf: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043683f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000043e31f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e30f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e2df: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043e2ff: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2ef: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000048284f: add byte ptr [rdi], cl; mov dh, 0x48; add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x000000000048280f: add byte ptr [rdi], cl; mov dh, 0x48; add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004827ef: add byte ptr [rdi], cl; mov dh, 0x48; add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000048282f: add byte ptr [rdi], cl; mov dh, 0x48; add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004828cf: add byte ptr [rdi], cl; mov dh, 0x48; or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000048290f: add byte ptr [rdi], cl; mov dh, 0x48; or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004828ef: add byte ptr [rdi], cl; mov dh, 0x48; or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000449e2e: add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046b3d7: add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000049bb94: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000423aaf: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000412ecf: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042f6af: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042730f: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000447d93: add byte ptr [rdi], cl; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000042df0f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000004271af: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042719f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004271bf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271cf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042718f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000004425a5: add byte ptr [rdi], cl; test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000461342: add byte ptr [rdi], cl; test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x0000000000461552: add byte ptr [rdi], cl; test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x00000000004421d1: add byte ptr [rdi], cl; test byte ptr [rax + 0xa], al; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442641: add byte ptr [rdi], cl; test byte ptr [rax + 3], dl; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044250c: add byte ptr [rdi], cl; test byte ptr [rbp + 5], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044252c: add byte ptr [rdi], cl; test byte ptr [rbp + 6], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044239e: add byte ptr [rdi], cl; test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x000000000044a6da: add byte ptr [rdi], cl; test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000048c3b6: add byte ptr [rdi], cl; test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rsi + 0x48c350], bh; mov edi, 0x6cd9c0; call rax; 
0x00000000004427aa: add byte ptr [rdi], cl; test byte ptr [rdi + 3], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441eda: add byte ptr [rdi], cl; test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x00000000004218a4: add byte ptr [rdi], cl; test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000048c7d9: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], edx; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000043fcc5: add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x0000000000461919: add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000442a7c: add byte ptr [rdi], cl; test dword ptr [rax - 0x41000006], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442b9c: add byte ptr [rdi], cl; test dword ptr [rax - 0x41000007], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000044299c: add byte ptr [rdi], cl; test dword ptr [rbp - 0x41000004], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000442c1c: add byte ptr [rdi], cl; test dword ptr [rbp - 0x4100000b], esi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000040f1d9: add byte ptr [rdi], cl; test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004428e5: add byte ptr [rdi], cl; test dword ptr [rcx - 0x41000006], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000004429dc: add byte ptr [rdi], cl; test dword ptr [rcx - 0x41000008], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442bdc: add byte ptr [rdi], cl; test dword ptr [rcx - 0x4100000a], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000497a78: add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000442b1c: add byte ptr [rdi], cl; test dword ptr [rsi - 0x41000004], ecx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000442c3c: add byte ptr [rdi], cl; test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x00000000004211ba: add byte ptr [rdi], cl; test edi, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000040f699: add byte ptr [rdi], cl; test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045ed1b: add byte ptr [rdi], cl; xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041d352: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x00000000004706c9: add byte ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x0000000000444686: add byte ptr [rdi], cl; xchg ebp, eax; ret 0xc985; 
0x000000000047063d: add byte ptr [rdi], cl; xchg ebp, eax; ret 0xf748; 
0x00000000004745aa: add byte ptr [rdi], cl; xchg esp, eax; ret 0xc283; 
0x000000000046bddf: add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004003ff: add byte ptr [rdx + 0x1d], bh; mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000043fcf7: add byte ptr [rdx + 0x1f], bh; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x00000000004277ce: add byte ptr [rdx + 0x430cd0], bh; cmove rax, rdx; ret; 
0x000000000043bf3f: add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000043a78f: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x0000000000443845: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x00000000004408c8: add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440acd: add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472e0f: add byte ptr [rdx + 0x90800], bh; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x00000000004bfe6c: add byte ptr [rdx + 0xe], cl; adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x00000000004bfe6b: add byte ptr [rdx + 0xe], r9b; adc byte ptr [rbx + 0xe490202], al; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x0000000000442399: add byte ptr [rdx + 1], bh; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e6c: add byte ptr [rdx + 1], bh; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044398c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x000000000044210f: add byte ptr [rdx + 2], bh; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423be: add byte ptr [rdx + 2], bh; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e91: add byte ptr [rdx + 2], bh; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441eb5: add byte ptr [rdx + 3], bh; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442258: add byte ptr [rdx + 3], bh; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442133: add byte ptr [rdx + 3], bh; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fda: add byte ptr [rdx + 3], bh; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442785: add byte ptr [rdx + 3], bh; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442660: add byte ptr [rdx + 3], bh; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e2: add byte ptr [rdx + 3], bh; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044247b: add byte ptr [rdx + 4], bh; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442402: add byte ptr [rdx + 4], bh; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281e: add byte ptr [rdx + 4], bh; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426f9: add byte ptr [rdx + 4], bh; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442680: add byte ptr [rdx + 4], bh; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425a0: add byte ptr [rdx + 4], bh; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f1: add byte ptr [rdx + 4], bh; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442278: add byte ptr [rdx + 4], bh; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed5: add byte ptr [rdx + 4], bh; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442153: add byte ptr [rdx + 4], bh; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4e: add byte ptr [rdx + 4], bh; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442073: add byte ptr [rdx + 4], bh; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffa: add byte ptr [rdx + 4], bh; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000445c7f: add byte ptr [rdx + 8], bh; mov eax, edx; ret; 
0x00000000004bf1c3: add byte ptr [rdx + rax], al; add byte ptr [rax], al; sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x000000000049cbe6: add byte ptr [rdx + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004c5a2b: add byte ptr [rdx + rbp*2], ch; add al, ah; cli; call qword ptr [rsi]; 
0x00000000004c581b: add byte ptr [rdx + rbx*2 + 0x5e900000], dh; cli; jmp qword ptr [rdx + 1]; 
0x00000000004aeb17: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x0000000000445443: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x285b4c; pop rbx; ret; 
0x00000000004c3a3b: add byte ptr [rdx + rcx*2], bh; add byte ptr [rax], al; and eax, edi; call qword ptr [rax]; 
0x00000000004c39f3: add byte ptr [rdx + rcx*2], dh; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004c2a23: add byte ptr [rdx + rdi], ah; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c127b: add byte ptr [rdx + riz + 0x63800000], bh; cmc; call qword ptr [rsi]; 
0x000000000044109b: add byte ptr [rdx + riz*2 + 0x48], dh; mov ebx, edi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004c2273: add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004017d6: add byte ptr [rdx - 0x73], cl; xor al, 0x39; mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004a4af0: add byte ptr [rdx - 0x7ddf0007], al; stc; inc dword ptr [rax - 0x7e]; stc; jmp qword ptr [rax - 0x7e]; 
0x00000000004a4a10: add byte ptr [rdx - 7], bh; call qword ptr [rax]; 
0x00000000004a4a10: add byte ptr [rdx - 7], bh; call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004c44db: add byte ptr [rdx*2 + 0x7b800000], bl; clc; call qword ptr [rcx]; 
0x0000000000478cbd: add byte ptr [rdx], 0; add byte ptr [rbx + 0x2555d115], cl; add bh, dh; ret 0x804; 
0x0000000000481785: add byte ptr [rdx], ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000424890: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x2489d; lea rax, [rip + 0x14853]; ret; 
0x0000000000427dc0: add byte ptr [rdx], al; add byte ptr [rax], al; je 0x27dcd; lea rax, [rip + 0x12ad3]; ret; 
0x0000000000422670: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x2267d; lea rax, [rip + 3]; ret; 
0x0000000000427216: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27224; lea rax, [rip + 0x1d]; ret; 
0x0000000000427edc: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27ee9; lea rax, [rip + 0x67]; ret; 
0x0000000000427f2f: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27f3c; lea rax, [rip + 4]; ret; 
0x000000000048ca3c: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8ca49; lea rax, [rip + 0x67]; ret; 
0x000000000048ca8f: add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8ca9c; lea rax, [rip + 4]; ret; 
0x00000000004508cd: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000400462: add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049e: add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000401558: add byte ptr [rdx], al; add byte ptr [rdi + 0x4a1d73], bh; mov eax, 2; syscall; 
0x00000000004015c9: add byte ptr [rdx], al; add byte ptr [rdi + 0x4a1d7d], bh; mov eax, 2; syscall; 
0x000000000042780d: add byte ptr [rdx], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x17647]; ret; 
0x00000000004223f8: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000004b860f: add byte ptr [rdx], bh; mov esp, 0x130; add byte ptr [rax], al; ret 0x4b7d; 
0x00000000004a3f7c: add byte ptr [rip + 0x650fff8], 0xf8; jmp qword ptr [rax]; 
0x0000000000430caf: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000430cae: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000004303e2: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000045c567: add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000459533: add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045c117: add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000042df05: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043c415: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004178a5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000435fc5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450995: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450855: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450835: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000046d575: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd75: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000416295: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004178c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x0000000000436155: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043eca5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000400f25: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042df04: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004178c4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x000000000043eca4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000446a0b: add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c3bc: add byte ptr [rsi + 0x48c350], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000048c67e: add byte ptr [rsi + 0x48c590], bh; mov edi, 0x6cd9c4; call rdx; 
0x00000000004003cc: add byte ptr [rsi + 0x4a2b28], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400404: add byte ptr [rsi + 0x4a2b46], bh; mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004408cd: add byte ptr [rsi + 0x4a5850], bh; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440ad2: add byte ptr [rsi + 0x4a5850], bh; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000046fbed: add byte ptr [rsi + 0x4b5e74], bh; mov edi, 0x4b5d58; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000044355c: add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x000000000045064f: add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x000000000044395a: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x4396c; nop; mov eax, 0xca; syscall; 
0x0000000000443a47: add byte ptr [rsi + 0x80], bh; syscall; 
0x0000000000479530: add byte ptr [rsi + 0x81], bh; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443987: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041274f: add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000472f7f: add byte ptr [rsi + 0x90800], bh; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000049ca6c: add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x00000000004c0a28: add byte ptr [rsi + 0xe], cl; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x000000000042f9a4: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000458bb3: add byte ptr [rsi + 0xf], ah; ror byte ptr cs:[rdi], 0x8a; ret 8; 
0x00000000004270a4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000441f05: add byte ptr [rsi + 1], bh; call rbx; 
0x000000000049cfb6: add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x00000000004420f2: add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x0000000000441fbe: add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x0000000000441f36: add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x0000000000442370: add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x00000000004420e3: add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x0000000000441faf: add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x0000000000441f27: add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x000000000048bdc0: add byte ptr [rsi + rax - 0x39], dh; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000049f157: add byte ptr [rsi + rax - 0xd], dh; ret; 
0x00000000004c360b: add byte ptr [rsi + rax*2], cl; add al, al; add bh, al; call qword ptr [rdi]; 
0x00000000004c7603: add byte ptr [rsi + rax*4], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c8e6b: add byte ptr [rsi + rbx*4 - 0x30280000], ch; cld; call qword ptr [rdi + 9]; 
0x00000000004c9f10: add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c7c48: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7bd8: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7c10: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c7e5b: add byte ptr [rsi + rcx*4 - 0x70f00000], bl; sti; jmp qword ptr [rdx]; 
0x00000000004c0653: add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x00000000004c1663: add byte ptr [rsi + riz + 0x6a980000], ah; cmc; call qword ptr [rdx]; 
0x00000000004c55f3: add byte ptr [rsi + riz*2], dh; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c667b: add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004af30f: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004aeb0f: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000047364d: add byte ptr [rsi - 0x70], ah; cmp dword ptr [rip + 0x25ac05], 0; jne 0x7366d; mov eax, 3; syscall; 
0x000000000044ef5d: add byte ptr [rsi - 0x70], ah; mov eax, 0; test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000047362d: add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x000000000047362d: add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000044106d: add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; 
0x000000000044106d: add byte ptr [rsi - 0x70], ah; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047353d: add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; 
0x000000000047353d: add byte ptr [rsi - 0x70], ah; mov eax, 0x66; syscall; ret; 
0x000000000044104d: add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; 
0x000000000044104d: add byte ptr [rsi - 0x70], ah; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438cd: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000450c0d: add byte ptr [rsi - 0x70], ah; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000043a79f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043a7af: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004112ab: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416ca6: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000416ca6: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x16c9a; pop rbx; ret; 
0x000000000046cfc6: add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000413e46: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9e: add byte ptr [rsi - 1], bh; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000479c97: add byte ptr [rsi*2 + 0x158f8015], al; add eax, dword ptr [rax]; add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x000000000043c9a2: add byte ptr [rsi], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004be2fc: add byte ptr [rsi], bl; std; jmp rax; 
0x0000000000440441: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004c1443: add byte ptr [rsp + 0x65980000], al; cmc; call qword ptr [rsi]; 
0x00000000004c145b: add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004b29b7: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000043fa1f: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004bf3db: add byte ptr [rsp + rax], bl; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004c4c73: add byte ptr [rsp + rbx*2 - 0x44780000], dh; clc; call qword ptr [rdi]; 
0x00000000004c0c1b: add byte ptr [rsp + rbx], bl; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c3c53: add byte ptr [rsp + rcx*2 + 0x21b80000], dl; clc; call qword ptr [rsi + 0xb]; 
0x0000000000417a01: add byte ptr [rsp + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x00000000004c540b: add byte ptr [rsp + riz*2], cl; add al, dl; jl 0xc540c; call rdi; 
0x00000000004c13f3: add byte ptr [rsp], dh; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x000000000045d606: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004c1e3d: add byte ptr cs:[rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004c1665: add byte ptr es:[rax], al; cwde; push -0xb; call qword ptr [rdx]; 
0x00000000004bff98: add byte ptr fs:[rax], al; add ah, bl; sldt word ptr [rax]; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x0000000000426e58: add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000443847: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004bf370: add byte ptr fs:[rax], al; add byte ptr [rbx + rax + 0x30080000], dh; hlt; call qword ptr [rdx]; 
0x00000000004c7f70: add byte ptr fs:[rax], al; add byte ptr [rdi + rcx*4 - 0x6c180000], dh; std; call rcx; 
0x00000000004c6678: add byte ptr fs:[rax], al; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004144a0: add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004c550d: add byte ptr gs:[rax], al; add byte ptr [rdi - 7], bh; call rdx; 
0x0000000000446f14: add byte ptr gs:[rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000412c03: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x0000000000414489: add byte ptr gs:[rcx - 0x7874b7f9], cl; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000043ed8f: add ch, al; cli; jg 0x3ed9b; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004594cf: add ch, bl; fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x00000000004bcfbc: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004bcfbd: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000045e0f0: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000046fdcb: add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000045e130: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x0000000000441020: add ch, cl; imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000041bead: add ch, cl; paddd mm7, mm7; dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x000000000047af38: add ch, cl; ret 0xfffd; 
0x00000000004a4950: add ch, dh; clc; jmp qword ptr [rax]; 
0x00000000004797f3: add cl, al; insb byte ptr [rdi], dx; add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x00000000004a4971: add cl, bh; jmp qword ptr [rax]; 
0x0000000000404e38: add cl, bpl; mov ebx, 0xb8fffff2; ret 0x4b7c; 
0x0000000000404a4a: add cl, bpl; test eax, 0xb8fffff6; ret 0x4b7c; 
0x000000000043a7b7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000481e24: add cl, byte ptr [rax + 0x29]; ret 0x8949; 
0x0000000000481e4d: add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x000000000045ea2e: add cl, byte ptr [rax + 0x29]; ret; 
0x0000000000427911: add cl, byte ptr [rax + 0x2c2f60f]; je 0x27884; mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000047832b: add cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x000000000044ac63: add cl, byte ptr [rax + 0x39]; ret; 
0x00000000004116e9: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044e2d3: add cl, byte ptr [rax + 1]; ret 0x394c; 
0x0000000000466a55: add cl, byte ptr [rax + 1]; ret; 
0x000000000043c055: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000043a845: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000043a775: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000043a7b8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x0000000000411af6: add cl, byte ptr [rax - 0x77]; and al, 0x20; call qword ptr [rbx + 0x30]; 
0x000000000043a725: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000044d6fb: add cl, byte ptr [rax - 0x77]; ror byte ptr [rdi], 1; test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004175a2: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000473be9: add cl, byte ptr [rax - 0x7d]; mov dword ptr [rcx], 0x8348c889; ret 0x8401; 
0x000000000048b11c: add cl, byte ptr [rax - 0x7d]; ret 0x4101; 
0x00000000004248f0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000449874: add cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000424953: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x000000000046ca11: add cl, byte ptr [rax - 9]; fiadd dword ptr [rbx + 0x394803e2]; ret 0xf48; 
0x00000000004c0b30: add cl, byte ptr [rbp + 0xa]; ret; 
0x0000000000482813: add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000436612: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000043a7f3: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000043bfd5: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000043a835: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000041d14d: add cl, byte ptr [rcx + 0x548d48d0]; ret; 
0x00000000004c9229: add cl, byte ptr [rcx + 0xe]; adc byte ptr [rdx + rax - 0x79e7f1bf], cl; add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004bfe72: add cl, byte ptr [rcx + 0xe]; nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x00000000004602e6: add cl, byte ptr [rcx + rcx*4 - 6]; call qword ptr [rax + 0x38]; 
0x00000000004607bc: add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000497414: add cl, byte ptr [rcx - 0x73]; jl 0x973de; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000049c987: add cl, byte ptr [rcx - 0x75]; adc al, 0x24; mov edi, 1; call rax; 
0x0000000000412751: add cl, byte ptr [rcx]; add byte ptr [rax], al; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000400601: add cl, byte ptr [rdi]; test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041c4d8: add cl, byte ptr [rdi]; test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x000000000046b5b5: add cl, byte ptr [rdi]; xchg ebp, eax; ret 0x5389; 
0x000000000043f2ad: add cl, byte ptr [rdi]; xchg esp, eax; ret 0x8444; 
0x000000000043a7b5: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043bf93: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000043a7d3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000004c9167: add cl, byte ptr [rdx]; ret; 
0x00000000004a094c: add cl, ch; fiadd word ptr [rsi]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000046615c: add cl, ch; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000404e39: add cl, ch; mov ebx, 0xb8fffff2; ret 0x4b7c; 
0x000000000047f04d: add cl, ch; mov esi, 0x89fffffe; ret 0x758b; 
0x0000000000464858: add cl, ch; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000408a28: add cl, ch; ret 0xffe2; 
0x000000000047ae64: add cl, ch; ret 0xfffd; 
0x000000000044acc7: add cl, ch; ret; 
0x000000000043741a: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000040abd4: add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004174b0: add cl, ch; sar ebp, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000404a4b: add cl, ch; test eax, 0xb8fffff6; ret 0x4b7c; 
0x000000000047a824: add cl, ch; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041b361: add cl, ch; xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000413f87: add cl, ch; xor eax, 0x48ffffff; mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000443b37: add cl, cl; ret; 
0x00000000004a4334: add dh, ah; clc; jmp rax; 
0x00000000004c0a38: add dh, ah; ret; 
0x000000000047374c: add dh, al; or al, 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x00000000004bf519: add dh, bh; call rdi; 
0x00000000004b2017: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004367c3: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000440f1b: add dh, bl; ret; 
0x0000000000461915: add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x000000000043e907: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9b7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x00000000004c0936: add dh, byte ptr [rbp + 0x41180e0a]; ret; 
0x000000000049f162: add dh, byte ptr [rbp + 6]; mov eax, 8; ret; 
0x0000000000400427: add dh, byte ptr [rcx]; idiv byte ptr [rdi + 0x4a2b64]; mov eax, 2; syscall; 
0x00000000004369b8: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043edc2: add dh, byte ptr [rdx + 0xb]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043ef3f: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000426e9f: add dh, dh; add eax, 0x2a6821; adc byte ptr [rdx + 0x4268d0], bh; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x00000000004c23a0: add dh, dh; cmc; call qword ptr [rdx]; 
0x0000000000413cbf: add dh, dh; je 0x13cc6; je 0x13cf8; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000448295: add dh, dh; ret 0x4801; 
0x0000000000427968: add dh, dh; ret 0x7404; 
0x000000000040121e: add dh, dh; ret 0x7420; 
0x000000000043ce67: add dh, dh; ret 0x7501; 
0x000000000043ce74: add dh, dh; ret 0x7502; 
0x000000000043ce81: add dh, dh; ret 0x7504; 
0x000000000043ce39: add dh, dh; ret 0x7510; 
0x000000000043ce46: add dh, dh; ret 0x7520; 
0x000000000043ce53: add dh, dh; ret 0x7540; 
0x000000000041c4d5: add dh, dh; ret 0xf02; 
0x000000000047933a: add dh, dh; ret 0xf08; 
0x00000000004185da: add dh, dh; ret; 
0x000000000047f33f: add dh, dh; xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x00000000004a44ac: add dh, dl; clc; call qword ptr [rax - 0x29]; 
0x00000000004a3f6c: add dil, al; call qword ptr [rax]; 
0x00000000004a3f6c: add dil, al; call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004bf05f: add dl, ah; sbb dh, ah; call qword ptr [rsi]; 
0x00000000004bb39a: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x000000000047591b: add dl, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x00000000004a47c4: add dl, byte ptr [rcx + rdi*8]; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004c29ac: add dword ptr [r14], 3; mov byte ptr [rcx], al; ret; 
0x000000000044afa6: add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000041035a: add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046acee: add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046b442: add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000043fa22: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a610: add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x000000000043bf41: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x000000000047d1c9: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047d1db: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000048b2b0: add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x000000000045a52d: add dword ptr [rax + 0x39], ecx; ret 0x8d0f; 
0x0000000000416221: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000049d539: add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000416ce3: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x00000000004650c3: add dword ptr [rax + 1], ecx; ret; 
0x000000000040df76: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000041035b: add dword ptr [rax + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004736d8: add dword ptr [rax + rax], edx; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004c5cde: add dword ptr [rax + rbp*2], 0xa; ret; 
0x0000000000459016: add dword ptr [rax - 0x39], ecx; ret 0xfff0; 
0x0000000000402c63: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x000000000049be9a: add dword ptr [rax - 0x73], ecx; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000043a791: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x000000000047d06d: add dword ptr [rax - 0x77], ecx; adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000043c052: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000043a842: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000043a772: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000043a722: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043bfd2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x000000000043a832: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047c937: add dword ptr [rax - 0x77], ecx; add eax, 0x2514d1; add rsp, 8; ret; 
0x0000000000468b49: add dword ptr [rax - 0x77], ecx; lea esi, [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000416023: add dword ptr [rax - 0x77], ecx; or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x000000000041989e: add dword ptr [rax - 0x77], ecx; pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004161ba: add dword ptr [rax - 0x77], ecx; push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000045c561: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000045952d: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045c111: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000047a6b7: add dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x0000000000413f0f: add dword ptr [rax - 0x77], ecx; ret 0x850f; 
0x000000000046dc31: add dword ptr [rax - 0x77], ecx; ret; 
0x00000000004783cb: add dword ptr [rax - 0x7b], ecx; sal byte ptr [rcx + rdx + 0x4c], cl; mov dword ptr [rsp], eax; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x000000000047c284: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000046acef: add dword ptr [rax - 0x7d], ecx; ret 0x4502; 
0x0000000000451869: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000041c096: add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x000000000044585c: add dword ptr [rax - 0x7d], ecx; ret 0x4830; 
0x0000000000453853: add dword ptr [rax - 0x7d], ecx; ret 0x4910; 
0x0000000000447f6e: add dword ptr [rax - 0x7d], ecx; ret 0x4d02; 
0x0000000000482704: add dword ptr [rax - 0x7d], ecx; ret 0x6610; 
0x0000000000497543: add dword ptr [rax - 0x7d], ecx; ret 0x8008; 
0x000000000046b443: add dword ptr [rax - 0x7d], ecx; ret 0x8508; 
0x0000000000463eba: add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000426912: add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004c7385: add dword ptr [rax], 0; cmp byte ptr [rbx], ah; sti; jmp qword ptr [rdi]; 
0x0000000000443989: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000004c7115: add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x0000000000412d46: add dword ptr [rax], eax; add al, al; sub dword ptr [rdx], ecx; pop rbx; ret; 
0x0000000000401557: add dword ptr [rax], eax; add al, byte ptr [rax]; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x000000000049b6e3: add dword ptr [rax], eax; add bl, ch; xchg ebx, eax; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x0000000000410616: add dword ptr [rax], eax; add bl, dh; ret; 
0x000000000044d4b6: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000044c62e: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x000000000047c394: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000413814: add dword ptr [rax], eax; add byte ptr [rax + 0x48004a2a], al; mov eax, dword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x00000000004141d7: add dword ptr [rax], eax; add byte ptr [rax + 0x48004a2a], al; mov eax, dword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000046e063: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000498b67: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x00000000004221b9: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000468b43: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add qword ptr [rax - 0x77], rcx; lea esi, [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000041c24b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000418e9a: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x2b473c; test rax, rax; je 0x18eab; call rax; 
0x00000000004107c0: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000041f7ae: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x00000000004503c5: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x000000000049c8d5: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004125c6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046d068: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x000000000041f6c6: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041f7f0: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000040f69d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004246dd: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044aa64: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x00000000004266ee: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042d15f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000424631: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000405e47: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044d812: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000046c5f0: add dword ptr [rax], eax; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000445ce1: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004b201a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004b11ca: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004b0fea: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004b1782: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004b0ff2: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043fa95: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b876: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401a58: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000441f07: add dword ptr [rax], eax; add byte ptr [rax], al; call rbx; 
0x000000000044239b: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e6e: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000445440: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x45450; mov dword ptr [rip + 0x285b4c], edx; pop rbx; ret; 
0x000000000049d33d: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000041bc94: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000462266: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462313: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462792: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000044398e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000043fd93: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000044ff51: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000049cfb8: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000047952d: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004420ef: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x000000000044236d: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x000000000044fe9b: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048bd5e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000044ff4b: add dword ptr [rax], eax; add byte ptr [rax], al; mov r13d, 1; mov eax, 3; syscall; 
0x0000000000460f4c: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x000000000046231d: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462754: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000460fe2: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004420f4: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000441fc0: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000441f38: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000044237e: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000046aa19: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004127d9: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000045d27b: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000416623: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043fb2c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000445407: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000049d3fd: add dword ptr [rax], eax; add byte ptr [rax], al; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004003d6: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000044056a: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047d76d: add dword ptr [rax], eax; add byte ptr [rax], bh; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x0000000000440f53: add dword ptr [rax], eax; add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x000000000041c4dc: add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x000000000041ce2d: add dword ptr [rax], eax; add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000049c8ae: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000400605: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004454f3: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000470518: add dword ptr [rax], eax; add byte ptr [rbx - 0x38b7cf18], al; ret; 
0x0000000000411502: add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fd03], al; ret 0; 
0x000000000046b3e2: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x00000000004440ee: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x0000000000403d11: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000049e721: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jbe 0x9e730; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000046734a: add dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x0000000000420eee: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x00000000004470dc: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000041e20b: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b261: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000044a6de: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000470b37: add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], 0x94; ret; 
0x0000000000414958: add dword ptr [rax], eax; add byte ptr [rcx], cl; ret 0x8948; 
0x000000000049a390: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000448085: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x000000000049bb92: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000440acb: add dword ptr [rax], eax; add byte ptr [rdx + 0x80000], bh; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472e0d: add dword ptr [rax], eax; add byte ptr [rdx + 0x90800], bh; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000446b08: add dword ptr [rax], eax; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000048c3ba: add dword ptr [rax], eax; add byte ptr [rsi + 0x48c350], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000041274d: add dword ptr [rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x000000000046d15c: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000046cfc4: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6d4: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043ce65: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000043ce72: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000043ce7f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000043ce37: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000043ce44: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000043ce51: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000400db0: add dword ptr [rax], eax; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000048f3c1: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f0b6: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004223f7: add dword ptr [rax], eax; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000491052: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000400ab6: add dword ptr [rax], eax; nop; pop rbp; ret; 
0x0000000000422428: add dword ptr [rax], eax; ret; 
0x0000000000426d11: add dword ptr [rax], edi; ret; 
0x000000000044ede6: add dword ptr [rax], edi; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000041f7ad: add dword ptr [rax], r8d; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000043ec77: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3ec70; sub rax, 1; ret; 
0x000000000043eb27: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3eb20; lea rax, [rcx - 1]; ret; 
0x0000000000400c5c: add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000043f2e7: add dword ptr [rbp + 0x41], ebx; pop rsp; pop r13; ret; 
0x000000000046b43c: add dword ptr [rbp + 0xf48ff70], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046b58b: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046ace7: add dword ptr [rbp + rcx*4 + 0x46], eax; dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046ae73: add dword ptr [rbp + rcx*4 + 0x4f], eax; dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x0000000000498222: add dword ptr [rbp + rcx*4 + 0x74], ecx; ret; 
0x00000000004726ab: add dword ptr [rbp + riz + 0x35894c00], esp; add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x00000000004827f3: add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000468a87: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret 0x2941; 
0x00000000004437b9: add dword ptr [rbp - 0xc], esi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000436682: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000049547a: add dword ptr [rbx + 0x41], ebx; mov dword ptr [rdx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x00000000004765f5: add dword ptr [rbx - 0x77], eax; je 0x7657e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x000000000040d9ad: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000004686e9: add dword ptr [rbx - 0x7cf0f706], eax; xchg edx, eax; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x00000000004ca1ef: add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x00000000004ca1ec: add dword ptr [rbx], ecx; fadd dword ptr [rcx]; add esi, ebp; add al, byte ptr [rax]; ret; 
0x000000000043bfc1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000043a7f1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000472b09: add dword ptr [rcx + 0x39], ecx; ret 0x850f; 
0x00000000004480aa: add dword ptr [rcx + 0x39], ecx; ret 0xe077; 
0x0000000000448538: add dword ptr [rcx + 0x39], ecx; ret 0xe277; 
0x000000000043bfa1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000043bf91: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000043a7d1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000004726a7: add dword ptr [rcx + rcx*4 + 0x3d], ecx; add dword ptr [rbp + riz + 0x35894c00], esp; add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x00000000004434de: add dword ptr [rcx + rdi - 0xe], ecx; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000041cb23: add dword ptr [rcx - 0x75], ecx; push rax; or dh, dh; ret 0xf04; 
0x000000000043a7c1: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000046a800: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x00000000004440f3: add dword ptr [rcx - 0x7d], eax; ret 0x4901; 
0x000000000044708d: add dword ptr [rcx - 0x7d], ecx; ret 0x4101; 
0x000000000040469d: add dword ptr [rcx - 0x7d], ecx; ret 0x4804; 
0x0000000000426707: add dword ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000412912: add dword ptr [rcx], 0x2be0000; or dword ptr [rax], eax; add byte ptr [rdi + 0x4a2b87], bh; mov eax, 2; syscall; 
0x00000000004573cd: add dword ptr [rcx], 0xf8834800; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x00000000004408db: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000041ce35: add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x000000000045b98d: add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x000000000046f42f: add dword ptr [rcx], esi; leave; xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x00000000004c7c4d: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004c7bdd: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004c7c15: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004c7bee: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004c7c26: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7c5e: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c386d: add dword ptr [rdi], 3; mov bh, 1; ret; 
0x00000000004c74e3: add dword ptr [rdi], 3; mov bl, 2; ret; 
0x00000000004c9163: add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c90b2: add dword ptr [rdi], 3; test byte ptr [rcx], al; ret; 
0x000000000043f348: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x000000000043f333: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x000000000045ca61: add dword ptr [rdi], ecx; test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041ac95: add dword ptr [rdi], ecx; test dword ptr [rax + rax - 0x74b80000], ecx; add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000004193fe: add dword ptr [rdi], ecx; test dword ptr [rbx], ecx; add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x000000000041b77d: add dword ptr [rdi], ecx; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000041e211: add dword ptr [rdi], ecx; test edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000047d3e7: add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8348; 
0x000000000047dc54: add dword ptr [rdi], ecx; xchg edx, eax; ret 0xb60f; 
0x000000000043f20d: add dword ptr [rdi], ecx; xchg esp, eax; ret 0x8341; 
0x000000000043edd2: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x00000000004369cd: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000049a3eb: add dword ptr [rdx + rax*2], 1; ret; 
0x00000000004c0a36: add dword ptr [rdx + rax], -0xc; ret; 
0x0000000000476317: add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x000000000042bcc6: add dword ptr [rdx - 0x2ef272b8], edx; mov dword ptr [rdi], 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000436926: add dword ptr [rdx - 0x2f], esp; jl 0x36973; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eee3: add dword ptr [rdx - 0xf], esp; jl 0x3ef30; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f023: add dword ptr [rdx - 0xf], esp; jl 0x3f070; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004c1c85: add dword ptr [rdx], 0x43; ret; 
0x00000000004c79d5: add dword ptr [rdx], 0x48; ret; 
0x00000000004c9f4c: add dword ptr [rdx], 0x54; ret; 
0x00000000004c7494: add dword ptr [rdx], 0x55; ret; 
0x00000000004c79cc: add dword ptr [rdx], 0x5b; ret; 
0x00000000004c9ef4: add dword ptr [rdx], 0x69; ret; 
0x00000000004c5e2c: add dword ptr [rdx], 2; pop rsi; ret; 
0x00000000004c5c04: add dword ptr [rdx], 2; push rsi; ret; 
0x000000000046f4d0: add dword ptr [rdx], ebp; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x00000000004c0b42: add dword ptr [rdx], ecx; ret; 
0x000000000044ede0: add dword ptr [rip + 0x27f461], 1; mov eax, 0; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x0000000000417968: add dword ptr [rip + 0x2b5c35], 1; ret; 
0x00000000004ca195: add dword ptr [riz*4 - 0xafe3aff], ecx; add al, byte ptr [rax]; ret; 
0x0000000000433a04: add dword ptr [rsi + 0x11], esi; mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004c29a3: add dword ptr [rsi + 0x48d4503], ecx; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004bfe76: add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x00000000004c064c: add dword ptr [rsi + rcx + 0x20], ecx; add byte ptr [rax], r8b; add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x00000000004c0c14: add dword ptr [rsi + rcx + 8], ecx; add byte ptr [rax], r8b; add byte ptr [rsp + rbx], bl; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c0e46: add dword ptr [rsi + riz*2], 0xa; ret; 
0x000000000043a7a2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000043a7b2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004975d8: add dword ptr [rsi - 0x77], esp; xor byte ptr [rbx - 0xbf7b], cl; jmp qword ptr [rsi - 0x77]; 
0x000000000043c8e6: add dword ptr [rsi], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c0eb8: add dword ptr [rsi], 2; xchg ebp, eax; ret; 
0x00000000004c29ad: add dword ptr [rsi], 3; mov byte ptr [rcx], al; ret; 
0x0000000000400fad: add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x00000000004c3376: add dword ptr [rsp + rbp*2], 0xa; ret; 
0x0000000000418e99: add dword ptr cs:[rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x2b473c; test rax, rax; je 0x18eab; call rax; 
0x0000000000492917: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041274c: add dword ptr es:[rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x00000000004c917a: add dword ptr es:[rdx], ecx; ret; 
0x0000000000444e60: add dword ptr fs:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000427dc8: add eax, 0x12ad3; ret; 
0x0000000000424898: add eax, 0x14853; ret; 
0x000000000042723a: add eax, 0x15e71; ret; 
0x0000000000427814: add eax, 0x17647; ret; 
0x0000000000422425: add eax, 0x1a966; ret; 
0x000000000042721e: add eax, 0x1d; ret; 
0x00000000004508cc: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004a1355: add eax, 0x22c532; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004a12ac: add eax, 0x22c583; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a09a7: add eax, 0x22cd60; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049ebd2: add eax, 0x22f179; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea7a: add eax, 0x22f2d1; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004c24f4: add eax, 0x2300e4a; ret; 
0x000000000049a3dc: add eax, 0x23374f; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049a5f1: add eax, 0x233d0a; ret; 
0x000000000047ca72: add eax, 0x24e619; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000047ca7c: add eax, 0x251387; mov qword ptr [rsi], rax; ret; 
0x000000000047ca1b: add eax, 0x2513f0; ret; 
0x000000000047c93a: add eax, 0x2514d1; add rsp, 8; ret; 
0x000000000047c92f: add eax, 0x2514dc; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x0000000000473652: add eax, 0x25ac; jne 0x7366d; mov eax, 3; syscall; 
0x00000000004708a7: add eax, 0x25db6c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044ede1: add eax, 0x27f461; add dword ptr [rax], edi; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044debc: add eax, 0x27f83b; add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044dce2: add eax, 0x27fa19; ret; 
0x0000000000446972: add eax, 0x2879f1; ret; 
0x0000000000445421: add eax, 0x288f2a; test eax, eax; je 0x45430; ret; 
0x0000000000443841: add eax, 0x28aaba; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000427225: add eax, 0x2a6462; add byte ptr [rax], al; or byte ptr [rax], al; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x0000000000426ea1: add eax, 0x2a6821; adc byte ptr [rdx + 0x4268d0], bh; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x0000000000420120: add eax, 0x2ad4cb; test rax, rax; je 0x2012c; call rax; 
0x000000000041ed49: add eax, 0x2ae8b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041bcc4: add eax, 0x2afa97; mov rdi, r9; mov eax, 3; syscall; 
0x00000000004178d2: add eax, 0x2b37e9; ret; 
0x0000000000418e9f: add eax, 0x2b473c; test rax, rax; je 0x18eab; call rax; 
0x00000000004179d6: add eax, 0x2b5bc9; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040193b: add eax, 0x2c9750; xor eax, eax; ret; 
0x0000000000400706: add eax, 0x2cb9a5; pop rbp; pop r12; ret; 
0x0000000000400965: add eax, 0x2cc1f5; add ebx, esi; ret; 
0x00000000004c29ab: add eax, 0x3068345; mov byte ptr [rcx], al; ret; 
0x000000000049c473: add eax, 0x438b5877; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000043bfd8: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x000000000043a808: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000436303: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb36: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000436c8b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043f0c0: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043c059: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000043a849: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000443adb: add eax, 0x5b000000; pop r12; pop r13; pop rbp; ret; 
0x000000000048c216: add eax, 0x5b000000; ret; 
0x00000000004bf555: add eax, 0x5b680000; hlt; call qword ptr [rax]; 
0x00000000004b2bb1: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004b2bbd: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000419c95: add eax, 0x5c415d5b; ret; 
0x0000000000423fa6: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000433f5e: add eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a3f7d: add eax, 0x650fff8; clc; jmp qword ptr [rax]; 
0x0000000000427ee4: add eax, 0x67; ret; 
0x00000000004a497d: add eax, 0x6a0fff9; stc; jmp qword ptr [rax]; 
0x000000000046d205: add eax, 0x74fc7239; sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000043f2a5: add eax, 0x75e48445; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x0000000000482873: add eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000043f207: add eax, 0x8307e083; clc; add dword ptr [rdi], ecx; xchg esp, eax; ret 0x8341; 
0x00000000004242cd: add eax, 0x83480000; ret 0x4910; 
0x000000000042b751: add eax, 0x83480000; ret 0xe910; 
0x0000000000424221: add eax, 0x83480000; ret 0xeb10; 
0x0000000000473556: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000473546: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000473566: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000043bfdb: add eax, 0x8428d48; ret; 
0x0000000000427232: add eax, 0x8449; ret; 
0x00000000004682ca: add eax, 0x89000001; ret 0x348; 
0x000000000044ac5d: add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044afbe: add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044afdb: add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x0000000000401934: add eax, 0x900; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x00000000004306da: add eax, 0xc0310000; ret; 
0x000000000043c05d: add eax, 0xc428d48; ret; 
0x000000000043cb3d: add eax, 0xc478d48; ret; 
0x000000000040ee17: add eax, 0xc8c14818; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004967ce: add eax, 0xdc75d285; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000400bb6: add eax, 0xe1870f; add byte ptr [rax], al; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x000000000047e4fd: add eax, 0xe8004b77; push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000043666a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000041b71b: add eax, 0xf05f883; test al, dh; add eax, 0xf6410000; ret 0xf01; 
0x000000000041a1bf: add eax, 0xf05f883; test bh, dl; add al, 0; add dh, dh; ret; 
0x00000000004185d1: add eax, 0xf05f883; test byte ptr [rbp - 0xa000000], ah; ret; 
0x000000000041f202: add eax, 0xf05f883; test byte ptr [rbx - 0xa000000], cl; ret; 
0x0000000000419062: add eax, 0xf05f883; test byte ptr [rdi - 0xa000000], cl; ret; 
0x000000000041e204: add eax, 0xf05f883; test dl, cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000041b7ec: add eax, 0xf05fa83; test cl, bh; add eax, 0xf6410000; ret 0xf01; 
0x00000000004423a2: add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x00000000004423c7: add eax, 0xf6310000; mov rdi, r13; call rbx; 
0x0000000000442510: add eax, 0xf6310000; mov rdi, r14; call rbx; 
0x00000000004425a9: add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x000000000041b257: add eax, 0xf6410000; ret 0xf01; 
0x0000000000436673: add eax, 0xf7f0ff3; ret; 
0x000000000047c27f: add eax, 0xfffffbd8; add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000004811aa: add eax, 0xfffffff8; ret; 
0x000000000047d06b: add eax, 1; mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c935: add eax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x000000000043f2e5: add eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000046eea1: add eax, 1; ret; 
0x0000000000445cc5: add eax, 2; push rax; call rbx; 
0x000000000046ee98: add eax, 2; ret; 
0x0000000000422678: add eax, 3; ret; 
0x0000000000427f37: add eax, 4; ret; 
0x0000000000450829: add eax, dword ptr [0]; ret; 
0x000000000049cc94: add eax, dword ptr [rax + 0xd0]; add rsp, 0x18; ret; 
0x0000000000479748: add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000419e33: add eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x00000000004188fb: add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000479c9e: add eax, dword ptr [rax]; add byte ptr [rax + rcx*2], al; add esp, 8; ret; 
0x0000000000479709: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000044eee8: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042446d: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b8f1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000424491: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000478683: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410379: add eax, dword ptr [rax]; add byte ptr [rax], 0; je 0x10388; mov eax, edx; pop rbx; ret; 
0x000000000048c095: add eax, dword ptr [rax]; add byte ptr [rax], 0; je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x0000000000446916: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047d374: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x24edf00d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000441eb7: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044225a: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442135: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fdc: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442787: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442662: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e4: add eax, dword ptr [rax]; add byte ptr [rax], al; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044110c: add eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000441f33: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x0000000000441fac: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000472f53: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004428ed: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000442944: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000004429c4: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442ac4: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000413465: add eax, dword ptr [rax]; add byte ptr [rax], al; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000422679: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000040048a: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000047365a: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000498699: add eax, dword ptr [rax]; add byte ptr [rax], bh; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x000000000047f343: add eax, dword ptr [rax]; add byte ptr [rax], cl; je 0x7f3ad; pop rbx; ret; 
0x00000000004bf375: add eax, dword ptr [rax]; add byte ptr [rax], cl; xor ah, dh; call qword ptr [rdx]; 
0x00000000004439bc: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x0000000000478cb6: add eax, dword ptr [rax]; add byte ptr [rbp - 0x7f7bf037], al; add al, byte ptr [rax]; add byte ptr [rbx + 0x2555d115], cl; add bh, dh; ret 0x804; 
0x000000000043f343: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0x72e9; 
0x000000000047d3df: add eax, dword ptr [rax]; add byte ptr [rbx - 0x57fef1e], al; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8348; 
0x000000000047dc4c: add eax, dword ptr [rax]; add byte ptr [rbx - 0x57ffb1e], al; add dword ptr [rdi], ecx; xchg edx, eax; ret 0xb60f; 
0x000000000049832c: add eax, dword ptr [rax]; add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x87f6; 
0x00000000004439a5: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000419402: add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000443a45: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047a822: add eax, dword ptr [rax]; add cl, ch; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000479338: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x000000000040fec8: add eax, dword ptr [rax]; add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x00000000004103be: add eax, dword ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000401533: add eax, dword ptr [rax]; cmp eax, -1; je 0x1623; add rsp, 0x98; ret; 
0x0000000000400b33: add eax, dword ptr [rax]; mov edi, 0x4a1bd7; call 0x109b0; nop; leave; ret; 
0x000000000044e70e: add eax, dword ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000446601: add eax, dword ptr [rax]; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000043f560: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043f580: add eax, dword ptr [rax]; ret; 
0x000000000043fda9: add eax, dword ptr [rax]; sub rax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000440b53: add eax, dword ptr [rax]; test r13b, r13b; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x00000000004c29a5: add eax, dword ptr [rbp - 0x73]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x000000000049821b: add eax, dword ptr [rbp - 0x7cdc8b40]; call 0x7496ce27; ret; 
0x00000000004c6e6b: add eax, dword ptr [rbx + 0xaf10204]; ret; 
0x00000000004c0b2a: add eax, dword ptr [rbx + 0xe]; and byte ptr [rbx + 0xa4d0204], al; ret; 
0x000000000040058d: add eax, dword ptr [rbx - 0x7cb70038]; rol dword ptr [rbx + rbp*8], 0xcc; mov qword ptr [rdi], rcx; ret; 
0x0000000000498951: add eax, dword ptr [rbx]; call rax; 
0x00000000004981ee: add eax, dword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004c7bf1: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x0000000000412374: add eax, dword ptr [rcx + 0x39]; fadd dword ptr [rdi + rcx + 0x47]; ret; 
0x0000000000496bdd: add eax, dword ptr [rcx + 0x5d]; pop r14; pop r15; ret; 
0x00000000004c9233: add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0x1890304], al; ret; 
0x00000000004c0552: add eax, dword ptr [rcx + 0xe]; and byte ptr [rbx + 0xa470204], al; ret; 
0x000000000047390a: add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004340d7: add eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047a565: add eax, dword ptr [rdi]; call rax; 
0x0000000000480f54: add eax, dword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047e8a9: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000481168: add eax, dword ptr [rdx + 8]; je 0x81174; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x00000000004c7c29: add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7c61: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c0a32: add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c3372: add eax, dword ptr [rsi + rcx + 0x20]; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x00000000004c0646: add eax, dword ptr [rsi - 0x5ff180fe]; add dword ptr [rsi + rcx + 0x20], ecx; add byte ptr [rax], r8b; add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x000000000047a0cb: add eax, dword ptr [rsp]; call rax; 
0x000000000047afa6: add eax, dword ptr [rsp]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a765: add eax, dword ptr [rsp]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x0000000000440b52: add eax, dword ptr es:[rax]; test r13b, r13b; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000043f628: add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000049bef6: add eax, eax; jmp rax; 
0x000000000045b1c8: add eax, eax; ret; 
0x0000000000426e56: add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000049bb9e: add eax, ebp; jmp rax; 
0x000000000040edef: add eax, ebp; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edc7: add eax, ebp; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000452fe0: add eax, ebx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a3d8: add eax, ecx; cmp rax, qword ptr [rip + 0x23374f]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000426f5a: add eax, ecx; ret; 
0x0000000000426f57: add eax, edi; add rax, rcx; ret; 
0x000000000046fc2c: add eax, edi; cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x00000000004a3f69: add eax, edi; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004a3f69: add eax, edi; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; add edi, eax; jmp rax; 
0x0000000000427194: add eax, edi; ret; 
0x0000000000424b66: add eax, edx; sub rax, rdi; ret; 
0x000000000049c47e: add eax, esi; jmp rax; 
0x000000000046fc37: add eax, esi; ret; 
0x000000000045b1c7: add eax, r8d; ret; 
0x00000000004586cf: add ebp, 0x30; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000458708: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000049561d: add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000004ca198: add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x0000000000473803: add ebp, edi; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x00000000004ca19a: add ebp, esi; add al, byte ptr [rax]; ret; 
0x000000000047a0c7: add ebx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000049a62a: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004c7c1a: add ebx, dword ptr [rbx + 3]; ret; 
0x0000000000479d53: add ebx, dword ptr [rbx - 0xd]; ret; 
0x00000000004c0b40: add ebx, dword ptr [rdi]; add dword ptr [rdx], ecx; ret; 
0x00000000004980d1: add ebx, dword ptr [rdx]; and eax, 0xf; cmp al, 0xa; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x000000000046804a: add ebx, ebp; ret 0x8d48; 
0x00000000004415fb: add ebx, ebx; std; dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000436833: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000040096a: add ebx, esi; ret; 
0x000000000043a7f5: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000419269: add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000046ca17: add ecx, dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000044ac7f: add ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000433b0a: add ecx, dword ptr [rax + 0x39]; retf 0x1073; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000049be9e: add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000048c643: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000043a7f9: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000497b98: add ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000041e53d: add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x0000000000419d58: add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x00000000004484a5: add ecx, dword ptr [rax - 0x7d]; mov byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000040e4e7: add ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000040e40d: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000412af7: add ecx, dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x0000000000482833: add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004365a2: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004c7be2: add ecx, dword ptr [rbx + 3]; ret; 
0x000000000043caa4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000043c474: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000004101fd: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000004981ef: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000043a7f6: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x00000000004c6250: add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x000000000047414d: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc084; 
0x00000000004c0922: add ecx, dword ptr [rdx + 0xe]; mov al, 1; add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x000000000040f4bc: add ecx, ebp; ret; 
0x0000000000414c44: add ecx, ebp; sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000042f6a2: add ecx, ebx; jmp rcx; 
0x000000000049abf6: add ecx, esi; jmp rcx; 
0x000000000043c975: add edi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9dd: add edi, 0x10; lea r11, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3bd: add edi, 0x10; lea r11, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000479537: add edi, 0x1c; mov eax, 0xca; syscall; 
0x000000000043ca12: add edi, 0x20; lea r11, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3f2: add edi, 0x20; lea r11, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443a42: add edi, 0x308; mov esi, 0x80; syscall; 
0x000000000043c8df: add edi, 0x30; lea r11, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2bf: add edi, 0x30; lea r11, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049cbda: add edi, 0x40000000; jne 0x9cc28; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x000000000043fcc0: add edi, dword ptr [rdi + 0x4a5060]; jne 0x3fd58; xor esi, esi; mov eax, 2; syscall; 
0x00000000004731f9: add edi, dword ptr [rdi + 0x6348fffa]; sti; mov eax, 3; syscall; 
0x00000000004a3f71: add edi, eax; jmp rax; 
0x00000000004a3f75: add edi, eax; push qword ptr [rax - 0x7f0007fc]; add eax, 0x650fff8; clc; jmp qword ptr [rax]; 
0x0000000000473673: add edi, ebp; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x00000000004be38d: add edi, ebp; jmp rax; 
0x00000000004a4979: add edi, ecx; jmp qword ptr [rax]; 
0x0000000000435511: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435391: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435211: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435092: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f11: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d91: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c11: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a91: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434911: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434791: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434611: add edi, edx; add rsi, rdx; lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434491: add edi, edx; add rsi, rdx; lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434311: add edi, edx; add rsi, rdx; lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434191: add edi, edx; add rsi, rdx; lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434011: add edi, edx; add rsi, rdx; lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fc7: add edi, edx; add rsi, rdx; lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043577c: add edi, edx; lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed7: add edi, edx; lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7b: add edi, edx; lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043367a: add edi, edx; lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edb: add edi, edx; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e16: add edi, edx; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f1: add edi, edx; lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430077: add edi, edx; lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffe8: add edi, edx; lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fddd: add edi, edx; lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcab: add edi, edx; lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe5: add edi, edx; lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb67: add edi, edx; lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fad0: add edi, edx; lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d4: add edi, edx; lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a3: add edi, edx; lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f694: add edi, edx; lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000431bc0: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335ac: add edi, edx; sfence; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043c998: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c378: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000447d8e: add edx, 0x4a6720; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000047d010: add edx, 1; shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x000000000047b09c: add edx, dword ptr [rax]; mov rax, rdx; call rax; 
0x00000000004c6ab2: add edx, dword ptr [rbx + 0xe]; mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x00000000004ca0eb: add edx, dword ptr [rcx + rax + 0x41380e0a]; ret; 
0x00000000004c6a6a: add edx, dword ptr [rsi + 0xe]; mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x000000000048ad72: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000043c9d9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3b9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043ca0e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3ee: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c8db: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2bb: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004434dc: add esi, 1; cmp rdx, r14; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004801a6: add esi, 1; test al, al; jne 0x800f8; movsx eax, dl; neg eax; ret; 
0x000000000047e20d: add esi, dword ptr [rbp + 0x4b]; add al, ch; pop rdx; cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000049d5a8: add esi, dword ptr [rbp + riz + 0x40]; cmp bh, 4; jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x00000000004454ec: add esi, dword ptr [rbp - 0x57]; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x00000000004c0412: add esi, dword ptr [rbx + 0x47380e01]; ret; 
0x00000000004c346a: add esi, dword ptr [rsi + 0x44380e04]; ret; 
0x000000000044e6d7: add esi, dword ptr [rsi + rax + 0x5b]; ret; 
0x00000000004ca1f0: add esi, ebp; add al, byte ptr [rax]; ret; 
0x0000000000436753: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000044041c: add esi, ebx; ret; 
0x000000000043c951: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c934: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c331: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004bef19: add esi, edi; call rax; 
0x000000000043f610: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x0000000000435779: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d78: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433677: add esi, edx; add rdi, rdx; lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ed8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e13: add esi, edx; add rdi, rdx; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300ee: add esi, edx; add rdi, rdx; lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430074: add esi, edx; add rdi, rdx; lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffe5: add esi, edx; add rdi, rdx; lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fdda: add esi, edx; add rdi, rdx; lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fca8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe2: add esi, edx; add rdi, rdx; lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb64: add esi, edx; add rdi, rdx; lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042facd: add esi, edx; add rdi, rdx; lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d1: add esi, edx; add rdi, rdx; lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a0: add esi, edx; add rdi, rdx; lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f691: add esi, edx; add rdi, rdx; lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000435514: add esi, edx; lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435394: add esi, edx; lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435214: add esi, edx; lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435095: add esi, edx; lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f14: add esi, edx; lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d94: add esi, edx; lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c14: add esi, edx; lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a94: add esi, edx; lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434914: add esi, edx; lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434794: add esi, edx; lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434614: add esi, edx; lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434494: add esi, edx; lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434314: add esi, edx; lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434194: add esi, edx; lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434014: add esi, edx; lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324f0: add esi, edx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004323a0: add esi, edx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432250: add esi, edx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432100: add esi, edx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fb0: add esi, edx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e60: add esi, edx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d10: add esi, edx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a70: add esi, edx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431920: add esi, edx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317d0: add esi, edx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431680: add esi, edx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431530: add esi, edx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313e0: add esi, edx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431290: add esi, edx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fca: add esi, edx; lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046bb08: add esi, esi; ret 0x7420; 
0x000000000049a38d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000046aa5e: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000499fb4: add esp, 0x10; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420be1: add esp, 0x10; mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000499e67: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000410de1: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f769: add esp, 0x10; pop rbx; ret; 
0x00000000004215c7: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f751: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000004010db: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000047bfc2: add esp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000047bfa4: add esp, 0x140; pop rbx; ret; 
0x000000000043fb28: add esp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000440f5d: add esp, 0x18; mov eax, edx; ret; 
0x0000000000417dc1: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411c67: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004403f0: add esp, 0x18; ret; 
0x000000000049c8ab: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004454f0: add esp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000452fe3: add esp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a23c: add esp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000446a31: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004160cf: add esp, 0x20; pop rbx; ret; 
0x000000000049cf23: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049cf30: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048c8a9: add esp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000040df48: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000416964: add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049a191: add esp, 0x28; ret; 
0x0000000000473752: add esp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000421a96: add esp, 0x30; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480e39: add esp, 0x30; pop rbx; ret; 
0x000000000043fdb0: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000480ec6: add esp, 0x38; ret; 
0x0000000000480d4c: add esp, 0x48; jmp qword ptr [rax]; 
0x00000000004736c2: add esp, 0x48; movzx eax, al; ret; 
0x0000000000480f58: add esp, 0x48; ret; 
0x0000000000480cda: add esp, 0x50; jmp qword ptr [rax]; 
0x000000000049a2e4: add esp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004004ca: add esp, 0x608; pop rbx; pop rbp; ret; 
0x000000000046f498: add esp, 0x60; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000004406a0: add esp, 0x60; pop rbx; ret; 
0x000000000046f516: add esp, 0x60; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000481042: add esp, 0x68; ret; 
0x00000000004437bd: add esp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040fecb: add esp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000410c65: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040ef89: add esp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000047135e: add esp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418dbc: add esp, 0x80; call 0x18460; test rax, rax; je 0x18dce; pop rbx; ret; 
0x0000000000418d6d: add esp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000410af4: add esp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004103c1: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041795b: add esp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x000000000041857a: add esp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000410561: add esp, 0x80; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f0ee: add esp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000046b7b3: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b278: add esp, 0x80; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000004733db: add esp, 0x80; pop rbx; ret; 
0x0000000000452e63: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000421086: add esp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000046b649: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000004734d9: add esp, 0x90; pop rbx; ret; 
0x00000000004734f7: add esp, 0x90; xor eax, eax; pop rbx; ret; 
0x000000000041357d: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041402d: add esp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040153f: add esp, 0x98; ret; 
0x0000000000472ef1: add esp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049a581: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fed2: add esp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450b89: add esp, 0xd0; ret; 
0x000000000040fcd7: add esp, 0xd8; ret; 
0x000000000048bfd3: add esp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412680: add esp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000458705: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004404e1: add esp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000480c15: add esp, 8; jmp rax; 
0x0000000000411ff6: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000047e4a9: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000412013: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000410c6c: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004797ef: add esp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x0000000000410c8b: add esp, 8; mov edx, 0xffffffff; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000440eba: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000418968: add esp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040ef90: add esp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000420543: add esp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000049a1c7: add esp, 8; movzx eax, al; neg eax; ret; 
0x000000000041eebe: add esp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000405d91: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401c13: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000413c78: add esp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004002de: add esp, 8; ret; 
0x00000000004249b9: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047c891: add esp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004189a9: add esp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004c29a1: add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004c9179: add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x0000000000443433: add esp, ebp; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000436925: add qword ptr [r10 - 0x2f], r12; jl 0x36973; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043c93d: add qword ptr [r14], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c74e2: add qword ptr [r15], 3; mov bl, 2; ret; 
0x0000000000468b48: add qword ptr [rax - 0x77], rcx; lea esi, [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000447f6d: add qword ptr [rax - 0x7d], r9; ret 0x4d02; 
0x000000000042489a: add qword ptr [rax], rax; ret; 
0x00000000004827f2: add qword ptr [rbp - 0x57f2faf], rcx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000041ce34: add qword ptr [rcx], rax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x00000000004c9162: add qword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004277dc: add r11b, sil; ret; 
0x0000000000436832: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000443432: add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004434db: add r14, 1; cmp rdx, r14; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004367c2: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000436752: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000046054d: add r15b, al; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000040095f: add r15b, dil; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000490d40: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000452fdf: add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x0000000000481557: add r8b, bpl; adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000047e357: add r8b, bpl; adc bh, byte ptr [rax]; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000045fc67: add r8b, bpl; add bl, byte ptr [rdi]; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000045da6f: add r8b, bpl; cli; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453c93: add r8b, bpl; imul dh; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000454623: add r8b, bpl; in ax, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000047bcfd: add r8b, bpl; insb byte ptr [rdi], dx; pop rsi; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004537ef: add r8b, bpl; jp 0x537d7; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e20f: add r8b, bpl; pop rdx; cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e4ff: add r8b, bpl; push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047c9ff: add r8b, bpl; push 0x51; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000466817: add r8b, bpl; push rdx; mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x0000000000489f13: add r8b, bpl; push rsi; jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x000000000047c9a6: add r8b, bpl; ret; 
0x000000000045589e: add r8b, bpl; retf; ret 0xfffa; 
0x000000000045434f: add r8b, bpl; sbb bl, al; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045586c: add r8b, bpl; std; ret 0xfffa; 
0x000000000045df23: add r8b, bpl; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004205af: add r8b, byte ptr [r8]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg esp, eax; ret 0x8548; 
0x000000000044afc3: add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044afe0: add r9d, dword ptr [r8 + 0x39]; ret; 
0x00000000004924f2: add rax, -0x7cb80000; ret 0xe910; 
0x0000000000482872: add rax, -0x7f2fae73; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004811a9: add rax, -8; ret; 
0x00000000004508cb: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000401933: add rax, 0x900; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x000000000047d06a: add rax, 1; mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c934: add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x000000000043f2e4: add rax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000046eea0: add rax, 1; ret; 
0x000000000046ee97: add rax, 2; ret; 
0x000000000046eeb0: add rax, 3; ret; 
0x0000000000450828: add rax, qword ptr [0]; ret; 
0x000000000047a0ca: add rax, qword ptr [r12]; call rax; 
0x000000000047afa5: add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a764: add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a564: add rax, qword ptr [r15]; call rax; 
0x000000000049cc93: add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x0000000000498950: add rax, qword ptr [rbx]; call rax; 
0x00000000004981ed: add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000480f53: add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047e8a8: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000481167: add rax, qword ptr [rdx + 8]; je 0x81174; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x0000000000450827: add rax, qword ptr fs:[0]; ret; 
0x000000000040edee: add rax, r13; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edc6: add rax, r13; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000049c47d: add rax, r14; jmp rax; 
0x000000000049bef5: add rax, r8; jmp rax; 
0x000000000049bb9d: add rax, rbp; jmp rax; 
0x000000000049a3d7: add rax, rcx; cmp rax, qword ptr [rip + 0x23374f]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000426f59: add rax, rcx; ret; 
0x0000000000426f56: add rax, rdi; add rax, rcx; ret; 
0x0000000000427193: add rax, rdi; ret; 
0x0000000000424b65: add rax, rdx; sub rax, rdi; ret; 
0x000000000047a0c6: add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x00000000004980d0: add rbx, qword ptr [r10]; and eax, 0xf; cmp al, 0xa; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x0000000000482832: add rcx, qword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000042f6a1: add rcx, r11; jmp rcx; 
0x000000000049abf5: add rcx, r14; jmp rcx; 
0x000000000043c974: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9dc: add rdi, 0x10; lea r11, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3bc: add rdi, 0x10; lea r11, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000479536: add rdi, 0x1c; mov eax, 0xca; syscall; 
0x000000000043ca11: add rdi, 0x20; lea r11, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3f1: add rdi, 0x20; lea r11, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443a41: add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043c8de: add rdi, 0x30; lea r11, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2be: add rdi, 0x30; lea r11, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000435510: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435390: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435210: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435091: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f10: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d90: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c10: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a90: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434910: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434790: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434610: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434490: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434310: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434190: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434010: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fc6: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043577b: add rdi, rdx; lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed6: add rdi, rdx; lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7a: add rdi, rdx; lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433679: add rdi, rdx; lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430eda: add rdi, rdx; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e15: add rdi, rdx; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f0: add rdi, rdx; lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430076: add rdi, rdx; lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffe7: add rdi, rdx; lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fddc: add rdi, rdx; lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcaa: add rdi, rdx; lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe4: add rdi, rdx; lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb66: add rdi, rdx; lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042facf: add rdi, rdx; lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d3: add rdi, rdx; lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a2: add rdi, rdx; lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f693: add rdi, rdx; lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000431bbf: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335ab: add rdi, rdx; sfence; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043c997: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c377: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000447d8d: add rdx, 0x4a6720; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000047d00f: add rdx, 1; shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x000000000047b09b: add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048ad71: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000043c9d8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3b8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043ca0d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3ed: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c8da: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2ba: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004801a5: add rsi, 1; test al, al; jne 0x800f8; movsx eax, dl; neg eax; ret; 
0x000000000043c950: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c933: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c330: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000435778: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d77: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433676: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ed7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e12: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300ed: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430073: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffe4: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fdd9: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fca7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe1: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb63: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042facc: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d0: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f79f: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f690: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000435513: add rsi, rdx; lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435393: add rsi, rdx; lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435213: add rsi, rdx; lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435094: add rsi, rdx; lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f13: add rsi, rdx; lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d93: add rsi, rdx; lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c13: add rsi, rdx; lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a93: add rsi, rdx; lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434913: add rsi, rdx; lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434793: add rsi, rdx; lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434613: add rsi, rdx; lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434493: add rsi, rdx; lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434313: add rsi, rdx; lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434193: add rsi, rdx; lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434013: add rsi, rdx; lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324ef: add rsi, rdx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043239f: add rsi, rdx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043224f: add rsi, rdx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004320ff: add rsi, rdx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431faf: add rsi, rdx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e5f: add rsi, rdx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d0f: add rsi, rdx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a6f: add rsi, rdx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043191f: add rsi, rdx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317cf: add rsi, rdx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043167f: add rsi, rdx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043152f: add rsi, rdx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313df: add rsi, rdx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043128f: add rsi, rdx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fc9: add rsi, rdx; lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049a38c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000046aa5d: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000499fb3: add rsp, 0x10; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420be0: add rsp, 0x10; mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000499e66: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000410de0: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f768: add rsp, 0x10; pop rbx; ret; 
0x00000000004215c6: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f750: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000004010da: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000047bfc1: add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000047bfa3: add rsp, 0x140; pop rbx; ret; 
0x000000000043fb27: add rsp, 0x18; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000440f5c: add rsp, 0x18; mov eax, edx; ret; 
0x0000000000417dc0: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411c66: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004403ef: add rsp, 0x18; ret; 
0x000000000049c8aa: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004454ef: add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000452fe2: add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049a23b: add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000446a30: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004160ce: add rsp, 0x20; pop rbx; ret; 
0x000000000049cf22: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049cf2f: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048c8a8: add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000040df47: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000416963: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049a190: add rsp, 0x28; ret; 
0x0000000000473751: add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000421a95: add rsp, 0x30; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480e38: add rsp, 0x30; pop rbx; ret; 
0x000000000043fdaf: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000480ec5: add rsp, 0x38; ret; 
0x0000000000480d4b: add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004736c1: add rsp, 0x48; movzx eax, al; ret; 
0x0000000000480f57: add rsp, 0x48; ret; 
0x0000000000480cd9: add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000049a2e3: add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004004c9: add rsp, 0x608; pop rbx; pop rbp; ret; 
0x000000000046f497: add rsp, 0x60; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000044069f: add rsp, 0x60; pop rbx; ret; 
0x000000000046f515: add rsp, 0x60; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000481041: add rsp, 0x68; ret; 
0x00000000004437bc: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040feca: add rsp, 0x80; add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000410c64: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040ef88: add rsp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000047135d: add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418dbb: add rsp, 0x80; call 0x18460; test rax, rax; je 0x18dce; pop rbx; ret; 
0x0000000000418d6c: add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000410af3: add rsp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004103c0: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041795a: add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000418579: add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000410560: add rsp, 0x80; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f0ed: add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000046b7b2: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b277: add rsp, 0x80; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000004733da: add rsp, 0x80; pop rbx; ret; 
0x0000000000452e62: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000421085: add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000046b648: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000004734d8: add rsp, 0x90; pop rbx; ret; 
0x00000000004734f6: add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x000000000041357c: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041402c: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040153e: add rsp, 0x98; ret; 
0x0000000000472ef0: add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049a580: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fed1: add rsp, 0xd0; mov eax, esi; pop rbx; ret; 
0x0000000000450b88: add rsp, 0xd0; ret; 
0x000000000040fcd6: add rsp, 0xd8; ret; 
0x000000000048bfd2: add rsp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041267f: add rsp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000458704: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004404e0: add rsp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000480c14: add rsp, 8; jmp rax; 
0x0000000000411ff5: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000047e4a8: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000412012: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000410c6b: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004797ee: add rsp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x0000000000410c8a: add rsp, 8; mov edx, 0xffffffff; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000440eb9: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000418967: add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040ef8f: add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000420542: add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000049a1c6: add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000041eebd: add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000405d90: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401c12: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000413c77: add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004002dd: add rsp, 8; ret; 
0x00000000004249b8: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047c890: add rsp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004189a8: add rsp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000042d3ce: add sil, sil; ret 0x7404; 
0x000000000049a3ea: add word ptr [rdx + rax*2], 1; ret; 
0x00000000004a4350: and ah, ah; clc; jmp rax; 
0x00000000004c145d: and al, 0; add al, ah; cmc; jmp qword ptr [rdi + 1]; 
0x000000000040049d: and al, 0; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000400461: and al, 0; add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, ebp; syscall; 
0x0000000000480a2d: and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004c13f5: and al, 0; add byte ptr [rax], bl; cmc; jmp qword ptr [rax]; 
0x000000000048ca3a: and al, 0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8ca49; lea rax, [rip + 0x67]; ret; 
0x000000000048ca8d: and al, 0; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8ca9c; lea rax, [rip + 4]; ret; 
0x000000000048c70c: and al, 0; call rax; 
0x000000000048c5cf: and al, 0; jmp rax; 
0x0000000000480a05: and al, 0; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x80a18; ret; 
0x000000000047ca75: and al, 0; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000049a958: and al, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; call 0x9a630; add rsp, 0x28; ret; 
0x000000000048103a: and al, 0x10; add byte ptr [rbp + 0x39], dh; xor eax, eax; add rsp, 0x68; ret; 
0x000000000049cdf8: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000480e2d: and al, 0x10; call 0x78b40; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x000000000049a181: and al, 0x10; call 0x8c750; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000041c68d: and al, 0x10; call rax; 
0x000000000046d5f9: and al, 0x10; call rbx; 
0x0000000000411b6b: and al, 0x10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000440adb: and al, 0x10; mov eax, 0x101; syscall; 
0x0000000000440b5d: and al, 0x10; mov eax, 3; syscall; 
0x000000000043fd90: and al, 0x10; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000400ee9: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004406ab: and al, 0x10; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000041c73f: and al, 0x10; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000049a200: and al, 0x10; mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x00000000004416a1: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000448607: and al, 0x10; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f6a: and al, 0x10; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000049a18b: and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000049a2a5: and al, 0x10; movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x0000000000419cc6: and al, 0x14; pop r12; ret; 
0x000000000044a6d8: and al, 0x18; add byte ptr [rdi], cl; test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000420540: and al, 0x18; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041eebb: and al, 0x18; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000040fd60: and al, 0x18; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000048118a: and al, 0x18; call 0x1f100; add rsp, 0x48; ret; 
0x000000000040fccf: and al, 0x18; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6c3: and al, 0x18; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf60: and al, 0x18; call 0x8bf70; add rsp, 0xd8; ret; 
0x000000000048c966: and al, 0x18; call 0x8c750; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x0000000000410e2d: and al, 0x18; call qword ptr [rbp + 0x18]; 
0x0000000000400ef2: and al, 0x18; call rax; 
0x0000000000411db1: and al, 0x18; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046d5f4: and al, 0x18; lea r9, [rsp + 0x10]; call rbx; 
0x00000000004485fd: and al, 0x18; lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f60: and al, 0x18; lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000445297: and al, 0x18; mov eax, 0; test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x000000000049a228: and al, 0x18; mov eax, 0; test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000041c688: and al, 0x18; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000411b66: and al, 0x18; mov qword ptr [rsp + 0x10], r10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000445c38: and al, 0x18; mov r9, r14; call rbx; 
0x0000000000449350: and al, 0x18; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000048c970: and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000046d6d2: and al, 0x18; mov rdi, r12; call rbx; 
0x000000000046fb37: and al, 0x18; xor r8d, r8d; mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000419c92: and al, 0x1c; je 0x19c9b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411afa: and al, 0x20; call qword ptr [rbx + 0x30]; 
0x0000000000411b75: and al, 0x20; call qword ptr [rbx + 8]; 
0x000000000044860c: and al, 0x20; call rax; 
0x000000000046f74d: and al, 0x20; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f3: and al, 0x20; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f4da: and al, 0x20; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000449346: and al, 0x20; lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044bcfc: and al, 0x20; lea rdx, [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046f437: and al, 0x20; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000041c683: and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000411aed: and al, 0x20; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000040e4a4: and al, 0x20; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x0000000000411db6: and al, 0x20; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000049a2aa: and al, 0x20; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x00000000004a4654: and al, 0x23; stc; push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x0000000000419cc0: and al, 0x24; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x00000000004bb104: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x0000000000480ec0: and al, 0x28; add byte ptr [rbp + 0xb], dh; add rsp, 0x38; ret; 
0x000000000048232b: and al, 0x28; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x0000000000448f6f: and al, 0x28; call rax; 
0x0000000000448b3b: and al, 0x28; call rbx; 
0x000000000046f752: and al, 0x28; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f8: and al, 0x28; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f4df: and al, 0x28; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000480ee2: and al, 0x28; mov dword ptr [rsp + 0xc], eax; call 0x1f100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000480d3a: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cc8: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041fbe3: and al, 0x28; mov rdi, rbp; call rax; 
0x000000000044a9b0: and al, 0x28; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004883bf: and al, 0x30; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x000000000044a9ba: and al, 0x30; call rbx; 
0x000000000049a2af: and al, 0x30; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000040e4a9: and al, 0x30; lea r15, [rbx + r14]; call rax; 
0x000000000046f0fd: and al, 0x30; lea rcx, [rax + 1]; call rbx; 
0x0000000000411b70: and al, 0x30; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000044adfa: and al, 0x30; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448b36: and al, 0x30; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000041bc9b: and al, 0x30; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000480d3f: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480ccd: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000464d3f: and al, 0x31; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000004b9b3c: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000485562: and al, 0x38; add byte ptr [rcx + 0x39], cl; ret 0x87e; 
0x0000000000480f51: and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000481165: and al, 0x38; add rax, qword ptr [rdx + 8]; je 0x81174; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048106e: and al, 0x38; add rsp, 0x68; ret; 
0x0000000000481064: and al, 0x38; call 0x8c750; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000044adf0: and al, 0x38; lea rdx, [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000450b7f: and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480d44: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd2: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000044a9b5: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000448b31: and al, 0x38; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000041c6c5: and al, 0x40; add al, ch; ret; 
0x0000000000480d49: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd7: and al, 0x40; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000046f43c: and al, 0x40; call rbx; 
0x000000000049a2d0: and al, 0x40; mov eax, 0; test rax, rax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000044a0e1: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440f5b: and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x00000000004403ee: and al, 0x48; add esp, 0x18; ret; 
0x000000000041f1e3: and al, 0x48; call rax; 
0x00000000004783d4: and al, 0x48; lea edi, [rax + 0x6cc1e0]; call rdx; 
0x000000000049a205: and al, 0x48; mov dword ptr [rsp + 8], esi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x000000000044f340: and al, 0x48; mov eax, dword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x000000000049ab16: and al, 0x48; mov eax, dword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x00000000004432fd: and al, 0x48; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000448602: and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f65: and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044934b: and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fb42: and al, 0x48; mov rdi, r12; call rbx; 
0x0000000000411776: and al, 0x49; mov ebx, dword ptr [rdi + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000049e92c: and al, 0x49; mov esi, dword ptr [rdi + rbp*8 + 0x10]; call rbx; 
0x000000000047afa8: and al, 0x4c; mov dword ptr [rbp - 0xc8], ebx; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a767: and al, 0x4c; mov dword ptr [rbp - 0xd0], ebx; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000044333b: and al, 0x4c; mov esi, esi; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000047bfbc: and al, 0x4c; mov qword ptr [rax], rcx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000044bd01: and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000419cc1: and al, 0x5d; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x000000000046f650: and al, 0x60; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000044adf5: and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041f503: and al, 0x68; call rax; 
0x00000000004207fb: and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x000000000041269e: and al, 0x74; ret 0x8b4c; 
0x000000000047b60a: and al, 0x75; ret; 
0x000000000044a0d9: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jl 0x4a106; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000483f1f: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004963e4: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x0000000000449e2a: and al, 0x80; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000448291: and al, 0x80; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000041ceb6: and al, 0x89; ret 0xb48b; 
0x000000000041ce32: and al, 0x8d; add qword ptr [rcx], rax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x0000000000495736: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95763; js 0x95782; call rsp; 
0x0000000000495a4b: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95a78; js 0x95a97; call rsp; 
0x0000000000495e12: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95e3f; js 0x95e5e; call rsp; 
0x0000000000495a7d: and al, 0x90; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x00000000004c97e4: and al, 0xa8; add byte ptr [rax], al; sub byte ptr [rdx], dh; std; call rsp; 
0x0000000000440603: and al, 0xa8; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000044061d: and al, 0xac; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000473809: and al, 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000004404c9: and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000047dbbb: and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x0000000000440529: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000440589: and al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000473679: and al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049c98b: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x00000000004405e2: and al, 0xc0; je 0x40600; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000043f5c9: and al, 0xc5; sub byte ptr [rdx + rcx*2], cl; mov eax, 8; pop rbx; ret; 
0x0000000000446a2e: and al, 0xc; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480eef: and al, 0xc; add rsp, 0x38; ret; 
0x0000000000480ee6: and al, 0xc; call 0x1f100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000499f94: and al, 0xc; mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000400eed: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004959ba: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046be0f: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046bddb: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000408c3b: and al, 0xe8; call rbx; 
0x0000000000409d94: and al, 0xe8; cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xffff; 
0x00000000004088fb: and al, 0xe8; jmp qword ptr [rdi + 1]; 
0x0000000000409daa: and al, 0xe8; nop; ret 0xffff; 
0x0000000000409d4b: and al, 0xe8; out dx, eax; ret 0xffff; 
0x0000000000409dcc: and al, 0xe8; outsb dx, byte ptr [rsi]; ret 0xffff; 
0x0000000000409de2: and al, 0xe8; pop rax; ret 0xffff; 
0x000000000040c777: and al, 0xe8; ret; 
0x000000000048bed0: and al, 0xe8; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000040abcf: and al, 0xe8; sub eax, dword ptr [rbp + 1]; add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000409ca3: and al, 0xe8; xchg edi, eax; ret; 
0x000000000048bed8: and al, 0xec; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048becc: and al, 0xf0; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000427d7e: and al, 0xf0; mov r14, qword ptr [rsp - 8]; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427d83: and al, 0xf8; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x000000000048be91: and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048be97: and al, 0xf8; ret; 
0x0000000000480f62: and al, 0xf; add byte ptr [rbp + 9], dh; xor eax, eax; add rsp, 0x48; ret; 
0x0000000000481182: and al, 0xf; add byte ptr [rbp + rbp*8 + 0x48], dh; mov edi, dword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x000000000044342c: and al, 0xf; and r13, 0xfffffffffffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000048baf3: and al, 0xf; and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000048bb31: and al, 0xf; and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x000000000040d645: and al, 0xf; test byte ptr [rbx + rdx*8 - 0x76bb0001], dh; and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000048be4b: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048be51: and al, 0xfc; ret; 
0x00000000004508f7: and al, 0xfe; fldcw word ptr [rsp - 2]; ret; 
0x00000000004508fb: and al, 0xfe; ret; 
0x000000000049a1be: and al, 0xff; inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004729f6: and al, 1; add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000431e66: and al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442397: and al, 8; add byte ptr [rdx + 1], bh; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e6a: and al, 8; add byte ptr [rdx + 1], bh; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000043f766: and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000048c422: and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004415a6: and al, 8; call 0x41120; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004415b8: and al, 8; call rbx; 
0x000000000049a209: and al, 8; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x00000000004407d5: and al, 8; mov eax, 0x4f; syscall; 
0x0000000000480a80: and al, 8; mov edi, 0x6cc140; call rax; 
0x0000000000411771: and al, 8; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000041c744: and al, 8; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000440707: and al, 8; mov r8d, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x00000000004415b0: and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004407d0: and al, 8; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x00000000004415bf: and al, 8; mov rdi, rax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044326b: and al, 8; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000040e49c: and al, 8; mov rsi, rbp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x0000000000443342: and al, 8; xor eax, eax; syscall; 
0x00000000004a4005: and al, bh; jmp qword ptr [rax]; 
0x00000000004a09aa: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a1358: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c1295: and al, byte ptr [rax]; add byte ptr [rax], cl; cmc; jmp qword ptr [rdx]; 
0x0000000000411d06: and al, byte ptr [rax]; add byte ptr [rbx + 0x275fff8], al; pop rbx; ret; 
0x00000000004a134c: and al, byte ptr [rax]; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000049f6c3: and al, byte ptr [rax]; jne 0x9f6a8; pop rbx; ret; 
0x000000000049ebd5: and al, byte ptr [rax]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea7d: and al, byte ptr [rax]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea84: and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000432054: and al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042496a: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x00000000004508ee: and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000004a3fcc: and bh, 0xf7; jmp qword ptr [rax]; 
0x000000000045e12e: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x0000000000461913: and bh, al; add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x00000000004a4009: and bh, al; call qword ptr [rax + 0xc]; 
0x00000000004c3ab9: and bh, al; jmp qword ptr [rdx]; 
0x00000000004ba0e5: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004a4521: and bh, cl; call qword ptr [rsi + 0x26fff921]; and ecx, edi; push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004a465d: and bh, cl; call rsp; 
0x00000000004a4659: and bh, cl; inc dword ptr [rdx + riz - 7]; call rsp; 
0x00000000004a46dd: and bh, cl; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a46dd: and bh, cl; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x00000000004a44dd: and bh, cl; jmp qword ptr [rax]; 
0x00000000004a4599: and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x00000000004a44e1: and bh, cl; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a46d9: and bh, cl; push qword ptr [rax]; and bh, cl; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a43f0: and bl, ah; clc; jmp rax; 
0x00000000004a420c: and bl, al; clc; jmp qword ptr [rbp - 0x40]; 
0x000000000046d37a: and bl, bpl; fbld tbyte ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004bac83: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000046d37b: and bl, ch; fbld tbyte ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000040dfef: and bl, dh; ret; 
0x000000000046fe6e: and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x0000000000450203: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x5020f; call rax; 
0x0000000000415cf4: and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000041af99: and byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000049f324: and byte ptr [rax + 0x39], cl; ret; 
0x000000000040ed94: and byte ptr [rax + 0x4bef78], bh; cmp rax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004104d4: and byte ptr [rax + 0x63], cl; shr al, cl; ret; 
0x00000000004535be: and byte ptr [rax + 1], cl; ret; 
0x0000000000424b5d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004c064f: and byte ptr [rax + rax], al; add byte ptr [rsi + rdx + 0x29880000], dl; cmc; call qword ptr [rsi + 4]; 
0x00000000004c3730: and byte ptr [rax + rdi*8], al; call rsp; 
0x000000000040edd0: and byte ptr [rax - 0x3f], cl; retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x00000000004560f7: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456148: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458238: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d6b: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x000000000046f4db: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x28; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000449347: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044bcfd: and byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000048b2a9: and byte ptr [rax - 0x75], cl; adc dword ptr [rax - 0x73], ecx; add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x000000000040e4a5: and byte ptr [rax - 0x75], cl; and al, 0x30; lea r15, [rbx + r14]; call rax; 
0x000000000041cbc3: and byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0xf04; 
0x000000000045de02: and byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000453b76: and byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000472384: and byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x0000000000447064: and byte ptr [rax - 0x77], cl; ret 0xee75; 
0x000000000040f143: and byte ptr [rax - 0x77], cl; ret; 
0x000000000041159d: and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x0000000000450204: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x5020f; call rax; 
0x000000000049dafb: and byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x0000000000446efe: and byte ptr [rax - 0x7d], cl; ret; 
0x00000000004a4aac: and byte ptr [rax - 0x7fcf0007], al; stc; inc dword ptr [rax - 0x80]; stc; jmp qword ptr [rax - 0x80]; 
0x0000000000411c60: and byte ptr [rax - 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004134f2: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000048bfe3: and byte ptr [rax], al; add byte ptr [rax + rdx - 0x75], dh; jo 0x8bf71; sar byte ptr [rax + 9], 0xf3; ret; 
0x0000000000440c1f: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004625e6: and byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000043f5f3: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000454621: and byte ptr [rax], bh; add r8b, bpl; in ax, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000043f7a7: and byte ptr [rax], bh; test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000047f508: and byte ptr [rbp + rcx*4 + 0x43], cl; adc al, ch; mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000046f74e: and byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f4: and byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x00000000004c9236: and byte ptr [rbx + 0x1890304], al; ret; 
0x0000000000405f98: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000046fe6f: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000446a33: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c0555: and byte ptr [rbx + 0xa470204], al; ret; 
0x00000000004c0b2d: and byte ptr [rbx + 0xa4d0204], al; ret; 
0x0000000000427ce3: and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004811f2: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000046128e: and byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x00000000004562f0: and byte ptr [rbx - 0x4ef43], al; call qword ptr [rax]; 
0x000000000046b759: and byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004a40d4: and byte ptr [rbx - 8], al; push qword ptr [rax]; clc; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004be318: and byte ptr [rbx], ch; std; call qword ptr [rax + 0xf]; 
0x00000000004be318: and byte ptr [rbx], ch; std; call qword ptr [rax + 0xf]; std; call qword ptr [rax]; 
0x00000000004a498c: and byte ptr [rbx], cl; stc; jmp qword ptr [rax - 0xb]; 
0x0000000000415cf5: and byte ptr [rcx + 0x5bc03113], cl; ret; 
0x00000000004c52c6: and byte ptr [rcx + 0xa], al; ret; 
0x0000000000415149: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000411f10: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041c684: and byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x18; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000452fe5: and byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x000000000048bed5: and byte ptr [rcx - 0x2413dbbc], cl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000040d64e: and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000049cfac: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000446fec: and byte ptr [rcx - 0x77], cl; ret 0xee75; 
0x00000000004a4ad4: and byte ptr [rcx - 0x7ebf0007], al; stc; jmp qword ptr [rax - 0x7f]; 
0x0000000000447d90: and byte ptr [rdi + 0x4a], ah; add byte ptr [rdi], cl; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004a406c: and byte ptr [rdi - 8], ch; inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004be2f8: and byte ptr [rdi*8 - 0x2e1ff01], bl; jmp rax; 
0x0000000000432256: and byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049a2ab: and byte ptr [rdi], cl; sub dword ptr [rsp + 0x30], eax; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x00000000004440ea: and byte ptr [rdi], cl; test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x0000000000446fd9: and byte ptr [rdi], cl; test cl, bh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043cf5d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000043ce40: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000436966: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043ef08: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004a4af4: and byte ptr [rdx - 0x7dbf0007], al; stc; jmp qword ptr [rax - 0x7e]; 
0x00000000004a4a18: and byte ptr [rdx - 7], bh; push qword ptr [rax]; jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4008: and byte ptr [rdx], ah; clc; call qword ptr [rax + 0xc]; 
0x00000000004a44e0: and byte ptr [rdx], ah; stc; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004be30c: and byte ptr [rip + 0x2760fffd], 0xfd; inc dword ptr [rax + 0x29]; std; jmp qword ptr [rax]; 
0x00000000004a497c: and byte ptr [rip + 0x6a0fff9], al; stc; jmp qword ptr [rax]; 
0x00000000004a3fd0: and byte ptr [rip + 0xea0fff8], cl; clc; jmp qword ptr [rax]; 
0x0000000000416e61: and byte ptr [rsi + 0x1d], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416e60: and byte ptr [rsi + 0x1d], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000042f73a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f735: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046ee92: and ch, 0xf; je 0x6eeb0; add rax, 2; ret; 
0x00000000004a43d4: and ch, ah; clc; inc dword ptr [rax]; out 0xf8, eax; jmp rax; 
0x0000000000473530: and ch, bh; inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x000000000046ee7d: and cl, 0xf; je 0x6eea0; ret; 
0x00000000004a4531: and cl, bh; call rsi; 
0x00000000004a452d: and cl, bh; inc dword ptr [rsi + 0x20]; stc; call rsi; 
0x00000000004a44ed: and cl, bh; jmp qword ptr [rax + 0x20]; 
0x0000000000498893: and cl, byte ptr [rax + 0x29]; fmul dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000042731d: and cl, byte ptr [rcx - 0x77]; ret; 
0x000000000046cfe8: and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4530: and cl, r15b; call rsi; 
0x000000000049bda4: and dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000427907: and dh, dh; ret 0x7504; 
0x00000000004508e9: and di, 0xf3f; and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000045e12d: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x0000000000461912: and dil, al; add dh, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000426ea2: and dword ptr [rax + 0x2a], ebp; add byte ptr [rax], dl; mov edx, 0x4268d0; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x0000000000411d12: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000458569: and dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004bcc22: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x0000000000416c5c: and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000410a99: and dword ptr [rcx + 0x415d5bd8], ecx; pop rsp; ret; 
0x00000000004404b7: and dword ptr [rcx + rdx*2], 0; ret; 
0x00000000004765f1: and dword ptr [rcx - 0x73], ecx; add dword ptr [rbx - 0x77], eax; je 0x7657e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x000000000048756c: and dword ptr [rcx], esi; ror byte ptr [rax + 1], cl; ret 0x9e74; 
0x00000000004321a4: and dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004b9cd9: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004bcc21: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004811a4: and eax, 0; add rax, -8; ret; 
0x000000000045082b: and eax, 0; ret; 
0x000000000049d61a: and eax, 0x10468b48; add rsp, 8; ret; 
0x00000000004737e4: and eax, 0x14750000; mov eax, 0x14; syscall; 
0x0000000000473654: and eax, 0x14750000; mov eax, 3; syscall; 
0x00000000004be30d: and eax, 0x2760fffd; std; inc dword ptr [rax + 0x29]; std; jmp qword ptr [rax]; 
0x00000000004967d6: and eax, 0x2d0; ret; 
0x00000000004726b4: and eax, 0x2d894c00; ret; 
0x000000000040ee21: and eax, 0x30; call rax; 
0x000000000040edd9: and eax, 0x30; call rdx; 
0x00000000004726ad: and eax, 0x35894c00; add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x00000000004707c8: and eax, 0x358b4800; call rax; 
0x000000000043f55d: and eax, 0x3fc00; pop rbx; ret; 
0x000000000043f57d: and eax, 0x3fc00; ret; 
0x000000000043f623: and eax, 0x3ffc0000; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f60c: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f53c: and eax, 0x3fffc00; pop rbx; ret; 
0x000000000049c909: and eax, 0x48128b48; mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000479bf0: and eax, 0x48c03100; add esp, 8; ret; 
0x000000000049d5aa: and eax, 0x4ff8040; jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x0000000000431d16: and eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047ca7f: and eax, 0x6894800; ret; 
0x00000000004c157d: and eax, 0x69700000; cmc; call qword ptr [rsi]; 
0x00000000004c15b5: and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x000000000047139c: and eax, 0x75c08500; mov ecx, gs; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000043f5b0: and eax, 0x7ff80000; ret; 
0x000000000048be40: and eax, 0x7fffff; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000047ca14: and eax, 0x8750000; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000049a185: and eax, 0x8b48ffff; push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000047a0bc: and eax, 0x8b4cf175; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041bf96: and eax, 0x950f4100; ret; 
0x0000000000472232: and eax, 0x96830f00; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000045b4b9: and eax, 0xb6b80100; add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000045c4cd: and eax, 0xbeb80100; add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x0000000000479bef: and eax, 0xc0310025; add rsp, 8; ret; 
0x000000000047c932: and eax, 0xc0834800; add dword ptr [rax - 0x77], ecx; add eax, 0x2514d1; add rsp, 8; ret; 
0x00000000004708aa: and eax, 0xc4834800; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000470685: and eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004508ef: and eax, 0xc709f0c0; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000047237f: and eax, 0xc8d4a00; and byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x0000000000443a27: and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x000000000047cb25: and eax, 0xdb31fffa; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004980d3: and eax, 0xf; cmp al, 0xa; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x0000000000400faf: and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x0000000000430cb0: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000004303e3: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000401930: and eax, 0xffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x0000000000424aa4: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a43: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x0000000000445626: and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x000000000048baf6: and eax, 0xfffffff0; call 0x8af10; leave; ret; 
0x000000000049aad5: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000048a1dc: and eax, 2; sub eax, 1; ret; 
0x000000000049a3e8: and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049a3df: and eax, dword ptr [rax]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049a5f4: and eax, dword ptr [rax]; ret; 
0x0000000000431fb6: and eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046e05e: and eax, ecx; je 0x6e220; bsr rax, rax; add rax, rdi; ret; 
0x00000000004c3a41: and eax, edi; call qword ptr [rax]; 
0x00000000004c3c59: and eax, edi; call qword ptr [rsi + 0xb]; 
0x000000000048be86: and eax, edi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000044342f: and ebp, 0xfffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000416c5d: and ebp, edi; pop rbx; ret; 
0x00000000004439c2: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x000000000047adf4: and ecx, 0xf; cmp cl, 0xa; je 0x7b3a1; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x0000000000430cb5: and ecx, 0xff; sub eax, ecx; ret; 
0x00000000004303e8: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000048bb34: and ecx, 0xfffffff0; call 0x8b5f0; leave; ret; 
0x000000000041b01b: and ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000420ebc: and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x0000000000417a0c: and ecx, dword ptr [rdi]; mov dh, 0; ret; 
0x0000000000473903: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004a46e1: and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a46e1: and ecx, edi; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x00000000004a45a5: and ecx, edi; call qword ptr [rdx]; 
0x00000000004a44e9: and ecx, edi; call rax; 
0x00000000004a44e9: and ecx, edi; call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004a44e5: and ecx, edi; inc dword ptr [rax + 0x21]; stc; call rax; 
0x00000000004a44e5: and ecx, edi; inc dword ptr [rax + 0x21]; stc; call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004a4525: and ecx, edi; jmp qword ptr [rsi]; 
0x00000000004a46e5: and ecx, edi; jmp rax; 
0x00000000004a4529: and ecx, edi; push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004c7389: and edi, ebx; jmp qword ptr [rdi]; 
0x00000000004a44d9: and edi, ecx; call qword ptr [rax + 0x20fff922]; and bh, cl; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a4595: and edi, ecx; call rdx; 
0x00000000004a4595: and edi, ecx; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x000000000046f80b: and edi, ecx; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4515: and edi, ecx; jmp rsi; 
0x00000000004a4655: and edi, ecx; push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x0000000000427a60: and edx, 0x1f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427c86: and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427d85: and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x000000000045b986: and edx, 0x83667ff0; cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x00000000004277c7: and edx, 2; mov eax, 0x433d40; mov edx, 0x430cd0; cmove rax, rdx; ret; 
0x0000000000427a9c: and edx, 7; jne 0x27946; mov rax, rdi; ret; 
0x000000000046e1ee: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000047cf91: and edx, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000048beae: and esi, 0xe0837fff; jg 0x8bebf; ret 0x5488; 
0x000000000049f160: and esi, 2; jne 0x9f16b; mov eax, 8; ret; 
0x000000000046e2e2: and esi, eax; je 0x6e220; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e0ec: and esi, ecx; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000043fb7e: and esp, esi; mov rdi, rdx; mov eax, r8d; syscall; 
0x00000000004439c1: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x000000000044342e: and r13, 0xfffffffffffffff0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004a465c: and r15b, cl; call rsp; 
0x000000000048baf5: and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000040192f: and rax, 0xffffffffffffffc0; add rax, 0x900; mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x0000000000424aa3: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a42: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000049aad4: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000046e05d: and rax, rcx; je 0x6e220; bsr rax, rax; add rax, rdi; ret; 
0x000000000048be85: and rax, rdi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bb33: and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x000000000046e1ed: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046e2e1: and rsi, rax; je 0x6e220; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e0eb: and rsi, rcx; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000453b83: bnd call qword ptr [rax + 0x38]; 
0x0000000000410fdb: bnd call qword ptr [rax + 0x70]; 
0x00000000004434e1: bnd jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000042ddaa: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000427190: bsf eax, eax; add rax, rdi; ret; 
0x00000000004271a0: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004271b0: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000427180: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004270cf: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042dfa3: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000422473: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000426f4a: bsf eax, eax; sub rdx, rax; jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c0: bsf eax, eax; sub rdx, rax; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d0: bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e0: bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f0: bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000424a06: bsf eax, edx; ret; 
0x000000000042f57a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042f640: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042f40c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000424b62: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043c9b1: bsf edx, edx; lea r11, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c979: bsf edx, edx; lea r11, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c954: bsf edx, edx; lea r11, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c937: bsf edx, edx; lea r11, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c391: bsf edx, edx; lea r11, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c334: bsf edx, edx; lea r11, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000423a91: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042e0c0: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000422590: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000424a52: bsf rax, rdx; ret; 
0x000000000042f579: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042f63f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042f40b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000424b61: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043c9b0: bsf rdx, rdx; lea r11, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c978: bsf rdx, rdx; lea r11, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c953: bsf rdx, rdx; lea r11, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c936: bsf rdx, rdx; lea r11, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c390: bsf rdx, rdx; lea r11, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c333: bsf rdx, rdx; lea r11, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000423a90: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e067: bsr eax, eax; add rax, rdi; ret; 
0x000000000046e2eb: bsr eax, esi; add rax, rdi; ret; 
0x000000000046e1f9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x000000000046e0f5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x000000000046e066: bsr rax, rax; add rax, rdi; ret; 
0x000000000046e2ea: bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e1f8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046e0f4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046dfa3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046df04: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046dfa2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046df03: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x0000000000400a00: call 0x109b0; nop; leave; ret; 
0x0000000000400ab3: call 0x10b80; nop; pop rbp; ret; 
0x000000000040fd62: call 0x125a0; add rsp, 0xd8; ret; 
0x0000000000411d04: call 0x13fc0; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x00000000004163a0: call 0x15260; test eax, eax; jne 0x163d9; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000041434d: call 0x159f0; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a1ab9: call 0x18120; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000418dc2: call 0x18460; test rax, rax; je 0x18dce; pop rbx; ret; 
0x000000000040edc8: call 0x18517915; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edf0: call 0x1851793d; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040186b: call 0x1a2a; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x000000000046fbf8: call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fbf8: call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x000000000041ed4b: call 0x1ed7a; add byte ptr [rax], al; ret; 
0x000000000048118c: call 0x1f100; add rsp, 0x48; ret; 
0x0000000000480ee8: call 0x1f100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x00000000004a134e: call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x00000000004415fa: call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441204: call 0x1f100; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004411f7: call 0x1f100; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004415c4: call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441339: call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004731f8: call 0x1f100; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000400b50: call 0x1f100; nop; pop rbp; ret; 
0x000000000047d285: call 0x1f100; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004437b5: call 0x1febb02; jne 0x437b0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000443825: call 0x1febb72; jne 0x43820; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000042114d: call 0x20050; cmp qword ptr [rbx], 0x444c4541; je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000048bed1: call 0x20f1801e; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048bed4: call 0x244d47f9; in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000450046: call 0x27940; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000446a9b: call 0x360; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000043fdc2: call 0x3f650; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000401530: call 0x40650; cmp eax, -1; je 0x1623; add rsp, 0x98; ret; 
0x00000000004403dc: call 0x40e50; test eax, eax; mov rax, 0xffffffffffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000045072f: call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000441f1e: call 0x41090; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441ef9: call 0x41090; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x00000000004415a8: call 0x41120; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000441171: call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411b2: call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000410043: call 0x415d41a3; pop rbp; pop rbp; ret; 
0x0000000000410065: call 0x415d41c5; pop rbp; pop rbp; ret; 
0x0000000000414bea: call 0x415d8d4c; pop rbp; pop r14; pop r15; ret; 
0x000000000041627e: call 0x415da3e0; pop rbp; pop r14; ret; 
0x000000000041fcda: call 0x415f57ef; pop rsp; pop r13; ret; 
0x000000000043f7bc: call 0x4160391c; pop rbp; pop rbp; ret; 
0x000000000046b99c: call 0x4162fafe; pop rbp; pop r14; ret; 
0x000000000046be2a: call 0x4162ff8c; pop rbp; ret; 
0x000000000046befa: call 0x4163005c; pop rbp; ret; 
0x000000000047049a: call 0x416345fc; pop rbp; pop r14; ret; 
0x0000000000440fd9: call 0x41de9926; or edx, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x00000000004435c7: call 0x431b0; test rax, rax; jne 0x43598; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x0000000000418d67: call 0x43950; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000417955: call 0x43950; add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000418574: call 0x43950; add rsp, 0x80; mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000471358: call 0x43980; add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004103bb: call 0x43980; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041f0e8: call 0x43980; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x00000000004733d5: call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x0000000000452e5d: call 0x43980; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000421080: call 0x43980; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000440521: call 0x439a0; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x0000000000473801: call 0x439a0; mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x0000000000440581: call 0x439a0; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000004404c1: call 0x439a0; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x0000000000473671: call 0x439a0; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000004404d8: call 0x43a00; mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004003fb: call 0x43b50; mov edx, 0x1d; mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000043f74b: call 0x46dc0; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000049cd99: call 0x481056dd; mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000440f96: call 0x48da72e8; mov edx, ebx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000424974: call 0x48eb3489; mov eax, edi; ret; 
0x0000000000427ea4: call 0x48eb69b9; mov eax, edx; ret; 
0x00000000004427f0: call 0x4bf27f4; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x0000000000442869: call 0x4bf286d; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x0000000000403ee1: call 0x4cd2702b; mov edx, eax; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x00000000004307b5: call 0x4e7217ad; call 0xf69f071; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004469cd: call 0x4e940; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000435db0: call 0x4ef36da7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000040fcd1: call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047ce1f: call 0x59b; xor eax, eax; ret; 
0x00000000004006ff: call 0x5bf8d84c; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x00000000004019df: call 0x5c41773f; pop r13; pop r14; ret; 
0x0000000000410194: call 0x5c425ef4; ret; 
0x00000000004104f7: call 0x5c426257; ret; 
0x0000000000410569: call 0x5c4262c9; ret; 
0x00000000004130c8: call 0x5c428e28; pop r13; pop r14; ret; 
0x000000000041720a: call 0x5c42cf6a; pop r13; pop r14; ret; 
0x00000000004410ec: call 0x5c456e4c; mov esi, 2; jmp rax; 
0x000000000046bdfd: call 0x5c481b5d; pop r13; ret; 
0x000000000046becd: call 0x5c481c2d; pop r13; ret; 
0x000000000047c604: call 0x5c492364; pop r13; ret; 
0x000000000047d1f3: call 0x5c492f53; ret; 
0x000000000047d210: call 0x5c492f70; ret; 
0x000000000047d24d: call 0x5c492fad; ret; 
0x000000000049932c: call 0x5c4af08c; pop r13; ret; 
0x000000000048bfcd: call 0x62c50; add rsp, 0xf0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004507de: call 0x650507e2; mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450843: call 0x65050847; add rax, qword ptr [0]; ret; 
0x000000000045c4c8: call 0x6606100d; and eax, 0xbeb80100; add byte ptr [r15 + r9 + 0x44], cl; ret 0xf4c; 
0x000000000046c7a5: call 0x6d8d0; cmp eax, 1; je 0x6c8e0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c985: call 0x6d8d0; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004734d3: call 0x730e0; add rsp, 0x90; pop rbx; ret; 
0x0000000000498221: call 0x7496ce27; ret; 
0x000000000046ee75: call 0x74d9727c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000430c98: call 0x75cb44ad; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000049680d: call 0x76e40; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000480e2f: call 0x78b40; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000480e68: call 0x78b40; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a623: call 0x78b40; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047c6c5: call 0x7c030; add rsp, 0xd8; ret; 
0x000000000049a112: call 0x7d690; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000480dcd: call 0x7d690; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004465fe: call 0x80d70; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000044e70b: call 0x80e90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044e725: call 0x848702b; pop rbx; ret; 
0x000000000048bb00: call 0x8ad80; leave; ret; 
0x000000000048baf9: call 0x8af10; leave; ret; 
0x000000000048bb19: call 0x8b470; leave; ret; 
0x000000000048bb37: call 0x8b5f0; leave; ret; 
0x000000000048bf62: call 0x8bf70; add rsp, 0xd8; ret; 
0x000000000040094d: call 0x8c0; mov eax, 0x49ed50; test rax, rax; je 0x963; mov edi, 0x4befc0; call rax; 
0x0000000000413c4b: call 0x8c5bf98; pop rbx; pop rbp; ret; 
0x0000000000481066: call 0x8c750; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000049a183: call 0x8c750; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048c968: call 0x8c750; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000045d44e: call 0x8ca579b; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049a95e: call 0x9a630; add rsp, 0x28; ret; 
0x000000000049a263: call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a1df: call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049cdeb: call 0x9ed90; test rax, rax; je 0x9ce00; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049ab3b: call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x0000000000445614: call 0xe050; nop dword ptr [rax]; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000049d5c5: call 0xe050; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000040e03b: call 0xf0a0; add rsp, 8; ret; 
0x00000000004307ba: call 0xf69f071; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000400a70: call 0xfc40; nop; pop rbp; ret; 
0x0000000000449b52: call 0xffffffff834d6d88; ret 0xf01; 
0x000000000044c769: call 0xffffffff834d999f; ret 0xf01; 
0x000000000044d5f3: call 0xffffffff834da829; ret 0xf01; 
0x000000000045a43c: call 0xffffffff894aa440; ret 0x894c; 
0x000000000048f0b4: call 0xffffffff8b08f24c; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047e4f8: call 0xffffffffbf083073; add eax, 0xe8004b77; push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000041fcc1: call 0xffffffffc48544ce; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000043fdad: call 0xffffffffc48745b3; cmp byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049a3d5: call 0xffffffffc80aebea; cmp rax, qword ptr [rip + 0x23374f]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047a821: call 0xffffffffe907a829; xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004a441d: call 0xffffffffea4b441a; clc; call qword ptr [rax]; 
0x00000000004a43fd: call 0xffffffffea8b43fa; clc; call qword ptr [rax - 0x14]; 
0x0000000000432713: call 0xfffffffff061b264; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325e3: call 0xfffffffff062af34; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432621: call 0xfffffffff062af72; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432659: call 0xfffffffff062afaa; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432697: call 0xfffffffff062afe8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004326cf: call 0xfffffffff062b020; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004326f7: call 0xfffffffff062b048; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043271f: call 0xfffffffff062b070; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049cff8: call 0xfffffffff07f5b49; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d090: call 0xfffffffff07f5be1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d124: call 0xfffffffff07f5c75; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d170: call 0xfffffffff07f5cc1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d239: call 0xfffffffff07f5d8a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2c8: call 0xfffffffff07f5e19; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d319: call 0xfffffffff07f5e6a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000043f53a: call 0xfffffffffc041a45; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000043f55b: call 0xfffffffffc041a6e; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000416b18: call 0xffffffffffc00000; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004002d8: call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000048c368: call 0xffffffffffc00000; test eax, eax; je 0x8c37c; mov qword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000041120b: call ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004121b3: call ptr [rbp + 0x41]; pop rsp; ret; 
0x00000000004a4587: call ptr [rbp + rbx + 0x1d2cfff9]; stc; call rdx; 
0x000000000046f2ca: call ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000044de53: call ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000452c72: call ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000411ffd: call ptr [rbx + 0x5d]; ret; 
0x000000000047d396: call ptr [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000412c76: call ptr [rbx - 0x3d]; nop dword ptr [rax]; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x00000000004100cc: call qword ptr [rax + 0x10]; 
0x00000000004a493f: call qword ptr [rax + 0x14]; 
0x00000000004a4937: call qword ptr [rax + 0x15]; 
0x00000000004a4937: call qword ptr [rax + 0x15]; stc; call rax; 
0x00000000004a492f: call qword ptr [rax + 0x16]; 
0x00000000004a492f: call qword ptr [rax + 0x16]; stc; call rax; 
0x00000000004a4927: call qword ptr [rax + 0x17]; 
0x00000000004a4927: call qword ptr [rax + 0x17]; stc; call rax; 
0x00000000004112b1: call qword ptr [rax + 0x18]; 
0x00000000004a491f: call qword ptr [rax + 0x18]; stc; call rax; 
0x00000000004a4713: call qword ptr [rax + 0x1a]; 
0x00000000004a4713: call qword ptr [rax + 0x1a]; stc; call rax; 
0x00000000004a450b: call qword ptr [rax + 0x1d]; 
0x00000000004a450b: call qword ptr [rax + 0x1d]; stc; jmp rsi; 
0x0000000000414029: call qword ptr [rax + 0x20]; 
0x0000000000414029: call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000004a434b: call qword ptr [rax + 0x20fff8f1]; in al, 0xf8; jmp rax; 
0x00000000004a44db: call qword ptr [rax + 0x20fff922]; and bh, cl; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a46e3: call qword ptr [rax + 0x21]; 
0x00000000004a46e3: call qword ptr [rax + 0x21]; stc; jmp rax; 
0x000000000041fbde: call qword ptr [rax + 0x24748b48]; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000416c54: call qword ptr [rax + 0x30]; 
0x0000000000416c54: call qword ptr [rax + 0x30]; cmp eax, -1; je 0x16c5f; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000416cac: call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x16c9a; pop rbx; ret; 
0x0000000000410a55: call qword ptr [rax + 0x38]; 
0x0000000000413579: call qword ptr [rax + 0x40]; 
0x00000000004a41ff: call qword ptr [rax + 0x40fff8c0]; sar eax, 0xff; xor dl, al; clc; jmp qword ptr [rax]; 
0x0000000000414494: call qword ptr [rax + 0x48]; 
0x00000000004a430b: call qword ptr [rax + 0x48fff8c9]; in al, 0xf8; call qword ptr [rax]; 
0x000000000049a9a6: call qword ptr [rax + 0x49]; 
0x00000000004a40df: call qword ptr [rax + 0x49]; clc; jmp qword ptr [rax + 0x4b]; 
0x00000000004a470f: call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x0000000000410cc1: call qword ptr [rax + 0x58]; 
0x000000000041036c: call qword ptr [rax + 0x60]; 
0x00000000004a408b: call qword ptr [rax + 0x62]; 
0x0000000000410d08: call qword ptr [rax + 0x68]; 
0x0000000000410fdc: call qword ptr [rax + 0x70]; 
0x00000000004a4393: call qword ptr [rax + 0x70fff8e5]; out 0xf8, eax; call qword ptr [rax - 0x17]; 
0x000000000049ab0d: call qword ptr [rax + 0x74]; 
0x000000000049d642: call qword ptr [rax + 0x75]; 
0x000000000049d642: call qword ptr [rax + 0x75]; in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x0000000000413ea7: call qword ptr [rax + 0x78]; 
0x00000000004a4a23: call qword ptr [rax + 0x7a]; 
0x00000000004a4a23: call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a5f: call qword ptr [rax + 0x7b]; 
0x00000000004a4a7f: call qword ptr [rax + 0x7c]; 
0x00000000004a400b: call qword ptr [rax + 0xc]; 
0x00000000004be31b: call qword ptr [rax + 0xf]; 
0x00000000004be31b: call qword ptr [rax + 0xf]; std; call qword ptr [rax]; 
0x00000000004c8753: call qword ptr [rax + 1]; 
0x00000000004c227b: call qword ptr [rax + 2]; 
0x00000000004a3f7f: call qword ptr [rax + 6]; 
0x00000000004a3f7f: call qword ptr [rax + 6]; clc; jmp qword ptr [rax]; 
0x0000000000411dbb: call qword ptr [rax + 8]; 
0x00000000004a440b: call qword ptr [rax - 0x10]; 
0x00000000004a440b: call qword ptr [rax - 0x10]; clc; jmp rax; 
0x00000000004a4407: call qword ptr [rax - 0x12]; 
0x00000000004a4407: call qword ptr [rax - 0x12]; clc; call qword ptr [rax - 0x10]; clc; jmp rax; 
0x0000000000446ace: call qword ptr [rax - 0x142076b8]; ret; 
0x00000000004a4403: call qword ptr [rax - 0x14]; 
0x00000000004a439b: call qword ptr [rax - 0x17]; 
0x00000000004a441b: call qword ptr [rax - 0x18]; 
0x00000000004a441b: call qword ptr [rax - 0x18]; clc; inc dword ptr [rax - 0x16]; clc; call qword ptr [rax]; 
0x00000000004a4433: call qword ptr [rax - 0x1c]; 
0x00000000004a4433: call qword ptr [rax - 0x1c]; clc; jmp qword ptr [rax]; 
0x00000000004a44af: call qword ptr [rax - 0x29]; 
0x00000000004a445b: call qword ptr [rax - 0x30]; 
0x00000000004a448f: call qword ptr [rax - 0x35]; 
0x00000000004a448f: call qword ptr [rax - 0x35]; clc; jmp qword ptr [rax]; 
0x00000000004a4303: call qword ptr [rax - 0x38]; 
0x00000000004a41eb: call qword ptr [rax - 0x3d]; 
0x00000000004a41eb: call qword ptr [rax - 0x3d]; clc; push qword ptr [rsi - 0x40]; clc; jmp qword ptr [rdx]; 
0x00000000004a4a67: call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a41bf: call qword ptr [rax - 0x4f000752]; scasd eax, dword ptr [rdi]; clc; call rax; 
0x00000000004a419f: call qword ptr [rax - 0x4f00075b]; cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004a41b7: call qword ptr [rax - 0x54]; 
0x00000000004a4197: call qword ptr [rax - 0x5d]; 
0x00000000004a4a33: call qword ptr [rax - 0x5f000686]; jp 0xa4a34; push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a4347: call qword ptr [rax - 0x6f000711]; int1; clc; jmp qword ptr [rax]; 
0x00000000004a4343: call qword ptr [rax - 0x6f000713]; out dx, eax; clc; call qword ptr [rax + 0x20fff8f1]; in al, 0xf8; jmp rax; 
0x00000000004a42db: call qword ptr [rax - 0x6f00073e]; ret; 
0x00000000004a42d7: call qword ptr [rax - 0x6f00073f]; ret 0xfff8; 
0x000000000046049b: call qword ptr [rax - 0x75]; 
0x00000000004a4097: call qword ptr [rax - 0x7f]; 
0x00000000004be37b: call qword ptr [rax - 6]; 
0x000000000040ffbe: call qword ptr [rax]; 
0x000000000045ff0d: call qword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000004a3f6f: call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004a40cf: call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000004a4acf: call qword ptr [rax]; cmp ecx, 0xf98120ff; inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004be36b: call qword ptr [rax]; int1; cld; jmp qword ptr [rax - 0xd]; 
0x000000000049ab37: call qword ptr [rax]; je 0x9ab28; call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004a4a77: call qword ptr [rax]; jl 0xa4a74; push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004a4a13: call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a4313: call qword ptr [rax]; out 0xf8, al; push rax; out 0xf8, eax; call rax; 
0x00000000004a449f: call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x00000000004be357: call qword ptr [rax]; std; inc eax; std; jmp qword ptr [rax]; 
0x0000000000410e2f: call qword ptr [rbp + 0x18]; 
0x0000000000410da8: call qword ptr [rbp + 0x20]; 
0x0000000000411a71: call qword ptr [rbp + 0x30]; 
0x00000000004050cf: call qword ptr [rbp + 0x48]; 
0x000000000043fc8f: call qword ptr [rbp + 0x53]; 
0x00000000004c87a3: call qword ptr [rbp + 5]; 
0x00000000004bf3e3: call qword ptr [rbp + 9]; 
0x000000000040eda5: call qword ptr [rbp]; 
0x0000000000400db8: call qword ptr [rbx + 0x10]; 
0x0000000000411781: call qword ptr [rbx + 0x20]; 
0x0000000000411afc: call qword ptr [rbx + 0x30]; 
0x000000000047b4ee: call qword ptr [rbx + 0x48]; 
0x000000000049d362: call qword ptr [rbx + 0x49]; 
0x000000000049cf62: call qword ptr [rbx + 0x52]; 
0x00000000004bb3a0: call qword ptr [rbx + 0x7c]; 
0x000000000045ecd4: call qword ptr [rbx + 0xf]; 
0x00000000004c9223: call qword ptr [rbx + 2]; 
0x00000000004c32e3: call qword ptr [rbx + 3]; 
0x00000000004c2c53: call qword ptr [rbx + 4]; 
0x00000000004c402b: call qword ptr [rbx + 5]; 
0x0000000000411b77: call qword ptr [rbx + 8]; 
0x000000000045d5ee: call qword ptr [rbx - 0x41]; 
0x0000000000415f2f: call qword ptr [rbx - 0x75]; 
0x0000000000414f1f: call qword ptr [rbx - 0x7d]; 
0x000000000047f2bf: call qword ptr [rbx - 0xa]; 
0x00000000004c0543: call qword ptr [rbx]; 
0x00000000004c4e33: call qword ptr [rcx + 0x1c]; 
0x00000000004c99d3: call qword ptr [rcx + 1]; 
0x00000000004c0c23: call qword ptr [rcx + 2]; 
0x00000000004c1823: call qword ptr [rcx + 5]; 
0x00000000004bac8d: call qword ptr [rcx - 0x66]; 
0x00000000004c5fe3: call qword ptr [rcx]; 
0x0000000000478c54: call qword ptr [rdi + 0x48]; 
0x00000000004c8e73: call qword ptr [rdi + 9]; 
0x00000000004c9ac3: call qword ptr [rdi]; 
0x00000000004a45b7: call qword ptr [rdx + 0x1f]; 
0x00000000004a45b7: call qword ptr [rdx + 0x1f]; stc; jmp rdx; 
0x000000000046d217: call qword ptr [rdx + 0x30]; 
0x000000000046d217: call qword ptr [rdx + 0x30]; cmp eax, -1; je 0x6d222; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004c33db: call qword ptr [rdx + 0xe]; 
0x00000000004c286b: call qword ptr [rdx + 4]; 
0x00000000004a45a7: call qword ptr [rdx]; 
0x0000000000479bec: call qword ptr [rip + 0x252596]; xor eax, eax; add rsp, 8; ret; 
0x00000000004c2953: call qword ptr [rsi + 0x16]; 
0x00000000004a4513: call qword ptr [rsi + 0x23]; 
0x00000000004a4513: call qword ptr [rsi + 0x23]; stc; jmp rsi; 
0x00000000004a4523: call qword ptr [rsi + 0x26fff921]; and ecx, edi; push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004c511b: call qword ptr [rsi + 0x2b]; 
0x00000000004bc9df: call qword ptr [rsi + 0x30]; 
0x00000000004c3c5b: call qword ptr [rsi + 0xb]; 
0x00000000004bf083: call qword ptr [rsi + 1]; 
0x00000000004c065b: call qword ptr [rsi + 4]; 
0x00000000004a467f: call qword ptr [rsi + rbx - 7]; jmp rsp; 
0x00000000004beeb3: call qword ptr [rsi + rdx*8]; std; jmp rsp; 
0x00000000004c1283: call qword ptr [rsi]; 
0x0000000000400961: call rax; 
0x00000000004a493b: call rax; adc al, 0xf9; call qword ptr [rax + 0x14]; 
0x000000000049a239: call rax; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000480aa5: call rax; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a2e1: call rax; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x00000000004a44eb: call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004a41a7: call rax; cmpsd dword ptr [rsi], dword ptr [rdi]; clc; push rax; test al, 0xf8; call qword ptr [rax]; 
0x00000000004a4a9b: call rax; jg 0xa4a98; jmp rax; 
0x00000000004a4a6f: call rax; jnp 0xa4a6c; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a43: call rax; jp 0xa4a40; jmp rax; 
0x00000000004a40b7: call rax; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a40ff: call rax; pop rcx; clc; jmp rax; 
0x00000000004a491b: call rax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x000000000040301d: call rbx; 
0x000000000040593a: call rcx; 
0x0000000000403972: call rdi; 
0x0000000000400c6b: call rdx; 
0x00000000004a4597: call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x000000000040e431: call rsi; 
0x00000000004a4277: call rsi; xabort -1; xbegin 0xa3980; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x0000000000400e9c: call rsp; 
0x00000000004503c4: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x00000000004bc480: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004bc47b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000049a5e6: cdq; nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x0000000000431873: cdq; sub al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004560f8: cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456149: cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458239: cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d6c: cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x000000000046884e: clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x000000000041ceb3: clc; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x00000000004c36a8: clc; add bh, al; call qword ptr [rsi]; 
0x0000000000459025: clc; add byte ptr [r9 - 0x42], al; ret 0x4b40; 
0x000000000045b4a1: clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x0000000000412682: clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000045ea2d: clc; add cl, byte ptr [rax + 0x29]; ret; 
0x0000000000411af5: clc; add cl, byte ptr [rax - 0x77]; and al, 0x20; call qword ptr [rbx + 0x30]; 
0x00000000004607bb: clc; add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000400c5b: clc; add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000040d9ac: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x000000000043f20c: clc; add dword ptr [rdi], ecx; xchg esp, eax; ret 0x8341; 
0x0000000000400bb5: clc; add eax, 0xe1870f; add byte ptr [rax], al; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000496bdc: clc; add eax, dword ptr [rcx + 0x5d]; pop r14; pop r15; ret; 
0x00000000004454eb: clc; add esi, dword ptr [rbp - 0x57]; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000426f58: clc; add rax, rcx; ret; 
0x0000000000427d84: clc; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x00000000004a434a: clc; call qword ptr [rax + 0x20fff8f1]; in al, 0xf8; jmp rax; 
0x00000000004a41fe: clc; call qword ptr [rax + 0x40fff8c0]; sar eax, 0xff; xor dl, al; clc; jmp qword ptr [rax]; 
0x00000000004a430a: clc; call qword ptr [rax + 0x48fff8c9]; in al, 0xf8; call qword ptr [rax]; 
0x00000000004a40de: clc; call qword ptr [rax + 0x49]; 
0x00000000004a40de: clc; call qword ptr [rax + 0x49]; clc; jmp qword ptr [rax + 0x4b]; 
0x00000000004a408a: clc; call qword ptr [rax + 0x62]; 
0x00000000004a4392: clc; call qword ptr [rax + 0x70fff8e5]; out 0xf8, eax; call qword ptr [rax - 0x17]; 
0x00000000004a400a: clc; call qword ptr [rax + 0xc]; 
0x00000000004a3f7e: clc; call qword ptr [rax + 6]; 
0x00000000004a3f7e: clc; call qword ptr [rax + 6]; clc; jmp qword ptr [rax]; 
0x00000000004a440a: clc; call qword ptr [rax - 0x10]; 
0x00000000004a440a: clc; call qword ptr [rax - 0x10]; clc; jmp rax; 
0x00000000004a4406: clc; call qword ptr [rax - 0x12]; 
0x00000000004a4406: clc; call qword ptr [rax - 0x12]; clc; call qword ptr [rax - 0x10]; clc; jmp rax; 
0x00000000004a4402: clc; call qword ptr [rax - 0x14]; 
0x00000000004a439a: clc; call qword ptr [rax - 0x17]; 
0x00000000004a441a: clc; call qword ptr [rax - 0x18]; 
0x00000000004a441a: clc; call qword ptr [rax - 0x18]; clc; inc dword ptr [rax - 0x16]; clc; call qword ptr [rax]; 
0x00000000004a4432: clc; call qword ptr [rax - 0x1c]; 
0x00000000004a4432: clc; call qword ptr [rax - 0x1c]; clc; jmp qword ptr [rax]; 
0x00000000004a44ae: clc; call qword ptr [rax - 0x29]; 
0x00000000004a445a: clc; call qword ptr [rax - 0x30]; 
0x00000000004a448e: clc; call qword ptr [rax - 0x35]; 
0x00000000004a448e: clc; call qword ptr [rax - 0x35]; clc; jmp qword ptr [rax]; 
0x00000000004a4302: clc; call qword ptr [rax - 0x38]; 
0x00000000004a41ea: clc; call qword ptr [rax - 0x3d]; 
0x00000000004a41ea: clc; call qword ptr [rax - 0x3d]; clc; push qword ptr [rsi - 0x40]; clc; jmp qword ptr [rdx]; 
0x00000000004a41be: clc; call qword ptr [rax - 0x4f000752]; scasd eax, dword ptr [rdi]; clc; call rax; 
0x00000000004a419e: clc; call qword ptr [rax - 0x4f00075b]; cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004a41b6: clc; call qword ptr [rax - 0x54]; 
0x00000000004a4196: clc; call qword ptr [rax - 0x5d]; 
0x00000000004a4346: clc; call qword ptr [rax - 0x6f000711]; int1; clc; jmp qword ptr [rax]; 
0x00000000004a42da: clc; call qword ptr [rax - 0x6f00073e]; ret; 
0x00000000004a42d6: clc; call qword ptr [rax - 0x6f00073f]; ret 0xfff8; 
0x00000000004a4096: clc; call qword ptr [rax - 0x7f]; 
0x00000000004a3f6e: clc; call qword ptr [rax]; 
0x00000000004a3f6e: clc; call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004a40ce: clc; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000004a4312: clc; call qword ptr [rax]; out 0xf8, al; push rax; out 0xf8, eax; call rax; 
0x00000000004a449e: clc; call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x00000000004c402a: clc; call qword ptr [rbx + 5]; 
0x00000000004c4fc2: clc; call qword ptr [rbx]; 
0x00000000004c4e32: clc; call qword ptr [rcx + 0x1c]; 
0x00000000004a4212: clc; call qword ptr [rcx]; 
0x00000000004c3612: clc; call qword ptr [rdi]; 
0x00000000004c48d2: clc; call qword ptr [rdx]; 
0x00000000004c3c5a: clc; call qword ptr [rsi + 0xb]; 
0x00000000004c36aa: clc; call qword ptr [rsi]; 
0x00000000004a40b6: clc; call rax; 
0x00000000004a40b6: clc; call rax; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a40fe: clc; call rax; pop rcx; clc; jmp rax; 
0x00000000004a4276: clc; call rsi; 
0x00000000004a4276: clc; call rsi; xabort -1; xbegin 0xa3980; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x00000000004c3732: clc; call rsp; 
0x00000000004be379: clc; cld; call qword ptr [rax - 6]; 
0x000000000046fc2d: clc; cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000043024d: clc; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x000000000048c332: clc; dec dword ptr [rax + 0x39]; ret; 
0x00000000004a430e: clc; dec dword ptr [rax - 0x1c]; clc; call qword ptr [rax]; 
0x0000000000401b0b: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004573d2: clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000455dab: clc; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004117c0: clc; dec dword ptr [rdi]; test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000048c08d: clc; dec dword ptr [rdi]; xchg esp, eax; ret 0xdaf7; 
0x00000000004a40da: clc; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004a40da: clc; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; clc; jmp qword ptr [rax + 0x4b]; 
0x00000000004a405e: clc; inc dword ptr [rax + 0x6a]; clc; jmp rax; 
0x00000000004a41d2: clc; inc dword ptr [rax + 0x6efff8c3]; ret 0xfff8; 
0x00000000004a407e: clc; inc dword ptr [rax + 0x77]; clc; jmp rax; 
0x00000000004a3f6a: clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004a3f6a: clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004a4386: clc; inc dword ptr [rax - 0x11]; clc; inc dword ptr [rax - 0xf]; clc; call rax; 
0x00000000004a441e: clc; inc dword ptr [rax - 0x16]; clc; call qword ptr [rax]; 
0x00000000004a43b6: clc; inc dword ptr [rax - 0x19]; clc; jmp qword ptr [rax]; 
0x00000000004a432e: clc; inc dword ptr [rax - 0x1c]; clc; inc dword ptr [rax]; out 0xf8, al; jmp rax; 
0x00000000004a40b2: clc; inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a4202: clc; inc dword ptr [rax - 0x3f]; clc; push qword ptr [rax]; ret 0xfff8; 
0x00000000004a438a: clc; inc dword ptr [rax - 0xf]; clc; call rax; 
0x00000000004a4456: clc; inc dword ptr [rax]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a4332: clc; inc dword ptr [rax]; out 0xf8, al; jmp rax; 
0x00000000004a43d6: clc; inc dword ptr [rax]; out 0xf8, eax; jmp rax; 
0x00000000004a4246: clc; inc dword ptr [rcx - 0x37]; clc; jmp rcx; 
0x000000000044f669: clc; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004a4272: clc; inc dword ptr [rsi - 0x3a]; clc; call rsi; 
0x00000000004a4486: clc; inc eax; fdivp st(0); call qword ptr [rax]; 
0x00000000004a406e: clc; inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004a40fa: clc; inc eax; push rdi; clc; call rax; 
0x00000000004a449a: clc; inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004a449a: clc; inc eax; sar al, 1; call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x00000000004a425a: clc; inc esi; ret 0xfff8; 
0x00000000004a425e: clc; inc esi; ret; 
0x00000000004a4256: clc; inc esi; sar eax, 0xff; mov dl, 0xf8; inc esi; ret; 
0x000000000044ae4e: clc; jg 0x4adda; ret 0x5c77; 
0x00000000004a40e2: clc; jmp qword ptr [rax + 0x4b]; 
0x00000000004a4052: clc; jmp qword ptr [rax + 0x65]; 
0x00000000004a4072: clc; jmp qword ptr [rax + 0x72]; 
0x00000000004a437e: clc; jmp qword ptr [rax - 0x15]; 
0x00000000004a43b2: clc; jmp qword ptr [rax - 0x1b]; 
0x00000000004a43ce: clc; jmp qword ptr [rax - 0x1d]; 
0x00000000004a44a2: clc; jmp qword ptr [rax - 0x2d]; 
0x00000000004a41e6: clc; jmp qword ptr [rax - 0x3e]; 
0x00000000004a3f82: clc; jmp qword ptr [rax]; 
0x00000000004a420e: clc; jmp qword ptr [rbp - 0x40]; 
0x00000000004c3552: clc; jmp qword ptr [rbx]; 
0x00000000004a4232: clc; jmp qword ptr [rcx - 0x3a]; 
0x00000000004a422a: clc; jmp qword ptr [rcx - 0x3b]; 
0x00000000004a4222: clc; jmp qword ptr [rcx - 0x3c]; 
0x00000000004a41f2: clc; jmp qword ptr [rdx]; 
0x0000000000475b24: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000479765: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004a427a: clc; jmp qword ptr [rsi - 0x39]; 
0x0000000000477fcc: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4286: clc; jmp qword ptr [rsi]; 
0x00000000004a3f72: clc; jmp rax; 
0x00000000004c4962: clc; jmp rbx; 
0x00000000004a4216: clc; jmp rcx; 
0x00000000004c3eb2: clc; jmp rsp; 
0x0000000000433766: clc; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335b0: clc; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049d000: clc; leave; ret; 
0x00000000004bb0e2: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000432737: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043308b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043328b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043348b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043271b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043305f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043325f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043345f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004326ef: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a7: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435b47: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004332a7: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435ab7: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004334a7: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a27: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432753: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043699c: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049aad7: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004307cf: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x000000000049d098: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000430249: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000400c83: clc; mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x0000000000400c72: clc; mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000400c62: clc; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x00000000004339d9: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000440459: clc; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000048be92: clc; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004735dc: clc; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000427332: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000048be87: clc; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000400702: clc; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x00000000004a4452: clc; push qword ptr [rax + 0xfff8cd]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a3f66: clc; push qword ptr [rax + 1]; clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004a4396: clc; push qword ptr [rax - 0x19]; clc; call qword ptr [rax - 0x17]; 
0x00000000004a4416: clc; push qword ptr [rax - 0x1a]; clc; call qword ptr [rax - 0x18]; 
0x00000000004a4482: clc; push qword ptr [rax - 0x23]; clc; inc eax; fdivp st(0); call qword ptr [rax]; 
0x00000000004a4496: clc; push qword ptr [rax - 0x31]; clc; inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004a40f6: clc; push qword ptr [rax - 0x3f0007ab]; push rdi; clc; call rax; 
0x00000000004a41e2: clc; push qword ptr [rax - 0x3f]; clc; jmp qword ptr [rax - 0x3e]; 
0x00000000004a3f76: clc; push qword ptr [rax - 0x7f0007fc]; add eax, 0x650fff8; clc; jmp qword ptr [rax]; 
0x00000000004a40d6: clc; push qword ptr [rax]; clc; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004a40ae: clc; push qword ptr [rax]; mov eax, edi; inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a4206: clc; push qword ptr [rax]; ret 0xfff8; 
0x00000000004a41b2: clc; push qword ptr [rax]; stosd dword ptr [rdi], eax; clc; call qword ptr [rax - 0x54]; 
0x00000000004a42fa: clc; push qword ptr [rax]; xbegin 0xfffffffff8d20402; call qword ptr [rax - 0x38]; 
0x0000000000411d0a: clc; push qword ptr [rbp + 2]; pop rbx; ret; 
0x0000000000416cb0: clc; push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x0000000000443b41: clc; push qword ptr [rbp - 0xd]; xor eax, eax; leave; ret; 
0x0000000000416c58: clc; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x0000000000416135: clc; push qword ptr [rdi + rax + 0x5b]; pop rbp; pop r12; ret; 
0x00000000004734bc: clc; push qword ptr [rsi + rsi - 0x77]; ret 0xe283; 
0x00000000004a41ee: clc; push qword ptr [rsi - 0x40]; clc; jmp qword ptr [rdx]; 
0x00000000004a4316: clc; push rax; out 0xf8, eax; call rax; 
0x00000000004a41aa: clc; push rax; test al, 0xf8; call qword ptr [rax]; 
0x00000000004a41fa: clc; push rdx; ret 0xfff8; 
0x00000000004a4252: clc; push rsi; sar al, 0xff; mov cl, 0xf8; inc esi; ret 0xfff8; 
0x00000000004a427e: clc; push rsi; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x00000000004c8da8: clc; ret 0xfffc; 
0x0000000000417902: clc; ret; 
0x000000000048a73a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000480a0d: clc; std; jbe 0x80a18; ret; 
0x0000000000450055: clc; syscall; 
0x00000000004bcc18: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000044ac40: cld; add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000043f55f: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000043f57f: cld; add eax, dword ptr [rax]; ret; 
0x00000000004c8752: cld; call qword ptr [rax + 1]; 
0x00000000004be37a: cld; call qword ptr [rax - 6]; 
0x00000000004be36a: cld; call qword ptr [rax]; 
0x00000000004be36a: cld; call qword ptr [rax]; int1; cld; jmp qword ptr [rax - 0xd]; 
0x00000000004c87a2: cld; call qword ptr [rbp + 5]; 
0x00000000004c8e72: cld; call qword ptr [rdi + 9]; 
0x00000000004c8832: cld; call rsp; 
0x00000000004a49a5: cld; clc; jmp qword ptr [rax]; 
0x000000000046d25d: cld; cmp eax, -1; je 0x6d266; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043e5e1: cld; cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x0000000000430276: cld; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x000000000045d67b: cld; dec dword ptr [rax - 0x39]; ret 0xffb0; 
0x00000000004be376: cld; inc dword ptr [rax]; clc; cld; call qword ptr [rax - 6]; 
0x000000000047d36c: cld; inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x000000000043f60e: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f53e: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004be366: cld; inc eax; out dx, al; cld; call qword ptr [rax]; 
0x000000000046d208: cld; je 0x6d228; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000004be36e: cld; jmp qword ptr [rax - 0xd]; 
0x00000000004c8be2: cld; jmp qword ptr [rcx]; 
0x00000000004c8b72: cld; jmp qword ptr [rdx]; 
0x0000000000453124: cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000043f398: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9dbc: cld; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; mov al, 0x42; std; call qword ptr [rcx + 1]; 
0x0000000000432ec2: cld; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004330c5: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332c5: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c5: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004369ae: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000403d16: cld; mov eax, 3; syscall; 
0x0000000000430273: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x000000000043e5de: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x00000000004304d5: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x00000000004339f8: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x00000000004328fa: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432ada: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cba: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e9a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432abe: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432c9e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e7e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432af6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435cd6: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432cd6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435c56: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432eb6: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435bd6: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432916: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435d56: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048be4c: cld; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000004c4fbc: cld; pop rdi; add byte ptr [rax], al; mov al, 0xde; clc; call qword ptr [rbx]; 
0x00000000004be372: cld; push qword ptr [rax + 0xfffcf5]; clc; cld; call qword ptr [rax - 6]; 
0x00000000004bea8c: cld; ret 0xfffd; 
0x0000000000427928: cld; ret; 
0x00000000004c9abc: cld; stosb byte ptr [rdi], al; add byte ptr [rax], al; nop; cmp ch, bh; call qword ptr [rdi]; 
0x00000000004ba596: cld; test al, 0x97; xchg esp, eax; ret; 
0x0000000000436b1d: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e3: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436ddf: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043eebb: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004c76bc: cld; xchg byte ptr [rax], al; add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x0000000000420eb9: cli; adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x0000000000421099: cli; add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x00000000004967a9: cli; add byte ptr [rcx - 0xcf68130], cl; ret; 
0x000000000046fdca: cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000481e23: cli; add cl, byte ptr [rax + 0x29]; ret 0x8949; 
0x0000000000481e4c: cli; add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x00000000004116e8: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000043f2ac: cli; add cl, byte ptr [rdi]; xchg esp, eax; ret 0x8444; 
0x000000000043edc1: cli; add dh, byte ptr [rdx + 0xb]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043ef3e: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000044a60f: cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x00000000004437b8: cli; add dword ptr [rbp - 0xc], esi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000045b98c: cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x000000000047d3e6: cli; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8348; 
0x000000000047dc53: cli; add dword ptr [rdi], ecx; xchg edx, eax; ret 0xb60f; 
0x000000000043edd1: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x00000000004369cc: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000049561c: cli; add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000004440e9: cli; and byte ptr [rdi], cl; test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x000000000043ef07: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004602e9: cli; call qword ptr [rax + 0x38]; 
0x00000000004c6b9a: cli; call qword ptr [rbx]; 
0x00000000004c5fe2: cli; call qword ptr [rcx]; 
0x00000000004c5a32: cli; call qword ptr [rsi]; 
0x00000000004c6012: cli; call rsi; 
0x00000000004a4961: cli; clc; jmp qword ptr [rax]; 
0x000000000045da72: cli; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c7119: cli; cli; jmp rdi; 
0x0000000000473b5d: cli; cmp dh, byte ptr [rbp + 4]; test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x00000000004731fb: cli; dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x000000000047d1c4: cli; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000043eef4: cli; jb 0x3ef06; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000046c7e9: cli; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000043399b: cli; jg 0x339a5; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004339bb: cli; jg 0x339c5; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000436987: cli; jg 0x36991; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043ed76: cli; jg 0x3ed80; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed91: cli; jg 0x3ed9b; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ef16: cli; jg 0x3ef20; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004c6682: cli; jmp qword ptr [rax + 1]; 
0x00000000004c6592: cli; jmp qword ptr [rax]; 
0x00000000004c6892: cli; jmp qword ptr [rbx + 2]; 
0x00000000004c7042: cli; jmp qword ptr [rbx + 5]; 
0x00000000004c5822: cli; jmp qword ptr [rdx + 1]; 
0x00000000004c6052: cli; jmp qword ptr [rdx]; 
0x00000000004537f4: cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a0950: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045fc6c: cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004c6302: cli; jmp qword ptr [rsi]; 
0x00000000004c57ea: cli; jmp rax; 
0x00000000004c676a: cli; jmp rdi; 
0x00000000004c618a: cli; jmp rdx; 
0x00000000004c6e42: cli; jmp rsp; 
0x00000000004332c8: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332c2: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000427338: cli; movzx edx, dl; sub eax, edx; ret; 
0x000000000049ccf1: cli; or byte ptr [rbp - 0x12], dh; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000043ef20: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043eda1: cli; or byte ptr [rdx + 0xb], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000495106: cli; or cl, byte ptr [rax + 0x29]; ret 0x8941; 
0x00000000004827d8: cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004bca01: cli; push 0x6e; ja 0xbc989; ret 0x48f; 
0x000000000047cb26: cli; push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047d288: cli; push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047148a: cli; ret; 
0x000000000044394b: cli; setae al; ret; 
0x000000000041bcc6: cli; sub al, byte ptr [rax]; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000424aa9: cli; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a48: cli; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000046def8: cli; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de88: cli; test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x0000000000436ded: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004ba0ea: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004ca19b: cmc; add al, byte ptr [rax]; ret; 
0x0000000000490f98: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041ef00: cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446b07: cmc; add dword ptr [rax], eax; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x000000000046ee91: cmc; and ch, 0xf; je 0x6eeb0; add rax, 2; ret; 
0x00000000004c227a: cmc; call qword ptr [rax + 2]; 
0x00000000004c073a: cmc; call qword ptr [rax]; 
0x00000000004c0542: cmc; call qword ptr [rbx]; 
0x00000000004c0c22: cmc; call qword ptr [rcx + 2]; 
0x00000000004c1822: cmc; call qword ptr [rcx + 5]; 
0x00000000004c0f62: cmc; call qword ptr [rcx]; 
0x00000000004c166a: cmc; call qword ptr [rdx]; 
0x00000000004c065a: cmc; call qword ptr [rsi + 4]; 
0x00000000004c1282: cmc; call qword ptr [rsi]; 
0x00000000004c1baa: cmc; call rsp; 
0x00000000004a4951: cmc; clc; jmp qword ptr [rax]; 
0x00000000004be375: cmc; cld; inc dword ptr [rax]; clc; cld; call qword ptr [rax - 6]; 
0x0000000000440562: cmc; fsubr qword ptr [rax]; add byte ptr [rax], al; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004bfb51: cmc; hlt; call qword ptr [rax]; 
0x00000000004bfb69: cmc; hlt; call qword ptr [rdx]; 
0x00000000004c1432: cmc; jmp qword ptr [rax]; 
0x00000000004c0fc2: cmc; jmp qword ptr [rbx]; 
0x00000000004bfea2: cmc; jmp qword ptr [rcx + 0x4000001]; 
0x00000000004c0d92: cmc; jmp qword ptr [rcx]; 
0x00000000004bffa2: cmc; jmp qword ptr [rdi + 1]; 
0x00000000004c20ea: cmc; jmp qword ptr [rdi + 3]; 
0x00000000004c2172: cmc; jmp qword ptr [rdx]; 
0x00000000004c11aa: cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c17e2: cmc; jmp qword ptr [rsi]; 
0x00000000004c1f32: cmc; jmp rdx; 
0x00000000004bce29: cmc; mov ch, 0xab; ret; 
0x0000000000435c5a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432b4e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435c53: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432cb7: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cd3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e323: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004b9cd7: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000048c33d: cmc; pop rbx; pop rbp; pop r12; ret; 
0x000000000043e327: cmc; sub eax, edx; ret; 
0x00000000004bc465: cmc; xlatb; ret 0x4e27; 
0x000000000049d407: cmova eax, edx; ret; 
0x000000000046fc31: cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x0000000000418109: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000418108: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004403eb: cmove eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000046d561: cmove eax, ecx; ret; 
0x00000000004406d0: cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x0000000000422403: cmove eax, edx; add rsp, 8; ret; 
0x0000000000426eb2: cmove eax, edx; ret; 
0x000000000049680a: cmove edx, eax; call 0x76e40; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000443944: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000046d560: cmove r8, rcx; ret; 
0x00000000004403ea: cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000473b90: cmove rax, r9; ret; 
0x0000000000422402: cmove rax, rdx; add rsp, 8; ret; 
0x0000000000426eb1: cmove rax, rdx; ret; 
0x0000000000443943: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004506ef: cmovl eax, edx; cmp r12, rax; jb 0x50729; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000004506ee: cmovl rax, rdx; cmp r12, rax; jb 0x50729; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000046c221: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004160c9: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000422483: cmovne eax, edx; ret; 
0x000000000046e1f1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046e1f5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000422482: cmovne rax, rdx; ret; 
0x000000000046e1f0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046e1f4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000044342d: cmovns eax, dword ptr [rbx + 0x14df0e5]; in al, dx; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000440f58: cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000476d41: cmovs eax, dword ptr [rbx + 0x55e8f0e7]; sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000045739d: cmovs eax, dword ptr [rbx - 0x76b60f20]; ret; 
0x0000000000447e5c: cmovs eax, edx; ret; 
0x000000000041ae40: cmovs ebp, dword ptr [rcx]; ret 0x14c; 
0x0000000000436995: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049d338: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x000000000042b0ca: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042bc2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b40a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042abea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042b74a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042af2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a70a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b8ea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042aa4a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ab80: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b880: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b3a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bbc0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aec0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a9e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b6e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000447d89: cmp ah, byte ptr [rdi + 0x4a]; add byte ptr [rax - 0x7f], cl; ret 0x6720; 
0x00000000004c7a98: cmp al, 0; add byte ptr [rax], al; fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x00000000004c15b0: cmp al, 0; add byte ptr [rax], al; hlt; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004c6008: cmp al, 0; add byte ptr [rax], al; jo 0xc600f; add al, al; js 0xc600d; call rsi; 
0x0000000000400f22: cmp al, 0; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000441601: cmp al, 0x24; call rbx; 
0x000000000049a204: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x000000000049e92b: cmp al, 0x24; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000040e4ad: cmp al, 0x33; call rax; 
0x00000000004bb0e0: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000418ea0: cmp al, 0x47; sub eax, dword ptr [rax]; test rax, rax; je 0x18eab; call rax; 
0x00000000004bac88: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c6cfc: cmp al, 0x7d; add byte ptr [rax], al; push rax; leave; cli; call qword ptr [rcx]; 
0x00000000004980d6: cmp al, 0xa; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x00000000004bcc15: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000048c36a: cmp al, 0xb7; inc dword ptr [rbp + 0x480b74c0]; mov dword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x00000000004b9b43: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000047d36b: cmp al, 0xfc; inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x00000000004c8be1: cmp al, 0xfc; jmp qword ptr [rcx]; 
0x00000000004c8b71: cmp al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004be9d0: cmp al, al; std; push rsp; ret 0xfffd; 
0x000000000047e35b: cmp al, bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004c2a25: cmp al, byte ptr [rax]; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x000000000043e68e: cmp al, byte ptr [rsi - 1]; jne 0x3e805; xor eax, eax; ret; 
0x00000000004c2a24: cmp al, byte ptr fs:[rax]; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x0000000000481065: cmp al, ch; in eax, 0xb6; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x00000000004303db: cmp al, cl; jne 0x30cb0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043e742: cmp al, cl; jne 0x3e805; cmp eax, ecx; jne 0x3e805; xor eax, eax; ret; 
0x000000000043e7ff: cmp al, cl; jne 0x3e805; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000427186: cmp al, dh; ret; 
0x0000000000427185: cmp al, r14b; ret; 
0x000000000049ab36: cmp bh, 0x10; je 0x9ab28; call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049ab12: cmp bh, 0x30; jne 0x9ab3b; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d616: cmp bh, 0x30; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d676: cmp bh, 0x30; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d641: cmp bh, 0x50; jne 0x9d633; xor eax, eax; add rsp, 8; ret; 
0x000000000049d6a1: cmp bh, 0x50; jne 0x9d693; xor eax, eax; add rsp, 8; ret; 
0x000000000049d5ac: cmp bh, 4; jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x00000000004be33d: cmp bh, ch; call qword ptr [rax]; 
0x0000000000453ea3: cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x00000000004542a6: cmp bl, 0xff; dec dword ptr [rcx + rcx*4 - 0x22]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000414426: cmp bl, byte ptr [rip + 0x63488a74]; std; mov eax, 3; syscall; 
0x00000000004438e2: cmp bl, byte ptr [rip + 0x66c30000]; nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x0000000000469d29: cmp bl, ch; ret 0x8148; 
0x000000000042dbe3: cmp bl, dh; ret; 
0x000000000041138b: cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x000000000041345e: cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000049cc28: cmp byte ptr [r9 + 0xdf], 0; je 0x9cbe2; add rsp, 0x18; ret; 
0x0000000000401703: cmp byte ptr [rax + 0x39], cl; ret 0x2773; 
0x0000000000410a57: cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000427cef: cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004271c7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x0000000000481166: cmp byte ptr [rax + 3], cl; or byte ptr [rdi + r8 + 0x48], sil; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000041ecc4: cmp byte ptr [rax + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000044adf1: cmp byte ptr [rax - 0x73], cl; push rsp; and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000480d45: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd3: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000440ce7: cmp byte ptr [rax - 0x75], cl; jl 0x40d10; or byte ptr [rax + 0x29], cl; ret; 
0x00000000004415b4: cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x0000000000411c29: cmp byte ptr [rax - 0x77], cl; out dx, eax; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410e22: cmp byte ptr [rax - 0x77], cl; out dx, eax; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000041138c: cmp byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000452f4f: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x0000000000465d37: cmp byte ptr [rax - 0x7d], cl; ret; 
0x00000000004271b6: cmp byte ptr [rax], ah; ret; 
0x000000000041345f: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 3], bh; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000416103: cmp byte ptr [rax], al; je 0x16110; ret; 
0x000000000049cbe5: cmp byte ptr [rax], al; je 0x9cc53; add rsp, 0x18; ret; 
0x0000000000410cfa: cmp byte ptr [rax], al; jne 0x10cd0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000422480: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x00000000004271a6: cmp byte ptr [rax], dl; ret; 
0x00000000004271a5: cmp byte ptr [rax], r10b; ret; 
0x00000000004271b5: cmp byte ptr [rax], r12b; ret; 
0x000000000042247f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004c386c: cmp byte ptr [rbx + 0x1b70307], al; ret; 
0x00000000004c7c25: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000004c7c5d: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c7bed: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x00000000004c3464: cmp byte ptr [rbx + 0x400e4a07], al; add esi, dword ptr [rsi + 0x44380e04]; ret; 
0x000000000043fdb2: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c040c: cmp byte ptr [rbx + 0x600e4a07], al; add esi, dword ptr [rbx + 0x47380e01]; ret; 
0x00000000004c7c4b: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000004c7bdb: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000004c7c13: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000004bac87: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c7388: cmp byte ptr [rbx], ah; sti; jmp qword ptr [rdi]; 
0x000000000046d037: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000049cc29: cmp byte ptr [rcx + 0xdf], 0; je 0x9cbe2; add rsp, 0x18; ret; 
0x000000000047f736: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x0000000000416ce4: cmp byte ptr [rcx], 0xa; je 0x16cf8; cmp rsi, rcx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x0000000000430c40: cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430c29: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000430c12: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f6ce: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043012d: cmp byte ptr [rdi], dl; ret; 
0x00000000004c4028: cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x000000000047ca10: cmp byte ptr [rip + 0x251811], 0; jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000047e355: cmp byte ptr [rsi + 0x4b], dh; add al, ch; adc bh, byte ptr [rax]; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000473b8c: cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x000000000044acc3: cmp byte ptr [rsi], al; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000481038: cmp byte ptr [rsp + 0x10], 0; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000481180: cmp byte ptr [rsp + 0xf], 0; je 0x81174; mov rdi, qword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x0000000000480f60: cmp byte ptr [rsp + 0xf], 0; jne 0x80f70; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004810f0: cmp byte ptr [rsp + 0xf], 0; jne 0x81100; xor eax, eax; add rsp, 0x48; ret; 
0x000000000043111a: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9ac1: cmp ch, bh; call qword ptr [rdi]; 
0x00000000004bfb68: cmp ch, dh; hlt; call qword ptr [rdx]; 
0x000000000047adf7: cmp cl, 0xa; je 0x7b3a1; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004a4ac9: cmp cl, 0xff; add byte ptr [rcx - 0x7eef0007], al; stc; jmp qword ptr [rax]; 
0x00000000004a4aa9: cmp cl, 0xff; and byte ptr [rax - 0x7fcf0007], al; stc; inc dword ptr [rax - 0x80]; stc; jmp qword ptr [rax - 0x80]; 
0x00000000004644be: cmp cl, 0xff; jmp qword ptr [rbp]; 
0x00000000004a4abd: cmp cl, 0xff; movabs al, byte ptr [0xe0fff980c0fff980]; cmp cl, 0xff; add byte ptr [rcx - 0x7eef0007], al; stc; jmp qword ptr [rax]; 
0x00000000004a4ac1: cmp cl, 0xff; rol byte ptr [rax - 0x7f1f0007], 0xf9; inc dword ptr [rax]; cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x00000000004a4aad: cmp cl, 0xff; xor byte ptr [rax - 0x7fbf0007], al; stc; jmp qword ptr [rax - 0x80]; 
0x000000000043e904: cmp cl, byte ptr [rax + rdx + 2]; jne 0x3e920; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9b4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x3e9d0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x000000000041b940: cmp cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000464a1b: cmp cl, byte ptr [rax - 0x77]; ret 0x8d4a; 
0x000000000048c180: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000456157: cmp cl, byte ptr [rbx]; jmp rax; 
0x0000000000481ee6: cmp cl, ch; ret; 
0x000000000049abe8: cmp dh, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000047dffe: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000473b5e: cmp dh, byte ptr [rbp + 4]; test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x000000000049ab35: cmp dil, 0x10; je 0x9ab28; call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049ab11: cmp dil, 0x30; jne 0x9ab3b; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d615: cmp dil, 0x30; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d675: cmp dil, 0x30; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d640: cmp dil, 0x50; jne 0x9d633; xor eax, eax; add rsp, 8; ret; 
0x000000000049d6a0: cmp dil, 0x50; jne 0x9d693; xor eax, eax; add rsp, 8; ret; 
0x000000000049d5ab: cmp dil, 4; jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x000000000043ef06: cmp dl, 0x20; jb 0x3ef15; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000473b5c: cmp dl, 0x3a; jne 0x73b65; test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x000000000043eef3: cmp dl, 0x40; jb 0x3ef06; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004369cb: cmp dl, 1; jb 0x369d4; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000043edd0: cmp dl, 1; jb 0x3edd7; mov byte ptr [rdi], cl; ret; 
0x000000000043ef4a: cmp dl, 1; jb 0x3ef51; mov byte ptr [rdi], cl; ret; 
0x000000000043edc0: cmp dl, 2; jb 0x3edd0; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043ef3d: cmp dl, 2; jb 0x3ef4a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043edb4: cmp dl, 4; jb 0x3edc0; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043ef32: cmp dl, 4; jb 0x3ef3d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043eda0: cmp dl, 8; jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043ef1f: cmp dl, 8; jb 0x3ef2e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004c7118: cmp dl, bh; cli; jmp rdi; 
0x0000000000481550: cmp dl, byte ptr [rdi - 0x5440ffb5]; xchg ecx, eax; add r8b, bpl; adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000416e5f: cmp dword ptr [rax + 0x20], ecx; jbe 0x16e81; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417112: cmp dword ptr [rax + 0x20], ecx; jbe 0x17134; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d008: cmp dword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x00000000004017da: cmp dword ptr [rax - 0x39], ecx; or byte ptr [rax], r14b; fisubr word ptr [rax + rax + 0x48]; mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000415248: cmp dword ptr [rax], 0x1d; je 0x151e9; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040fd63: cmp dword ptr [rax], ebp; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x0000000000442979: cmp dword ptr [rbp + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442939: cmp dword ptr [rbp + 0x10], 0; jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442959: cmp dword ptr [rbp + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044210c: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423bb: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e8e: cmp dword ptr [rbp + 8], 0; mov edx, 2; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044105e: cmp dword ptr [rbp - 0x3cffffbb], 0x66; nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000410cf8: cmp dword ptr [rbx + 0x38], 0; jne 0x10cd0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000049c470: cmp dword ptr [rbx + 8], 5; ja 0x9c4ce; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000043576c: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000421153: cmp dword ptr [rbx], 0x444c4541; je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000456106: cmp dword ptr [rbx], ecx; jmp rax; 
0x000000000049cbe3: cmp dword ptr [rcx + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x0000000000451c0e: cmp dword ptr [rcx - 0x7d], ecx; ret 0xf301; 
0x000000000046d2b4: cmp dword ptr [rcx], 0xa; je 0x6d2c8; cmp rsi, rcx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x0000000000442bf9: cmp dword ptr [rdi + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c59: cmp dword ptr [rdi + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c99: cmp dword ptr [rdi + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c79: cmp dword ptr [rdi + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c39: cmp dword ptr [rdi + 0x10], 0; jne 0x4215f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb9: cmp dword ptr [rdi + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad9: cmp dword ptr [rdi + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab9: cmp dword ptr [rdi + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b79: cmp dword ptr [rdi + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b59: cmp dword ptr [rdi + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b39: cmp dword ptr [rdi + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af9: cmp dword ptr [rdi + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000418105: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000416101: cmp dword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x0000000000447d7f: cmp dword ptr [rdi + 0x4a], esp; add byte ptr [rcx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000442478: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004423ff: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281b: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426f6: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044267d: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044259d: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422ee: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442275: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed2: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442150: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4b: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442070: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ff7: cmp dword ptr [rdi + 8], 0; mov edx, 4; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000443b30: cmp dword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x000000000046d206: cmp dword ptr [rdx - 4], esi; je 0x6d228; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000004438e1: cmp dword ptr [rdx], 0x1d; add byte ptr [rax], al; ret; 
0x0000000000414425: cmp dword ptr [rdx], 0x1d; je 0x143b4; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000416ce5: cmp dword ptr [rdx], ecx; je 0x16cf8; cmp rsi, rcx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x000000000046d2b5: cmp dword ptr [rdx], ecx; je 0x6d2c8; cmp rsi, rcx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x00000000004737e0: cmp dword ptr [rip + 0x25aa75], 0; jne 0x737fd; mov eax, 0x14; syscall; 
0x0000000000473650: cmp dword ptr [rip + 0x25ac05], 0; jne 0x7366d; mov eax, 3; syscall; 
0x0000000000440560: cmp dword ptr [rip + 0x28dcf5], 0; jne 0x4057d; mov eax, 1; syscall; 
0x0000000000440500: cmp dword ptr [rip + 0x28dd55], 0; jne 0x4051d; mov eax, 0; syscall; 
0x00000000004404a0: cmp dword ptr [rip + 0x28ddb5], 0; jne 0x404bd; mov eax, 2; syscall; 
0x00000000004315d3: cmp dword ptr [rip + 0x63490007], ebp; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000400da0: cmp dword ptr [rip - 0xbc7], 0x25; mov rbp, qword ptr [rip - 0xbd6]; mov ebx, 0x4001d8; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x00000000004429b9: cmp dword ptr [rsi + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a19: cmp dword ptr [rsi + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f9: cmp dword ptr [rsi + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a99: cmp dword ptr [rsi + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a59: cmp dword ptr [rsi + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a39: cmp dword ptr [rsi + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000441eb2: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442255: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442130: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fd7: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442782: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044265d: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423df: cmp dword ptr [rsi + 8], 0; mov edx, 3; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000049d404: cmp dword ptr [rsi + 8], ecx; cmova eax, edx; ret; 
0x0000000000442901: cmp dword ptr [rsp + 0x10], 0; jne 0x41e78; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004406cb: cmp dword ptr [rsp + 0x10], 2; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x0000000000480ebe: cmp dword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000440623: cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000415247: cmp dword ptr fs:[rax], 0x1d; je 0x151e9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000414424: cmp dword ptr fs:[rdx], 0x1d; je 0x143b4; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000004223ff: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047cfcf: cmp eax, -1; cmove rax, rdx; ret; 
0x0000000000415e20: cmp eax, -1; je 0x15dd5; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415f90: cmp eax, -1; je 0x15f45; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000416134: cmp eax, -1; je 0x16140; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401535: cmp eax, -1; je 0x1623; add rsp, 0x98; ret; 
0x0000000000416c57: cmp eax, -1; je 0x16c5f; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d21a: cmp eax, -1; je 0x6d222; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d25e: cmp eax, -1; je 0x6d266; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000411d09: cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x0000000000416caf: cmp eax, -1; jne 0x16c9a; pop rbx; ret; 
0x0000000000443b40: cmp eax, -1; jne 0x43b38; xor eax, eax; leave; ret; 
0x0000000000403d08: cmp eax, -1; mov r15, rax; je 0x3ec5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000480a0c: cmp eax, -3; jbe 0x80a18; ret; 
0x00000000004a1349: cmp eax, 0x22c542; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000048c709: cmp eax, 0x2412b6; call rax; 
0x000000000048c5cc: cmp eax, 0x2413f3; jmp rax; 
0x000000000047ca11: cmp eax, 0x251811; add byte ptr [rbp + 8], dh; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x00000000004737e1: cmp eax, 0x25aa75; add byte ptr [rbp + 0x14], dh; mov eax, 0x14; syscall; 
0x0000000000473651: cmp eax, 0x25ac05; add byte ptr [rbp + 0x14], dh; mov eax, 3; syscall; 
0x0000000000440561: cmp eax, 0x28dcf5; add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x0000000000440501: cmp eax, 0x28dd55; add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x00000000004404a1: cmp eax, 0x28ddb5; add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x00000000004429df: cmp eax, 0x3beffff; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x000000000040ed9b: cmp eax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004bafc1: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000004bafbe: cmp eax, 0x733db8a1; xlatb; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x000000000049d612: cmp eax, 0x80401376; push qword ptr [rax]; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d672: cmp eax, 0x80401376; push qword ptr [rax]; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000046c775: cmp eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000043fb78: cmp eax, 0xfffff000; ja 0x3fba0; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043fd09: cmp eax, 0xfffff000; ja 0x3fe08; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440698: cmp eax, 0xfffff000; ja 0x406e0; add rsp, 0x60; pop rbx; ret; 
0x0000000000473208: cmp eax, 0xfffff000; ja 0x73218; pop rbx; ret; 
0x00000000004403b8: cmp eax, 0xfffff001; jae 0x45620; ret; 
0x000000000043f656: cmp eax, 1; je 0x3f670; cmp eax, 2; je 0x3f668; xor eax, eax; ret; 
0x000000000046c5ea: cmp eax, 1; je 0x6c700; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c7aa: cmp eax, 1; je 0x6c8e0; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000400c5a: cmp eax, 1; jne 0xc91; mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000043f65b: cmp eax, 2; je 0x3f668; xor eax, eax; ret; 
0x00000000004454ea: cmp eax, 3; jne 0x45498; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x0000000000443a2a: cmp eax, 4; je 0x43a30; ret; 
0x0000000000400bb4: cmp eax, 5; ja 0xc9e; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x00000000004c2ae5: cmp eax, dword ptr [rax]; add al, ch; loope 0xc2ae1; jmp qword ptr [rdi + 0x2b]; 
0x0000000000421154: cmp eax, dword ptr [rcx + 0x45]; je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000414135: cmp eax, dword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x000000000049a3db: cmp eax, dword ptr [rip + 0x23374f]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004423a1: cmp eax, dword ptr [rip - 0x9cf0000]; mov rdi, r12; call rbx; 
0x000000000047d018: cmp eax, dword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x0000000000417a09: cmp eax, ecx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x0000000000416c46: cmp eax, ecx; je 0x16c68; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000043e5e2: cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x000000000043e74a: cmp eax, ecx; jne 0x3e805; xor eax, eax; ret; 
0x000000000043e803: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000047e213: cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000443960: cmp eax, edx; jne 0x4396c; nop; mov eax, 0xca; syscall; 
0x0000000000480be4: cmp eax, esi; je 0x80bf0; ret; 
0x000000000046b7af: cmp ebp, 0xc48148ff; add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004c9ba1: cmp ebp, edi; jmp qword ptr [rdi]; 
0x00000000004c9b59: cmp ebp, edi; jmp qword ptr [rdx]; 
0x00000000004439c6: cmp ebx, 0xa; je 0x439cc; ret; 
0x000000000043fcbe: cmp ebx, 3; mov edi, 0x4a5060; jne 0x3fd58; xor esi, esi; mov eax, 2; syscall; 
0x000000000041db6c: cmp ebx, ecx; jb 0x1db48; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000048bb11: cmp ecx, 0x1f; mov rdx, rcx; jg 0x8bb20; call 0x8b470; leave; ret; 
0x00000000004a4acd: cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x00000000004a4ad1: cmp ecx, 0xf98120ff; inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ad5: cmp ecx, 0xf98140ff; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ad9: cmp ecx, 0xf98160ff; inc dword ptr [rax - 0x5f00067f]; cmp ecx, 0xf981c0ff; jmp rax; 
0x00000000004a4ae5: cmp ecx, 0xf981c0ff; jmp rax; 
0x00000000004a4aed: cmp ecx, 0xf98200ff; jmp qword ptr [rax]; 
0x000000000047a0c1: cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004a0d2c: cmp ecx, dword ptr [rax - 0x75]; imul ebx, dword ptr [rax], -0x18; retf 0xf7e3; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7e3; 
0x000000000047601e: cmp ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsp + riz*2 + 0x48], 0x83; ret; 
0x0000000000448f09: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000458247: cmp ecx, dword ptr [rbx]; jmp rax; 
0x000000000046fc30: cmp ecx, dword ptr [rdi]; imul esi, esi, 0x3c; add eax, esi; ret; 
0x0000000000445401: cmp ecx, dword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x000000000046d55e: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000480179: cmp ecx, eax; je 0x800f0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000430855: cmp ecx, eax; jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000004302fb: cmp ecx, eax; jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043024f: cmp ecx, eax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000430346: cmp ecx, eax; jne 0x30c8f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000430277: cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x0000000000430548: cmp ecx, eax; jne 0x30c9a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000048a1d8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000480178: cmp ecx, r8d; je 0x800f0; mov eax, r8d; sub eax, ecx; ret; 
0x000000000049e71c: cmp edi, eax; je 0x9e828; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000411296: cmp edx, 0x280; jne 0x10f90; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412ede: cmp edx, 0x280; jne 0x12e60; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004437b7: cmp edx, 1; jne 0x437b0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000443827: cmp edx, 1; jne 0x43820; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000049ccf0: cmp edx, 8; jne 0x9cce3; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000047c908: cmp edx, eax; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000433b0c: cmp edx, ecx; jae 0x33b20; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044394a: cmp edx, edi; setae al; ret; 
0x00000000004434e0: cmp edx, esi; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x0000000000417a49: cmp esi, -1; setne al; neg eax; ret; 
0x000000000046fc2e: cmp esi, 0x3b; cmova esi, edx; imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000048bdbb: cmp esi, 0x7fff; je 0x8bdc9; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044e6d5: cmp esi, 3; je 0x4e6e0; pop rbx; ret; 
0x0000000000440685: cmp esi, 9; je 0x406a8; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004bb278: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004bc464: cmp esi, ebp; xlatb; ret 0x4e27; 
0x000000000046d2ba: cmp esi, ecx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x0000000000416cea: cmp esi, ecx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x00000000004bf3e1: cmp esi, esp; call qword ptr [rbp + 9]; 
0x00000000004506f3: cmp esp, eax; jb 0x50729; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000442900: cmp qword ptr [r12 + 0x10], 0; jne 0x41e78; mov esi, 3; mov rdi, r12; call rbx; 
0x0000000000442978: cmp qword ptr [r13 + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442938: cmp qword ptr [r13 + 0x10], 0; jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442958: cmp qword ptr [r13 + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000044210b: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423ba: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e8d: cmp qword ptr [r13 + 8], 0; mov edx, 2; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004429b8: cmp qword ptr [r14 + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a18: cmp qword ptr [r14 + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f8: cmp qword ptr [r14 + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a98: cmp qword ptr [r14 + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a58: cmp qword ptr [r14 + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a38: cmp qword ptr [r14 + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000441eb1: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442254: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044212f: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fd6: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442781: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044265c: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423de: cmp qword ptr [r14 + 8], 0; mov edx, 3; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442bf8: cmp qword ptr [r15 + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c58: cmp qword ptr [r15 + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c98: cmp qword ptr [r15 + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c78: cmp qword ptr [r15 + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c38: cmp qword ptr [r15 + 0x10], 0; jne 0x4215f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb8: cmp qword ptr [r15 + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad8: cmp qword ptr [r15 + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab8: cmp qword ptr [r15 + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b78: cmp qword ptr [r15 + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b58: cmp qword ptr [r15 + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b38: cmp qword ptr [r15 + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af8: cmp qword ptr [r15 + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442477: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004423fe: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281a: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426f5: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044267c: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044259c: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422ed: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442274: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed1: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044214f: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4a: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044206f: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ff6: cmp qword ptr [r15 + 8], 0; mov edx, 4; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000049cbe2: cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x0000000000416e5e: cmp qword ptr [rax + 0x20], rcx; jbe 0x16e81; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417111: cmp qword ptr [rax + 0x20], rcx; jbe 0x17134; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d007: cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x0000000000410cf7: cmp qword ptr [rbx + 0x38], 0; jne 0x10cd0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000421152: cmp qword ptr [rbx], 0x444c4541; je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000418104: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000416100: cmp qword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x0000000000443b2f: cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x000000000049d403: cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x0000000000480ebd: cmp qword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000473b5b: cmp r10b, 0x3a; jne 0x73b65; test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x000000000042dbe2: cmp r11b, r14b; ret; 
0x00000000004439c5: cmp r11d, 0xa; je 0x439cc; ret; 
0x00000000004506f2: cmp r12, rax; jb 0x50729; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000049e71b: cmp r15, rax; je 0x9e828; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000047d017: cmp r8, qword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x00000000004454e9: cmp r8d, 3; jne 0x45498; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x000000000043fb77: cmp rax, -0x1000; ja 0x3fba0; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043fd08: cmp rax, -0x1000; ja 0x3fe08; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440697: cmp rax, -0x1000; ja 0x406e0; add rsp, 0x60; pop rbx; ret; 
0x0000000000473207: cmp rax, -0x1000; ja 0x73218; pop rbx; ret; 
0x00000000004403b7: cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004223fe: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047cfce: cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000403d07: cmp rax, -1; mov r15, rax; je 0x3ec5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000480a0b: cmp rax, -3; jbe 0x80a18; ret; 
0x000000000040ed9a: cmp rax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000414134: cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x000000000049a3da: cmp rax, qword ptr [rip + 0x23374f]; jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000417a08: cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x0000000000480be3: cmp rax, rsi; je 0x80bf0; ret; 
0x000000000041db6b: cmp rbx, rcx; jb 0x1db48; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000048bb10: cmp rcx, 0x1f; mov rdx, rcx; jg 0x8bb20; call 0x8b470; leave; ret; 
0x0000000000445400: cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x000000000046d55d: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000430854: cmp rcx, rax; jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000004302fa: cmp rcx, rax; jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043024e: cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x000000000048a1d7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000004437b6: cmp rdx, 1; jne 0x437b0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000443826: cmp rdx, 1; jne 0x43820; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004434df: cmp rdx, r14; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000047c907: cmp rdx, r8; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000433b0b: cmp rdx, rcx; jae 0x33b20; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000443949: cmp rdx, rdi; setae al; ret; 
0x000000000046d2b9: cmp rsi, rcx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x0000000000416ce9: cmp rsi, rcx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x000000000049abe7: cmp sil, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000491597: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491897: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492797: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000426c65: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000492497: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x00000000004306d9: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x00000000004a41a5: cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004005da: cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004478d6: cmpsb byte ptr [rsi], byte ptr [rdi]; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000416c1d: cmpsb byte ptr [rsi], byte ptr [rdi]; nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000042b206: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492197: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491e97: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000409d96: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xffff; 
0x000000000043c8e5: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rsi], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446600: cmpsd dword ptr [rsi], dword ptr [rdi]; add eax, dword ptr [rax]; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000431e65: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a41a9: cmpsd dword ptr [rsi], dword ptr [rdi]; clc; push rax; test al, 0xf8; call qword ptr [rax]; 
0x000000000047d1c3: cmpsd dword ptr [rsi], dword ptr [rdi]; cli; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x0000000000499eb0: cmpsd dword ptr [rsi], dword ptr [rdi]; nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004bcfb5: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000410da1: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000041357f: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041402f: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004bf518: cwde; add dh, bh; call rdi; 
0x000000000049c8ad: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000049bef4: cwde; add rax, r8; jmp rax; 
0x00000000004c3ab8: cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004c6681: cwde; cli; jmp qword ptr [rax + 1]; 
0x00000000004c1448: cwde; cmc; call qword ptr [rsi]; 
0x000000000047c9fd: cwde; jb 0x7ca4b; add al, ch; push 0x51; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c8b28: cwde; jp 0xc8b1e; jmp qword ptr [rsi]; 
0x00000000004c1ba8: cwde; lodsb al, byte ptr [rsi]; cmc; call rsp; 
0x00000000004435d4: cwde; mov eax, 3; syscall; 
0x00000000004560f9: cwde; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x000000000045614a: cwde; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x000000000045823a: cwde; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d6d: cwde; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x0000000000415e5c: cwde; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004c1668: cwde; push -0xb; call qword ptr [rdx]; 
0x00000000004c7788: cwde; push rcx; sti; jmp rsi; 
0x000000000043a501: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x000000000043a502: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x000000000048b776: dec byte ptr [rax + 0x29]; ret 0x8d49; 
0x0000000000436f42: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004607b8: dec byte ptr [rax - 0x3f]; clc; add cl, byte ptr [rcx + rcx*4 - 9]; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045dd8c: dec byte ptr [rax - 0x75]; mov ebp, 0xfffffb60; call rax; 
0x000000000046ddad: dec byte ptr [rax - 0x77]; ret; 
0x0000000000440686: dec byte ptr [rcx]; je 0x406a8; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000049838d: dec dword ptr [r13 + r9*4 + 0x7c]; ret; 
0x0000000000465c13: dec dword ptr [r8 + 0x39]; ret; 
0x0000000000480a09: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x80a18; ret; 
0x000000000041c0cc: dec dword ptr [r9 - 0x7b]; ret 0x840f; 
0x000000000043a642: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x000000000047c501: dec dword ptr [rax + 0x29]; ret 0x48e9; 
0x000000000045f3f6: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x000000000041a22d: dec dword ptr [rax + 0x29]; ret 0x8d48; 
0x000000000041e8e4: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x00000000004116a9: dec dword ptr [rax + 0x29]; ret; 
0x000000000046e0e7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046b439: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff70], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046b588: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x00000000004638e4: dec dword ptr [rax + 0x39]; ret 0x840f; 
0x00000000004686dd: dec dword ptr [rax + 0x39]; ret 0x940f; 
0x00000000004791f5: dec dword ptr [rax + 0x39]; ret 0xed75; 
0x00000000004198e5: dec dword ptr [rax + 0x39]; ret; 
0x000000000047c162: dec dword ptr [rax + 0x63]; mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x0000000000463697: dec dword ptr [rax + 0x63]; ret; 
0x00000000004731d3: dec dword ptr [rax + 0x63]; std; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000472f4e: dec dword ptr [rax + 0x63]; sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004731fc: dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x00000000004403e9: dec dword ptr [rax + 0xf]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000046aceb: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046b43f: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000046e2e9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x00000000004978f7: dec dword ptr [rax + 1]; ret 0x3948; 
0x000000000041170c: dec dword ptr [rax + 1]; ret; 
0x00000000004a430f: dec dword ptr [rax - 0x1c]; clc; call qword ptr [rax]; 
0x00000000004a1352: dec dword ptr [rax - 0x39]; add eax, 0x22c532; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004a12a9: dec dword ptr [rax - 0x39]; add eax, 0x22c583; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004a09a4: dec dword ptr [rax - 0x39]; add eax, 0x22cd60; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000045d67c: dec dword ptr [rax - 0x39]; ret 0xffb0; 
0x0000000000412897: dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x000000000046384e: dec dword ptr [rax - 0x39]; ret 0xfffe; 
0x000000000043fe1c: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000045e346: dec dword ptr [rax - 0x39]; ret; 
0x000000000049b931: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x000000000043f5aa: dec dword ptr [rax - 0x73]; add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000041601f: dec dword ptr [rax - 0x73]; add dword ptr [rax - 0x77], ecx; or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x000000000047205e: dec dword ptr [rax - 0x73]; dec dword ptr [rax + 0x39]; ret; 
0x0000000000416c17: dec dword ptr [rax - 0x73]; push -0x6f995915; mov rax, 0xffffffffffffffff; ret; 
0x000000000047d1c5: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047afa0: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000044ee2a: dec dword ptr [rax - 0x75]; add al, 0xfd; retf 0x6c; ret; 
0x00000000004415ac: dec dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000411388: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x0000000000464a18: dec dword ptr [rax - 0x75]; cmp cl, byte ptr [rax - 0x77]; ret 0x8d4a; 
0x000000000044133d: dec dword ptr [rax - 0x75]; jge 0x41342; call rbx; 
0x00000000004415f0: dec dword ptr [rax - 0x75]; jge 0x415f5; call rbx; 
0x0000000000443188: dec dword ptr [rax - 0x75]; jge 0x4318d; call rbx; 
0x00000000004508c6: dec dword ptr [rax - 0x75]; pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041cbaf: dec dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x7404; 
0x0000000000415111: dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x000000000049a187: dec dword ptr [rax - 0x75]; push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048c96c: dec dword ptr [rax - 0x75]; push rsp; and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000041f4ff: dec dword ptr [rax - 0x75]; push rsp; and al, 0x68; call rax; 
0x0000000000413f8c: dec dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049ab3f: dec dword ptr [rax - 0x75]; xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x0000000000410a47: dec dword ptr [rax - 0x75]; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x0000000000480e6c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000473805: dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x0000000000473675: dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x0000000000466a52: dec dword ptr [rax - 0x77]; add cl, byte ptr [rax + 1]; ret; 
0x000000000049a627: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000041c73b: dec dword ptr [rax - 0x77]; and al, 0x10; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000047d20d: dec dword ptr [rax - 0x77]; call 0x5c492f70; ret; 
0x0000000000427a68: dec dword ptr [rax - 0x77]; clc; ret; 
0x0000000000413da3: dec dword ptr [rax - 0x77]; fisttp word ptr [rcx + rcx*4 - 0x1b]; call qword ptr [rax + 0x18]; 
0x00000000004a0d35: dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7e3; 
0x000000000045f895: dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xfbf4; 
0x000000000046cfcb: dec dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x18]; 
0x00000000004112a1: dec dword ptr [rax - 0x77]; out dx, eax; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000047378e: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x0000000000466a9f: dec dword ptr [rax - 0x77]; ret 0x348; 
0x000000000041eea1: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000450aa2: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000045f3ba: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000046ec26: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000466329: dec dword ptr [rax - 0x77]; ret 0x89e9; 
0x0000000000455fe7: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000476860: dec dword ptr [rax - 0x77]; ret 0x8be9; 
0x0000000000460b86: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000046535d: dec dword ptr [rax - 0x77]; ret 0xc6e9; 
0x000000000042237e: dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x0000000000473d53: dec dword ptr [rax - 0x77]; ret 0xf0eb; 
0x0000000000402f38: dec dword ptr [rax - 0x77]; ret 0xf4e9; 
0x0000000000401b0c: dec dword ptr [rax - 0x77]; ret; 
0x0000000000497535: dec dword ptr [rax - 0x77]; retf 0x1b8; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000480dd1: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000049f54e: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; pop rbx; ret; 
0x000000000041eefa: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000473944: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046a598: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x00000000004478d9: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; test dword ptr [rdx], 0x83480000; ret; 
0x000000000048c75d: dec dword ptr [rax - 0x7b]; sal byte ptr [rdi + rax + 0x48], 0xc7; add al, ah; retf 0x6c; add rsp, 8; ret; 
0x000000000048c98e: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000046884b: dec dword ptr [rax - 0x7d]; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x0000000000480a0a: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x80a18; ret; 
0x0000000000454a61: dec dword ptr [rax - 0x7d]; jge 0x54a96; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000041a1df: dec dword ptr [rax - 0x7d]; ret 0x4007; 
0x0000000000449e32: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004795ff: dec dword ptr [rax - 0x7d]; ret 0x4808; 
0x00000000004795ed: dec dword ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000457dc4: dec dword ptr [rax - 0x7d]; ret 0x4820; 
0x0000000000472b66: dec dword ptr [rax - 0x7d]; ret 0x4909; 
0x000000000047968b: dec dword ptr [rax - 0x7d]; ret 0x8908; 
0x0000000000468242: dec dword ptr [rax - 0x7d]; ret 0xb908; 
0x0000000000453ea6: dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x00000000004044fc: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000400590: dec dword ptr [rax - 0x7d]; rol dword ptr [rbx + rbp*8], 0xcc; mov qword ptr [rdi], rcx; ret; 
0x0000000000421151: dec dword ptr [rax - 0x7f]; cmp eax, dword ptr [rcx + 0x45]; je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000435770: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000004753b0: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x0000000000412af3: dec dword ptr [rbp + rcx*4 + 0x1c]; add ecx, dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret; 
0x000000000049838e: dec dword ptr [rbp + rcx*4 + 0x7c]; ret; 
0x0000000000483f1b: dec dword ptr [rbp + rcx*4 - 0x54]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049bf69: dec dword ptr [rbp - 0x75]; adc cl, byte ptr [rcx + 1]; ret 0x3ee9; 
0x00000000004417fe: dec dword ptr [rbp - 0x75]; push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x0000000000403f0f: dec dword ptr [rbp - 0x7b]; sal byte ptr [rbp - 0x30], 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x0000000000471397: dec dword ptr [rbx + 0x25d08205]; add byte ptr [rbp - 0x16738a40], al; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000041c4cf: dec dword ptr [rbx + 0x2af32e15]; add dh, dh; ret 0xf02; 
0x0000000000480eec: dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000004670e6: dec dword ptr [rcx + 0x29]; fmul dword ptr [rax - 0x77]; ret 0x348; 
0x00000000004765a1: dec dword ptr [rcx + 0x29]; ret 0x8d49; 
0x00000000004562a4: dec dword ptr [rcx + 0x29]; ret; 
0x00000000004753e2: dec dword ptr [rcx + 0x39]; ret 0x830f; 
0x0000000000455e31: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000047ad2a: dec dword ptr [rcx + 0x39]; ret 0x870f; 
0x0000000000455eb3: dec dword ptr [rcx + 0x39]; ret; 
0x00000000004004c1: dec dword ptr [rcx + 0x39]; sal dword ptr [rdx + rdx*4 - 0x15], 0xbd; add rsp, 0x608; pop rbx; pop rbp; ret; 
0x000000000048c641: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000049df9c: dec dword ptr [rcx + 0x63]; add byte ptr [r8 + 1], r9b; ret; 
0x000000000045b5b7: dec dword ptr [rcx + 0x63]; or byte ptr [r9 - 0x48], r8b; clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x000000000045b49a: dec dword ptr [rcx + 0x63]; push rbp; or byte ptr [rcx - 0x48], al; clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x0000000000472036: dec dword ptr [rcx + 0x6b]; ret; 
0x00000000004328de: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000045f15c: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ec06: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000450728: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000049e925: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ee0a: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f776: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004571dc: dec dword ptr [rcx + rcx*4 - 0x22]; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004542a9: dec dword ptr [rcx + rcx*4 - 0x22]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455e87: dec dword ptr [rcx + rcx*4 - 0x26]; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000441efd: dec dword ptr [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx; 
0x000000000045dd89: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453b09: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, rbx; call rax; 
0x00000000004607b5: dec dword ptr [rcx + rcx*4 - 2]; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000460d1d: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000461493: dec dword ptr [rcx + rcx*4 - 9]; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046395f: dec dword ptr [rcx - 0x60f73]; dec dword ptr [rax + 0x39]; ret 0x840f; 
0x00000000004415fe: dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000441208: dec dword ptr [rcx - 0x75]; jge 0x4120d; call rbx; 
0x000000000044132f: dec dword ptr [rcx - 0x75]; jge 0x41334; call rbx; 
0x0000000000441472: dec dword ptr [rcx - 0x75]; jge 0x41477; call rbx; 
0x00000000004415e2: dec dword ptr [rcx - 0x75]; jge 0x415e7; call rbx; 
0x0000000000442e00: dec dword ptr [rcx - 0x75]; jge 0x42e05; call rbx; 
0x0000000000442f28: dec dword ptr [rcx - 0x75]; jge 0x42f2d; call rbx; 
0x000000000044306b: dec dword ptr [rcx - 0x75]; jge 0x43070; call rbx; 
0x000000000044316c: dec dword ptr [rcx - 0x75]; jge 0x43171; call rbx; 
0x0000000000496b9c: dec dword ptr [rcx - 0x77]; imul ecx; ret; 
0x00000000004472d8: dec dword ptr [rcx - 0x77]; ret 0x11e9; 
0x000000000044fb37: dec dword ptr [rcx - 0x77]; ret 0x87e9; 
0x00000000004570d3: dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000454aa3: dec dword ptr [rcx - 0x77]; ret; 
0x0000000000452fdb: dec dword ptr [rcx - 0x77]; ror byte ptr [rcx + 1], 0xd8; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x0000000000411847: dec dword ptr [rcx - 0x77]; sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000041c0cd: dec dword ptr [rcx - 0x7b]; ret 0x840f; 
0x000000000045a90f: dec dword ptr [rcx - 0xef43]; inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x0000000000440549: dec dword ptr [rdi]; adc eax, 0x50; add byte ptr [rax], al; ret; 
0x00000000004404b5: dec dword ptr [rdi]; and dword ptr [rcx + rdx*2], 0; ret; 
0x000000000044105c: dec dword ptr [rdi]; cmp dword ptr [rbp - 0x3cffffbb], 0x66; nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000004438df: dec dword ptr [rdi]; cmp dword ptr [rdx], 0x1d; add byte ptr [rax], al; ret; 
0x0000000000466dc6: dec dword ptr [rdi]; lahf; ret 0xb60f; 
0x000000000046967f: dec dword ptr [rdi]; lahf; ret 0xd729; 
0x00000000004625d8: dec dword ptr [rdi]; mov dh, 0x80; movabs al, byte ptr [0xffef5485c7004b49]; jmp qword ptr [rax]; 
0x000000000044103c: dec dword ptr [rdi]; sbb ebp, 0x45; add byte ptr [rax], al; ret; 
0x0000000000458cd5: dec dword ptr [rdi]; test ah, dh; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004117c1: dec dword ptr [rdi]; test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000403011: dec dword ptr [rdi]; test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000046b582: dec dword ptr [rdi]; test byte ptr [rdi + rdi*8 - 1], bl; dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000043e690: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047928c: dec dword ptr [rdi]; xchg ebp, eax; ret 0xdaf7; 
0x0000000000417a4b: dec dword ptr [rdi]; xchg ebp, eax; sal bh, 0xd8; ret; 
0x000000000048c08e: dec dword ptr [rdi]; xchg esp, eax; ret 0xdaf7; 
0x000000000045a906: dec dword ptr [rdi]; xchg esp, eax; ret 0xfa80; 
0x000000000046859f: dec dword ptr [rdi]; xchg esp, eax; ret; 
0x000000000043fd0d: dec dword ptr [rdi]; xchg esp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004404e9: dec dword ptr [rdi]; xor dword ptr [rax], 0x51; add byte ptr [rax], al; ret; 
0x00000000004a4583: dec dword ptr [rsi + rbx]; stc; call ptr [rbp + rbx + 0x1d2cfff9]; stc; call rdx; 
0x00000000004bead7: dec dword ptr [rsi + rdx*8]; std; jmp rsp; 
0x000000000048bafd: dec ecx; ret; 
0x00000000004be9e3: dec edx; ret; 
0x000000000043a641: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x000000000046ae76: dec qword ptr [r8 + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x4502; 
0x000000000046e0e6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000449e31: dec qword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004765a0: dec qword ptr [rcx + 0x29]; ret 0x8d49; 
0x000000000040dfc4: div byte ptr [rbp + 0x31]; mov eax, 0xba; syscall; 
0x000000000046ddf2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x00000000004c23a1: div ch; call qword ptr [rdx]; 
0x000000000049cd56: div dword ptr [rbp - 0x16]; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000048c33c: div ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b1c5: div ecx; add eax, r8d; ret; 
0x000000000043f611: div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004a3fc1: div edi; jmp qword ptr [rax - 8]; 
0x000000000046b956: div esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046b955: div r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048c33b: div rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004141e1: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000004530d8: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x000000000041381e: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x40]; 
0x0000000000414490: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x0000000000455fee: fadd dword ptr [rax]; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000499f99: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000004165c3: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000046bddc: fadd dword ptr [rax]; add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004112a8: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416ca3: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000413e43: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9b: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000046d20e: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046c98d: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000415da7: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x00000000004162a3: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000413805: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x00000000004164fa: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000410362: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046cf4c: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000414022: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416c4d: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000410d01: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000417553: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000415e0f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f7f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045ee14: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000454f5b: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b738: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356c: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453fbe: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413e9a: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000414539: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ec0d: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b96e: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410a4b: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000456633: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000413a8c: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fcf: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410cb7: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000458533: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be10: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041623e: fadd dword ptr [rax]; add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x0000000000413f90: fadd dword ptr [rax]; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004161a3: fadd dword ptr [rax]; add byte ptr [rax], al; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000040fcd9: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000004602df: fadd dword ptr [rax]; add byte ptr [rax], al; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000412d3a: fadd dword ptr [rax]; add byte ptr [rax], al; shr byte ptr [rdx + rcx*2], 0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x0000000000453b7d: fadd dword ptr [rax]; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000045de06: fadd dword ptr [rax]; add byte ptr [rax], al; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000415601: fadd dword ptr [rax]; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004100c3: fadd dword ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000443b36: fadd dword ptr [rax]; leave; ret; 
0x000000000041db6f: fadd dword ptr [rbp - 0x78]; or al, 0x18; mov rax, r8; pop rbx; ret; 
0x0000000000412c00: fadd dword ptr [rcx + rcx*4 + 0x65]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004454f2: fadd dword ptr [rcx]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000400daf: fadd dword ptr [rcx]; add byte ptr [rbp + 0x20], sil; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x00000000004ca1ee: fadd dword ptr [rcx]; add esi, ebp; add al, byte ptr [rax]; ret; 
0x0000000000412377: fadd dword ptr [rdi + rcx + 0x47]; ret; 
0x000000000048c1b1: fadd qword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x000000000043ce50: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x000000000047bf9f: fadd st(6); add al, byte ptr [rax]; add rsp, 0x140; pop rbx; ret; 
0x00000000004302d1: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046d37d: fbld tbyte ptr [rsi - 0x70]; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004a1344: fbstp tbyte ptr [rbp - 0x17]; mov rdi, qword ptr [rip + 0x22c542]; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000049f554: fbstp tbyte ptr [rbp - 0x17]; pop rbx; ret; 
0x00000000004302cf: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045033e: fcom dword ptr [rax - 0x3ece49f1]; ret 0x4809; 
0x00000000004c2868: fcom dword ptr [rax - 0xa]; call qword ptr [rdx + 4]; 
0x00000000004c2968: fcom dword ptr [rbp - 0xa]; call qword ptr [rax]; 
0x000000000047c930: fcom qword ptr [0xffffffffc0834800]; add dword ptr [rax - 0x77], ecx; add eax, 0x2514d1; add rsp, 8; ret; 
0x00000000004c879c: fcom qword ptr [rdi + 0x27700000]; cld; call qword ptr [rbp + 5]; 
0x00000000004715d7: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000004106aa: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000041078f: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000440ebf: fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000473776: fcomp dword ptr [rbx - 0x3d]; nop dword ptr [rax]; mov ecx, 0xc; mov eax, ecx; syscall; 
0x00000000004bcfd9: fcomp dword ptr [rdx + 0x21]; ret; 
0x00000000004bf080: fcomp dword ptr [rdx]; hlt; call qword ptr [rsi + 1]; 
0x00000000004c20e9: fcompi st(5); jmp qword ptr [rdi + 3]; 
0x000000000041ee9f: fcos; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000043079f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c239c: fdiv qword ptr [rbx]; add byte ptr [rax], al; add dh, dh; cmc; call qword ptr [rdx]; 
0x000000000043059f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a44c1: fdiv st(0), st(0); jmp rax; 
0x00000000004a4481: fdiv st(0), st(0); push qword ptr [rax - 0x23]; clc; inc eax; fdivp st(0); call qword ptr [rax]; 
0x0000000000441470: fdiv st(5), st(0); dec dword ptr [rcx - 0x75]; jge 0x41477; call rbx; 
0x00000000004a4489: fdivp st(0); call qword ptr [rax]; 
0x00000000004c4fc1: fdivp st(0); call qword ptr [rbx]; 
0x0000000000441206: fdivp st(5); dec dword ptr [rcx - 0x75]; jge 0x4120d; call rbx; 
0x0000000000473768: fdivr dword ptr [rbx - 1]; mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000454353: fdivr st(2); jmp qword ptr [rsi + 0x2e]; 
0x00000000004ba595: fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x0000000000487347: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000043e808: fdivr st(7); ret; 
0x000000000043cfb2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x00000000004406ca: fiadd dword ptr [rbx + 0x210247c]; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x0000000000440622: fiadd dword ptr [rbx + 0x2a8247c]; cmove eax, edx; ret; 
0x000000000046ca14: fiadd dword ptr [rbx + 0x394803e2]; ret 0xf48; 
0x00000000004037aa: fiadd word ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047beb7: fiadd word ptr [rcx + rcx*4 - 0x19]; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004a094e: fiadd word ptr [rsi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004419b9: ficomp word ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000004bce26: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x00000000004404c2: fidiv dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x000000000043069f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043039f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000445405: fidivr dword ptr [rax + 1]; ret; 
0x000000000043f22f: fild dword ptr [rcx + 0xf]; xchg esp, eax; ret 0xfe83; 
0x000000000041ed3d: fild dword ptr [rcx]; ret; 
0x00000000004a4189: fild dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rcx - 0x5dcf0008], ah; clc; call qword ptr [rax - 0x5d]; 
0x0000000000400ef9: fild word ptr [r8]; add byte ptr [rcx], bh; ret 0x860f; 
0x000000000049cc2b: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x0000000000400efa: fild word ptr [rax]; add byte ptr [rcx], bh; ret 0x860f; 
0x000000000042ffed: fild word ptr [rcx + 7]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004004a4: fild word ptr [rcx + rcx*4 - 0x30]; syscall; 
0x0000000000482de5: fimul dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000046ddd1: fimul dword ptr [rax + 0x39]; ror dword ptr [rax + 0xf], 1; shr eax, 1; ret 0xfbf5; 
0x000000000046dfa5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004136c5: fimul dword ptr [rax - 0x77]; out dx, al; mov eax, r13d; syscall; 
0x000000000046b974: fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x00000000004117b0: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004051f8: fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000427a92: fimul dword ptr [rax - 9]; ret 0xfff8; 
0x0000000000440f9c: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000410a51: fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x000000000049d978: fimul dword ptr [rdi]; mov dh, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000432961: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000483602: fimul word ptr [rax + 0x29]; ret; 
0x000000000041298e: fimul word ptr [rax - 0x77]; ret; 
0x000000000047bb5a: fimul word ptr [rax - 0x7d]; ret; 
0x000000000044e255: fimul word ptr [rcx + 0xf082444]; mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x000000000040eded: fimul word ptr [rcx + rax - 0x18]; mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000432962: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046c992: fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x18]; 
0x00000000004127df: fimul word ptr [rcx + rcx*4 - 0x19]; mov eax, r9d; syscall; 
0x00000000004003d4: fistp qword ptr [rax + 1]; syscall; 
0x0000000000417559: fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000411d19: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e15: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f85: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x00000000004186c8: fisttp dword ptr [rax + 0x21]; ret; 
0x0000000000470a52: fisttp dword ptr [rax + 0xf]; fucompp; ret 0xfffe; 
0x000000000049f551: fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; pop rbx; ret; 
0x000000000044e8f0: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047cb29: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000048acd1: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000049f6bd: fisttp dword ptr [rax - 0x77]; sbb eax, 0x22debb; jne 0x9f6a8; pop rbx; ret; 
0x000000000049bef0: fisttp dword ptr [rbx + 0x63]; add al, 0x98; add rax, r8; jmp rax; 
0x000000000043f536: fisttp dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000048aceb: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000441e99: fisttp dword ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000432b41: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041f52e: fisttp qword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000432b42: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432791: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043288d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327d9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041d940: fisttp word ptr [rax + 9]; ret 0x8948; 
0x0000000000499e61: fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000453b79: fisttp word ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x00000000004410e9: fisttp word ptr [rax - 0x77]; call 0x5c456e4c; mov esi, 2; jmp rax; 
0x000000000048ad6f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000453374: fisttp word ptr [rbp - 0x77]; imul eax; ret; 
0x000000000040edc5: fisttp word ptr [rcx + rax - 0x18]; mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000410fd8: fisttp word ptr [rcx + rbp - 0xe]; call qword ptr [rax + 0x70]; 
0x0000000000432792: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043288e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327da: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000413da6: fisttp word ptr [rcx + rcx*4 - 0x1b]; call qword ptr [rax + 0x18]; 
0x000000000042c53d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000450bc0: fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x00000000004306a1: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043cdef: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000049f6c2: fisub word ptr [rdx]; add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x00000000004303a1: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004017e0: fisubr word ptr [rax + rax + 0x48]; mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043ce31: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000433a8c: fisubr word ptr [rcx]; ret 0xfec5; 
0x0000000000497562: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000044103f: fld qword ptr [rbp]; add bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x00000000004bb281: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000048beda: fld xword ptr [rsp - 0x18]; ret; 
0x000000000048c379: fldcw word ptr [rax + rax + 0x48]; add esp, 8; ret; 
0x000000000048c745: fldcw word ptr [rax + rax - 0x17]; ret; 
0x00000000004bcfb1: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004508f9: fldcw word ptr [rsp - 2]; ret; 
0x00000000004270b9: fldenv [rsi + 0xf]; je 0x2710d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042dee7: fldenv [rsi + 0xf]; je 0x2df3b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000430721: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000426fb1: fldenv [rsi + 0xf]; xlatb; ret; 
0x000000000041607d: fldenv [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000400481: fldenv [rsp + rax*2 - 0x77]; or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x000000000048a14d: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048bb8d: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048bcd4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000498571: fmul dword ptr [rax + 0x39]; ret 0x4976; 
0x0000000000498896: fmul dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000419e6f: fmul dword ptr [rax + 0x39]; ret; 
0x00000000004594d1: fmul dword ptr [rax - 0x39]; ret 0xfff0; 
0x0000000000487837: fmul dword ptr [rax - 0x39]; ret; 
0x00000000004670e9: fmul dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000412471: fmul dword ptr [rax - 0x77]; ret; 
0x000000000047223c: fmul dword ptr [rax - 0x7d]; ret; 
0x00000000004be181: fmul dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000412afa: fmul dword ptr [rcx + 0x21]; ret; 
0x000000000049b19d: fmul dword ptr [rcx + 9]; ret 0x65e9; 
0x000000000049b435: fmul dword ptr [rcx + 9]; ret 0x85e9; 
0x000000000049cfaf: fmul dword ptr [rcx + rcx*4 - 0x17]; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c981: fmul dword ptr [rcx + rcx*4 - 0x1f]; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000432d31: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041003f: fmul qword ptr [rax - 0x73]; call 0x415d41a3; pop rbp; pop rbp; ret; 
0x00000000004be0e9: fmul qword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4bd7; 
0x0000000000483507: fmul qword ptr [rcx + 0x19]; ret 0x8545; 
0x0000000000482b8c: fmul qword ptr [rcx + 0xf]; mov esi, 0xbe0f2414; ret 0x8349; 
0x0000000000432d32: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000422859: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042830f: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000004bff9c: fmul qword ptr [rdi]; add byte ptr [rax], al; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004c7a9c: fmul qword ptr [rdx + 0x5e900000]; sti; jmp qword ptr [rdx]; 
0x0000000000487732: fmul st(0); ret; 
0x00000000004c8e70: fmul st(7); cld; call qword ptr [rdi + 9]; 
0x00000000004876b0: fmulp st(1); ret; 
0x000000000043049f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043071f: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004003c7: fnstsw word ptr [rdx + 0x1d]; mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000040df95: fpatan; ret; 
0x00000000004a4479: fprem; call rax; 
0x0000000000470684: frstor dword ptr [rip - 0x3b7cb800]; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004304a1: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004baf67: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000004bb2e0: fstp st(0); ret 0xde5d; 
0x000000000040199a: fstp st(0); scasb al, byte ptr [rdi]; insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046be09: fstp xword ptr [rsi - 0x15]; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041347f: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e018: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000443554: fsub dword ptr [rcx + rcx*4 + 2]; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000413cde: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000400424: fsub dword ptr [rcx + rcx*4 + 2]; xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x0000000000445622: fsub dword ptr [rcx + rcx*4 + 4]; and eax, 0xffffffd0; or rax, 0xffffffffffffffff; ret; 
0x000000000047cb24: fsub dword ptr [rip - 0x24ce0006]; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004307a1: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000439374: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004967d2: fsub qword ptr [rcx + rcx*4 + 4]; and eax, 0x2d0; ret; 
0x00000000004305a1: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004225ec: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000442d5b: fsubp st(0); mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x00000000004425e8: fsubp st(0); movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000004427c8: fsubp st(0); ret 0xffe8; 
0x00000000004426c8: fsubp st(0); ret 0xffe9; 
0x000000000045064d: fsubr dword ptr [rax + rax - 0x42]; add byte ptr [rax], al; or byte ptr [rax], al; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x00000000004c74a8: fsubr dword ptr [rax]; sti; call rdx; 
0x000000000040199b: fsubr dword ptr [rsi - 0x7cb7ff94]; ret; 
0x0000000000440563: fsubr qword ptr [rax]; add byte ptr [rax], al; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004c9b9c: fsubr qword ptr [rbx + 0x39f00000]; std; jmp qword ptr [rdi]; 
0x0000000000470e23: fsubrp st(3); add byte ptr [r8 - 0x77], cl; ret; 
0x0000000000498d15: fucomi st(1); ret; 
0x000000000048c1ae: fucompi st(0); fadd qword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x000000000041639f: fucompi st(0); mov ebx, 0x85ffffee; sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004a0d38: fucompi st(0); ret 0xf7e3; 
0x000000000045f898: fucompi st(0); ret 0xfbf4; 
0x000000000049f1c7: fucompi st(0); ret; 
0x00000000004014df: fucompi st(0); retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000446ad2: fucompi st(3); ret; 
0x0000000000470a56: fucompp; ret 0xfffe; 
0x00000000004a487c: hlt; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x0000000000458cd8: hlt; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x000000000043fd10: hlt; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004c3ab4: hlt; add byte ptr [rax], al; cwde; and bh, al; jmp qword ptr [rdx]; 
0x00000000004437bb: hlt; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004c15b4: hlt; and eax, 0x69880000; cmc; call qword ptr [rsi]; 
0x00000000004bf55a: hlt; call qword ptr [rax]; 
0x00000000004bf3e2: hlt; call qword ptr [rbp + 9]; 
0x00000000004bfa9a: hlt; call qword ptr [rbx]; 
0x00000000004bf37a: hlt; call qword ptr [rdx]; 
0x00000000004bf082: hlt; call qword ptr [rsi + 1]; 
0x00000000004bf062: hlt; call qword ptr [rsi]; 
0x00000000004bf0f2: hlt; call rdi; 
0x00000000004bf1ca: hlt; jmp qword ptr [rbx]; 
0x00000000004bf0d2: hlt; jmp qword ptr [rdi]; 
0x0000000000435bda: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432d3e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435bd3: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432e97: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eb3: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043fb7f: hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043e313: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004164f5: hlt; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004be9d4: hlt; ret 0xfffd; 
0x00000000004c0a39: hlt; ret; 
0x000000000043e317: hlt; sub eax, edx; ret; 
0x00000000004a4995: idiv al; jmp qword ptr [rax]; 
0x0000000000442a2f: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000040780b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004c26c2: idiv bh; ret; 
0x000000000043fccd: idiv byte ptr [rax + 2]; syscall; 
0x000000000049f482: idiv byte ptr [rax]; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x00000000004bb277: idiv byte ptr [rbx]; jbe 0xbb2ae; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000400429: idiv byte ptr [rdi + 0x4a2b64]; mov eax, 2; syscall; 
0x000000000044dd1f: idiv byte ptr [rdi + 0x4a6dc8]; mov eax, ecx; syscall; 
0x0000000000401a56: idiv byte ptr [rdi + 1]; call rax; 
0x0000000000447e56: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000048c1cf: idiv byte ptr [rsi + 0xe]; test ah, 0x80; je 0x8c290; mov rax, rdx; pop rbx; ret; 
0x00000000004a1abb: idiv di; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000045bd96: idiv di; jmp qword ptr [rsi + 0xf]; 
0x00000000004c26c1: idiv dil; ret; 
0x00000000004a4959: idiv eax; jmp qword ptr [rax]; 
0x000000000046dc54: idiv ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000004a1abc: idiv edi; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x00000000004a3fca: idiv edi; and bh, 0xf7; jmp qword ptr [rax]; 
0x000000000049df9a: idiv edi; dec dword ptr [rcx + 0x63]; add byte ptr [r8 + 1], r9b; ret; 
0x000000000049c41f: idiv edi; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004014e2: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b364: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004a1351: idiv edi; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000049ab3e: idiv edi; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004a3f62: idiv edi; movabs al, byte ptr [0x40fff80170fff800]; add bh, al; call qword ptr [rax]; 
0x000000000049d5c8: idiv edi; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x00000000004a3f5e: idiv edi; sar bh, 1; idiv edi; movabs al, byte ptr [0x40fff80170fff800]; add bh, al; call qword ptr [rax]; 
0x00000000004429ea: idiv edi; shr ecx, cl; imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000442a2a: idiv edi; shr ecx, cl; lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000049f54d: idiv edi; test rbx, rbx; mov rdi, rbx; jne 0x9f540; pop rbx; ret; 
0x000000000046dc53: idiv r11; jmp qword ptr [rsi + 0xf]; 
0x0000000000453c96: imul dh; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000044c62d: imul eax, dword ptr [rcx], 0; add byte ptr [rax + 0x29], cl; ret 0xe183; 
0x000000000043ce71: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x000000000044850b: imul eax, dword ptr [rdx], 0; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x0000000000436c8a: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x36cdf; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004601cb: imul eax; call rsi; 
0x0000000000442dfb: imul eax; inc edx; std; dec dword ptr [rcx - 0x75]; jge 0x42e05; call rbx; 
0x0000000000441203: imul eax; neg esi; std; dec dword ptr [rcx - 0x75]; jge 0x4120d; call rbx; 
0x0000000000442e9d: imul eax; pop rbp; ret 0xfffd; 
0x000000000044132a: imul eax; rcr ch, 1; std; dec dword ptr [rcx - 0x75]; jge 0x41334; call rbx; 
0x000000000040a038: imul eax; ret 0x150; 
0x0000000000473d88: imul eax; ret 0xfff8; 
0x0000000000453377: imul eax; ret; 
0x00000000004415dd: imul eax; sbb eax, 0x49fffddb; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000443167: imul eax; xchg ebx, eax; mov edi, 0x8b49fffd; jge 0x43171; call rbx; 
0x0000000000443066: imul eax; xchg esp, eax; sar ch, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000442f23: imul eax; xlatb; sar ebp, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004a0d2f: imul ebx, dword ptr [rax], -0x18; retf 0xf7e3; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7e3; 
0x0000000000418212: imul ebx, dword ptr [rax], -0x70; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414374: imul ecx, dword ptr [rax + 0x63], -0x2f; mov eax, 2; syscall; 
0x0000000000477fc6: imul ecx, dword ptr [rbx], 0xf89ba2e8; jmp qword ptr [rsi - 0x70]; 
0x0000000000496b9f: imul ecx; ret; 
0x0000000000436b23: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e9: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000442b6e: imul edi, ebx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004429ee: imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000441022: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000004713a3: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000442b8e: imul edi, edx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000440f13: imul esi, dword ptr [rdx - 0x7ab7ffd8], 0xf30274c0; ret; 
0x000000000046fc34: imul esi, esi, 0x3c; add eax, esi; ret; 
0x000000000045d4cb: imul esp, dword ptr [rax], 0xffff67e9; jmp qword ptr [rsi + 0xf]; 
0x00000000004321a3: imul esp, dword ptr [rcx], 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043c2ec: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x00000000004c11a4: in al, 0x21; add byte ptr [rax], al; test al, 0x60; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004c1ba4: in al, 0x2b; add byte ptr [rax], al; cwde; lodsb al, byte ptr [rsi]; cmc; call rsp; 
0x00000000004c36a4: in al, 0x46; add byte ptr [rax], al; clc; add bh, al; call qword ptr [rsi]; 
0x0000000000432d36: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000403cc6: in al, 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x000000000040ed92: in al, 0x74; and byte ptr [rax + 0x4bef78], bh; cmp rax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x000000000042496c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000043f2a8: in al, 0x75; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x0000000000478c22: in al, 0x75; or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c74a4: in al, 0x84; add byte ptr [rax], al; fsubr dword ptr [rax]; sti; call rdx; 
0x00000000004c8da4: in al, 0x9d; add byte ptr [rax], al; clc; ret 0xfffc; 
0x0000000000418d68: in al, 0xab; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x00000000004bebc8: in al, 0xd4; std; jmp rsp; 
0x0000000000435bba: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004278fb: in al, 0xf3; ret; 
0x00000000004c2171: in al, 0xf5; jmp qword ptr [rdx]; 
0x00000000004a4311: in al, 0xf8; call qword ptr [rax]; 
0x00000000004a4311: in al, 0xf8; call qword ptr [rax]; out 0xf8, al; push rax; out 0xf8, eax; call rax; 
0x00000000004a4331: in al, 0xf8; inc dword ptr [rax]; out 0xf8, al; jmp rax; 
0x00000000004a4435: in al, 0xf8; jmp qword ptr [rax]; 
0x00000000004a4351: in al, 0xf8; jmp rax; 
0x00000000004a4415: in al, 0xf8; push qword ptr [rax - 0x1a]; clc; call qword ptr [rax - 0x18]; 
0x0000000000468a8a: in al, 0xf; lahf; ret 0x2941; 
0x0000000000458848: in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x00000000004205b5: in al, 0xf; xchg esp, eax; ret 0x8548; 
0x0000000000454a5f: in al, 0xff; dec dword ptr [rax - 0x7d]; jge 0x54a96; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045289e: in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fdc7: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000401a4e: in al, dx; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x00000000004c35ac: in al, dx; add byte ptr [r8], r8b; nop; add bh, al; call qword ptr [rcx]; 
0x000000000041b1b4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x287; 
0x000000000048c183: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000047d115: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rsi, rsp; syscall; 
0x000000000045ca60: in al, dx; add dword ptr [rdi], ecx; test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000424220: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x000000000049d5c4: in al, dx; call 0xe050; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x00000000004a4405: in al, dx; clc; call qword ptr [rax - 0x12]; 
0x00000000004a4425: in al, dx; clc; call qword ptr [rax]; 
0x00000000004a43c5: in al, dx; clc; call rax; 
0x00000000004be365: in al, dx; cld; inc eax; out dx, al; cld; call qword ptr [rax]; 
0x000000000048bed9: in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000435fb0: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443a23: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x0000000000443434: in al, dx; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000432d3a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435fba: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004434e3: in al, dx; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x000000000046dc27: in al, dx; or al, ch; ret 1; 
0x0000000000479bea: in al, dx; or bh, bh; adc eax, 0x252596; xor eax, eax; add rsp, 8; ret; 
0x000000000041dba7: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000049a9a2: in al, dx; or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000040e032: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x00000000004110b0: in al, dx; ret 1; 
0x000000000040391d: in al, dx; test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x000000000049f3c5: in al, dx; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x0000000000454626: in ax, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000040153a: in eax, 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000004270c7: in eax, 0; add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043fd98: in eax, 0; add byte ptr [rax], al; syscall; 
0x00000000004bb103: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004bcfb3: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004279ba: in eax, 0x48; mov eax, edi; ret; 
0x0000000000452ed2: in eax, 0x48; mov eax, esi; ret; 
0x0000000000432b46: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004ba399: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x0000000000481067: in eax, 0xb6; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x00000000004bcfb9: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000045289b: in eax, 0xe9; xchg esp, eax; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000443430: in eax, 0xf0; add r12, r13; mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x0000000000435c3a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000042d41a: in eax, 0xf3; ret; 
0x00000000004a43b5: in eax, 0xf8; inc dword ptr [rax - 0x19]; clc; jmp qword ptr [rax]; 
0x00000000004a43d5: in eax, 0xf8; inc dword ptr [rax]; out 0xf8, eax; jmp rax; 
0x00000000004a4395: in eax, 0xf8; push qword ptr [rax - 0x19]; clc; call qword ptr [rax - 0x17]; 
0x000000000046ee93: in eax, 0xf; je 0x6eeb0; add rax, 2; ret; 
0x0000000000454627: in eax, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000049a625: in eax, 0xfd; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000045fd43: in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fcc7: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004bc481: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000049ab3a: in eax, dx; call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004a4345: in eax, dx; clc; call qword ptr [rax - 0x6f000711]; int1; clc; jmp qword ptr [rax]; 
0x00000000004a43a5: in eax, dx; clc; call qword ptr [rax]; 
0x0000000000440b57: in eax, dx; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000045852d: in eax, dx; jle 0x5854b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000462b2d: in eax, dx; jle 0x62b4b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049f59f: in eax, dx; jne 0x9f578; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000436030: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043eb32: in eax, dx; lea rax, [rcx - 1]; ret; 
0x0000000000432b4a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045a786: in eax, dx; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x0000000000481186: in eax, dx; mov rdi, qword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x000000000044f344: in eax, dx; movabs al, byte ptr [0x274c08548004a6e]; call rax; 
0x000000000043603a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004907a0: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a47b: in eax, dx; or byte ptr [rbp + 0x39], cl; sal dword ptr [rbp + rsi*2 + 0x4c], 0x89; ret 0xf749; 
0x000000000043e912: in eax, dx; ret; 
0x000000000043ec82: in eax, dx; sub rax, 1; ret; 
0x000000000049d645: in eax, dx; xor eax, eax; add rsp, 8; ret; 
0x000000000044e6d6: inc byte ptr [rbx]; je 0x4e6e0; pop rbx; ret; 
0x00000000004a490f: inc dword ptr [rax + 0x12]; stc; jmp rax; 
0x00000000004a4907: inc dword ptr [rax + 0x13]; stc; push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x00000000004be2f3: inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x00000000004a46ff: inc dword ptr [rax + 0x1e]; stc; call rax; 
0x00000000004a4067: inc dword ptr [rax + 0x20fff86d]; outsd dx, dword ptr [rsi]; clc; inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004a44e7: inc dword ptr [rax + 0x21]; stc; call rax; 
0x00000000004a44e7: inc dword ptr [rax + 0x21]; stc; call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004be313: inc dword ptr [rax + 0x29]; std; jmp qword ptr [rax]; 
0x00000000004a40db: inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004a40db: inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; clc; jmp qword ptr [rax + 0x4b]; 
0x000000000040141a: inc dword ptr [rax + 0x58930cc]; movsb byte ptr [rdi], byte ptr [rsi]; ret 0x2c; 
0x00000000004be2eb: inc dword ptr [rax + 0x60fffd16]; sbb ch, bh; inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x00000000004a405f: inc dword ptr [rax + 0x6a]; clc; jmp rax; 
0x00000000004a41d3: inc dword ptr [rax + 0x6efff8c3]; ret 0xfff8; 
0x00000000004a407f: inc dword ptr [rax + 0x77]; clc; jmp rax; 
0x00000000004a4a1f: inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a1f: inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a5b: inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a3f6b: inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004a3f6b: inc dword ptr [rax + 2]; clc; call qword ptr [rax]; add edi, eax; jmp rax; 
0x00000000004a4387: inc dword ptr [rax - 0x11]; clc; inc dword ptr [rax - 0xf]; clc; call rax; 
0x000000000045a915: inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x00000000004a441f: inc dword ptr [rax - 0x16]; clc; call qword ptr [rax]; 
0x00000000004a43b7: inc dword ptr [rax - 0x19]; clc; jmp qword ptr [rax]; 
0x00000000004a432f: inc dword ptr [rax - 0x1c]; clc; inc dword ptr [rax]; out 0xf8, al; jmp rax; 
0x00000000004a40b3: inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a4203: inc dword ptr [rax - 0x3f]; clc; push qword ptr [rax]; ret 0xfff8; 
0x000000000045417a: inc dword ptr [rax - 0x4d343]; jmp qword ptr [rax]; 
0x000000000045632c: inc dword ptr [rax - 0x50f43]; jmp qword ptr [rax]; 
0x00000000004a4adf: inc dword ptr [rax - 0x5f00067f]; cmp ecx, 0xf981c0ff; jmp rax; 
0x00000000004a4abb: inc dword ptr [rax - 0x5f000680]; cmp cl, 0xff; rol byte ptr [rax - 0x7f1f0007], 0xf9; inc dword ptr [rax]; cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x00000000004a4af7: inc dword ptr [rax - 0x7e]; stc; jmp qword ptr [rax - 0x7e]; 
0x00000000004a4ad7: inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ab3: inc dword ptr [rax - 0x80]; stc; jmp qword ptr [rax - 0x80]; 
0x00000000004a438b: inc dword ptr [rax - 0xf]; clc; call rax; 
0x0000000000460ed3: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000430cb1: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000430cb7: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004be377: inc dword ptr [rax]; clc; cld; call qword ptr [rax - 6]; 
0x00000000004a494f: inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x00000000004a4acb: inc dword ptr [rax]; cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x00000000004a4457: inc dword ptr [rax]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a4a4f: inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004a4a0f: inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; 
0x00000000004a4a0f: inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a4333: inc dword ptr [rax]; out 0xf8, al; jmp rax; 
0x00000000004a43d7: inc dword ptr [rax]; out 0xf8, eax; jmp rax; 
0x00000000004a3f5b: inc dword ptr [rax]; push rdi; call rax; 
0x000000000048c36c: inc dword ptr [rbp + 0x480b74c0]; mov dword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x0000000000480eb8: inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x000000000047d36d: inc dword ptr [rbp + 0x481e75c0]; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x00000000004163a4: inc dword ptr [rbp + 0x483075c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000049beec: inc dword ptr [rbp + 0xf]; mov dh, 0xdb; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000048c8a2: inc dword ptr [rbp - 0x3f6af040]; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a1c0: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000047bf60: inc dword ptr [rbp - 0x76b48a40]; ret; 
0x0000000000411f0d: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000414482: inc dword ptr [rbx + 0x446440c8]; mov esp, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000040135c: inc dword ptr [rbx + 0xd817fc0]; pop rsi; ret; 
0x0000000000415146: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004612c7: inc dword ptr [rbx - 0x10ab43]; jmp qword ptr [rax]; 
0x000000000040d9aa: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000049dad2: inc dword ptr [rbx - 0x38b7f808]; ret 0xffff; 
0x0000000000416c99: inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000049be97: inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000044f667: inc dword ptr [rbx - 0x76be0008]; ret; 
0x00000000004682c4: inc dword ptr [rbx - 0x78f0d008]; add eax, 0x89000001; ret 0x348; 
0x000000000047c38d: inc dword ptr [rbx - 0x7bf00006]; pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047109c: inc dword ptr [rbx - 0x7bf0fd08]; ret; 
0x0000000000407a62: inc dword ptr [rbx - 0x7bf0fe08]; ret; 
0x000000000043f60f: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f53f: inc dword ptr [rbx]; pop rbx; ret; 
0x000000000045ef99: inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000480180: inc dword ptr [rcx + rcx*4 - 0x40]; sub eax, ecx; ret; 
0x00000000004a4247: inc dword ptr [rcx - 0x37]; clc; jmp rcx; 
0x000000000044f66a: inc dword ptr [rcx - 0x77]; ret; 
0x000000000040047e: inc dword ptr [rcx - 9]; fldenv [rsp + rax*2 - 0x77]; or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x00000000004ca194: inc dword ptr [rcx]; or al, 0xa5; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x00000000004ca1eb: inc dword ptr [rcx]; or ebx, eax; add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x00000000004a4593: inc dword ptr [rdx + 0x23]; stc; call rdx; 
0x00000000004a4593: inc dword ptr [rdx + 0x23]; stc; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x00000000004a465b: inc dword ptr [rdx + riz - 7]; call rsp; 
0x00000000004a47c3: inc dword ptr [rdx]; adc al, 0xf9; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004602e5: inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000042cd1d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000004a452f: inc dword ptr [rsi + 0x20]; stc; call rsi; 
0x00000000004a4273: inc dword ptr [rsi - 0x3a]; clc; call rsi; 
0x000000000049d5ad: inc dword ptr [rsi*2 + 0x8b814]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000434557: inc dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a46df: inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a46df: inc eax; and ecx, edi; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x00000000004a4487: inc eax; fdivp st(0); call qword ptr [rax]; 
0x00000000004a4a97: inc eax; jg 0xa4a94; call rax; 
0x00000000004a4a97: inc eax; jg 0xa4a94; call rax; jg 0xa4a98; jmp rax; 
0x00000000004a406f: inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004a4a3f: inc eax; jp 0xa4a3c; call rax; 
0x00000000004a4a3f: inc eax; jp 0xa4a3c; call rax; jp 0xa4a40; jmp rax; 
0x00000000004be367: inc eax; out dx, al; cld; call qword ptr [rax]; 
0x00000000004a40fb: inc eax; push rdi; clc; call rax; 
0x00000000004a42d3: inc eax; sar al, 0xff; nop; sar eax, 0xff; nop; ret 0xfff8; 
0x00000000004a449b: inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004a449b: inc eax; sar al, 1; call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x00000000004be9cb: inc eax; sar ch, 0xff; cmp al, al; std; push rsp; ret 0xfffd; 
0x00000000004a4507: inc eax; sbb eax, 0x1d50fff9; stc; jmp rsi; 
0x00000000004be35b: inc eax; std; jmp qword ptr [rax]; 
0x00000000004737da: inc ebx; nop dword ptr [rax]; cmp dword ptr [rip + 0x25aa75], 0; jne 0x737fd; mov eax, 0x14; syscall; 
0x000000000044049a: inc ebx; nop dword ptr [rax]; cmp dword ptr [rip + 0x28ddb5], 0; jne 0x404bd; mov eax, 2; syscall; 
0x0000000000473622: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000473532: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x00000000004737fb: inc ebx; sub rsp, 8; call 0x439a0; mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x0000000000461082: inc edi; test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000442dfd: inc edx; std; dec dword ptr [rcx - 0x75]; jge 0x42e05; call rbx; 
0x0000000000463eb6: inc esi; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000004a425b: inc esi; ret 0xfff8; 
0x00000000004a425f: inc esi; ret; 
0x00000000004a4257: inc esi; sar eax, 0xff; mov dl, 0xf8; inc esi; ret; 
0x00000000004c372c: insb byte ptr [rdi], dx; add byte ptr [r8], r8b; and byte ptr [rax + rdi*8], al; call rsp; 
0x0000000000443eeb: insb byte ptr [rdi], dx; add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x00000000004017e1: insb byte ptr [rdi], dx; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000040199d: insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000478938: insb byte ptr [rdi], dx; add byte ptr [rbp - 0x77], cl; mov bh, 8; ret 0x6c; 
0x00000000004797f5: insb byte ptr [rdi], dx; add byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000047893f: insb byte ptr [rdi], dx; add byte ptr [rcx - 0x39], cl; xchg dword ptr [rax], esp; ret 0x6c; 
0x00000000004218a3: insb byte ptr [rdi], dx; add byte ptr [rdi], cl; test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000041d351: insb byte ptr [rdi], dx; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000045064e: insb byte ptr [rdi], dx; add byte ptr [rsi + 0x80000], bh; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x000000000048c746: insb byte ptr [rdi], dx; add cl, ch; ret; 
0x0000000000419cbf: insb byte ptr [rdi], dx; and al, 0x24; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x000000000048bedb: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000004508fa: insb byte ptr [rdi], dx; and al, 0xfe; ret; 
0x000000000047cf90: insb byte ptr [rdi], dx; and edx, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004bcfbe: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x000000000048c330: insb byte ptr [rdi], dx; lahf; clc; dec dword ptr [rax + 0x39]; ret; 
0x000000000048c5f3: insb byte ptr [rdi], dx; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000047bd00: insb byte ptr [rdi], dx; pop rsi; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c5a2c: insb byte ptr [rdi], dx; push 0; add al, ah; cli; call qword ptr [rsi]; 
0x0000000000490020: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000490f20: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046b3e1: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fd1e], al; ret 1; 
0x000000000045741f: insd dword ptr [rdi], dx; add dword ptr [rcx], 0xf8834800; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x000000000049cff7: insd dword ptr [rdi], dx; call 0xfffffffff07f5b49; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d08f: insd dword ptr [rdi], dx; call 0xfffffffff07f5be1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d123: insd dword ptr [rdi], dx; call 0xfffffffff07f5c75; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d16f: insd dword ptr [rdi], dx; call 0xfffffffff07f5cc1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d238: insd dword ptr [rdi], dx; call 0xfffffffff07f5d8a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2c7: insd dword ptr [rdi], dx; call 0xfffffffff07f5e19; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d318: insd dword ptr [rdi], dx; call 0xfffffffff07f5e6a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004a4069: insd dword ptr [rdi], dx; clc; jmp qword ptr [rax]; 
0x00000000004465ff: insd dword ptr [rdi], dx; cmpsd dword ptr [rsi], dword ptr [rdi]; add eax, dword ptr [rax]; mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000049e924: insd dword ptr [rdi], dx; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x00000000004bcfbf: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000004507c7: insd dword ptr [rdi], dx; ret 0x27; 
0x00000000004bb36d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x00000000004bc27f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004a094a: int 0x22; add cl, ch; fiadd word ptr [rsi]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000403596: int 0x48; test eax, eax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x00000000004bc6e4: int 0x6b; ret; 
0x000000000043f2a3: int 0x74; add eax, 0x75e48445; adc byte ptr [rbx - 0x6bf0fd06], al; ret 0x8444; 
0x00000000004bc447: int 0x80; 
0x00000000004811fe: int 0x90; jmp rdx; 
0x00000000004bb126: int 0xdd; je 0xbb0ef; xor al, 0xd8; ret; 
0x00000000004ba593: int 0xe0; fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x00000000004a4455: int 0xf8; inc dword ptr [rax]; iretd; clc; call qword ptr [rax - 0x30]; 
0x000000000046615f: int 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004303df: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000400a72: int1; add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000401532: int1; add eax, dword ptr [rax]; cmp eax, -1; je 0x1623; add rsp, 0x98; ret; 
0x000000000045b1c6: int1; add eax, r8d; ret; 
0x000000000049ebd4: int1; and al, byte ptr [rax]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ebdb: int1; and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000042f578: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000445c3c: int1; call rbx; 
0x00000000004a438d: int1; clc; call rax; 
0x00000000004a434d: int1; clc; jmp qword ptr [rax]; 
0x00000000004be36d: int1; cld; jmp qword ptr [rax - 0xd]; 
0x0000000000436f41: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436921: int1; jl 0x3696c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eebd: int1; jl 0x3ef08; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eec4: int1; jl 0x3ef0f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eecb: int1; jl 0x3ef16; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043eede: int1; jl 0x3ef29; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eee5: int1; jl 0x3ef30; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eeec: int1; jl 0x3ef37; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043eef9: int1; jl 0x3ef44; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eeff: int1; jl 0x3ef4a; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043efc6: int1; jl 0x3f011; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043efcd: int1; jl 0x3f018; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043efd4: int1; jl 0x3f01f; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043f01e: int1; jl 0x3f069; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f025: int1; jl 0x3f070; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f02c: int1; jl 0x3f077; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043f0bb: int1; jl 0x3f106; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c2: int1; jl 0x3f10d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c9: int1; jl 0x3f114; adc dword ptr [rsi + 7], edx; ret; 
0x000000000049abf7: int1; jmp rcx; 
0x000000000046d5e9: int1; lea rsi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d7a5: int1; lea rsi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x0000000000435a2b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043330f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000047a0be: int1; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x0000000000435a23: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000046f746: int1; mov rdi, r12; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000433487: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a3: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e2e3: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043f612: int1; pop rbx; mov eax, eax; ret; 
0x0000000000442e0b: int1; ret 0xfffd; 
0x000000000043e2e7: int1; sub eax, edx; ret; 
0x00000000004453fb: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x0000000000430e1b: int1; xor al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042c14d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049296e: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004440ed: iretd; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x0000000000480a2c: iretd; and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000480a04: iretd; and al, 0; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x80a18; ret; 
0x000000000044e70a: iretd; call 0x80e90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045ee1a: iretd; call qword ptr [rax + 0x38]; 
0x00000000004a4459: iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a4499: iretd; clc; inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004c8e71: iretd; cld; call qword ptr [rdi + 9]; 
0x000000000046e1f3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000041bccb: iretd; mov eax, 3; syscall; 
0x000000000041bc9f: iretd; mov eax, r8d; syscall; 
0x00000000004bb101: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000042f642: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004bc50d: iretd; ret 0x8b36; 
0x000000000042d3a8: ja 0x2d3a0; ret 0x7401; 
0x0000000000436df3: ja 0x36dee; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043c437: ja 0x3c43b; ret; 
0x000000000043c453: ja 0x3c459; mov dword ptr [rdi], ecx; ret; 
0x000000000043c494: ja 0x3c49e; mov qword ptr [rdi], rcx; ret; 
0x000000000043c519: ja 0x3c52b; ret; 
0x000000000043c56f: ja 0x3c585; ret; 
0x000000000043c5f1: ja 0x3c60b; ret; 
0x000000000043ca57: ja 0x3ca5b; lea rax, [rdi + 2]; ret; 
0x000000000043ca73: ja 0x3ca79; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043cac4: ja 0x3cace; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043cba9: ja 0x3cbbb; lea rax, [rdi + 0x10]; ret; 
0x000000000043cc1f: ja 0x3cc35; lea rax, [rdi + 0x14]; ret; 
0x000000000043cca1: ja 0x3ccbb; lea rax, [rdi + 0x18]; ret; 
0x000000000043fb7d: ja 0x3fba0; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000043fd0e: ja 0x3fe08; mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000440406: ja 0x40438; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000440455: ja 0x40488; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000044069d: ja 0x406e0; add rsp, 0x60; pop rbx; ret; 
0x0000000000443185: ja 0x43146; std; dec dword ptr [rax - 0x75]; jge 0x4318d; call rbx; 
0x0000000000446a0e: ja 0x46a54; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x0000000000446b0d: ja 0x46b53; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x0000000000462741: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000462253: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462300: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000460f39: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x00000000004624a6: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000462659: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004625d3: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046261b: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000460fcf: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046277f: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000046100d: ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000467784: ja 0x6770f; ret 0x348; 
0x000000000046a0fb: ja 0x6a086; ret 0x348; 
0x000000000047320d: ja 0x73218; pop rbx; ret; 
0x0000000000473586: ja 0x735b8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004735d8: ja 0x73610; movsxd rdi, eax; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000047e4fe: ja 0x7e54b; add al, ch; push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000048a79e: ja 0x8a7e9; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000049a1da: ja 0x9a1e4; mov rdi, qword ptr [rdi]; call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049a25e: ja 0x9a268; mov rdi, qword ptr [rdi]; call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049abeb: ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000049bee7: ja 0x9bcb0; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049c474: ja 0x9c4ce; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004a4081: ja 0xa407b; jmp rax; 
0x00000000004bca04: ja 0xbc989; ret 0x48f; 
0x00000000004c6765: ja 0xc6767; add byte ptr [rax - 0x64], bl; cli; jmp rdi; 
0x0000000000400bb7: ja 0xc9e; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000412e87: jae 0x12e99; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412e83: jae 0x12e9d; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412e93: jae 0x12eb5; call qword ptr [rax + 0x70]; 
0x0000000000412e8f: jae 0x12eb9; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412e8b: jae 0x12ebd; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000414138: jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x00000000004142a1: jae 0x142b8; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000040155c: jae 0x157b; add byte ptr [rax + 2], dil; syscall; 
0x00000000004160c7: jae 0x16101; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000417a0b: jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x0000000000433b0e: jae 0x33b20; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000433d55: jae 0x33df0; lea r11, [rip + 0x7076e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445404: jae 0x453e0; mov eax, 1; ret; 
0x00000000004403bd: jae 0x45620; ret; 
0x000000000047d01b: jae 0x7cfc1; xor eax, eax; ret; 
0x0000000000499507: jae 0x994f1; ret; 
0x000000000049a3e1: jae 0x9a3ef; mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004bafc2: jae 0xbaf9b; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x00000000004bbe5e: jae 0xbbe33; push rsi; pop rdx; je 0xbbe28; ret 0xacfc; 
0x00000000004c5c17: jae 0xc5c23; ret; 
0x00000000004c62fd: jae 0xc62ff; add al, dh; mov dl, bh; jmp qword ptr [rsi]; 
0x00000000004c7bd4: jae 0xc7bda; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x000000000040eda0: jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x000000000041db6e: jb 0x1db48; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x0000000000433911: jb 0x338f3; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000433974: jb 0x33956; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x00000000004339d3: jb 0x339f0; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004339f3: jb 0x33a02; mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x0000000000433a18: jb 0x33a1e; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000436967: jb 0x3697d; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436994: jb 0x369a5; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004369a8: jb 0x369b6; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004369b9: jb 0x369cb; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004369ce: jb 0x369d4; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000043eda3: jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043edb7: jb 0x3edc0; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043edc3: jb 0x3edd0; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043edd3: jb 0x3edd7; mov byte ptr [rdi], cl; ret; 
0x000000000043eef6: jb 0x3ef06; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043ef09: jb 0x3ef15; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043ef22: jb 0x3ef2e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043ef35: jb 0x3ef3d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043ef40: jb 0x3ef4a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043ef4d: jb 0x3ef51; mov byte ptr [rdi], cl; ret; 
0x000000000045015a: jb 0x501a8; mov edx, ecx; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x00000000004506f5: jb 0x50729; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000046d207: jb 0x6d205; je 0x6d228; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046d2bc: jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x000000000047c9a5: jb 0x7c9f2; add al, ch; ret; 
0x000000000047c9fe: jb 0x7ca4b; add al, ch; push 0x51; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e458: jb 0x7e440; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049b893: jb 0x9b896; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000049ebda: jb 0x9ebcd; and al, byte ptr [rax]; mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004a47c8: jb 0xa47dd; stc; jmp rdx; 
0x00000000004bee80: jb 0xbee56; std; jmp qword ptr [rdi - 0x2c]; 
0x0000000000413cd4: jbe 0x13cf0; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000415e5b: jbe 0x15df5; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000416e62: jbe 0x16e81; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417115: jbe 0x17134; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004017e8: jbe 0x17fa; syscall; 
0x0000000000426397: jbe 0x263a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000426f50: jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c6: jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d6: jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e6: jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f6: jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004279b3: jbe 0x279c5; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000433a05: jbe 0x33a18; mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000044a46f: jbe 0x4a46c; jmp qword ptr [rsi + 0xf]; 
0x000000000045b982: jbe 0x5b90d; ret 0x8166; 
0x000000000046c7ea: jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000047d286: jbe 0x7d2a6; cli; push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047e356: jbe 0x7e3a3; add al, ch; adc bh, byte ptr [rax]; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000480176: jbe 0x80160; cmp ecx, r8d; je 0x800f0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000480a0f: jbe 0x80a18; ret; 
0x000000000049d613: jbe 0x9d628; cmp dil, 0x30; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d673: jbe 0x9d688; cmp dil, 0x30; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049e726: jbe 0x9e730; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049e921: jbe 0x9e96c; lea ebp, [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x00000000004a41f0: jbe 0xa41b2; clc; jmp qword ptr [rdx]; 
0x00000000004bb279: jbe 0xbb2ae; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000041037e: je 0x10388; mov eax, edx; pop rbx; ret; 
0x00000000004104f3: je 0x10528; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410a98: je 0x10abb; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410cd3: je 0x10c28; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000411770: je 0x11796; or byte ptr [rax - 0x77], cl; add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000412010: je 0x11fca; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000411ff3: je 0x12012; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004121ac: je 0x121c0; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000004136bd: je 0x13710; movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000413cc2: je 0x13cc6; je 0x13cf8; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000413cc4: je 0x13cf8; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000414371: je 0x14375; je 0x143e0; movsxd rdx, ecx; mov eax, 2; syscall; 
0x0000000000414428: je 0x143b4; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000414373: je 0x143e0; movsxd rdx, ecx; mov eax, 2; syscall; 
0x0000000000414ffa: je 0x15078; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000041524b: je 0x151e9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415e23: je 0x15dd5; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415f93: je 0x15f45; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000416105: je 0x16110; ret; 
0x00000000004160f8: je 0x1611e; or bl, ch; mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x0000000000416137: je 0x16140; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401538: je 0x1623; add rsp, 0x98; ret; 
0x0000000000416c5a: je 0x16c5f; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000416c48: je 0x16c68; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000416ce7: je 0x16cf8; cmp rsi, rcx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x0000000000417488: je 0x17415; mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000417a02: je 0x17a18; mov rax, qword ptr [rdi + 8]; cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x0000000000417a45: je 0x17a58; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000418dca: je 0x18dce; pop rbx; ret; 
0x0000000000418ea7: je 0x18eab; call rax; 
0x0000000000419c94: je 0x19c9b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401a53: je 0x1a5e; xor esi, esi; mov edi, 1; call rax; 
0x000000000041bc9a: je 0x1bcc0; xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x000000000041fbe2: je 0x1fc08; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000420128: je 0x2012c; call rax; 
0x00000000004207ef: je 0x205b3; nop dword ptr [rax]; mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000421159: je 0x20c7b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000422149: je 0x22150; ret; 
0x00000000004223d2: je 0x223e0; mov eax, 0x16; ret; 
0x0000000000422421: je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x0000000000424825: je 0x24828; xchg edx, eax; sub eax, edx; ret; 
0x0000000000424894: je 0x2489d; lea rax, [rip + 0x14853]; ret; 
0x00000000004249fc: je 0x249de; pmovmskb edx, xmm4; test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x0000000000424a04: je 0x24a0a; bsf eax, edx; ret; 
0x0000000000424aad: je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a4c: je 0x24ad0; bsf rax, rdx; ret; 
0x0000000000402599: je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004270bc: je 0x2710d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042722e: je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x00000000004277c5: je 0x277de; and edx, 2; mov eax, 0x433d40; mov edx, 0x430cd0; cmove rax, rdx; ret; 
0x0000000000427810: je 0x27819; lea rax, [rip + 0x17647]; ret; 
0x0000000000427917: je 0x27884; mov word ptr [rax + rdx - 2], cx; ret; 
0x0000000000427910: je 0x27914; mov byte ptr [rdi], cl; test dl, 2; je 0x27884; mov word ptr [rax + rdx - 2], cx; ret; 
0x0000000000427d82: je 0x27da8; clc; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427dc4: je 0x27dcd; lea rax, [rip + 0x12ad3]; ret; 
0x00000000004027e5: je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004002d6: je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000042dda8: je 0x2ddc0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042deea: je 0x2df3b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042dfa1: je 0x2dfb0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042f409: je 0x2f420; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042f639: je 0x2f4d5; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000430a17: je 0x30a1b; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004030c4: je 0x30cd; mov edi, 0x6cd060; call rax; 
0x0000000000403313: je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x000000000040359a: je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x0000000000403012: je 0x347d; mov edi, 0x6cd720; call rbx; 
0x0000000000403507: je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403768: je 0x378d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x00000000004037c6: je 0x37eb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403922: je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403a6a: je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x0000000000403c12: je 0x3c3e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000403cc2: je 0x3ce0; movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000403d0e: je 0x3ec5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000043f5a5: je 0x3f512; lea rax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043f535: je 0x3f512; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000043f525: je 0x3f512; movzx eax, cl; pop rbx; ret; 
0x000000000043f65e: je 0x3f668; xor eax, eax; ret; 
0x000000000043f659: je 0x3f670; cmp eax, 2; je 0x3f668; xor eax, eax; ret; 
0x000000000043f798: je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x000000000043f7b0: je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000043f7a6: je 0x3f7c8; mov eax, 0; test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000043fa20: je 0x3fa26; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043fb10: je 0x3fae9; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043fd8f: je 0x3fdb5; adc byte ptr [rdi + 1], bh; mov eax, 0xe5; syscall; 
0x00000000004405e4: je 0x40600; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000440688: je 0x406a8; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004407cb: je 0x4078a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000440b58: je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000044109c: je 0x41100; mov rbx, rdi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x000000000044116c: je 0x41176; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411ad: je 0x411b7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004411e5: je 0x411ef; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044124e: je 0x41258; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441286: je 0x41290; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004412d4: je 0x412de; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044130c: je 0x41316; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441391: je 0x4139b; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004413c9: je 0x413d3; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441417: je 0x41421; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044144f: je 0x41459; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414b8: je 0x414c2; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414f0: je 0x414fa; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441542: je 0x4154c; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441a3f: je 0x41a86; mov rsi, qword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000442260: je 0x42269; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044239f: je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e72: je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000442115: je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423c4: je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e97: je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000442642: je 0x42998; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441ebb: je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044225e: je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442139: je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fe0: je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044278b: je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442666: je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044250d: je 0x42a78; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e8: je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442481: je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442408: je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442824: je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004427ab: je 0x42b18; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426ff: je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442686: je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425a6: je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044252d: je 0x42b98; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f7: je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044227e: je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441edb: je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004421d2: je 0x42c18; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442159: je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f54: je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442079: je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442000: je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442d1f: je 0x42d29; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442d57: je 0x42d61; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442da5: je 0x42daf; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ddd: je 0x42de7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e47: je 0x42e51; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e7f: je 0x42e89; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ecd: je 0x42ed7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f05: je 0x42f0f; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f8a: je 0x42f94; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442fc2: je 0x42fcc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443010: je 0x4301a; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443048: je 0x43052; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430b2: je 0x430bc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430ea: je 0x430f4; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443138: je 0x43142; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443156: je 0x43160; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004439c9: je 0x439cc; ret; 
0x0000000000443a2d: je 0x43a30; ret; 
0x0000000000445113: je 0x4511c; mov edi, 0x6cc140; call rax; 
0x00000000004452a1: je 0x452aa; mov edi, 0x6cc140; call rax; 
0x0000000000445428: je 0x45430; ret; 
0x0000000000445444: je 0x45450; mov dword ptr [rip + 0x285b4c], edx; pop rbx; ret; 
0x0000000000445c37: je 0x45c5d; sbb byte ptr [rbp - 0x77], cl; int1; call rbx; 
0x0000000000446a06: je 0x46ab0; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x0000000000446b05: je 0x46d00; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x000000000044dd93: je 0x4de60; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044e709: je 0x4e6da; call 0x80e90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044e6d3: je 0x4e6e0; cmp esi, 3; je 0x4e6e0; pop rbx; ret; 
0x000000000044e6d8: je 0x4e6e0; pop rbx; ret; 
0x000000000044ec60: je 0x4ec69; mov edi, 0x6cd720; call rax; 
0x000000000044ec8f: je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c9: je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044ed90: je 0x4ed94; call rax; 
0x000000000044ed7b: je 0x4ed94; mov rax, qword ptr [r14*8 + 0x4a6ea0]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4ed94; call rax; 
0x000000000044edef: je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef68: je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f248: je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000044f34c: je 0x4f350; call rax; 
0x000000000044f33b: je 0x4f350; mov qword ptr [r12], rax; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x000000000045020b: je 0x5020f; call rax; 
0x000000000046a3ab: je 0x6a336; ret 0x348; 
0x000000000046aa0e: je 0x6a9cf; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046b758: je 0x6b77a; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000046c226: je 0x6c270; add esp, 0x20; pop rbx; ret; 
0x000000000046c5ed: je 0x6c700; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c7ad: je 0x6c8e0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046d00c: je 0x6d010; ret; 
0x000000000046d03a: je 0x6d097; pop rbp; pop r12; ret; 
0x000000000046d0df: je 0x6d13c; pop rbp; pop r12; ret; 
0x000000000046d21d: je 0x6d222; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d209: je 0x6d228; mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000046d261: je 0x6d266; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d2b7: je 0x6d2c8; cmp rsi, rcx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x000000000046def4: je 0x6df03; sar rdx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046defc: je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de8c: je 0x6df30; bsf rax, rdx; ret; 
0x000000000046e060: je 0x6e220; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e2e4: je 0x6e220; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e0ee: je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046ee79: je 0x6ee90; mov cl, dl; and cl, 0xf; je 0x6eea0; ret; 
0x000000000046ee80: je 0x6eea0; ret; 
0x000000000046ee95: je 0x6eeb0; add rax, 2; ret; 
0x000000000046fbef: je 0x6fc4f; add byte ptr [r15 + 0x4b5d58], dil; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x0000000000400602: je 0x70f; pop rbx; pop rbp; pop r12; ret; 
0x00000000004731cb: je 0x731a3; mov rdx, 0xffffffffffffffd0; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004738ff: je 0x73912; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000473b8a: je 0x73b19; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x00000000004765f8: je 0x7657e; sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x00000000004783cf: je 0x783e2; mov qword ptr [rsp], r8; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000479223: je 0x7923a; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047929a: je 0x792af; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x0000000000479549: je 0x7956e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479784: je 0x7978d; mov edi, 0x6cc100; call rax; 
0x00000000004797ec: je 0x79800; add rsp, 8; mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x000000000047a55a: je 0x7b07c; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047adfa: je 0x7b3a1; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047d6c5: je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000047d778: je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d7a0: je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d816: je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047d965: je 0x7d9b2; add al, ch; ret; 
0x000000000047e4a2: je 0x7e411; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000047e8a2: je 0x7e8ae; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047ed3b: je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f32c: je 0x7f349; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f2e3: je 0x7f350; mov edi, 0x6cc140; call rax; 
0x000000000047f347: je 0x7f3ad; pop rbx; ret; 
0x000000000048017b: je 0x800f0; mov eax, r8d; sub eax, ecx; ret; 
0x0000000000480a9e: je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000480a60: je 0x80a70; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480a7b: je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480a7f: je 0x80aa5; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x0000000000480a94: je 0x80ab0; mov eax, 0; test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000480be6: je 0x80bf0; ret; 
0x0000000000480bfc: je 0x80c05; mov edi, 0x6cc140; call rax; 
0x0000000000480c0d: je 0x80c20; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048116b: je 0x81174; mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x0000000000481185: je 0x81174; mov rdi, qword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x0000000000489f6e: je 0x89f74; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000489fee: je 0x89ff4; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000048a09c: je 0x8a0a2; mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000048a1d5: je 0x8a1c0; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000048bdc1: je 0x8bdc9; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c09a: je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x000000000048c1d5: je 0x8c290; mov rax, rdx; pop rbx; ret; 
0x000000000048c36f: je 0x8c37c; mov qword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000048c3b7: je 0x8c4d0; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000048c4e6: je 0x8c4fe; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c5c6: je 0x8c5d8; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x000000000048c6ff: je 0x8c610; mov rsi, rbx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x000000000048c5f2: je 0x8c660; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000048c679: je 0x8c72e; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c761: je 0x8c76a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048c992: je 0x8c9a0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008dd: je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000040092b: je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000040095a: je 0x963; mov edi, 0x4befc0; call rax; 
0x0000000000498678: je 0x98681; mov edi, 0x6cc140; call rax; 
0x00000000004986a4: je 0x986ad; mov edi, 0x6cc140; call rax; 
0x000000000049894a: je 0x98955; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a8: je 0x998; call rax; 
0x000000000049a20b: je 0x9a214; mov edi, 0x6cc140; call rax; 
0x000000000049a232: je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2b1: je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000049a2da: je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049ab39: je 0x9ab28; call 0xe050; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x000000000049ab0f: je 0x9ab28; cmp dil, 0x30; jne 0x9ab3b; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049abe1: je 0x9aca0; cmp sil, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000049cc30: je 0x9cbe2; add rsp, 0x18; ret; 
0x000000000049cbe7: je 0x9cc53; add rsp, 0x18; ret; 
0x000000000049cdf3: je 0x9ce00; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d337: je 0x9d348; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049d5c3: je 0x9d5b1; call 0xe050; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000049d5a9: je 0x9d5d0; cmp dil, 4; jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x000000000049d8cb: je 0x9d8e0; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049e71e: je 0x9e828; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049e920: je 0x9e998; lea rbp, [r13 - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000049ecdd: je 0x9ed3e; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000049f3ca: je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x000000000049f48b: je 0x9f494; mov edi, 0x6cc100; call rax; 
0x00000000004a112e: je 0xa1137; call rax; 
0x00000000004a1125: je 0xa113c; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x00000000004a4878: je 0xa488f; stc; push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x00000000004a4880: je 0xa4896; stc; jmp rsp; 
0x00000000004bb128: je 0xbb0ef; xor al, 0xd8; ret; 
0x00000000004bbe62: je 0xbbe28; ret 0xacfc; 
0x00000000004bfe7a: je 0xbfe86; ret; 
0x0000000000400e94: je 0xeba; adc byte ptr [rbx + 0x410c247c], cl; call rsp; 
0x000000000040ed93: je 0xedb5; mov eax, 0x4bef78; cmp rax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000400ee8: je 0xf0e; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000040f1d7: je 0xf1ee; add byte ptr [rdi], cl; test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000040f697: je 0xf6ae; add byte ptr [rdi], cl; test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000412c82: jg 0x12cf4; mov eax, 3; syscall; 
0x0000000000413cc8: jg 0x13d3a; xor eax, eax; syscall; 
0x00000000004185a7: jg 0x185a7; jmp qword ptr [rsi + 0xf]; 
0x0000000000427892: jg 0x278db; adc bl, dh; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x00000000004279b7: jg 0x279c9; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000427d87: jg 0x27d98; test dword ptr [rax + 0x48fffffb], edi; mov eax, edi; ret; 
0x00000000004310ee: jg 0x3113f; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043128d: jg 0x3128f; add rsi, rdx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043132e: jg 0x31330; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313dd: jg 0x313df; add rsi, rdx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043147e: jg 0x31480; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043152d: jg 0x3152f; add rsi, rdx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315ce: jg 0x315d0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043167d: jg 0x3167f; add rsi, rdx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043171e: jg 0x31720; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317cd: jg 0x317cf; add rsi, rdx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043191d: jg 0x3191f; add rsi, rdx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319be: jg 0x319c0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a6d: jg 0x31a6f; add rsi, rdx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b0e: jg 0x31b10; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc5: jg 0x31bc7; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c5e: jg 0x31c60; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d0d: jg 0x31d0f; add rsi, rdx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431dae: jg 0x31db0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e5d: jg 0x31e5f; add rsi, rdx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431efe: jg 0x31f00; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fad: jg 0x31faf; add rsi, rdx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043204e: jg 0x32050; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004320fd: jg 0x320ff; add rsi, rdx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043219e: jg 0x321a0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043224d: jg 0x3224f; add rsi, rdx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322ee: jg 0x322f0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043239d: jg 0x3239f; add rsi, rdx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043243e: jg 0x32440; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324ed: jg 0x324ef; add rsi, rdx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043258e: jg 0x32590; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef9: jg 0x32f4a; ret; 
0x0000000000432f7f: jg 0x32fc8; ret; 
0x00000000004330f9: jg 0x3314a; ret 0x894c; 
0x000000000043317f: jg 0x331c8; ret 0x894c; 
0x000000000043381e: jg 0x337e0; sub rdx, 0x40; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043390b: jg 0x33977; rol ch, 1; jp 0x33990; jb 0x338f3; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x000000000043399c: jg 0x339a5; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004339bc: jg 0x339c5; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000433ca2: jg 0x33cf4; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433d1d: jg 0x33d6f; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000435a08: jg 0x35a51; loope 0x359ff; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435a7f: jg 0x35ac8; ret 0xff2; 
0x0000000000435b0f: jg 0x35b58; ret; 
0x0000000000435bb8: jg 0x35c01; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435c38: jg 0x35c81; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435cb8: jg 0x35d01; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435d38: jg 0x35d81; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435fb8: jg 0x36001; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436038: jg 0x36081; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360c8: jg 0x36111; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436148: jg 0x36191; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004361bc: jg 0x361c5; ret; 
0x0000000000436216: jg 0x36227; ret; 
0x0000000000436211: jg 0x3625a; psllq mm1, qword ptr [rdi]; jg 0x36227; ret; 
0x0000000000436286: jg 0x36297; ret; 
0x00000000004362f6: jg 0x36307; ret; 
0x00000000004362e3: jg 0x3632c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362f1: jg 0x3633a; or eax, 0xf7f0ff3; ret; 
0x0000000000436366: jg 0x36377; ret; 
0x0000000000436361: jg 0x363aa; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004363d6: jg 0x363e7; ret; 
0x00000000004363d1: jg 0x3641a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000436446: jg 0x36457; ret; 
0x0000000000436441: jg 0x3648a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000004364b6: jg 0x364c7; ret; 
0x00000000004364b1: jg 0x364fa; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000436526: jg 0x36537; ret; 
0x0000000000436521: jg 0x3656a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000436596: jg 0x365a7; ret; 
0x0000000000436606: jg 0x36617; ret; 
0x0000000000436676: jg 0x36687; ret; 
0x0000000000436663: jg 0x366ac; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436671: jg 0x366ba; add eax, 0xf7f0ff3; ret; 
0x00000000004366e6: jg 0x366f7; ret; 
0x00000000004366e1: jg 0x3672a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000436756: jg 0x36767; ret; 
0x0000000000436751: jg 0x3679a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004367c6: jg 0x367d7; ret; 
0x00000000004367c1: jg 0x3680a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000436836: jg 0x36847; ret; 
0x0000000000436831: jg 0x3687a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000436950: jg 0x36959; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436974: jg 0x3697d; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436988: jg 0x36991; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000436dfa: jg 0x36df4; ret; 
0x000000000043c506: jg 0x3c50f; ret; 
0x000000000043c516: jg 0x3c51f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c52a: jg 0x3c533; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043c549: jg 0x3c552; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c559: jg 0x3c562; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c569: jg 0x3c572; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c58a: jg 0x3c593; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043c5aa: jg 0x3c5b3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c5ca: jg 0x3c5d3; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043c5ea: jg 0x3c5f3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c60e: jg 0x3c617; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043c62d: jg 0x3c636; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c64d: jg 0x3c656; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043c66b: jg 0x3c674; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c68b: jg 0x3c694; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6ab: jg 0x3c6b4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043c6cb: jg 0x3c6d4; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cb96: jg 0x3cb9f; lea rax, [rdi + 0xf]; ret; 
0x000000000043cba6: jg 0x3cbaf; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043cbba: jg 0x3cbc3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043cbd9: jg 0x3cbe2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043cbf9: jg 0x3cc02; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc19: jg 0x3cc22; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043cc3a: jg 0x3cc43; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043cc5a: jg 0x3cc63; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043cc7a: jg 0x3cc83; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc9a: jg 0x3cca3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043ccbe: jg 0x3ccc7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043ccdd: jg 0x3cce6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043ccfd: jg 0x3cd06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043cd1b: jg 0x3cd24; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043cd3b: jg 0x3cd44; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043cd5b: jg 0x3cd64; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000043cd1f: jg 0x3cd78; or eax, 0x1c478d48; ret; 
0x000000000043cd7b: jg 0x3cd84; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043ed77: jg 0x3ed80; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed92: jg 0x3ed9b; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ef17: jg 0x3ef20; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ef0d: jg 0x3ef26; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043f4e0: jg 0x3f51b; ret 0x2b77; 
0x0000000000441ed3: jg 0x41edd; add byte ptr [rdx + 4], bh; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4c: jg 0x41f56; add byte ptr [rdx + 4], bh; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ff8: jg 0x42002; add byte ptr [rdx + 4], bh; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442071: jg 0x4207b; add byte ptr [rdx + 4], bh; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442151: jg 0x4215b; add byte ptr [rdx + 4], bh; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442276: jg 0x42280; add byte ptr [rdx + 4], bh; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422ef: jg 0x422f9; add byte ptr [rdx + 4], bh; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442400: jg 0x4240a; add byte ptr [rdx + 4], bh; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442479: jg 0x42483; add byte ptr [rdx + 4], bh; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044259e: jg 0x425a8; add byte ptr [rdx + 4], bh; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044267e: jg 0x42688; add byte ptr [rdx + 4], bh; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426f7: jg 0x42701; add byte ptr [rdx + 4], bh; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281c: jg 0x42826; add byte ptr [rdx + 4], bh; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442c3a: jg 0x42c4c; add byte ptr [rdi], cl; test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x000000000044ae4f: jg 0x4adda; ret 0x5c77; 
0x00000000004811f5: jg 0x8121f; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048bb17: jg 0x8bb20; call 0x8b470; leave; ret; 
0x000000000048bdbe: jg 0x8bdc0; add byte ptr [rsi + rax - 0x39], dh; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000048be43: jg 0x8be45; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048beb4: jg 0x8bebf; ret 0x5488; 
0x0000000000495c8c: jg 0x95c77; push -0x7a000006; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x00000000004990b1: jg 0x990b3; add byte ptr [rcx], bh; ret; 
0x00000000004a4a91: jg 0xa4a8c; push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004a4a95: jg 0xa4a90; inc eax; jg 0xa4a94; call rax; 
0x00000000004a4a95: jg 0xa4a90; inc eax; jg 0xa4a94; call rax; jg 0xa4a98; jmp rax; 
0x00000000004a4a99: jg 0xa4a94; call rax; 
0x00000000004a4a99: jg 0xa4a94; call rax; jg 0xa4a98; jmp rax; 
0x00000000004a4a9d: jg 0xa4a98; jmp rax; 
0x00000000004a4aa1: jg 0xa4a9c; push rax; jg 0xa4aa0; call qword ptr [rax]; 
0x00000000004a4aa5: jg 0xa4aa0; call qword ptr [rax]; 
0x00000000004c5511: jg 0xc550c; call rdx; 
0x00000000004015cd: jge 0x15ec; add byte ptr [rax + 2], dil; syscall; 
0x000000000040163d: jge 0x165c; add byte ptr [rax + 2], dil; syscall; 
0x000000000044120b: jge 0x4120d; call rbx; 
0x0000000000441332: jge 0x41334; call rbx; 
0x0000000000441340: jge 0x41342; call rbx; 
0x0000000000441475: jge 0x41477; call rbx; 
0x00000000004415e5: jge 0x415e7; call rbx; 
0x00000000004415f3: jge 0x415f5; call rbx; 
0x0000000000441a46: jge 0x41a08; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000441e8f: jge 0x41e99; add byte ptr [rdx + 2], bh; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000044210d: jge 0x42117; add byte ptr [rdx + 2], bh; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423bc: jge 0x423c6; add byte ptr [rdx + 2], bh; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000442e03: jge 0x42e05; call rbx; 
0x0000000000442f2b: jge 0x42f2d; call rbx; 
0x000000000044306e: jge 0x43070; call rbx; 
0x000000000044316f: jge 0x43171; call rbx; 
0x000000000044318b: jge 0x4318d; call rbx; 
0x00000000004434e6: jge 0x43490; mov eax, 3; syscall; 
0x00000000004435d3: jge 0x4356d; mov eax, 3; syscall; 
0x0000000000444840: jge 0x4488d; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x0000000000454a64: jge 0x54a96; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000047ffd7: jge 0x7ffda; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000480097: jge 0x8009a; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000049131f: jge 0x91392; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000049cfff: jge 0x9cff9; leave; ret; 
0x000000000049d097: jge 0x9d091; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d12b: jge 0x9d125; leave; ret; 
0x000000000049d177: jge 0x9d171; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d240: jge 0x9d23a; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2cf: jge 0x9d2c9; leave; ret; 
0x000000000049d320: jge 0x9d31a; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d8c8: jge 0x9d8d3; jp 0x9d940; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a40cd: jge 0xa40c7; call qword ptr [rax]; 
0x00000000004a40cd: jge 0xa40c7; call qword ptr [rax]; clc; jmp qword ptr [rax]; 
0x00000000004bee7c: jge 0xbee52; std; push qword ptr [rdx - 0x2c]; std; jmp qword ptr [rdi - 0x2c]; 
0x00000000004c6cfd: jge 0xc6cff; add byte ptr [rax - 0x37], dl; cli; call qword ptr [rcx]; 
0x00000000004c6d75: jge 0xc6d77; add byte ptr [rax - 0x36], ch; cli; call qword ptr [rcx]; 
0x0000000000414ffb: jl 0x1503d; movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c2e5: jl 0x1c30b; or byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000041c41c: jl 0x1c442; or byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000004368df: jl 0x36929; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004368e6: jl 0x36930; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004368ed: jl 0x36937; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004368f4: jl 0x3693e; adc dword ptr [rcx - 1], edi; ret; 
0x000000000043691c: jl 0x36966; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436922: jl 0x3696c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436929: jl 0x36973; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436930: jl 0x3697a; adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000436b19: jl 0x36b63; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436b20: jl 0x36b6a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436b27: jl 0x36b71; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436b2e: jl 0x36b78; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000436c87: jl 0x36cd1; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c8e: jl 0x36cd8; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c95: jl 0x36cdf; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000436de2: jl 0x36e2c; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436de9: jl 0x36e33; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df0: jl 0x36e3a; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df7: jl 0x36e41; adc dword ptr [rdi - 8], edi; ret; 
0x000000000043eeb7: jl 0x3ef01; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eebe: jl 0x3ef08; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eec5: jl 0x3ef0f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eecc: jl 0x3ef16; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043eed9: jl 0x3ef23; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eedf: jl 0x3ef29; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eee6: jl 0x3ef30; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eeed: jl 0x3ef37; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043eefa: jl 0x3ef44; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043ef00: jl 0x3ef4a; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043efc0: jl 0x3f00a; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043efc7: jl 0x3f011; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043efce: jl 0x3f018; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043efd5: jl 0x3f01f; adc dword ptr [rsi - 1], edx; ret; 
0x000000000043f019: jl 0x3f063; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f01f: jl 0x3f069; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f026: jl 0x3f070; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f02d: jl 0x3f077; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043f0bc: jl 0x3f106; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c3: jl 0x3f10d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0ca: jl 0x3f114; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000440624: jl 0x4064a; test al, 2; cmove eax, edx; ret; 
0x00000000004406cc: jl 0x406f2; adc byte ptr [rdx], al; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x00000000004407cf: jl 0x407f5; or byte ptr [rax - 0x75], cl; jl 0x407fa; or byte ptr [rax + 0x4f], bh; syscall; 
0x00000000004407d4: jl 0x407fa; or byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000440ada: jl 0x40b00; adc byte ptr [rax + 0x101], bh; syscall; 
0x0000000000440b5c: jl 0x40b82; adc byte ptr [rax + 3], bh; syscall; 
0x0000000000440cea: jl 0x40d10; or byte ptr [rax + 0x29], cl; ret; 
0x00000000004416a0: jl 0x416c6; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000442902: jl 0x42928; adc byte ptr [rax], al; jne 0x41e78; mov esi, 3; mov rdi, r12; call rbx; 
0x00000000004476f0: jl 0x47696; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000448606: jl 0x4862c; adc byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x0000000000448f69: jl 0x48f8f; adc byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000044934f: jl 0x49375; sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000044a0e0: jl 0x4a106; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044adf9: jl 0x4ae1f; xor byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x000000000044bd05: jl 0x4bd2b; sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000044e2b8: jl 0x4e2de; sub byte ptr [rcx - 0x77], al; ret 0x8b4c; 
0x0000000000450da2: jl 0x50dc8; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x00000000004535bc: jl 0x535e2; and byte ptr [rax + 1], cl; ret; 
0x000000000045d83c: jl 0x5d862; and byte ptr [rax + 1], cl; ret; 
0x000000000046cf85: jl 0x6cf1c; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000476d3f: jl 0x76d65; cmovs eax, dword ptr [rbx + 0x55e8f0e7]; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000480e6a: jl 0x80e6b; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000480ebf: jl 0x80ee5; sub byte ptr [rax], al; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000481039: jl 0x8105f; adc byte ptr [rax], al; jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x0000000000489f17: jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x000000000049573d: jl 0x95763; js 0x95782; call rsp; 
0x0000000000495a52: jl 0x95a78; js 0x95a97; call rsp; 
0x0000000000495c11: jl 0x95c37; js 0x95c56; call rsp; 
0x0000000000495e19: jl 0x95e3f; js 0x95e5e; call rsp; 
0x0000000000497417: jl 0x973de; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000049b652: jl 0x9b678; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004a4790: jl 0xa47a4; stc; jmp qword ptr [rdx]; 
0x00000000004a4a79: jl 0xa4a74; push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004a4a7d: jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004a4a89: jl 0xa4a84; push qword ptr [rax - 0x5f000684]; jg 0xa4a8c; push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004beeb0: jl 0xbee88; std; call qword ptr [rsi + rdx*8]; std; jmp rsp; 
0x00000000004c053c: jl 0xc0553; add byte ptr [rax], al; jo 0xc0568; cmc; call qword ptr [rbx]; 
0x00000000004c1e3c: jl 0xc1e6c; add byte ptr [rax], al; ror dh, 0xf5; call qword ptr [rbx]; 
0x00000000004c393c: jl 0xc3987; add byte ptr [rax], al; sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x00000000004c3a3c: jl 0xc3a88; add byte ptr [rax], al; add byte ptr [rcx], ah; clc; call qword ptr [rax]; 
0x00000000004c3f3c: jl 0xc3f8d; add byte ptr [rax], al; adc byte ptr [rdi], bh; clc; call qword ptr [rax]; 
0x00000000004c5411: jl 0xc540c; call rdi; 
0x00000000004c6e3c: jl 0xc6ebc; add byte ptr [rax], al; or ah, 0xfa; jmp rsp; 
0x000000000040e4a3: jl 0xe4c9; and byte ptr [rax - 0x75], cl; and al, 0x30; lea r15, [rbx + r14]; call rax; 
0x0000000000400e98: jl 0xebe; or al, 0x41; call rsp; 
0x0000000000400eec: jl 0xf12; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004136c1: jle 0x13733; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000416125: jle 0x16170; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000424a4e: jle 0x24a50; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000043edb2: jle 0x3ed75; cmp dl, 4; jb 0x3edc0; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000043ee46: jle 0x3ee08; rep stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000043ef30: jle 0x3eef3; cmp dl, 4; jb 0x3ef3d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000441eb3: jle 0x41ebd; add byte ptr [rdx + 3], bh; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fd8: jle 0x41fe2; add byte ptr [rdx + 3], bh; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442131: jle 0x4213b; add byte ptr [rdx + 3], bh; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442256: jle 0x42260; add byte ptr [rdx + 3], bh; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e0: jle 0x423ea; add byte ptr [rdx + 3], bh; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044265e: jle 0x42668; add byte ptr [rdx + 3], bh; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442783: jle 0x4278d; add byte ptr [rdx + 3], bh; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044e722: jle 0x4e72c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000450159: jle 0x501cd; mov rdx, r9; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x0000000000450123: jle 0x501d0; mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x000000000045852e: jle 0x5854b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000458720: jle 0x58606; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000462b2e: jle 0x62b4b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be0a: jle 0x6bdf7; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046beda: jle 0x6bec7; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000047ff10: jle 0x7ff13; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048c1d0: jle 0x8c1e0; test ah, 0x80; je 0x8c290; mov rax, rdx; pop rbx; ret; 
0x00000000004bc47a: jle 0xbc415; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004c6189: jle 0xc6185; jmp rdx; 
0x00000000004a48ff: jmp qword ptr [rax + 0x14]; 
0x00000000004a48f7: jmp qword ptr [rax + 0x15]; 
0x00000000004a48ef: jmp qword ptr [rax + 0x16]; 
0x00000000004a48e7: jmp qword ptr [rax + 0x17]; 
0x00000000004a48df: jmp qword ptr [rax + 0x18]; 
0x00000000004a4917: jmp qword ptr [rax + 0x19]; 
0x00000000004a4707: jmp qword ptr [rax + 0x1d]; 
0x00000000004a44ef: jmp qword ptr [rax + 0x20]; 
0x00000000004be30f: jmp qword ptr [rax + 0x27]; 
0x00000000004a40e3: jmp qword ptr [rax + 0x4b]; 
0x00000000004a4053: jmp qword ptr [rax + 0x65]; 
0x00000000004a4073: jmp qword ptr [rax + 0x72]; 
0x00000000004a4a27: jmp qword ptr [rax + 0x7a]; 
0x00000000004c6683: jmp qword ptr [rax + 1]; 
0x00000000004a3fa3: jmp qword ptr [rax - 0x12]; 
0x00000000004a437f: jmp qword ptr [rax - 0x15]; 
0x00000000004a3f93: jmp qword ptr [rax - 0x17]; 
0x00000000004a43b3: jmp qword ptr [rax - 0x1b]; 
0x00000000004a43cf: jmp qword ptr [rax - 0x1d]; 
0x00000000004a44a3: jmp qword ptr [rax - 0x2d]; 
0x00000000004bee63: jmp qword ptr [rax - 0x32]; 
0x00000000004bea17: jmp qword ptr [rax - 0x39]; 
0x00000000004be9eb: jmp qword ptr [rax - 0x3c]; 
0x00000000004a41e7: jmp qword ptr [rax - 0x3e]; 
0x00000000004a0f5e: jmp qword ptr [rax - 0x78]; 
0x00000000004a0dae: jmp qword ptr [rax - 0x7a]; 
0x00000000004a4afb: jmp qword ptr [rax - 0x7e]; 
0x00000000004a4adb: jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ab7: jmp qword ptr [rax - 0x80]; 
0x00000000004a498f: jmp qword ptr [rax - 0xb]; 
0x00000000004a3fb3: jmp qword ptr [rax - 0xd]; 
0x00000000004a3fc3: jmp qword ptr [rax - 8]; 
0x000000000041dd19: jmp qword ptr [rax]; 
0x0000000000466b9b: jmp qword ptr [rbp + 0x41]; 
0x0000000000466be7: jmp qword ptr [rbp + 0x45]; 
0x00000000004c72d3: jmp qword ptr [rbp + 0xb]; 
0x00000000004c754b: jmp qword ptr [rbp + 1]; 
0x00000000004c299b: jmp qword ptr [rbp + 4]; 
0x00000000004a420f: jmp qword ptr [rbp - 0x40]; 
0x00000000004644d1: jmp qword ptr [rbp - 0x75]; 
0x00000000004644c1: jmp qword ptr [rbp]; 
0x00000000004c2c3b: jmp qword ptr [rbx + 0x17]; 
0x00000000004c2aa3: jmp qword ptr [rbx + 2]; 
0x00000000004c7043: jmp qword ptr [rbx + 5]; 
0x00000000004b9b46: jmp qword ptr [rbx - 0x40]; 
0x00000000004c0fc3: jmp qword ptr [rbx]; 
0x00000000004bfea3: jmp qword ptr [rcx + 0x4000001]; 
0x0000000000463526: jmp qword ptr [rcx + 0x48]; 
0x00000000004a4233: jmp qword ptr [rcx - 0x3a]; 
0x00000000004a422b: jmp qword ptr [rcx - 0x3b]; 
0x00000000004a4223: jmp qword ptr [rcx - 0x3c]; 
0x00000000004ba4a3: jmp qword ptr [rcx - 0x69]; 
0x00000000004c0d93: jmp qword ptr [rcx]; 
0x00000000004c2aeb: jmp qword ptr [rdi + 0x2b]; 
0x0000000000499497: jmp qword ptr [rdi + 0x6d]; 
0x000000000045a91b: jmp qword ptr [rdi + 0xf]; 
0x00000000004bffa3: jmp qword ptr [rdi + 1]; 
0x00000000004c20eb: jmp qword ptr [rdi + 3]; 
0x00000000004c2c0b: jmp qword ptr [rdi + 6]; 
0x00000000004bee83: jmp qword ptr [rdi - 0x2c]; 
0x000000000045997b: jmp qword ptr [rdi - 0x75]; 
0x00000000004c738b: jmp qword ptr [rdi]; 
0x00000000004a459b: jmp qword ptr [rdx + 0x22]; 
0x000000000041729d: jmp qword ptr [rdx + 0x2b]; 
0x0000000000436c62: jmp qword ptr [rdx + 0x51]; 
0x0000000000436dc3: jmp qword ptr [rdx + 0x71]; 
0x00000000004c5823: jmp qword ptr [rdx + 1]; 
0x00000000004c7ae3: jmp qword ptr [rdx + 9]; 
0x0000000000436d7b: jmp qword ptr [rdx - 0x2f]; 
0x00000000004ba4f0: jmp qword ptr [rdx - 0x71]; 
0x00000000004bc613: jmp qword ptr [rdx - 0x78]; 
0x00000000004368c1: jmp qword ptr [rdx - 0xf]; 
0x00000000004c6053: jmp qword ptr [rdx]; 
0x00000000004a4537: jmp qword ptr [rsi + 0x1f]; 
0x00000000004c55fb: jmp qword ptr [rsi + 0x28]; 
0x00000000004014e4: jmp qword ptr [rsi + 0x2e]; 
0x00000000004525bd: jmp qword ptr [rsi + 0x41]; 
0x0000000000497740: jmp qword ptr [rsi + 0x43]; 
0x000000000043eb83: jmp qword ptr [rsi + 0x44]; 
0x000000000043409f: jmp qword ptr [rsi + 0x45]; 
0x0000000000442951: jmp qword ptr [rsi + 0xf]; 
0x00000000004c11ab: jmp qword ptr [rsi + 2]; 
0x00000000004a427b: jmp qword ptr [rsi - 0x39]; 
0x000000000045b98f: jmp qword ptr [rsi - 0x3f]; 
0x000000000040099d: jmp qword ptr [rsi - 0x70]; 
0x000000000042791c: jmp qword ptr [rsi - 0x77]; 
0x0000000000403fa8: jmp qword ptr [rsi - 0x7b]; 
0x0000000000440b21: jmp qword ptr [rsi - 0x7d]; 
0x00000000004c17e3: jmp qword ptr [rsi]; 
0x00000000004008e5: jmp rax; 
0x000000000047f731: jmp rbx; 
0x000000000042168e: jmp rcx; 
0x00000000004c676b: jmp rdi; 
0x000000000042270a: jmp rdx; 
0x00000000004a450f: jmp rsi; 
0x00000000004a4683: jmp rsp; 
0x000000000041078b: jne 0x10798; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410cfc: jne 0x10cd0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041129c: jne 0x10f90; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041167b: jne 0x11684; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000411d0c: jne 0x11d10; pop rbx; ret; 
0x000000000041274a: jne 0x12876; mov esi, 0x902; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000412910: jne 0x12a97; mov esi, 0x902; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000412ee4: jne 0x12e60; mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041328d: jne 0x13296; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x00000000004144d5: jne 0x144e0; ret; 
0x0000000000401552: jne 0x150a; xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x00000000004015bf: jne 0x1524; xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x000000000040162f: jne 0x153e; xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x00000000004163a7: jne 0x163d9; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416961: jne 0x16970; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000416cb2: jne 0x16c9a; pop rbx; ret; 
0x0000000000416cec: jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x0000000000417400: jne 0x173be; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004175e3: jne 0x175f0; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041bc6d: jne 0x1bcd3; mov esi, 0x80000; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x000000000041ee11: jne 0x1eecf; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042011c: jne 0x20148; mov rax, qword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x0000000000420485: jne 0x20557; mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000422674: jne 0x2267d; lea rax, [rip + 3]; ret; 
0x00000000004027d7: jne 0x2605; mov eax, 0; test rax, rax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004270c5: jne 0x271b0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000427179: jne 0x271d0; xor rax, rax; ret; 
0x0000000000427139: jne 0x271f0; xor rax, rax; ret; 
0x000000000042721a: jne 0x27224; lea rax, [rip + 0x1d]; ret; 
0x0000000000427a63: jne 0x27946; mov rax, rdi; ret; 
0x00000000004279b9: jne 0x279a0; mov rax, rdi; ret; 
0x0000000000427a9a: jne 0x27ab0; and edx, 7; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427c84: jne 0x27ca0; and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427ee0: jne 0x27ee9; lea rax, [rip + 0x67]; ret; 
0x0000000000427f33: jne 0x27f3c; lea rax, [rip + 4]; ret; 
0x000000000042def3: jne 0x2df40; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042f66c: jne 0x2f650; xor eax, eax; sub eax, ecx; ret; 
0x0000000000430857: jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000004302fd: jne 0x30c83; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000430251: jne 0x30c83; xor eax, eax; ret; 
0x0000000000430348: jne 0x30c8f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000430279: jne 0x30c8f; xor eax, eax; ret; 
0x000000000043054a: jne 0x30c9a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000004303dd: jne 0x30cb0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000403f0a: jne 0x3cc7; test r8, r8; jne 0x3ee5; mov rdi, r12; mov eax, 3; syscall; 
0x000000000043cf20: jne 0x3ce10; lea rax, [rdi + 0xb]; ret; 
0x000000000043ceda: jne 0x3ce10; lea rax, [rdi + 0xf]; ret; 
0x000000000043ce85: jne 0x3ce10; lea rax, [rdi + 3]; ret; 
0x000000000043ce57: jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x000000000043ce02: jne 0x3ce14; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043ce7c: jne 0x3cff0; test dl, 4; jne 0x3ce10; lea rax, [rdi + 3]; ret; 
0x000000000043cf5e: jne 0x3d020; test al, 0x40; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000043cf66: jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000043ce4e: jne 0x3d030; test dl, 0x40; jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x000000000043cf17: jne 0x3d060; test dh, 4; jne 0x3ce10; lea rax, [rdi + 0xb]; ret; 
0x000000000043cfb0: jne 0x3d090; test ah, 0x40; jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cfb9: jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x000000000043ced1: jne 0x3d0a0; test dh, 0x40; jne 0x3ce10; lea rax, [rdi + 0xf]; ret; 
0x000000000043e2b5: jne 0x3e330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043e5e4: jne 0x3e7f0; xor eax, eax; ret; 
0x000000000043e744: jne 0x3e805; cmp eax, ecx; jne 0x3e805; xor eax, eax; ret; 
0x000000000043e801: jne 0x3e805; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000043e7e0: jne 0x3e805; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e805; xor eax, eax; ret; 
0x000000000043e691: jne 0x3e805; xor eax, eax; ret; 
0x000000000043e911: jne 0x3e900; ret; 
0x000000000043e908: jne 0x3e920; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9c1: jne 0x3e9b0; ret; 
0x000000000043e9b8: jne 0x3e9d0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x000000000043eb31: jne 0x3eb20; lea rax, [rcx - 1]; ret; 
0x000000000043eb28: jne 0x3eb40; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3eb20; lea rax, [rcx - 1]; ret; 
0x000000000043ec81: jne 0x3ec70; sub rax, 1; ret; 
0x000000000043ec78: jne 0x3ec90; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3ec70; sub rax, 1; ret; 
0x0000000000403f13: jne 0x3ee5; mov rdi, r12; mov eax, 3; syscall; 
0x000000000043f573: jne 0x3f512; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043fd8b: jne 0x3fd58; lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000043fcc6: jne 0x3fd58; xor esi, esi; mov eax, 2; syscall; 
0x00000000004404a7: jne 0x404bd; mov eax, 2; syscall; 
0x0000000000440507: jne 0x4051d; mov eax, 0; syscall; 
0x0000000000440567: jne 0x4057d; mov eax, 1; syscall; 
0x0000000000441105: jne 0x4109e; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x00000000004419b8: jne 0x41998; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000442906: jne 0x41e78; mov esi, 3; mov rdi, r12; call rbx; 
0x000000000044297d: jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429bd: jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bfd: jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c5d: jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a1d: jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442c9d: jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c7d: jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044293d: jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429fd: jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442c3d: jne 0x4215f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c1d: jne 0x421d8; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004429dd: jne 0x42264; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bdd: jne 0x42284; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bbd: jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004428e6: jne 0x423a5; mov esi, 3; mov rdi, r12; call rbx; 
0x000000000044295d: jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442a9d: jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442add: jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442abd: jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a7d: jne 0x42513; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b9d: jne 0x42533; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b7d: jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044299d: jne 0x42648; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442a5d: jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b5d: jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b3d: jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442a3d: jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442b1d: jne 0x427b1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442afd: jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x00000000004434e2: jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004435cf: jne 0x43598; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x00000000004437ba: jne 0x437b0; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000044382a: jne 0x43820; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000443972: jne 0x43964; pop rdx; pop r10; ret; 
0x0000000000443962: jne 0x4396c; nop; mov eax, 0xca; syscall; 
0x00000000004439bf: jne 0x439a8; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x0000000000443a22: jne 0x43a10; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x0000000000443b43: jne 0x43b38; xor eax, eax; leave; ret; 
0x00000000004454ed: jne 0x45498; add rsp, 0x1d8; pop rbx; pop rbp; ret; 
0x000000000044ec85: jne 0x4ecb8; mov eax, 0; test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x0000000000452ed1: jne 0x52eb8; mov rax, rsi; ret; 
0x0000000000452f55: jne 0x52f30; mov rax, rsi; ret; 
0x00000000004005db: jne 0x5de; ret; 
0x000000000046c5bc: jne 0x6c5f3; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046c774: jne 0x6c7b3; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046d3c9: jne 0x6d3e0; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000046d559: jne 0x6d568; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000046d5ec: jne 0x6d63e; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046ddf3: jne 0x6ddf9; xor rax, rax; ret; 
0x0000000000472f42: jne 0x72e86; mov rdx, 0xffffffffffffffd0; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000004730b2: jne 0x72ff3; mov rdx, 0xffffffffffffffd0; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000473657: jne 0x7366d; mov eax, 3; syscall; 
0x00000000004737e2: jne 0x7378e; and eax, 0x14750000; mov eax, 0x14; syscall; 
0x00000000004737e7: jne 0x737fd; mov eax, 0x14; syscall; 
0x0000000000473b63: jne 0x73b11; xor eax, eax; ret; 
0x0000000000473b5f: jne 0x73b65; test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x0000000000479bd5: jne 0x79be8; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000479c99: jne 0x79cb0; or byte ptr [rdi + 0x315], 4; add rsp, 8; ret; 
0x000000000047a0bd: jne 0x7a0b0; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000047a893: jne 0x7a367; mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b091: jne 0x7a560; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047b185: jne 0x7acd5; mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047b3b6: jne 0x7ae00; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047c153: jne 0x7c090; movsxd rdx, r12d; lea rsi, [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047c90a: jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000047c92b: jne 0x7c948; mov rax, qword ptr [rip + 0x2514dc]; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x000000000047ca17: jne 0x7ca21; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000047d370: jne 0x7d390; mov qword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x000000000047d665: jne 0x7d674; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047e20e: jne 0x7e25b; add al, ch; pop rdx; cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004801ab: jne 0x800f8; movsx eax, dl; neg eax; ret; 
0x0000000000480ec3: jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000480ebb: jne 0x80ed8; cmp qword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000480f65: jne 0x80f70; xor eax, eax; add rsp, 0x48; ret; 
0x000000000048103d: jne 0x81078; xor eax, eax; add rsp, 0x68; ret; 
0x00000000004810f5: jne 0x81100; xor eax, eax; add rsp, 0x48; ret; 
0x000000000048bdb9: jne 0x8bdc9; cmp esi, 0x7fff; je 0x8bdc9; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c211: jne 0x8c1de; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000048c310: jne 0x8c320; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c7da: jne 0x8c870; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048ca40: jne 0x8ca49; lea rax, [rip + 0x67]; ret; 
0x000000000048ca93: jne 0x8ca9c; lea rax, [rip + 4]; ret; 
0x00000000004967d1: jne 0x967af; mov dword ptr fs:[0x2d0], eax; ret; 
0x00000000004967c4: jne 0x967af; mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000497eb3: jne 0x97eb8; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000004980d8: jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x000000000049ab15: jne 0x9ab3b; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049cbe0: jne 0x9cc28; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x000000000049ccf3: jne 0x9cce3; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000049cd57: jne 0x9cd43; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049cffb: jne 0x9cfed; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d093: jne 0x9d085; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d127: jne 0x9d119; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d173: jne 0x9d165; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d23c: jne 0x9d22e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2cb: jne 0x9d2bd; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d31c: jne 0x9d30e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d5af: jne 0x9d5c5; mov eax, 8; add rsp, 8; ret; 
0x000000000049d644: jne 0x9d633; xor eax, eax; add rsp, 8; ret; 
0x000000000049d619: jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d6a4: jne 0x9d693; xor eax, eax; add rsp, 8; ret; 
0x000000000049d679: jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d977: jne 0x9d953; movzx eax, byte ptr [rcx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049f163: jne 0x9f16b; mov eax, 8; ret; 
0x000000000049f555: jne 0x9f540; pop rbx; ret; 
0x000000000049f5a0: jne 0x9f578; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f6c5: jne 0x9f6a8; pop rbx; ret; 
0x00000000004a1345: jne 0xa1330; mov rdi, qword ptr [rip + 0x22c542]; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x00000000004a407d: jne 0xa4077; inc dword ptr [rax + 0x77]; clc; jmp rax; 
0x00000000004c658d: jne 0xc658f; add byte ptr [rax], ah; xchg ebx, eax; cli; jmp qword ptr [rax]; 
0x00000000004c7c0c: jne 0xc7c12; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x0000000000400c5d: jne 0xc91; mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x0000000000400db3: jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000040dfc5: jne 0xdff8; mov eax, 0xba; syscall; 
0x000000000042723b: jno 0x2729b; add dword ptr [rax], eax; ret; 
0x000000000043050e: jno 0x30517; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004368f0: jno 0x368f0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b2a: jno 0x36b2a; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436c91: jno 0x36c99; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436de1: jno 0x36e5f; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436de8: jno 0x36e66; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436def: jno 0x36e6d; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df6: jno 0x36e74; adc qword ptr [rdi - 8], rdi; ret; 
0x00000000004535b7: jno 0x535ba; add byte ptr [rbp - 0x75], cl; jl 0x535e2; and byte ptr [rax + 1], cl; ret; 
0x000000000048a694: jno 0x8a6df; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000491320: jno 0x91323; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000400b3b: jno 0xb3b; add byte ptr [rax], al; nop; leave; ret; 
0x00000000004bafb9: jno 0xbaf4f; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x0000000000410cf9: jnp 0x10d33; add byte ptr [rbp - 0x2e], dh; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000041346b: jnp 0x134dd; syscall; 
0x00000000004733cc: jnp 0x733d2; sub rsp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x000000000047a0ba: jnp 0x7a0c4; and eax, 0x8b4cf175; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000049c471: jnp 0x9c47b; add eax, 0x438b5877; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004a4a51: jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004a4a55: jnp 0xa4a50; push qword ptr [rax]; jnp 0xa4a54; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4a59: jnp 0xa4a54; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4a5d: jnp 0xa4a58; call qword ptr [rax + 0x7b]; 
0x00000000004a4a61: jnp 0xa4a5c; push qword ptr [rax + 0x7b]; stc; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a4a65: jnp 0xa4a60; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a4a6d: jnp 0xa4a68; call rax; 
0x00000000004a4a6d: jnp 0xa4a68; call rax; jnp 0xa4a6c; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a71: jnp 0xa4a6c; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a75: jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a75: jnp 0xa4a70; call qword ptr [rax]; jl 0xa4a74; push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004bae45: jnp 0xbae00; ret; 
0x00000000004bc6de: jnp 0xbc6f6; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004c44e1: jnp 0xc44db; call qword ptr [rcx]; 
0x000000000042bff7: jns 0x2c05c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c048: jns 0x2c0ad; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c147: jns 0x2c1ac; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c2e6: jns 0x2c34b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c537: jns 0x2c59c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c6d8: jns 0x2c73d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c7d7: jns 0x2c83c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c828: jns 0x2c88d; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c927: jns 0x2c98c; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042cd17: jns 0x2cd7c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042d008: jns 0x2d06d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042d107: jns 0x2d16c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004368f7: jns 0x368f8; ret; 
0x0000000000436b31: jns 0x36b32; ret; 
0x0000000000436c98: jns 0x36ca1; ret; 
0x0000000000477e6c: jns 0x77e74; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0x8545; 
0x000000000049a9f6: jns 0x9a9fb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049cbe4: jns 0x9cc1e; add byte ptr [rdx + rbp*2 + 0x48], dh; add esp, 0x18; ret; 
0x000000000049d716: jns 0x9d71b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049ebd3: jns 0x9ebc6; and al, byte ptr [rax]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049f056: jns 0x9f05b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004b9f4e: jns 0xb9ee2; ret 0xf869; 
0x0000000000410e21: jo 0x10e5b; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411c28: jo 0x11c62; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000412c83: jo 0x12c3d; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004136c2: jo 0x1370c; mov edx, ebx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000414354: jo 0x1439e; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000043f74c: jo 0x3f7c4; add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000004405ac: jo 0x405fe; add byte ptr [rax], al; ret; 
0x000000000046c1da: jo 0x6c1ec; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c21f: jo 0x6c251; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046f9dc: jo 0x6f9ed; xchg ebp, eax; ret 0x8b4c; 
0x000000000047bcfc: jo 0x7bd49; add al, ch; insb byte ptr [rdi], dx; pop rsi; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047c9a4: jo 0x7ca18; add r8b, bpl; ret; 
0x000000000048bfea: jo 0x8bf71; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000004a3f68: jo 0xa3f6b; clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x00000000004a4071: jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004a419c: jo 0xa4142; clc; call qword ptr [rax - 0x4f00075b]; cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004a41bc: jo 0xa416b; clc; call qword ptr [rax - 0x4f000752]; scasd eax, dword ptr [rdi]; clc; call rax; 
0x00000000004a41e4: jo 0xa41a7; clc; jmp qword ptr [rax - 0x3e]; 
0x00000000004a4398: jo 0xa4381; clc; call qword ptr [rax - 0x17]; 
0x00000000004a4418: jo 0xa4400; clc; call qword ptr [rax - 0x18]; 
0x00000000004a4450: jo 0xa441b; clc; push qword ptr [rax + 0xfff8cd]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a4484: jo 0xa4463; clc; inc eax; fdivp st(0); call qword ptr [rax]; 
0x00000000004a4498: jo 0xa4469; clc; inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004a48d8: jo 0xa48f3; stc; jmp rax; 
0x00000000004a4a64: jo 0xa4ae1; stc; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004bafc4: jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x00000000004be364: jo 0xbe352; cld; inc eax; out dx, al; cld; call qword ptr [rax]; 
0x00000000004c0540: jo 0xc0568; cmc; call qword ptr [rbx]; 
0x00000000004c1580: jo 0xc15eb; cmc; call qword ptr [rsi]; 
0x00000000004c5fdd: jo 0xc5fdf; add byte ptr [rax + 0x78], dl; cli; call qword ptr [rcx]; 
0x00000000004c600d: jo 0xc600f; add al, al; js 0xc600d; call rsi; 
0x00000000004c604d: jo 0xc604f; add byte ptr [rax + 0x7a], ah; cli; jmp qword ptr [rdx]; 
0x00000000004c76c0: jo 0xc7711; sti; jmp qword ptr [rdx]; 
0x00000000004c87a0: jo 0xc87c9; cld; call qword ptr [rbp + 5]; 
0x000000000040edcf: jo 0xedf1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000047adf6: jo 0xffffffff8416b8f5; movabs eax, dword ptr [0x4910438b48000005]; add eax, dword ptr [rdi]; call rax; 
0x0000000000427945: jp 0x2793d; ret 0x7401; 
0x0000000000433916: jp 0x33908; ret; 
0x0000000000433979: jp 0x3396b; ret; 
0x000000000043390a: jp 0x3398b; push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x000000000043390f: jp 0x33990; jb 0x338f3; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000433914: jp 0x33995; jp 0x33908; ret; 
0x0000000000433ca1: jp 0x33d22; push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433d1c: jp 0x33d9d; push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000440522: jp 0x40558; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000004537f2: jp 0x537d7; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004767d7: jp 0x767fe; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047d1c2: jp 0x7d16b; cli; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000049547e: jp 0x9548c; pop rbp; pop r12; pop r14; ret; 
0x000000000049d8ca: jp 0x9d940; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a4089: jp 0xa4083; call qword ptr [rax + 0x62]; 
0x00000000004a4a11: jp 0xa4a0c; call qword ptr [rax]; 
0x00000000004a4a11: jp 0xa4a0c; call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a4a15: jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a4a19: jp 0xa4a14; push qword ptr [rax]; jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a1d: jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a1d: jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a21: jp 0xa4a1c; call qword ptr [rax + 0x7a]; 
0x00000000004a4a21: jp 0xa4a1c; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a25: jp 0xa4a20; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a31: jp 0xa4a2c; call qword ptr [rax - 0x5f000686]; jp 0xa4a34; push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a4a39: jp 0xa4a34; push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a4a3d: jp 0xa4a38; inc eax; jp 0xa4a3c; call rax; 
0x00000000004a4a3d: jp 0xa4a38; inc eax; jp 0xa4a3c; call rax; jp 0xa4a40; jmp rax; 
0x00000000004a4a41: jp 0xa4a3c; call rax; 
0x00000000004a4a41: jp 0xa4a3c; call rax; jp 0xa4a40; jmp rax; 
0x00000000004a4a45: jp 0xa4a40; jmp rax; 
0x00000000004a4a49: jp 0xa4a44; push rax; jp 0xa4a48; inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004a4a4d: jp 0xa4a48; inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004bac85: jp 0xbace0; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c6051: jp 0xc604d; jmp qword ptr [rdx]; 
0x00000000004c8b29: jp 0xc8b1e; jmp qword ptr [rsi]; 
0x0000000000412c64: js 0x12c70; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x0000000000440eeb: js 0x40eb2; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004437bf: js 0x4381c; pop rbp; ret; 
0x000000000044382f: js 0x4388c; pop rbp; ret; 
0x0000000000443ee0: js 0x43f02; shl rdx, 4; mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000044f664: js 0x4f6cd; sti; inc dword ptr [rbx - 0x76be0008]; ret; 
0x000000000045076f: js 0x507bb; add al, ch; stc; adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000049573f: js 0x95782; call rsp; 
0x0000000000495a54: js 0x95a97; call rsp; 
0x0000000000495bd3: js 0x95c16; call rsp; 
0x0000000000495c13: js 0x95c56; call rsp; 
0x0000000000495dd6: js 0x95e19; call rsp; 
0x0000000000495e1b: js 0x95e5e; call rsp; 
0x000000000049cf25: js 0x9cf29; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049cf32: js 0x9cf36; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004c2909: js 0xc2901; call qword ptr [rax]; 
0x00000000004c55f8: js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x00000000004c5fe1: js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c6011: js 0xc600d; call rsi; 
0x00000000004c9898: js 0xc98ce; std; jmp qword ptr [rcx]; 
0x000000000040ed96: js 0xed87; add byte ptr [r8 + 0x3d], cl; sub bh, 0x4b; add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x000000000040edf7: js 0xee19; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000420eed: lahf; add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret 0xe96e; 
0x000000000048c331: lahf; clc; dec dword ptr [rax + 0x39]; ret; 
0x00000000004bc483: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000047c90b: lahf; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000042ca7d: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000468a8c: lahf; ret 0x2941; 
0x0000000000410dae: lahf; ret 0x3841; 
0x000000000044171e: lahf; ret 0x3845; 
0x00000000004b9cdd: lahf; ret 0x871e; 
0x0000000000466c61: lahf; ret 0xb60f; 
0x00000000004696f8: lahf; ret 0xd129; 
0x000000000046976f: lahf; ret 0xd629; 
0x0000000000469681: lahf; ret 0xd729; 
0x000000000043f4d9: lahf; ret 0xea81; 
0x000000000049c286: lahf; ret 0xf45; 
0x0000000000441718: lahf; ret; 
0x000000000047bf5d: lahf; std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x00000000004bc6e1: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000042d10d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004361ac: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000436436: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363c6: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436356: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362e6: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436276: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436206: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436826: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367b6: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436746: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366d6: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436666: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004365f6: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436586: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436516: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364a6: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435996: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043613c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360bc: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043602c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fac: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f2c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435eac: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e2c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435dac: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435d2c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435cac: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c2c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435bac: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b1c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a8c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004359fc: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043598c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004361b6: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000436141: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360c1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436031: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fb1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435eb1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435db1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435d31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435cb1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435bb1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b21: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a91: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a01: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043643b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043635b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362eb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043627b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043620b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043682b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043674b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366db: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043666b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004365fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043658b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043651b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000416cfb: lea eax, [r8 - 1]; ret; 
0x0000000000460e36: lea eax, [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004616e3: lea eax, [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000473b8b: lea eax, [rax + 0x493afe7e]; cmove eax, ecx; ret; 
0x00000000004542a5: lea eax, [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049aadc: lea eax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004271a4: lea eax, [rax + rdi + 0x10]; ret; 
0x00000000004271b4: lea eax, [rax + rdi + 0x20]; ret; 
0x0000000000427184: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000047970d: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000416cfc: lea eax, [rax - 1]; ret; 
0x000000000043f577: lea eax, [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000004009fa: lea eax, [rbp - 0x70]; mov rdi, rax; call 0x109b0; nop; leave; ret; 
0x000000000046e1fd: lea eax, [rcx + rsi]; ret; 
0x000000000043eb34: lea eax, [rcx - 1]; ret; 
0x000000000043f575: lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043cbac: lea eax, [rdi + 0x10]; ret; 
0x000000000043cbc1: lea eax, [rdi + 0x11]; ret; 
0x000000000043cbdf: lea eax, [rdi + 0x12]; ret; 
0x000000000043cbff: lea eax, [rdi + 0x13]; ret; 
0x000000000043cc22: lea eax, [rdi + 0x14]; ret; 
0x000000000043cc41: lea eax, [rdi + 0x15]; ret; 
0x000000000043cc61: lea eax, [rdi + 0x16]; ret; 
0x000000000043cc81: lea eax, [rdi + 0x17]; ret; 
0x000000000043cca4: lea eax, [rdi + 0x18]; ret; 
0x000000000043ccc9: lea eax, [rdi + 0x19]; ret; 
0x000000000043cce7: lea eax, [rdi + 0x1a]; ret; 
0x000000000043cd07: lea eax, [rdi + 0x1b]; ret; 
0x000000000043cd23: lea eax, [rdi + 0x1c]; ret; 
0x000000000043cd43: lea eax, [rdi + 0x1d]; ret; 
0x000000000043cd63: lea eax, [rdi + 0x1e]; ret; 
0x000000000043cd83: lea eax, [rdi + 0x1f]; ret; 
0x000000000043cafd: lea eax, [rdi + 0xa]; ret; 
0x000000000043cb1d: lea eax, [rdi + 0xb]; ret; 
0x000000000043cb3f: lea eax, [rdi + 0xc]; ret; 
0x000000000043cb5f: lea eax, [rdi + 0xd]; ret; 
0x000000000043cb7f: lea eax, [rdi + 0xe]; ret; 
0x000000000043cb99: lea eax, [rdi + 0xf]; ret; 
0x000000000043ca47: lea eax, [rdi + 1]; ret; 
0x000000000043ca5a: lea eax, [rdi + 2]; ret; 
0x000000000043ca65: lea eax, [rdi + 3]; ret; 
0x000000000043ca78: lea eax, [rdi + 4]; ret; 
0x000000000043ca8d: lea eax, [rdi + 5]; ret; 
0x000000000043caab: lea eax, [rdi + 6]; ret; 
0x000000000043cab7: lea eax, [rdi + 7]; ret; 
0x000000000043caca: lea eax, [rdi + 8]; ret; 
0x000000000043cadf: lea eax, [rdi + 9]; ret; 
0x00000000004271d9: lea eax, [rdi + rax + 0x10]; ret; 
0x00000000004271e9: lea eax, [rdi + rax + 0x20]; ret; 
0x00000000004270d3: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000042247c: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042dfa7: lea eax, [rdi + rax]; ret; 
0x000000000046e0f9: lea eax, [rdi + rsi]; ret; 
0x0000000000480a08: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x80a18; ret; 
0x000000000045b1c0: lea eax, [rdi - 1]; xor edx, edx; div ecx; add eax, r8d; ret; 
0x000000000043ca33: lea eax, [rdi]; ret; 
0x000000000043c01d: lea eax, [rdx + 0xa]; ret; 
0x000000000043c03d: lea eax, [rdx + 0xb]; ret; 
0x000000000043c05f: lea eax, [rdx + 0xc]; ret; 
0x000000000043c07f: lea eax, [rdx + 0xd]; ret; 
0x000000000043c09f: lea eax, [rdx + 0xe]; ret; 
0x000000000043bf2f: lea eax, [rdx + 0xf]; ret; 
0x0000000000416021: lea eax, [rdx + 1]; mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000043bf57: lea eax, [rdx + 1]; ret; 
0x000000000043bf6d: lea eax, [rdx + 2]; ret; 
0x000000000043bf85: lea eax, [rdx + 3]; ret; 
0x000000000043bf9b: lea eax, [rdx + 4]; ret; 
0x000000000043bfad: lea eax, [rdx + 5]; ret; 
0x000000000043bfcb: lea eax, [rdx + 6]; ret; 
0x000000000043bed7: lea eax, [rdx + 7]; ret; 
0x000000000043bfdd: lea eax, [rdx + 8]; ret; 
0x000000000043bffd: lea eax, [rdx + 9]; ret; 
0x0000000000416cee: lea eax, [rdx + rdi]; ret; 
0x000000000043f5ac: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004181d6: lea eax, [rdx]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000043bf45: lea eax, [rdx]; ret; 
0x0000000000427dc7: lea eax, [rip + 0x12ad3]; ret; 
0x0000000000424897: lea eax, [rip + 0x14853]; ret; 
0x0000000000427239: lea eax, [rip + 0x15e71]; ret; 
0x0000000000427813: lea eax, [rip + 0x17647]; ret; 
0x0000000000422424: lea eax, [rip + 0x1a966]; ret; 
0x000000000042721d: lea eax, [rip + 0x1d]; ret; 
0x0000000000427ee3: lea eax, [rip + 0x67]; ret; 
0x0000000000427231: lea eax, [rip + 0x8449]; ret; 
0x0000000000422677: lea eax, [rip + 3]; ret; 
0x0000000000427f36: lea eax, [rip + 4]; ret; 
0x00000000004c624d: lea eax, [rsi + rcx*4]; add ecx, dword ptr [rdi + 0x80e6a02]; ret; 
0x0000000000480e2b: lea eax, [rsp + 0x10]; call 0x78b40; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000410e2b: lea eax, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411db4: lea eax, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000411b6e: lea eax, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000048baf1: lea eax, [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000049e923: lea ebp, [rbp - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000042488d: lea ebp, [rdx]; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, [rip + 0x14853]; ret; 
0x000000000043ca16: lea ebx, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9e1: lea ebx, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9b5: lea ebx, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c99f: lea ebx, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c97d: lea ebx, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c958: lea ebx, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c93b: lea ebx, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c8e3: lea ebx, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3f6: lea ebx, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3c1: lea ebx, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c395: lea ebx, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37f: lea ebx, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c35d: lea ebx, [rip + 0x686ad]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c338: lea ebx, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c31b: lea ebx, [rip + 0x686ef]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2c3: lea ebx, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000435932: lea ebx, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355d4: lea ebx, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043577f: lea ebx, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435454: lea ebx, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435517: lea ebx, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352d4: lea ebx, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435397: lea ebx, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435154: lea ebx, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435217: lea ebx, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fd4: lea ebx, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435098: lea ebx, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e54: lea ebx, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f17: lea ebx, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cd4: lea ebx, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d97: lea ebx, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b54: lea ebx, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c17: lea ebx, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349d4: lea ebx, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a97: lea ebx, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434854: lea ebx, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434917: lea ebx, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346d4: lea ebx, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434797: lea ebx, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434554: lea ebx, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434617: lea ebx, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343d4: lea ebx, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434497: lea ebx, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434254: lea ebx, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434317: lea ebx, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340d4: lea ebx, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f5b: lea ebx, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434197: lea ebx, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434017: lea ebx, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d5c: lea ebx, [rip + 0x7076e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433eda: lea ebx, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7e: lea ebx, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433825: lea ebx, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433768: lea ebx, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043367d: lea ebx, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335b2: lea ebx, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432591: lea ebx, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324f3: lea ebx, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432441: lea ebx, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004323a3: lea ebx, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322f1: lea ebx, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432253: lea ebx, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004321a1: lea ebx, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432103: lea ebx, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432051: lea ebx, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fb3: lea ebx, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431f01: lea ebx, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e63: lea ebx, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431db1: lea ebx, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d13: lea ebx, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c61: lea ebx, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc8: lea ebx, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b11: lea ebx, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a73: lea ebx, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319c1: lea ebx, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431923: lea ebx, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431871: lea ebx, [rip + 0x72a99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317d3: lea ebx, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431721: lea ebx, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431683: lea ebx, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315d1: lea ebx, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431533: lea ebx, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431481: lea ebx, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313e3: lea ebx, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431331: lea ebx, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431293: lea ebx, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004311e7: lea ebx, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f6: lea ebx, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431037: lea ebx, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fcd: lea ebx, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ede: lea ebx, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e19: lea ebx, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f4: lea ebx, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043007a: lea ebx, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffeb: lea ebx, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fde0: lea ebx, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcae: lea ebx, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe8: lea ebx, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb6a: lea ebx, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fad3: lea ebx, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d7: lea ebx, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a6: lea ebx, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f697: lea ebx, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000041624a: lea ebx, [rsi + 1]; call qword ptr [rax + 0x18]; 
0x00000000004ba591: lea ebx, [rsi - 0x3271f33]; test al, 0x97; xchg esp, eax; ret; 
0x000000000046148f: lea ecx, [rax + 0x4cffffef]; mov edi, esi; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046f100: lea ecx, [rax + 1]; call rbx; 
0x000000000046f4d4: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046c4e2: lea ecx, [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000046d899: lea ecx, [rbp - 0x38]; mov rcx, r13; lea rdx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046aa11: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043c2ce: lea ecx, [rbx + rcx]; jmp rcx; 
0x000000000043367f: lea ecx, [rdi + rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046c6c1: lea ecx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423bd7: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000049131d: lea ecx, [rip + 0x1717d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000049104e: lea ecx, [rip + 0x1744c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f3bd: lea ecx, [rip + 0x190dd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042d339: lea ecx, [rip + 0x7b161]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042bf24: lea ecx, [rip + 0x7c576]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bcc9: lea ecx, [rip + 0x7c7d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042a3f4: lea ecx, [rip + 0x7e0a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000473907: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000046d5f7: lea ecx, [rsp + 0x10]; call rbx; 
0x000000000046d6d0: lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046f4d8: lea ecx, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046f435: lea ecx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046f750: lea ecx, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f6: lea ecx, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f64e: lea ecx, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000048bb2f: lea ecx, [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x00000000004783d6: lea edi, [rax + 0x6cc1e0]; call rdx; 
0x000000000040259c: lea edi, [rbx + 0x80]; call rax; 
0x00000000004733cb: lea edi, [rbx + 4]; sub rsp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x0000000000498390: lea edi, [rbx + rax*8 + 8]; nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000040e4ac: lea edi, [rbx + rsi]; call rax; 
0x00000000004279b6: lea edi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x000000000043381d: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047ff0f: lea edi, [rsi + 1]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004175ab: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000416c8f: lea edx, [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d8a0: lea edx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046aa15: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000430e24: lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000450043: lea edx, [rcx + 1]; call 0x27940; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000432588: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432438: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322e8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432198: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432048: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ef8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431da8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c58: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b08: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431718: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431478: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431328: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000495037: lea edx, [rip + 0x13463]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000495012: lea edx, [rip + 0x13488]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a57: lea edx, [rip + 0x15a43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a32: lea edx, [rip + 0x15a68]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004910a7: lea edx, [rip + 0x173f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491082: lea edx, [rip + 0x17418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f0b2: lea edx, [rip + 0x193e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004390bd: lea edx, [rip + 0x6f3dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d387: lea edx, [rip + 0x7b113]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d36d: lea edx, [rip + 0x7b12d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bd17: lea edx, [rip + 0x7c783]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bcfd: lea edx, [rip + 0x7c79d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a167: lea edx, [rip + 0x7e333]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a14d: lea edx, [rip + 0x7e34d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047c904: lea edx, [rsi + 4]; cmp rdx, r8; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046c601: lea edx, [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004406a9: lea edx, [rsp + 0x10]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d5f2: lea edx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f74b: lea edx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f1: lea edx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f4dd: lea edx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000448600: lea edx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f63: lea edx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000449349: lea edx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fb40: lea edx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044bcff: lea edx, [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044adf3: lea edx, [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440601: lea edx, [rsp - 0x58]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000468b4c: lea esi, [rax - 0x77000005]; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004728bf: lea esi, [rax - 0x7cb7ffdb]; ret; 
0x000000000046d5eb: lea esi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d6c9: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046d7a7: lea esi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000047c15d: lea esi, [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004017d8: lea esi, [rcx + rdi]; mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004279b2: lea esi, [rsi + 0x10]; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x000000000043fd8e: lea esi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040045f: lea esi, [rsp + 0x200]; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049b: lea esi, [rsp + 0x200]; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000411b73: lea esi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000411aeb: lea esi, [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000046f653: lea esi, [rsp + 0x30]; call rbx; 
0x000000000046f0fb: lea esi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000041bc99: lea esi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000046f43a: lea esi, [rsp + 0x40]; call rbx; 
0x0000000000473cad: lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000410041: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000043ca15: lea r11, [rip + 0x68074]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9e0: lea r11, [rip + 0x680a9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9b4: lea r11, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c99e: lea r11, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c97c: lea r11, [rip + 0x6810d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c957: lea r11, [rip + 0x68132]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c93a: lea r11, [rip + 0x6814f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c8e2: lea r11, [rip + 0x681a7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3f5: lea r11, [rip + 0x68614]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3c0: lea r11, [rip + 0x68649]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c394: lea r11, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37e: lea r11, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c35c: lea r11, [rip + 0x686ad]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c337: lea r11, [rip + 0x686d2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c31a: lea r11, [rip + 0x686ef]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2c2: lea r11, [rip + 0x68747]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000435931: lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355d3: lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043577e: lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435453: lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435516: lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352d3: lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435396: lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435153: lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435216: lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fd3: lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435097: lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e53: lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f16: lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cd3: lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d96: lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b53: lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c16: lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349d3: lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a96: lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434853: lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434916: lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346d3: lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434796: lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434553: lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434616: lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343d3: lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434496: lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434253: lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434316: lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340d3: lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f5a: lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434196: lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434016: lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d5b: lea r11, [rip + 0x7076e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed9: lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7d: lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433824: lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433767: lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043367c: lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335b1: lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432590: lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324f2: lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432440: lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004323a2: lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322f0: lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432252: lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004321a0: lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432102: lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432050: lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fb2: lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431f00: lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e62: lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431db0: lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d12: lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c60: lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc7: lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b10: lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a72: lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319c0: lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431922: lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431870: lea r11, [rip + 0x72a99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317d2: lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431720: lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431682: lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315d0: lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431532: lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431480: lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313e2: lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431330: lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431292: lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004311e6: lea r11, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f5: lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431036: lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fcc: lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edd: lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e18: lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f3: lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430079: lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffea: lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fddf: lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcad: lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe7: lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb69: lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fad2: lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d6: lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a5: lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f696: lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000040e4ab: lea r15, [rbx + r14]; call rax; 
0x000000000049838f: lea r15, [rbx + rax*8 + 8]; nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000480e2a: lea r8, [rsp + 0x10]; call 0x78b40; mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000410e2a: lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411db3: lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000411b6d: lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000048baf0: lea r8, [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000046d898: lea r9, [rbp - 0x38]; mov rcx, r13; lea rdx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046d5f6: lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d6cf: lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046f4d7: lea r9, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046f434: lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046f74f: lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f5: lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f64d: lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000049aadb: lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004271a3: lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004271b3: lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000427183: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000047970c: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004009f9: lea rax, [rbp - 0x70]; mov rdi, rax; call 0x109b0; nop; leave; ret; 
0x000000000046e1fc: lea rax, [rcx + rsi]; ret; 
0x000000000043eb33: lea rax, [rcx - 1]; ret; 
0x000000000043cbab: lea rax, [rdi + 0x10]; ret; 
0x000000000043cbc0: lea rax, [rdi + 0x11]; ret; 
0x000000000043cbde: lea rax, [rdi + 0x12]; ret; 
0x000000000043cbfe: lea rax, [rdi + 0x13]; ret; 
0x000000000043cc21: lea rax, [rdi + 0x14]; ret; 
0x000000000043cc40: lea rax, [rdi + 0x15]; ret; 
0x000000000043cc60: lea rax, [rdi + 0x16]; ret; 
0x000000000043cc80: lea rax, [rdi + 0x17]; ret; 
0x000000000043cca3: lea rax, [rdi + 0x18]; ret; 
0x000000000043ccc8: lea rax, [rdi + 0x19]; ret; 
0x000000000043cce6: lea rax, [rdi + 0x1a]; ret; 
0x000000000043cd06: lea rax, [rdi + 0x1b]; ret; 
0x000000000043cd22: lea rax, [rdi + 0x1c]; ret; 
0x000000000043cd42: lea rax, [rdi + 0x1d]; ret; 
0x000000000043cd62: lea rax, [rdi + 0x1e]; ret; 
0x000000000043cd82: lea rax, [rdi + 0x1f]; ret; 
0x000000000043cafc: lea rax, [rdi + 0xa]; ret; 
0x000000000043cb1c: lea rax, [rdi + 0xb]; ret; 
0x000000000043cb3e: lea rax, [rdi + 0xc]; ret; 
0x000000000043cb5e: lea rax, [rdi + 0xd]; ret; 
0x000000000043cb7e: lea rax, [rdi + 0xe]; ret; 
0x000000000043cb98: lea rax, [rdi + 0xf]; ret; 
0x000000000043ca46: lea rax, [rdi + 1]; ret; 
0x000000000043ca59: lea rax, [rdi + 2]; ret; 
0x000000000043ca64: lea rax, [rdi + 3]; ret; 
0x000000000043ca77: lea rax, [rdi + 4]; ret; 
0x000000000043ca8c: lea rax, [rdi + 5]; ret; 
0x000000000043caaa: lea rax, [rdi + 6]; ret; 
0x000000000043cab6: lea rax, [rdi + 7]; ret; 
0x000000000043cac9: lea rax, [rdi + 8]; ret; 
0x000000000043cade: lea rax, [rdi + 9]; ret; 
0x00000000004271d8: lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e8: lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004270d2: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042247b: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042dfa6: lea rax, [rdi + rax]; ret; 
0x000000000046e0f8: lea rax, [rdi + rsi]; ret; 
0x0000000000480a07: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x80a18; ret; 
0x000000000043ca32: lea rax, [rdi]; ret; 
0x000000000043c01c: lea rax, [rdx + 0xa]; ret; 
0x000000000043c03c: lea rax, [rdx + 0xb]; ret; 
0x000000000043c05e: lea rax, [rdx + 0xc]; ret; 
0x000000000043c07e: lea rax, [rdx + 0xd]; ret; 
0x000000000043c09e: lea rax, [rdx + 0xe]; ret; 
0x000000000043bf2e: lea rax, [rdx + 0xf]; ret; 
0x0000000000416020: lea rax, [rdx + 1]; mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000043bf56: lea rax, [rdx + 1]; ret; 
0x000000000043bf6c: lea rax, [rdx + 2]; ret; 
0x000000000043bf84: lea rax, [rdx + 3]; ret; 
0x000000000043bf9a: lea rax, [rdx + 4]; ret; 
0x000000000043bfac: lea rax, [rdx + 5]; ret; 
0x000000000043bfca: lea rax, [rdx + 6]; ret; 
0x000000000043bed6: lea rax, [rdx + 7]; ret; 
0x000000000043bfdc: lea rax, [rdx + 8]; ret; 
0x000000000043bffc: lea rax, [rdx + 9]; ret; 
0x000000000043f5ab: lea rax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043bf44: lea rax, [rdx]; ret; 
0x0000000000427dc6: lea rax, [rip + 0x12ad3]; ret; 
0x0000000000424896: lea rax, [rip + 0x14853]; ret; 
0x0000000000427238: lea rax, [rip + 0x15e71]; ret; 
0x0000000000427812: lea rax, [rip + 0x17647]; ret; 
0x0000000000422423: lea rax, [rip + 0x1a966]; ret; 
0x000000000042721c: lea rax, [rip + 0x1d]; ret; 
0x0000000000427ee2: lea rax, [rip + 0x67]; ret; 
0x0000000000427230: lea rax, [rip + 0x8449]; ret; 
0x0000000000422676: lea rax, [rip + 3]; ret; 
0x0000000000427f35: lea rax, [rip + 4]; ret; 
0x000000000049e922: lea rbp, [r13 - 1]; mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000416249: lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000043c2cd: lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000046f0ff: lea rcx, [rax + 1]; call rbx; 
0x000000000046f4d3: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000046c4e1: lea rcx, [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000046aa10: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046c6c0: lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000423bd6: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000049131c: lea rcx, [rip + 0x1717d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000049104d: lea rcx, [rip + 0x1744c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f3bc: lea rcx, [rip + 0x190dd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042d338: lea rcx, [rip + 0x7b161]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042bf23: lea rcx, [rip + 0x7c576]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bcc8: lea rcx, [rip + 0x7c7d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042a3f3: lea rcx, [rip + 0x7e0a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000473906: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048bb2e: lea rcx, [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x00000000004783d5: lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x000000000040259b: lea rdi, [rbx + 0x80]; call rax; 
0x00000000004733ca: lea rdi, [rbx + 4]; sub rsp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x00000000004279b5: lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x000000000043381c: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e23: lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004175aa: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000416c8e: lea rdx, [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000046d89f: lea rdx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000046aa14: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000450042: lea rdx, [rcx + 1]; call 0x27940; mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000432587: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432437: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322e7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432197: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432047: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ef7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431da7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c57: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b07: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431717: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431477: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431327: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000495036: lea rdx, [rip + 0x13463]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000495011: lea rdx, [rip + 0x13488]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a56: lea rdx, [rip + 0x15a43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a31: lea rdx, [rip + 0x15a68]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004910a6: lea rdx, [rip + 0x173f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491081: lea rdx, [rip + 0x17418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f0b1: lea rdx, [rip + 0x193e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004390bc: lea rdx, [rip + 0x6f3dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d386: lea rdx, [rip + 0x7b113]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d36c: lea rdx, [rip + 0x7b12d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bd16: lea rdx, [rip + 0x7c783]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bcfc: lea rdx, [rip + 0x7c79d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a166: lea rdx, [rip + 0x7e333]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a14c: lea rdx, [rip + 0x7e34d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047c903: lea rdx, [rsi + 4]; cmp rdx, r8; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x000000000046c600: lea rdx, [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004406a8: lea rdx, [rsp + 0x10]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d5f1: lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f74a: lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f0: lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f4dc: lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x00000000004485ff: lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f62: lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000449348: lea rdx, [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fb3f: lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044bcfe: lea rdx, [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044adf2: lea rdx, [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440600: lea rdx, [rsp - 0x58]; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000046d5ea: lea rsi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d6c8: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046d7a6: lea rsi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000047c15c: lea rsi, [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004017d7: lea rsi, [rcx + r15]; mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004279b1: lea rsi, [rsi + 0x10]; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x000000000043fd8d: lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040045e: lea rsi, [rsp + 0x200]; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049a: lea rsi, [rsp + 0x200]; mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000411b72: lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000411aea: lea rsi, [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000046f652: lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0fa: lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000041bc98: lea rsi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000046f439: lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000473cac: lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000410040: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000415148: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004a430d: leave; clc; dec dword ptr [rax - 0x1c]; clc; call qword ptr [rax]; 
0x00000000004a4249: leave; clc; jmp rcx; 
0x00000000004a4451: leave; clc; push qword ptr [rax + 0xfff8cd]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004c6d01: leave; cli; call qword ptr [rcx]; 
0x000000000049a396: leave; cmove rax, rdx; ret; 
0x0000000000473b89: leave; je 0x73b19; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x000000000043e910: leave; jne 0x3e900; ret; 
0x000000000043e9c0: leave; jne 0x3e9b0; ret; 
0x000000000043ec80: leave; jne 0x3ec70; sub rax, 1; ret; 
0x0000000000473b62: leave; jne 0x73b11; xor eax, eax; ret; 
0x000000000047b3b5: leave; jne 0x7ae00; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048c210: leave; jne 0x8c1de; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000042f57c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000445cc0: leave; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x00000000004179d7: leave; pop rbx; sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000400a06: leave; ret; 
0x00000000004ba741: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x0000000000442f33: leave; sar ebp, 0xff; mov rdi, qword ptr [r12]; call rbx; 
0x000000000046f431: leave; xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000410650: lock add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048bfd5: lock add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000042fa5e: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000424560: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004c44d8: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rdx*2 + 0x7b800000], bl; clc; call qword ptr [rcx]; 
0x000000000043e290: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000483f1e: lodsb al, byte ptr [rsi]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000473653: lodsb al, byte ptr [rsi]; and eax, 0x14750000; mov eax, 3; syscall; 
0x00000000004c1ba9: lodsb al, byte ptr [rsi]; cmc; call rsp; 
0x00000000004bcfb0: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000044061e: lodsb al, byte ptr [rsi]; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000480bdf: lodsb al, byte ptr [rsi]; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80bf0; ret; 
0x00000000004bcc1d: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004c8e6c: lodsb al, byte ptr [rsi]; sahf; add byte ptr [rax], al; fmul st(7); cld; call qword ptr [rdi + 9]; 
0x00000000004c0d6c: lodsb al, byte ptr [rsi]; sbb eax, 0x4fc00000; cmc; call qword ptr [rsi]; 
0x00000000004c8b6c: lodsb al, byte ptr [rsi]; wait; add byte ptr [rax], al; adc byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c216c: lodsb al, byte ptr [rsi]; xor dword ptr [rax], eax; add byte ptr [rax], al; in al, 0xf5; jmp qword ptr [rdx]; 
0x0000000000473b64: lodsb al, byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004c9dbd: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; mov al, 0x42; std; call qword ptr [rcx + 1]; 
0x00000000004b9b3b: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004a41bd: lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax - 0x4f000752]; scasd eax, dword ptr [rdi]; clc; call rax; 
0x0000000000442a2e: lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004903e0: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a802: lodsd eax, dword ptr [rsi]; ret; 
0x000000000043c35f: lodsd eax, dword ptr [rsi]; xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004bb0d8: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000424b5c: loope 0x24b7e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000042d9b2: loope 0x2da01; or ecx, edx; mov qword ptr [rdi], r9; pop rbx; ret; 
0x0000000000433307: loope 0x33355; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043334f: loope 0x3339d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043338d: loope 0x333db; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333c5: loope 0x33413; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433403: loope 0x33451; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043343b: loope 0x33489; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433463: loope 0x334b1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a0a: loope 0x359ff; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043c38e: loope 0x3c320; bsf rdx, rdx; lea r11, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c405: loope 0x3c46d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c9ae: loope 0x3c940; bsf rdx, rdx; lea r11, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043ca25: loope 0x3ca8d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043cfbb: loope 0x3cfbd; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000043f6ae: loope 0x3f6a3; ret; 
0x000000000044543a: loope 0x4543e; add byte ptr [rcx], bh; ret; 
0x0000000000445459: loope 0x4545d; add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x000000000044550f: loope 0x45514; shl eax, cl; pop rbx; pop rbp; ret; 
0x0000000000455970: loope 0x559ba; mov edi, ebx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000046dff8: loope 0x6e01a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046ee7e: loope 0x6ee8f; je 0x6eea0; ret; 
0x00000000004734cc: loope 0x73457; ret 0xf631; 
0x000000000047adf5: loope 0x7ae06; cmp cl, 0xa; je 0x7b3a1; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000048a697: loope 0x8a6e5; mov dword ptr [rdi], ecx; ret; 
0x000000000048a6c8: loope 0x8a716; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000048a73d: loope 0x8a78b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000048bb35: loope 0x8bb27; call 0x8b5f0; leave; ret; 
0x000000000049f6c6: loope 0x9f723; ret; 
0x00000000004a4218: loope 0xa41db; clc; jmp rcx; 
0x00000000004a421c: loope 0xa41e0; clc; jmp rcx; 
0x00000000004a4220: loope 0xa41e5; clc; jmp qword ptr [rcx - 0x3c]; 
0x00000000004a4228: loope 0xa41ee; clc; jmp qword ptr [rcx - 0x3b]; 
0x00000000004a4230: loope 0xa41f7; clc; jmp qword ptr [rcx - 0x3a]; 
0x0000000000400bb9: loope 0xbbb; add byte ptr [rax], al; mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x00000000004c2ae9: loope 0xc2ae1; jmp qword ptr [rdi + 0x2b]; 
0x00000000004b9faa: mov ah, 0x13; ret; 
0x00000000004a4658: mov ah, 0x22; stc; inc dword ptr [rdx + riz - 7]; call rsp; 
0x0000000000400460: mov ah, 0x24; add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000040049c: mov ah, 0x24; add byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, r10d; syscall; 
0x00000000004c2274: mov ah, 0x32; add byte ptr [rax], al; sbb bh, ch; cmc; call qword ptr [rax + 2]; 
0x00000000004c581c: mov ah, 0x5a; add byte ptr [rax], al; nop; pop rsi; cli; jmp qword ptr [rdx + 1]; 
0x00000000004bafbb: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x00000000004ba450: mov ah, 0xa5; ret; 
0x00000000004b9154: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004748d8: mov ah, 0xe8; ret 0xfcbb; 
0x000000000042237c: mov ah, 0xff; dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x0000000000412b83: mov ah, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000004bf374: mov ah, 3; add byte ptr [rax], al; or byte ptr [rax], dh; hlt; call qword ptr [rdx]; 
0x00000000004b9da4: mov ah, bl; push rsi; ret; 
0x000000000049ab1a: mov al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049ce13: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000004a490c: mov al, 0x12; stc; inc dword ptr [rax + 0x12]; stc; jmp rax; 
0x00000000004a46fc: mov al, 0x1e; stc; inc dword ptr [rax + 0x1e]; stc; call rax; 
0x00000000004a44e4: mov al, 0x21; stc; inc dword ptr [rax + 0x21]; stc; call rax; 
0x00000000004728c0: mov al, 0x25; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042266d: mov al, 0x2a; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 3]; ret; 
0x00000000004c9dc0: mov al, 0x42; std; call qword ptr [rcx + 1]; 
0x000000000049cc31: mov al, 0x48; add esp, 0x18; ret; 
0x00000000004a40f8: mov al, 0x55; clc; inc eax; push rdi; clc; call rax; 
0x00000000004a4a3c: mov al, 0x7a; stc; inc eax; jp 0xa4a3c; call rax; 
0x00000000004a4a6c: mov al, 0x7b; stc; call rax; 
0x00000000004a4a94: mov al, 0x7f; stc; inc eax; jg 0xa4a94; call rax; 
0x00000000004a41a4: mov al, 0xa6; clc; call rax; 
0x00000000004a41c4: mov al, 0xaf; clc; call rax; 
0x00000000004c1ce0: mov al, 0xc0; cmc; call qword ptr [rcx]; 
0x00000000004c4c20: mov al, 0xc4; std; call qword ptr [rbx]; 
0x00000000004a4454: mov al, 0xcd; clc; inc dword ptr [rax]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004c4fc0: mov al, 0xde; clc; call qword ptr [rbx]; 
0x00000000004be374: mov al, 0xf5; cld; inc dword ptr [rax]; clc; cld; call qword ptr [rax - 6]; 
0x0000000000480eb6: mov al, 0xff; inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x00000000004c0925: mov al, 1; add ah, byte ptr [rbx + 0x41180e0a]; ret; 
0x00000000004c6a6d: mov al, 1; add bl, byte ptr [rax + 0x41180e0a]; ret; 
0x000000000043bf66: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043bf94: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000043a7d4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000047f50f: mov al, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043bf40: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000043a790: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000041064f: mov al, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043bfa4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043bf50: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000043bf60: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a7a0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004367d1: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000411d05: mov bh, 0x22; add byte ptr [rax], al; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x0000000000472231: mov bh, 0x25; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x48000000], -0x77; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000044e25b: mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x000000000044ddde: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x3a76; 
0x000000000043ce58: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x00000000004bb284: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004b9157: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x000000000048c36b: mov bh, 0xff; test eax, eax; je 0x8c37c; mov qword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x00000000004c3870: mov bh, 1; ret; 
0x000000000047893c: mov bh, 8; ret 0x6c; 
0x00000000004a40b5: mov bh, al; call rax; 
0x00000000004a40b5: mov bh, al; call rax; mov edi, eax; jmp qword ptr [rax]; 
0x0000000000447d7e: mov bh, byte ptr [rcx]; add byte ptr [ecx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d88: mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x000000000043e74e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004980d9: mov bl, 0x66; nop dword ptr [rax + rax]; call rbx; 
0x00000000004b9153: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x000000000046681b: mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x00000000004c74e6: mov bl, 2; ret; 
0x000000000041dce0: mov byte ptr [r8 + rbx], r9b; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041db70: mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x00000000004129dc: mov byte ptr [r8 - 0x75], r9b; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000047b804: mov byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000043e367: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000047374d: mov byte ptr [rax + 0xc], 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x000000000041dce1: mov byte ptr [rax + rbx], cl; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041db71: mov byte ptr [rax + rbx], cl; mov rax, r8; pop rbx; ret; 
0x00000000004484a8: mov byte ptr [rax + rcx*2], 0x83; ret; 
0x00000000004129dd: mov byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000047b805: mov byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000447e53: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004c780d: mov byte ptr [rax], al; add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x00000000004c7488: mov byte ptr [rax], ch; sti; jmp qword ptr [rcx]; 
0x00000000004c780c: mov byte ptr [rax], r8b; add byte ptr [rax], dh; push rbx; sti; jmp rdi; 
0x0000000000453b04: mov byte ptr [rbp - 0x4d0], al; mov rsi, r15; mov rdi, rbx; call rax; 
0x0000000000453b03: mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045dd84: mov byte ptr [rbp - 0x500], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dd83: mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dd7d: mov byte ptr [rbp - 0x514], cl; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045dd7c: mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x00000000004c15b8: mov byte ptr [rcx - 0xb], ch; call qword ptr [rsi]; 
0x00000000004434dd: mov byte ptr [rcx], 0x4c; cmp edx, esi; jne 0x434d0; movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004c2880: mov byte ptr [rcx], al; ret; 
0x00000000004c9b58: mov byte ptr [rcx], bh; std; jmp qword ptr [rdx]; 
0x00000000004c0658: mov byte ptr [rcx], ch; cmc; call qword ptr [rsi + 4]; 
0x000000000043cba8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c518: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043cc1e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c56e: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043cca0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5f0: mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043ca56: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c436: mov byte ptr [rdi + 2], dh; ret; 
0x000000000043ca72: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043c452: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043cac3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c493: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043289b: mov byte ptr [rdi - 1], dl; ret; 
0x0000000000433a1c: mov byte ptr [rdi], cl; ret; 
0x0000000000427912: mov byte ptr [rdi], cl; test dl, 2; je 0x27884; mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043ca30: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c410: mov byte ptr [rdi], dh; ret; 
0x0000000000436843: mov byte ptr [rdi], dl; ret; 
0x000000000043bf69: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b9: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043bf97: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000043a7d7: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043e28b: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x000000000047bfa0: mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x000000000043bf42: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000043a792: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000441e74: mov byte ptr [rdx], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000049b4d0: mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4c9: mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4c2: mov byte ptr [rip + 0x232695], 8; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4bb: mov byte ptr [rip + 0x23269b], 8; mov byte ptr [rip + 0x232695], 8; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x000000000049b4b4: mov byte ptr [rip + 0x2326a1], 8; mov byte ptr [rip + 0x23269b], 8; mov byte ptr [rip + 0x232695], 8; mov byte ptr [rip + 0x23268f], 8; mov byte ptr [rip + 0x232689], 8; ret; 
0x00000000004c6188: mov byte ptr [rsi - 6], bh; jmp rdx; 
0x0000000000452f53: mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x0000000000452ecf: mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x000000000041c681: mov byte ptr [rsp + 0x20], bl; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000041c680: mov byte ptr [rsp + 0x20], r11b; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000048c1d7: mov ch, 0; add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x00000000004723dc: mov ch, 0x25; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xf748; 
0x00000000004b9da2: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000004bb0e3: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000046d6ca: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000046d7a8: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x00000000004bc47f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004bce2a: mov ch, 0xab; ret; 
0x00000000004b9155: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004404a2: mov ch, 0xdd; sub byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x00000000004a4270: mov ch, 0xf8; inc dword ptr [rsi - 0x3a]; clc; call rsi; 
0x00000000004305d6: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000046ee90: mov ch, dh; and ch, 0xf; je 0x6eeb0; add rax, 2; ret; 
0x000000000042713b: mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000041729b: mov cl, 0x35; jmp qword ptr [rdx + 0x2b]; 
0x0000000000470838: mov cl, 0x35; ret 0x25d0; 
0x00000000004c2a29: mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004a4258: mov cl, 0xf8; inc esi; ret 0xfff8; 
0x0000000000403d10: mov cl, 1; add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000414429: mov cl, byte ptr [rax + 0x63]; std; mov eax, 3; syscall; 
0x000000000042a155: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000048c902: mov cl, byte ptr [rip - 0x76b70001]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000433a1a: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000046ee7b: mov cl, dl; and cl, 0xf; je 0x6eea0; ret; 
0x00000000004bc50c: mov cs, edi; ret 0x8b36; 
0x000000000042c58e: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x00000000004369be: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043cbb4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c524: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043ccb8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c608: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000433a07: mov cx, word ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x0000000000432ce4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000436764: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043ca50: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c430: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004369bd: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000481068: mov dh, 0; add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x68; ret; 
0x00000000004142a4: mov dh, 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000412ebe: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004161c0: mov dh, 0; pop rbx; ret; 
0x000000000041413b: mov dh, 0; ret; 
0x000000000048c70a: mov dh, 0x12; and al, 0; call rax; 
0x0000000000436841: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000427314: mov dh, 0x16; sub eax, edx; ret; 
0x00000000004a452c: mov dh, 0x20; stc; inc dword ptr [rsi + 0x20]; stc; call rsi; 
0x0000000000401553: mov dh, 0x31; sar byte ptr [rsi + 0x20001], cl; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x0000000000416244: mov dh, 0x36; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000045b4bd: mov dh, 0x40; add byte ptr [r15 + r9 + 0x45], cl; ret 0xf4c; 
0x000000000046a7fe: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000416c97: mov dh, 0x40; inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000040dec5: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000046ae33: mov dh, 0x42; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000043e321: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e311: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e2e1: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043e301: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2f1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000482851: mov dh, 0x48; add al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x0000000000482811: mov dh, 0x48; add cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004827f1: mov dh, 0x48; add dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000482871: mov dh, 0x48; add eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000482831: mov dh, 0x48; add ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000482949: mov dh, 0x48; or al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004828d1: mov dh, 0x48; or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000482911: mov dh, 0x48; or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004828f1: mov dh, 0x48; or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000482965: mov dh, 0x48; or eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000048292d: mov dh, 0x48; or ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000449e30: mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000049abf4: mov dh, 0x4c; add ecx, esi; jmp rcx; 
0x00000000004bb242: mov dh, 0x4e; ret 0x474c; 
0x0000000000476315: mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x000000000046b3d9: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000043e325: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000000043e315: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000000043e2e5: mov dh, 0x56; int1; sub eax, edx; ret; 
0x000000000043e2f5: mov dh, 0x56; sub eax, edx; ret; 
0x000000000045e0f7: mov dh, 0x57; or al, 0x83; ret; 
0x000000000045e07a: mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000004625da: mov dh, 0x80; movabs al, byte ptr [0xffef5485c7004b49]; jmp qword ptr [rax]; 
0x0000000000476ea7: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000044ffef: mov dh, 0xb2; sbb byte ptr [rdi + 0x4a], ch; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004b9156: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000045097d: mov dh, 0xc0; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000049bb96: mov dh, 0xc0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048c8ad: mov dh, 0xc0; neg eax; ret; 
0x000000000048c657: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004736c6: mov dh, 0xc0; ret; 
0x0000000000427334: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000043f528: mov dh, 0xc1; pop rbx; ret; 
0x000000000043f550: mov dh, 0xc2; pop rbx; ret; 
0x0000000000414ffe: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447e52: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004bc484: mov dh, 0xc7; ret 0xe71f; 
0x0000000000416c44: mov dh, 0xce; cmp eax, ecx; je 0x16c68; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000042733a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000004aef10: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000049beef: mov dh, 0xdb; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x00000000004bcfb7: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000041ed4a: mov dh, 0xe8; sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000423ab1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042f6b4: mov dh, 0xe; sub eax, ecx; ret; 
0x00000000004c4be1: mov dh, 0xf8; call qword ptr [rdi]; 
0x000000000049ea73: mov dh, 0xff; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x22f2d1]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ebcc: mov dh, 0xff; nop; mov rax, qword ptr [rip + 0x22f179]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049d97a: mov dh, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000415e5e: mov dh, 2; pop rbx; ret; 
0x0000000000412ed1: mov dh, 2; ret; 
0x0000000000495034: mov dh, 7; lea rdx, [rip + 0x13463]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a54: mov dh, 7; lea rdx, [rip + 0x15a43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004910a4: mov dh, 7; lea rdx, [rip + 0x173f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d384: mov dh, 7; lea rdx, [rip + 0x7b113]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bd14: mov dh, 7; lea rdx, [rip + 0x7c783]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a164: mov dh, 7; lea rdx, [rip + 0x7e333]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f6b1: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000427311: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000423ab4: mov dh, 7; sub eax, ecx; ret; 
0x0000000000410614: mov dh, byte ptr [rax]; add dword ptr [rax], eax; add bl, dh; ret; 
0x000000000043f6ac: mov dh, byte ptr [rcx + riz*8 - 0xd]; ret; 
0x000000000044fff0: mov dl, 0x18; outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x000000000042241a: mov dl, 0x2a; add byte ptr [rax + rax], al; add byte ptr [rax], al; je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x00000000004bc6e0: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004b9152: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004a425c: mov dl, 0xf8; inc esi; ret; 
0x00000000004050cd: mov dl, 0xff; call qword ptr [rbp + 0x48]; 
0x00000000004c6301: mov dl, bh; jmp qword ptr [rsi]; 
0x0000000000432920: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004967d4: mov dword ptr [0x2d0], eax; ret; 
0x0000000000445624: mov dword ptr [0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000049547c: mov dword ptr [r10 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x0000000000419cc3: mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x0000000000419c8f: mov dword ptr [r12 + 0x1c], eax; je 0x19c9b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419cbd: mov dword ptr [r12 + 0x24], ebp; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x0000000000400fb2: mov dword ptr [r8], eax; pop rbx; ret; 
0x00000000004369c6: mov dword ptr [r9 - 2], ecx; ret; 
0x00000000004369b1: mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000443eee: mov dword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000411c23: mov dword ptr [rax + 0x10], ecx; push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c199: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d9: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000413811: mov dword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d139: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000443edf: mov dword ptr [rax + 0x20], edi; shl rdx, 4; mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000472eab: mov dword ptr [rax + 0x28], 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000046d135: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000046c21e: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046d035: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c19d: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000046c7e4: mov dword ptr [rax + 0x40], edx; mov rdx, rdi; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046d1d7: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000430ed5: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e10: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046d1cf: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000447d98: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000447d9b: mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450b82: mov dword ptr [rax + 0x90], edx; add rsp, 0xd0; ret; 
0x0000000000410357: mov dword ptr [rax + 8], ecx; add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000046c18e: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d2: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000443ef6: mov dword ptr [rax + 8], edx; ret; 
0x000000000042791e: mov dword ptr [rax + rdx - 2], ecx; ret; 
0x0000000000463152: mov dword ptr [rax - 0x7d], ecx; ret 0x8d01; 
0x000000000049d943: mov dword ptr [rax - 0x7d], ecx; ret; 
0x000000000048c84d: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004734f0: mov dword ptr [rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000472ee0: mov dword ptr [rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000440440: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499ec0: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000044ee18: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x000000000044dd95: mov dword ptr [rax], 0x63480000; sti; mov eax, 3; syscall; 
0x000000000048116e: mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048c764: mov dword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000049cbdb: mov dword ptr [rax], 0x75400000; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x00000000004737d0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041db88: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000472f08: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x000000000041130d: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004c7905: mov dword ptr [rax], eax; add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x0000000000400fb3: mov dword ptr [rax], eax; pop rbx; ret; 
0x000000000047bfbf: mov dword ptr [rax], ecx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000046c6c5: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000400484: mov dword ptr [rax], ecx; mov rdi, r8; mov eax, 3; syscall; 
0x000000000048c805: mov dword ptr [rax], edi; pop rbx; ret; 
0x0000000000450bc2: mov dword ptr [rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000046c605: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046c196: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d6: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000048c7f9: mov dword ptr [rax], edx; pop rbx; ret; 
0x00000000004737bd: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x00000000004c7904: mov dword ptr [rax], r8d; add byte ptr [rax], bl; push rdi; sti; call rsi; 
0x0000000000400483: mov dword ptr [rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x000000000049cf1f: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000046226a: mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462317: mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000460e2e: mov dword ptr [rbp - 0x1078], ebx; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046148e: mov dword ptr [rbp - 0x1078], ecx; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x000000000046148d: mov dword ptr [rbp - 0x1078], r9d; mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000460e35: mov dword ptr [rbp - 0x1080], ecx; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004616e2: mov dword ptr [rbp - 0x1080], ecx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460e34: mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000462796: mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000046274e: mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000462260: mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000046230d: mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000460f46: mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x00000000004605ba: mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004625ea: mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004605c4: mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x00000000004624b3: mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000460d11: mov dword ptr [rbp - 0x10a0], ebx; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004605b0: mov dword ptr [rbp - 0x10a8], 0; mov dword ptr [rbp - 0x1098], 0; mov dword ptr [rbp - 0x10a0], 0; mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000462666: mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004625e0: mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004605ce: mov dword ptr [rbp - 0x10b0], 0; jmp rax; 
0x0000000000462628: mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000460fdc: mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046278c: mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x000000000046101a: mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000044352b: mov dword ptr [rbp - 0x40], esp; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x000000000044343a: mov dword ptr [rbp - 0x40], esp; syscall; 
0x00000000004542a4: mov dword ptr [rbp - 0x480], ecx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000443527: mov dword ptr [rbp - 0x48], esp; mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443436: mov dword ptr [rbp - 0x48], esp; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000045474f: mov dword ptr [rbp - 0x4a8], eax; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455978: mov dword ptr [rbp - 0x4b0], ecx; call qword ptr [rax + 0x38]; 
0x0000000000455d1d: mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000456480: mov dword ptr [rbp - 0x4d0], ecx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455fe2: mov dword ptr [rbp - 0x4d0], ecx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000456b81: mov dword ptr [rbp - 0x4d0], edx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045647f: mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000453afd: mov dword ptr [rbp - 0x4d4], ecx; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x0000000000453afc: mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045646f: mov dword ptr [rbp - 0x4d8], eax; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455ff3: mov dword ptr [rbp - 0x4d8], ecx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455ff2: mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455d28: mov dword ptr [rbp - 0x4e8], esi; jmp rax; 
0x0000000000455e8c: mov dword ptr [rbp - 0x4f0], ebx; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004571e1: mov dword ptr [rbp - 0x4f0], ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455d09: mov dword ptr [rbp - 0x4f8], 0; mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455d13: mov dword ptr [rbp - 0x500], 0; mov dword ptr [rbp - 0x4c8], 0; mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455e93: mov dword ptr [rbp - 0x500], ecx; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004571d7: mov dword ptr [rbp - 0x500], edx; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455e92: mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000403772: mov dword ptr [rbp - 0x88], ecx; mov edi, 0x6cd060; call rax; 
0x000000000040376b: mov dword ptr [rbp - 0x90], eax; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000047929c: mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x000000000047afb1: mov dword ptr [rbp - 0xa8], edx; call rax; 
0x000000000047d6c8: mov dword ptr [rbp - 0xa8], edx; mov edi, 0x6cc140; call rax; 
0x000000000047b19a: mov dword ptr [rbp - 0xa8], esi; call rax; 
0x0000000000479226: mov dword ptr [rbp - 0xb8], ecx; mov edi, 0x6cc140; call rax; 
0x000000000045a78f: mov dword ptr [rbp - 0xb8], ecx; mov rdi, rbx; call rax; 
0x00000000004030b6: mov dword ptr [rbp - 0xc0], eax; mov eax, 0; test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x000000000040300c: mov dword ptr [rbp - 0xc4], eax; je 0x347d; mov edi, 0x6cd720; call rbx; 
0x000000000047afaa: mov dword ptr [rbp - 0xc8], ebx; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x0000000000479553: mov dword ptr [rbp - 0xc8], ecx; mov edi, 0x6cc140; call rax; 
0x000000000047a770: mov dword ptr [rbp - 0xc8], edx; call rax; 
0x000000000047b193: mov dword ptr [rbp - 0xc8], edx; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047954c: mov dword ptr [rbp - 0xd0], eax; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047a769: mov dword ptr [rbp - 0xd0], ebx; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a8a1: mov dword ptr [rbp - 0xd0], esi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b18c: mov dword ptr [rbp - 0xe0], ebx; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047a89a: mov dword ptr [rbp - 0xf8], ebx; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004174ed: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000492aa3: mov dword ptr [rbp], eax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000489f71: mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041449f: mov dword ptr [rbp], esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412c02: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041449e: mov dword ptr [rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412c01: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e711: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480e35: mov dword ptr [rbx + 0x10], eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000412cd7: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000480e6e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047d06f: mov dword ptr [rbx + 0x10], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004134d9: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000043fb0d: mov dword ptr [rbx + 0x10], edx; je 0x3fae9; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412e86: mov dword ptr [rbx + 0x10], esi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041656d: mov dword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c4a8: mov dword ptr [rbx + 0x18], eax; mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412ccf: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000480dd3: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a1e5: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x0000000000412e82: mov dword ptr [rbx + 0x18], esi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415cf3: mov dword ptr [rbx + 0x20], eax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x0000000000496813: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x0000000000412e92: mov dword ptr [rbx + 0x20], esi; call qword ptr [rax + 0x70]; 
0x0000000000412e8e: mov dword ptr [rbx + 0x28], esi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415cef: mov dword ptr [rbx + 0x30], eax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x0000000000412e8a: mov dword ptr [rbx + 0x30], esi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041345d: mov dword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004160c6: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000045097f: mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x0000000000415d6e: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x00000000004174f1: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000414352: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046c224: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046d038: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412c67: mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x00000000004134ce: mov dword ptr [rbx + 0x90], esi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000049c90e: mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412d38: mov dword ptr [rbx + 0xd8], 0x4a2cc0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x000000000048c4ab: mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004127d5: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000412cd3: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000004134d5: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047cb0e: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416025: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000044e727: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000415e55: mov dword ptr [rbx + 8], edx; mov rsi, rcx; jbe 0x15df5; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004161bc: mov dword ptr [rbx + 8], edx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x000000000046f9d4: mov dword ptr [rbx - 0x74b7f808], 0xf70244c; xchg ebp, eax; ret 0x8b4c; 
0x00000000004469d3: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d373: mov dword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x0000000000497eb6: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000004160cc: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000049a629: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000046d13c: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000416620: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415cf6: mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x000000000043f761: mov dword ptr [rbx], esi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000443336: mov dword ptr [rbx], esi; mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004432f5: mov dword ptr [rbx], esi; mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x00000000004168ca: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004168c2: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045864b: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004369c7: mov dword ptr [rcx - 2], ecx; ret; 
0x00000000004369b2: mov dword ptr [rcx - 4], ecx; ret; 
0x00000000004369a1: mov dword ptr [rcx - 8], ecx; ret; 
0x00000000004801a3: mov dword ptr [rcx], 0x1c68348; test al, al; jne 0x800f8; movsx eax, dl; neg eax; ret; 
0x0000000000495479: mov dword ptr [rcx], 0x7a89415b; or al, 0x5d; pop r12; pop r14; ret; 
0x0000000000448e22: mov dword ptr [rcx], 0x83480b89; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000473bec: mov dword ptr [rcx], 0x8348c889; ret 0x8401; 
0x00000000004417f8: mov dword ptr [rcx], 0x85455374; dec dword ptr [rbp - 0x75]; push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000044f99b: mov dword ptr [rcx], 0xfffdd8e9; jmp qword ptr [rsi + 0xf]; 
0x00000000004c923a: mov dword ptr [rcx], eax; ret; 
0x000000000049cd5a: mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000418582: mov dword ptr [rcx], edx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004507e4: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044fea0: mov dword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x0000000000415cab: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043cbbd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000043cbfb: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc7d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc1b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c56b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043cc9d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5ed: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c52d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cce0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c630: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043cd00: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c650: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccc1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c611: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043cce3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c633: mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000415c83: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043ccc5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x000000000043cd03: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000415caf: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043c615: mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000046fe6d: mov dword ptr [rdi + 0x20], ecx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000479710: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000479717: mov dword ptr [rdi + 0x308], eax; ret; 
0x0000000000415c7f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415cb3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004198a0: mov dword ptr [rdi + 0x58], ecx; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049cdb1: mov dword ptr [rdi + 0x98], esi; ret; 
0x00000000004166ec: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004166f7: mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000043cc3d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c58d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000043cbdb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043cc5d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c54b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000436685: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004364c8: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436768: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000436615: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000436458: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043caa7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004365a5: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004363e8: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c477: mov dword ptr [rdi + 3], edx; ret; 
0x00000000004198a3: mov dword ptr [rdi + 4], eax; ret; 
0x000000000043ca89: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x0000000000436378: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c469: mov dword ptr [rdi + 4], edx; ret; 
0x000000000043cb3b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000436308: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4db: mov dword ptr [rdi + 5], edx; ret; 
0x000000000043cb5b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x0000000000436298: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4eb: mov dword ptr [rdi + 6], edx; ret; 
0x000000000043caf9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043cb7b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000436228: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4b9: mov dword ptr [rdi + 7], edx; ret; 
0x000000000044fe98: mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x0000000000415c87: mov dword ptr [rdi + 8], eax; ret; 
0x000000000048a848: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7d4: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000043cb19: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043cadb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x000000000048bcd0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048a154: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x0000000000416c93: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043c4ab: mov dword ptr [rdi + 8], edx; ret; 
0x000000000048ad6d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000433a13: mov dword ptr [rdi + rdx - 2], ecx; ret; 
0x0000000000427925: mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000042792e: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x000000000049cd69: mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x00000000004325e5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432623: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048a73f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000432798: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432894: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327e0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432968: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b48: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d38: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f09: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433109: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433309: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325e1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043261f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432794: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432890: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327dc: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432964: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b44: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d34: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f05: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433105: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433305: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325dd: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043261b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432790: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043288c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327d8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432960: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b40: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d30: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f01: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433101: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433301: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325d9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432617: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043296c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435cd8: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432b4c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435c58: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432d3c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435bd8: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432f0d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435b49: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043310d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435ab9: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043330d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a29: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432ced: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000432b05: mov dword ptr [rdi - 2], edx; ret; 
0x0000000000432ce9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004330c9: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043279f: mov dword ptr [rdi - 4], edx; ret; 
0x00000000004330c6: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332c6: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c6: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048a738: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004325e9: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000432627: mov dword ptr [rdi - 8], edx; ret; 
0x000000000043279c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432898: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327e4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435d58: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443982: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000042bd00: mov dword ptr [rdi], 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bccc: mov dword ptr [rdi], 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048bdf6: mov dword ptr [rdi], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000411303: mov dword ptr [rdi], eax; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000041448b: mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000047ca78: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000048a6c4: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a7ce: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000045d266: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048a731: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a841: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000043ca75: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043cac7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x000000000043ca54: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c434: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043caa5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043c475: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000043caf7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043c4b7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043cb17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043c4c7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000427923: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000043edb9: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000041514a: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000043cb38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043cb58: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043cb78: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042792b: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043ca86: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000043c466: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043cad8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043edc6: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000042d9b7: mov dword ptr [rdi], ecx; pop rbx; ret; 
0x0000000000400598: mov dword ptr [rdi], ecx; ret; 
0x000000000043ca44: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x000000000043ca62: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000043cab4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000411f11: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000436534: mov dword ptr [rdi], edx; ret; 
0x00000000004369af: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004339fb: mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000048bd3d: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043699e: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004339de: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004369c3: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x0000000000433a10: mov dword ptr [rdi], esi; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000048bd63: mov dword ptr [rdi], esi; ret; 
0x0000000000412d43: mov dword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x000000000042dc6f: mov dword ptr [rdx + 0x18], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000049547d: mov dword ptr [rdx + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x000000000043bfc7: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000043a7f7: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043bfa9: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e9: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000043c05b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x000000000043bfd9: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a809: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043c07b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x000000000043bff9: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a819: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c019: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043c09b: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a829: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c039: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043bf2b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a77b: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000048bd70: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048c214: mov dword ptr [rdx], 5; pop rbx; ret; 
0x000000000047376f: mov dword ptr [rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x000000000049a9fc: mov dword ptr [rdx], eax; add rsp, 8; ret; 
0x000000000043bf54: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x000000000043bf82: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000043bed4: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x000000000043bf64: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043bf92: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000043a7d2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043bfa2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000413481: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e01a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048bd3f: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043bfc2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000043a7f2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043bfd4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a804: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043bff4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a814: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c014: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043a824: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c034: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043a834: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443556: mov dword ptr [rdx], eax; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000413ce0: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000043c054: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a844: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c074: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a864: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c094: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a884: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf24: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a774: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a724: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000048c7e5: mov dword ptr [rdx], eax; pop rbx; ret; 
0x00000000004175b2: mov dword ptr [rdx], eax; ret; 
0x0000000000400426: mov dword ptr [rdx], eax; xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x000000000046c4e6: mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000004a1354: mov dword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x00000000004a12ab: mov dword ptr [rip + 0x22c583], 0; add rsp, 8; ret; 
0x00000000004a09a6: mov dword ptr [rip + 0x22cd60], 0; add rsp, 8; ret; 
0x000000000049f6bf: mov dword ptr [rip + 0x22debb], ebx; jne 0x9f6a8; pop rbx; ret; 
0x000000000049ebd8: mov dword ptr [rip + 0x22f172], esi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea80: mov dword ptr [rip + 0x22f2ca], esi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000048c372: mov dword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000047c939: mov dword ptr [rip + 0x2514d1], eax; add rsp, 8; ret; 
0x0000000000479bc8: mov dword ptr [rip + 0x254232], ecx; test byte ptr [rax + 0x314], 4; jne 0x79be8; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000044debb: mov dword ptr [rip + 0x27f83b], 0; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000445446: mov dword ptr [rip + 0x285b4c], edx; pop rbx; ret; 
0x000000000041ed36: mov dword ptr [rip + 0x2aca38], 0x41dba0; ret; 
0x000000000041ed2b: mov dword ptr [rip + 0x2aca4b], 0x41e4b0; mov qword ptr [rip + 0x2aca38], 0x41dba0; ret; 
0x000000000041ed48: mov dword ptr [rip + 0x2ae8b6], 0; ret; 
0x000000000041bcc3: mov dword ptr [rip + 0x2afa97], eax; mov rdi, r9; mov eax, 3; syscall; 
0x000000000041bcc2: mov dword ptr [rip + 0x2afa97], r8d; mov rdi, r9; mov eax, 3; syscall; 
0x00000000004179d5: mov dword ptr [rip + 0x2b5bc9], 0; ret; 
0x0000000000417962: mov dword ptr [rip + 0x2b5c40], edx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x000000000040193a: mov dword ptr [rip + 0x2c9750], eax; xor eax, eax; ret; 
0x0000000000400705: mov dword ptr [rip + 0x2cb9a5], eax; pop rbp; pop r12; ret; 
0x0000000000475917: mov dword ptr [rsi + 0x10], eax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x00000000004017e7: mov dword ptr [rsi + 0x10], esi; syscall; 
0x000000000049ea87: mov dword ptr [rsi + 0x28], eax; ret; 
0x00000000004017dc: mov dword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043edc9: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000043edbb: mov dword ptr [rsi - 4], ecx; ret; 
0x000000000044ed86: mov dword ptr [rsi*8 + 0x6cc9c0], ebx; test rax, rax; je 0x4ed94; call rax; 
0x0000000000476a49: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x0000000000475914: mov dword ptr [rsi], eax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000049cd9b: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047ca82: mov dword ptr [rsi], eax; ret; 
0x00000000004507d9: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004017e4: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049a956: mov dword ptr [rsp + 0x10], 0; call 0x9a630; add rsp, 0x28; ret; 
0x000000000041c73d: mov dword ptr [rsp + 0x10], eax; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000041c68b: mov dword ptr [rsp + 0x10], edx; call rax; 
0x0000000000411b69: mov dword ptr [rsp + 0x10], edx; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000419cc4: mov dword ptr [rsp + 0x14], eax; pop r12; ret; 
0x000000000040fd5e: mov dword ptr [rsp + 0x18], eax; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fccd: mov dword ptr [rsp + 0x18], eax; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6c1: mov dword ptr [rsp + 0x18], eax; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf5e: mov dword ptr [rsp + 0x18], eax; call 0x8bf70; add rsp, 0xd8; ret; 
0x000000000041c686: mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000419c90: mov dword ptr [rsp + 0x1c], eax; je 0x19c9b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411af8: mov dword ptr [rsp + 0x20], eax; call qword ptr [rbx + 0x30]; 
0x0000000000419cbe: mov dword ptr [rsp + 0x24], ebp; pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x0000000000480ee4: mov dword ptr [rsp + 0xc], eax; call 0x1f100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x00000000004415a4: mov dword ptr [rsp + 8], eax; call 0x41120; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004415b6: mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000041c742: mov dword ptr [rsp + 8], eax; mov qword ptr [rsp], rcx; call rdx; 
0x0000000000443269: mov dword ptr [rsp + 8], eax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x00000000004407ce: mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000049a207: mov dword ptr [rsp + 8], esi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x0000000000480a7e: mov dword ptr [rsp + 8], esi; mov edi, 0x6cc140; call rax; 
0x000000000041176f: mov dword ptr [rsp + 8], esi; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000048beca: mov dword ptr [rsp - 0x10], esi; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048bed6: mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000048bece: mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000004405e0: mov dword ptr [rsp - 0x40], eax; je 0x40600; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004508f5: mov dword ptr [rsp - 2], edi; fldcw word ptr [rsp - 2]; ret; 
0x000000000048be49: mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048be8f: mov dword ptr [rsp - 8], edx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004783d2: mov dword ptr [rsp], eax; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000440527: mov dword ptr [rsp], eax; mov eax, 0; syscall; 
0x0000000000473807: mov dword ptr [rsp], eax; mov eax, 0x14; syscall; 
0x0000000000440587: mov dword ptr [rsp], eax; mov eax, 1; syscall; 
0x00000000004404c7: mov dword ptr [rsp], eax; mov eax, 2; syscall; 
0x0000000000473677: mov dword ptr [rsp], eax; mov eax, 3; syscall; 
0x000000000044f33e: mov dword ptr [rsp], eax; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x0000000000411774: mov dword ptr [rsp], eax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004432fb: mov dword ptr [rsp], eax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000041c747: mov dword ptr [rsp], ecx; call rdx; 
0x0000000000445110: mov dword ptr [rsp], ecx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x000000000049a203: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x00000000004967d3: mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000445623: mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000004734ef: mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000472edf: mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000044043f: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499ebf: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000044ee17: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004737cf: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041db87: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000472f07: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000041130c: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450bc1: mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x00000000004737bc: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x0000000000400482: mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x000000000041449d: mov dword ptr fs:[rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c213: mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000047376e: mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000413480: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e019: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000443555: mov dword ptr fs:[rdx], eax; mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000413cdf: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000400425: mov dword ptr fs:[rdx], eax; xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x00000000004339fa: mov dword ptr ss:[rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x0000000000436760: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043ca82: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000043c462: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043cad3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000432b00: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000432ce0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ca40: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000043c420: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000400c66: mov eax, 0; call rdx; 
0x0000000000440509: mov eax, 0; syscall; 
0x0000000000440509: mov eax, 0; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000402591: mov eax, 0; test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004027dd: mov eax, 0; test rax, rax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004030bc: mov eax, 0; test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x000000000040330b: mov eax, 0; test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x00000000004034ff: mov eax, 0; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403a62: mov eax, 0; test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000043f7a8: mov eax, 0; test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x0000000000445299: mov eax, 0; test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x000000000044ec87: mov eax, 0; test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c1: mov eax, 0; test rax, rax; je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044ede7: mov eax, 0; test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef60: mov eax, 0; test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f240: mov eax, 0; test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000047d770: mov eax, 0; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d798: mov eax, 0; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d80e: mov eax, 0; test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed33: mov eax, 0; test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f2db: mov eax, 0; test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000480a96: mov eax, 0; test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000498670: mov eax, 0; test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x000000000049869c: mov eax, 0; test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x00000000004009a0: mov eax, 0; test rax, rax; je 0x998; call rax; 
0x000000000049a22a: mov eax, 0; test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2d2: mov eax, 0; test rax, rax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049f483: mov eax, 0; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x00000000004408da: mov eax, 0x101; syscall; 
0x00000000004735e3: mov eax, 0x106; syscall; 
0x000000000043f5f9: mov eax, 0x10; pop rbx; ret; 
0x00000000004736dc: mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004737e9: mov eax, 0x14; syscall; 
0x00000000004737e9: mov eax, 0x14; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000473630: mov eax, 0x15; syscall; 
0x0000000000473630: mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000422144: mov eax, 0x16; je 0x22150; ret; 
0x00000000004222e0: mov eax, 0x16; ret; 
0x00000000004403b0: mov eax, 0x18; syscall; 
0x00000000004403b0: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438d3: mov eax, 0x19; syscall; 
0x00000000004438d3: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000045d278: mov eax, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000441070: mov eax, 0x1c; syscall; 
0x0000000000441070: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000043f5f2: mov eax, 0x20; pop rbx; ret; 
0x000000000049a980: mov eax, 0x26; syscall; 
0x000000000049a980: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000043f5eb: mov eax, 0x30; pop rbx; ret; 
0x0000000000473520: mov eax, 0x3f; syscall; 
0x0000000000473520: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000043f5e4: mov eax, 0x40; pop rbx; ret; 
0x00000000004277ca: mov eax, 0x433d40; mov edx, 0x430cd0; cmove rax, rdx; ret; 
0x0000000000426eac: mov eax, 0x43e820; cmove rax, rdx; ret; 
0x00000000004ba39b: mov eax, 0x45155e93; ret 0x591c; 
0x000000000049ab43: mov eax, 0x48000000; add esp, 8; ret; 
0x000000000041ee13: mov eax, 0x48000000; mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004405ec: mov eax, 0x48; syscall; 
0x0000000000427d8a: mov eax, 0x48fffffb; mov eax, edi; ret; 
0x0000000000400952: mov eax, 0x49ed50; test rax, rax; je 0x963; mov edi, 0x4befc0; call rax; 
0x000000000040ed95: mov eax, 0x4bef78; cmp rax, 0x4bef80; jae 0xedb5; mov rbp, rax; call qword ptr [rbp]; 
0x00000000004733fb: mov eax, 0x4e; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004407d7: mov eax, 0x4f; syscall; 
0x000000000043f5dd: mov eax, 0x60; pop rbx; ret; 
0x0000000000440e50: mov eax, 0x61; syscall; 
0x0000000000440e50: mov eax, 0x61; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438f0: mov eax, 0x63; syscall; 
0x00000000004438f0: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000473540: mov eax, 0x66; syscall; 
0x0000000000473540: mov eax, 0x66; syscall; ret; 
0x0000000000473560: mov eax, 0x68; syscall; 
0x0000000000473560: mov eax, 0x68; syscall; ret; 
0x0000000000473550: mov eax, 0x6b; syscall; 
0x0000000000473550: mov eax, 0x6b; syscall; ret; 
0x0000000000473570: mov eax, 0x6c; syscall; 
0x0000000000473570: mov eax, 0x6c; syscall; ret; 
0x0000000000418d73: mov eax, 0x6cb800; ret; 
0x00000000004783d7: mov eax, 0x6cc1e0; call rdx; 
0x000000000043f5d6: mov eax, 0x80; pop rbx; ret; 
0x0000000000460624: mov eax, 0x8b4c0000; popfq; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000412011: mov eax, 0x8c48348; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041d350: mov eax, 0x950f006c; ret 0x8348; 
0x000000000047591f: mov eax, 0x9e; syscall; 
0x0000000000441050: mov eax, 0xa; syscall; 
0x0000000000441050: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000441030: mov eax, 0xb; syscall; 
0x0000000000441030: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004b29b0: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000040dfc7: mov eax, 0xba; syscall; 
0x00000000004b9158: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000443529: mov eax, 0xc065894c; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443438: mov eax, 0xc065894c; syscall; 
0x000000000046fc00: mov eax, 0xc9; syscall; 
0x000000000046fc00: mov eax, 0xc9; syscall; ret; 
0x0000000000443965: mov eax, 0xca; syscall; 
0x0000000000443992: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000443a39: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043fd97: mov eax, 0xe5; syscall; 
0x000000000041bd73: mov eax, 0xe8004a34; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000450c19: mov eax, 0xe; syscall; 
0x000000000040dfde: mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x0000000000430769: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004509a1: mov eax, 0xf; syscall; 
0x000000000048bdf8: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000450801: mov eax, 0xffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000415241: mov eax, 0xffffffd0; cmp dword ptr fs:[rax], 0x1d; je 0x151e9; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004734e9: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000472ed9: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000440439: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499eb9: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000044ee11: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004737c9: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041db81: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000472f01: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000411306: mov eax, 0xffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450bb9: mov eax, 0xffffffd0; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000400479: mov eax, 0xffffffd0; neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000415141: mov eax, 0xffffffd0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411f08: mov eax, 0xffffffd0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047d391: mov eax, 0xffffffd0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000450861: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450841: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000450821: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000421166: mov eax, 0xfffffffe; pop rbx; ret; 
0x0000000000411c61: mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000450bc4: mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x00000000004403e4: mov eax, 0xffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000004121af: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000044de4f: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000452c6e: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411ff9: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000412c71: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e01c: mov eax, 0xffffffff; ret; 
0x000000000043fa94: mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b875: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048bd5d: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000045d27a: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000416622: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000043fb2b: mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000445406: mov eax, 1; ret; 
0x00000000004003d5: mov eax, 1; syscall; 
0x0000000000440569: mov eax, 1; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000049d5e0: mov eax, 2; add rsp, 8; ret; 
0x000000000046eee1: mov eax, 2; ret; 
0x000000000040042f: mov eax, 2; syscall; 
0x00000000004404a9: mov eax, 2; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000472f52: mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000413464: mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x000000000046eef1: mov eax, 3; ret; 
0x0000000000400489: mov eax, 3; syscall; 
0x0000000000473659: mov eax, 3; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000049d5d0: mov eax, 4; add rsp, 8; ret; 
0x000000000046ef01: mov eax, 4; ret; 
0x000000000044040e: mov eax, 4; syscall; 
0x0000000000443ada: mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046ef11: mov eax, 5; ret; 
0x000000000044045d: mov eax, 5; syscall; 
0x000000000046ef21: mov eax, 6; ret; 
0x000000000047358e: mov eax, 6; syscall; 
0x000000000049c9ff: mov eax, 7; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000046ef31: mov eax, 7; ret; 
0x000000000049d5b1: mov eax, 8; add rsp, 8; ret; 
0x000000000043f5cf: mov eax, 8; pop rbx; ret; 
0x000000000049f165: mov eax, 8; ret; 
0x00000000004438b0: mov eax, 8; syscall; 
0x00000000004438b0: mov eax, 8; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000440fe3: mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000440fa3: mov eax, 9; syscall; 
0x00000000004811a2: mov eax, dword ptr [0]; add rax, -8; ret; 
0x000000000046d041: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046d159: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfc1: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6d1: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000411d1c: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046c51c: mov eax, dword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000415dac: mov eax, dword ptr [rax + 0x18]; jmp rax; 
0x0000000000411d23: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f88: mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000045a788: mov eax, dword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x00000000004162a8: mov eax, dword ptr [rax + 0x40]; jmp rax; 
0x0000000000499e63: mov eax, dword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004165cc: mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000046d584: mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041176b: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004508c8: mov eax, dword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000411af0: mov eax, dword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000411678: mov eax, dword ptr [rax + 0x70]; jne 0x11684; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000041328a: mov eax, dword ptr [rax + 0x70]; jne 0x13296; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000049894d: mov eax, dword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004981ea: mov eax, dword ptr [rax + 8]; add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000480c51: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000480c61: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000045dd79: mov eax, dword ptr [rax + rbx*8]; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453af9: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045080f: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000400bc0: mov eax, dword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000456102: mov eax, dword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456153: mov eax, dword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458243: mov eax, dword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d76: mov eax, dword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x0000000000460f51: mov eax, dword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x0000000000462275: mov eax, dword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462759: mov eax, dword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000460fe7: mov eax, dword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000049ccf6: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000049aad9: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000040300a: mov eax, dword ptr [rax]; mov dword ptr [rbp - 0xc4], eax; je 0x347d; mov edi, 0x6cd720; call rbx; 
0x000000000049a9f9: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000045080c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004508be: mov eax, dword ptr [rax]; mov rdx, 0xffffffffffffffe0; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000480f4c: mov eax, dword ptr [rax]; mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000047d399: mov eax, dword ptr [rax]; ret; 
0x000000000041380a: mov eax, dword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000041381c: mov eax, dword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046c98b: mov eax, dword ptr [rbp + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046cf4a: mov eax, dword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b96c: mov eax, dword ptr [rbp + 0xd8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000401c0c: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040ee15: mov eax, dword ptr [rbp + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000441a4c: mov eax, dword ptr [rbp - 0x48]; call rax; 
0x0000000000446607: mov eax, dword ptr [rbp - 0x58]; call rax; 
0x0000000000400c81: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x0000000000400c70: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000400c60: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000044f342: mov eax, dword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x000000000047e8a5: mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047afa2: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a761: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a561: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047a0c3: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000048c849: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048c801: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048c7f1: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411d11: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004141df: mov eax, dword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000455fec: mov eax, dword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000499f97: mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000413e41: mov eax, dword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d99: mov eax, dword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000414020: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416c4b: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000410cff: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000415e0d: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f7d: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454f59: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b736: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356a: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453fbc: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413e98: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000414537: mov eax, dword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000456631: mov eax, dword ptr [rbx + 0xd8]; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000413a8a: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fcd: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410cb5: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000458531: mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413f8e: mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000453b7b: mov eax, dword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x00000000004155ff: mov eax, dword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004100c1: mov eax, dword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000049c476: mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x0000000000412eba: mov eax, dword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ee12: mov eax, dword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043bfc4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000043a7f4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043bfa5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043bfd6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a806: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043c057: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a847: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043bff6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a816: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c077: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a867: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c016: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043a826: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c097: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a887: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043c036: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043a836: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043bf27: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a777: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000042a3fa: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bcd2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000047cfcb: mov eax, dword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043bf80: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000043bf90: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x000000000043a7d0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000043bfa0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043bfc0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x000000000043a7f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000043a7c0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000043bed1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000043bfd1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a801: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043bff1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a811: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c011: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043a821: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c031: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043a831: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043c051: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a841: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c071: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a861: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c091: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a881: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a771: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a721: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000043bf51: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000043bf61: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a7a1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000046d3cf: mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004175c0: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004175e8: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000450202: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5020f; call rax; 
0x00000000004a1128: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x0000000000418101: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d581: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000415c7b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004178f1: mov eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000413c71: mov eax, dword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000049cd01: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000049cd81: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000046d001: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000049cdc1: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000049ce21: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000049ce11: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000049cdd1: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000049cd91: mov eax, dword ptr [rdi + 0xc0]; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004530d6: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000041448e: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000004165c1: mov eax, dword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000004112a6: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416ca1: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415da5: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x00000000004162a1: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004164f8: mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000045ec0b: mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410a49: mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000004161a1: mov eax, dword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000045de04: mov eax, dword ptr [rdi + 0xd8]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000419896: mov eax, dword ptr [rdi + 4]; or eax, 2; or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000414131: mov eax, dword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x0000000000417a05: mov eax, dword ptr [rdi + 8]; cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x000000000049d331: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0x9d348; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000430274: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x000000000043e5dc: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x00000000004304d3: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x00000000004307d1: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000430247: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x000000000044ee2c: mov eax, dword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000480be1: mov eax, dword ptr [rdi]; cmp rax, rsi; je 0x80bf0; ret; 
0x00000000004175af: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d381: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000410360: mov eax, dword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000042a156: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000046d25b: mov eax, dword ptr [rdx - 4]; cmp eax, -1; je 0x6d266; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000411ca0: mov eax, dword ptr [rdx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046c6c7: mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000004111e0: mov eax, dword ptr [rdx]; ret; 
0x000000000049ebd1: mov eax, dword ptr [rip + 0x22f179]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea79: mov eax, dword ptr [rip + 0x22f2d1]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049a5f0: mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x000000000047ca71: mov eax, dword ptr [rip + 0x24e619]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000047ca7b: mov eax, dword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000047ca1a: mov eax, dword ptr [rip + 0x2513f0]; ret; 
0x000000000047c92e: mov eax, dword ptr [rip + 0x2514dc]; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x00000000004708a6: mov eax, dword ptr [rip + 0x25db6c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044dce1: mov eax, dword ptr [rip + 0x27fa19]; ret; 
0x0000000000446971: mov eax, dword ptr [rip + 0x2879f1]; ret; 
0x0000000000445420: mov eax, dword ptr [rip + 0x288f2a]; test eax, eax; je 0x45430; ret; 
0x0000000000443840: mov eax, dword ptr [rip + 0x28aaba]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000042011f: mov eax, dword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x00000000004178d1: mov eax, dword ptr [rip + 0x2b37e9]; ret; 
0x0000000000418e9e: mov eax, dword ptr [rip + 0x2b473c]; test rax, rax; je 0x18eab; call rax; 
0x000000000049d61c: mov eax, dword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000043c381: mov eax, dword ptr [rsi + 0x63490006]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049ab51: mov eax, dword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000049ab18: mov eax, dword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049ab41: mov eax, dword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004607c4: mov eax, dword ptr [rsi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000417551: mov eax, dword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004602dd: mov eax, dword ptr [rsi + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047c90c: mov eax, dword ptr [rsi + 4]; ret; 
0x000000000049d651: mov eax, dword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000044ed7e: mov eax, dword ptr [rsi*8 + 0x4a6ea0]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4ed94; call rax; 
0x000000000046c607: mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000049cdf6: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000400ef0: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000411daf: mov eax, dword ptr [rsp + 0x18]; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000044860a: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000448f6d: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x000000000040e4a7: mov eax, dword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x000000000048106c: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x0000000000446a2c: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480eed: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000046bdd9: mov eax, dword ptr [rsp + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be0d: mov eax, dword ptr [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043f764: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000048c420: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004415ae: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004415bd: mov eax, dword ptr [rsp + 8]; mov rdi, rax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044061b: mov eax, dword ptr [rsp - 0x54]; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000403009: mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x347d; mov edi, 0x6cd720; call rbx; 
0x000000000047d398: mov eax, dword ptr fs:[rax]; ret; 
0x0000000000452fdd: mov eax, eax; add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000041dce5: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044070a: mov eax, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000400bbd: mov eax, eax; mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x000000000045b280: mov eax, eax; pop rbp; pop r12; ret; 
0x000000000041db75: mov eax, eax; pop rbx; ret; 
0x0000000000433af5: mov eax, eax; ret; 
0x0000000000480182: mov eax, eax; sub eax, ecx; ret; 
0x000000000041bca1: mov eax, eax; syscall; 
0x0000000000413c4a: mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b99b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046be29: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x00000000004410eb: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000046bdfc: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000410193: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412016: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000400469: mov eax, ebp; syscall; 
0x000000000048bcd3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004143bd: mov eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047d668: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443a25: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x000000000047bf9e: mov eax, ebx; mov byte ptr [rdx], 0; add rsp, 0x140; pop rbx; ret; 
0x0000000000412bff: mov eax, ebx; mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c980: mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049cfae: mov eax, ebx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004106a9: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041078e: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000440ebe: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000412cdb: mov eax, ebx; pop rbx; ret; 
0x0000000000443538: mov eax, ebx; syscall; 
0x000000000048a157: mov eax, ecx; adc eax, eax; ret; 
0x000000000047c901: mov eax, ecx; lea rdx, [rsi + 4]; cmp rdx, r8; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000473b96: mov eax, ecx; ret; 
0x000000000043f558: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000043f537: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000472e18: mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000403c1b: mov eax, ecx; syscall; 
0x00000000004967cb: mov eax, ecx; syscall; test edx, edx; jne 0x967af; mov dword ptr fs:[0x2d0], eax; ret; 
0x00000000004a40b1: mov eax, edi; inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x0000000000417901: mov eax, edi; ret; 
0x0000000000450054: mov eax, edi; syscall; 
0x0000000000420abf: mov eax, edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a18e: mov eax, edx; add rsp, 0x28; ret; 
0x000000000048c973: mov eax, edx; add rsp, 0x38; ret; 
0x00000000004404de: mov eax, edx; add rsp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000041ee18: mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418585: mov eax, edx; add rsp, 8; ret; 
0x000000000047b09f: mov eax, edx; call rax; 
0x000000000046b75b: mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045d06a: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041f7b2: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410c6f: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000410380: mov eax, edx; pop rbx; ret; 
0x0000000000427ea9: mov eax, edx; ret; 
0x00000000004004a6: mov eax, edx; syscall; 
0x0000000000440404: mov eax, esi; ja 0x40438; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000440453: mov eax, esi; ja 0x40488; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000473584: mov eax, esi; ja 0x735b8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004811f7: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000473333: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000499fb8: mov eax, esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000040ef94: mov eax, esi; pop rbx; pop rbp; ret; 
0x000000000040fed8: mov eax, esi; pop rbx; ret; 
0x0000000000452ed4: mov eax, esi; ret; 
0x000000000043ee4b: mov eax, esi; sub rax, rdx; vzeroupper; ret; 
0x000000000043fb73: mov eax, esi; syscall; 
0x0000000000443749: mov eax, esp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049ca64: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004156d5: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000421a9a: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000443274: mov eax, esp; syscall; 
0x00000000004004a5: mov eax, r10d; syscall; 
0x0000000000443a24: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x43a30; ret; 
0x0000000000443748: mov eax, r12d; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004156d4: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000443273: mov eax, r12d; syscall; 
0x00000000004136c9: mov eax, r13d; syscall; 
0x0000000000450053: mov eax, r15d; syscall; 
0x000000000045b27f: mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000480181: mov eax, r8d; sub eax, ecx; ret; 
0x000000000041bca0: mov eax, r8d; syscall; 
0x00000000004127e3: mov eax, r9d; syscall; 
0x00000000004407cc: mov ebp, 0x247c8948; or byte ptr [rax - 0x75], cl; jl 0x407fa; or byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000430464: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004af1c4: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004b915d: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000044105f: mov ebp, 0xc3000045; nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000430469: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046e068: mov ebp, 0xf80148c0; ret; 
0x000000000046e2ec: mov ebp, 0xf80148c6; ret; 
0x00000000004bafc6: mov ebp, 0xfb67d10d; ret; 
0x000000000046133d: mov ebp, 0xffffef78; add byte ptr [rdi], cl; test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000046154d: mov ebp, 0xffffef78; add byte ptr [rdi], cl; test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x00000000004562bc: mov ebp, 0xfffffb08; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000456841: mov ebp, 0xfffffb10; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x000000000045dd8f: mov ebp, 0xfffffb60; call rax; 
0x000000000045ebfb: mov ebp, 0xfffffb60; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f772: mov ebp, 0xfffffb60; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047c165: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x000000000047ed3f: mov ebp, 0xffffff78; call rax; 
0x000000000047d208: mov ebp, 0xffffffff; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000044ff50: mov ebp, 1; mov eax, 3; syscall; 
0x00000000004034fc: mov ebp, dword ptr [rax + 0x28]; mov eax, 0; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x000000000049cff6: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d08e: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d09a: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000410d9f: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000400da8: mov ebp, dword ptr [rip - 0xbd6]; mov ebx, 0x4001d8; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000040eda3: mov ebp, eax; call qword ptr [rbp]; 
0x00000000004410a7: mov ebp, eax; call rax; 
0x0000000000441a49: mov ebp, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000004811fd: mov ebp, ecx; nop; jmp rdx; 
0x0000000000403595: mov ebp, ecx; test rax, rax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x000000000048c5ef: mov ebp, edi; push rbx; je 0x8c660; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000049f3c1: mov ebp, edi; sub rsp, 0x40; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x0000000000441e4f: mov ebp, edi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000416502: mov ebp, edx; call qword ptr [rax + 0x60]; 
0x0000000000413da8: mov ebp, esp; call qword ptr [rax + 0x18]; 
0x0000000000400dae: mov ebx, 0x4001d8; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000049f6c1: mov ebx, 0x750022de; loope 0x9f723; ret; 
0x000000000040259d: mov ebx, 0x80; call rax; 
0x00000000004163a1: mov ebx, 0x85ffffee; sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004439c4: mov ebx, 0xafb8341; je 0x439cc; ret; 
0x0000000000404e3b: mov ebx, 0xb8fffff2; ret 0x4b7c; 
0x00000000004b915b: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x0000000000477704: mov ebx, 0xe8c78948; ret; 
0x00000000004305e9: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000473769: mov ebx, 0xffffffff; mov dword ptr fs:[rdx], eax; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000443558: mov ebx, 2; mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x000000000045ec01: mov ebx, dword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000411778: mov ebx, dword ptr [rdi + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004731f6: mov ebx, dword ptr [rdi]; call 0x1f100; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000432731: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432715: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000480d3d: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480ccb: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000441e56: mov ebx, eax; call rax; 
0x0000000000411d02: mov ebx, edi; call 0x13fc0; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x00000000004161a9: mov ebx, edi; call qword ptr [rax + 0x20]; 
0x000000000048c79f: mov ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004164ff: mov ebx, edi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043f78f: mov ebx, edi; sub rsp, 0x18; test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x0000000000450206: mov ebx, edi; test rax, rax; je 0x5020f; call rax; 
0x0000000000480a76: mov ebx, edi; test rax, rax; je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x000000000044109f: mov ebx, edi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000410367: mov ebx, edx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000473403: mov ebx, esi; sub rsp, 8; syscall; 
0x000000000047977b: mov ebx, esi; sub rsp, 8; test rax, rax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x00000000004967c6: mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000049abe3: mov ecx, 0x40000000; cmp dh, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x00000000004c015c: mov ecx, 0x41380e0a; ret; 
0x0000000000400708: mov ecx, 0x415d002c; pop rsp; ret; 
0x00000000004aef14: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004b9159: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004428e8: mov ecx, 0xbefffffa; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000497a73: mov ecx, 0xc0; add byte ptr [rdi], cl; test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000473780: mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000049cc2a: mov ecx, 0xdf; add byte ptr [rax + rsi*4 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004005d1: mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000041d147: mov ecx, 0xea8306e2; add cl, byte ptr [rcx + 0x548d48d0]; ret; 
0x00000000004306e9: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004507dc: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000472f7b: mov ecx, 2; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000403c14: mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x0000000000410e27: mov ecx, dword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c192: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045ee05: mov ecx, dword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f157: mov ecx, dword ptr [rbp - 0x4a0]; mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x00000000004037c0: mov ecx, dword ptr [rbp - 0x90]; je 0x37eb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x00000000004369bf: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004369ac: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043699a: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cd54: mov ecx, dword ptr [rdi + rsi*8]; jne 0x9cd43; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000046d55b: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000049d3f9: mov ecx, dword ptr [rdx + 8]; mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000042a153: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048c20d: mov ecx, dword ptr [rdx]; test ecx, ecx; jne 0x8c1de; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000043cbf4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc14: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c564: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c554: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cc75: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc95: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cbb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c525: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043ccd8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c628: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043ccf8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c648: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccb9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c609: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043cc35: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c585: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cbd4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043c544: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043cc55: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000433a08: mov ecx, dword ptr [rsi + rdx - 2]; mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004339f5: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x00000000004339d6: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000432ad5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432af1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cb5: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cd1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e95: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eb1: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433085: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a1: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433285: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332a1: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433485: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a1: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432ce5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043e5df: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x3e7f0; xor eax, eax; ret; 
0x00000000004304d6: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x00000000004330c3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332c3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430271: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x30c8f; xor eax, eax; ret; 
0x0000000000435cd4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435c54: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435bd4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435d54: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043024b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000435b45: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435ab5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a25: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004307cd: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x00000000004328f5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432911: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ca70: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043c450: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043cac1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c491: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000436683: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000436613: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004365a3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043ca80: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000043c460: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043cad1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043caa0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043c470: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000043caf1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043c4b1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043cb11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043c4c1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004364c5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436455: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004363e5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436375: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436305: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436295: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436225: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043cb51: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043cb71: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000436765: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043ca51: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c431: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000411b64: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046fb35: mov ecx, dword ptr [rsp + 0x18]; xor r8d, r8d; mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000044a9ae: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000448b2f: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000480d47: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd5: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000048c20c: mov ecx, dword ptr fs:[rdx]; test ecx, ecx; jne 0x8c1de; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x00000000004369ab: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000473901: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048baee: mov ecx, eax; lea r8, [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000042d9ae: mov ecx, eax; shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000046d89d: mov ecx, ebp; lea rdx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000049cfb1: mov ecx, ebp; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049ca67: mov ecx, ebp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046f9bc: mov ecx, ebp; mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000499f9d: mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000046f9c8: mov ecx, edi; call rbx; 
0x000000000046f645: mov ecx, edi; mov rdx, r13; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000433b11: mov ecx, edx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000433b14: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004165c7: mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000445c3b: mov ecx, esi; call rbx; 
0x000000000046d5e8: mov ecx, esi; lea rsi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d7a4: mov ecx, esi; lea rsi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f745: mov ecx, esi; mov rdi, r12; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x00000000004453fa: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x000000000049c983: mov ecx, esp; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000445c2e: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x00000000004713a1: mov ecx, gs; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000042d9ad: mov ecx, r8d; shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000047591a: mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x00000000004431a2: mov edi, 0x1f0ffffd; add bl, dh; ret; 
0x000000000045d47a: mov edi, 0x218; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000443720: mov edi, 0x24448b48; or byte ptr [rax + 0x39], cl; ret; 
0x00000000004bcc11: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000046aa0f: mov edi, 0x404b8d48; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000442d5d: mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000400b35: mov edi, 0x4a1bd7; call 0x109b0; nop; leave; ret; 
0x000000000040155b: mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x00000000004015cc: mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x000000000040042a: mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x0000000000412755: mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x00000000004a1ab4: mov edi, 0x4a2f10; call 0x18120; add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000041bc74: mov edi, 0x4a3560; mov eax, 2; syscall; 
0x000000000043fcc1: mov edi, 0x4a5060; jne 0x3fd58; xor esi, esi; mov eax, 2; syscall; 
0x0000000000443533: mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443562: mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x000000000044dd20: mov edi, 0x4a6dc8; mov eax, ecx; syscall; 
0x0000000000450655: mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x000000000046fbf3: mov edi, 0x4b5d58; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fbf3: mov edi, 0x4b5d58; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x00000000004005cc: mov edi, 0x4be21c; mov ecx, 0xe; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x000000000040095c: mov edi, 0x4befc0; call rax; 
0x00000000004731fa: mov edi, 0x6348fffa; sti; mov eax, 3; syscall; 
0x0000000000479786: mov edi, 0x6cc100; call rax; 
0x00000000004797f2: mov edi, 0x6cc100; pop rbx; pop rbp; jmp rax; 
0x0000000000480c0f: mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x0000000000445115: mov edi, 0x6cc140; call rax; 
0x000000000049a234: mov edi, 0x6cc140; call rax; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x000000000049a2dc: mov edi, 0x6cc140; call rax; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x000000000047f32f: mov edi, 0x6cc140; jmp rax; 
0x00000000004008e0: mov edi, 0x6ccb50; jmp rax; 
0x0000000000403315: mov edi, 0x6ccfe0; call rax; 
0x000000000040301f: mov edi, 0x6ccfe0; call rbx; 
0x00000000004030c6: mov edi, 0x6cd060; call rax; 
0x0000000000403924: mov edi, 0x6cd0a0; call rax; 
0x0000000000446a11: mov edi, 0x6cd6d8; call rax; 
0x000000000043f79a: mov edi, 0x6cd720; call rax; 
0x0000000000403018: mov edi, 0x6cd720; call rbx; 
0x000000000048c3c2: mov edi, 0x6cd9c0; call rax; 
0x000000000048c4ed: mov edi, 0x6cd9c4; call rdx; 
0x0000000000443186: mov edi, 0x8b48fffd; jge 0x4318d; call rbx; 
0x0000000000443178: mov edi, 0x8b49fffd; cmp al, 0x24; call rbx; 
0x000000000044316a: mov edi, 0x8b49fffd; jge 0x43171; call rbx; 
0x00000000004bc47c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004530ca: mov edi, 0xe0; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000430299: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004408d4: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000401a57: mov edi, 1; call rax; 
0x000000000049d33c: mov edi, 1; jmp rax; 
0x000000000043fd92: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040edf6: mov edi, dword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004415b3: mov edi, dword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000441a45: mov edi, dword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000045dd8e: mov edi, dword ptr [rbp - 0x4a0]; call rax; 
0x000000000045ebfa: mov edi, dword ptr [rbp - 0x4a0]; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f771: mov edi, dword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047ed3e: mov edi, dword ptr [rbp - 0x88]; call rax; 
0x000000000049cffe: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x000000000049d096: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000044120a: mov edi, dword ptr [rbp]; call rbx; 
0x000000000047a0c0: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000045d479: mov edi, dword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004811f4: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004530c9: mov edi, dword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049a261: mov edi, dword ptr [rdi]; call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a1dd: mov edi, dword ptr [rdi]; call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004411b8: mov edi, dword ptr [rdi]; call rbx; 
0x000000000044fea8: mov edi, dword ptr [rdi]; syscall; 
0x00000000004bb286: mov edi, dword ptr [rdx]; ret; 
0x00000000004a1348: mov edi, dword ptr [rip + 0x22c542]; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000048c708: mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x000000000048c5cb: mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x0000000000417489: mov edi, dword ptr [rsi - 0x3b7cb701]; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000441177: mov edi, dword ptr [rsi]; call rbx; 
0x000000000049a17f: mov edi, dword ptr [rsp + 0x10]; call 0x8c750; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000044169f: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000448605: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f68: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000481188: mov edi, dword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x000000000048c964: mov edi, dword ptr [rsp + 0x18]; call 0x8c750; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000044934e: mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e4a2: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x0000000000448b39: mov edi, dword ptr [rsp + 0x28]; call rbx; 
0x000000000044a9b8: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x000000000044adf8: mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044a0df: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000400eeb: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004407d3: mov edi, dword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000443340: mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000441600: mov edi, dword ptr [rsp]; call rbx; 
0x000000000049e92a: mov edi, dword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x00000000004009fe: mov edi, eax; call 0x109b0; nop; leave; ret; 
0x0000000000400ab1: mov edi, eax; call 0x10b80; nop; pop rbp; ret; 
0x00000000004415c2: mov edi, eax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000400b4e: mov edi, eax; call 0x1f100; nop; pop rbp; ret; 
0x0000000000411db9: mov edi, eax; call qword ptr [rax + 8]; 
0x00000000004222ea: mov edi, eax; call rcx; 
0x0000000000403d0c: mov edi, eax; je 0x3ec5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000004a40b9: mov edi, eax; jmp qword ptr [rax]; 
0x0000000000452ecd: mov edi, eax; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x0000000000400487: mov edi, eax; mov eax, 3; syscall; 
0x0000000000400467: mov edi, eax; mov eax, ebp; syscall; 
0x000000000043fd01: mov edi, eax; mov eax, r9d; syscall; 
0x000000000047d6c0: mov edi, eax; mov r14, r9; je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x00000000004602da: mov edi, eax; mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000440409: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473589: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000421688: mov edi, eax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x000000000044326e: mov edi, eax; sub rdx, rsi; mov eax, r12d; syscall; 
0x00000000004415f8: mov edi, ebp; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441337: mov edi, ebp; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046c983: mov edi, ebp; call 0x6d8d0; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046c994: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x000000000046cf51: mov edi, ebp; call qword ptr [rax + 0x20]; 
0x000000000046b976: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x0000000000410da6: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x0000000000498236: mov edi, ebp; call qword ptr [rbx]; 
0x000000000041fbe6: mov edi, ebp; call rax; 
0x0000000000441ea0: mov edi, ebp; call rbx; 
0x0000000000411c2b: mov edi, ebp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000450051: mov edi, ebp; mov eax, r15d; syscall; 
0x0000000000450162: mov edi, ebp; mov eax, r8d; syscall; 
0x0000000000410e24: mov edi, ebp; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004112a3: mov edi, ebp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000420547: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x0000000000450130: mov edi, ebp; xor eax, eax; syscall; 
0x000000000043fdc0: mov edi, ebx; call 0x3f650; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004734d1: mov edi, ebx; call 0x730e0; add rsp, 0x90; pop rbx; ret; 
0x00000000004100ca: mov edi, ebx; call qword ptr [rax + 0x10]; 
0x0000000000413e4d: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x0000000000414027: mov edi, ebx; call qword ptr [rax + 0x20]; 
0x0000000000414027: mov edi, ebx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000416c52: mov edi, ebx; call qword ptr [rax + 0x30]; 
0x0000000000453fcd: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x0000000000413577: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x0000000000499fa3: mov edi, ebx; call qword ptr [rax + 0x48]; 
0x0000000000410cbf: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x0000000000410d06: mov edi, ebx; call qword ptr [rax + 0x68]; 
0x0000000000413a94: mov edi, ebx; call qword ptr [rax + 0x70]; 
0x0000000000413ea5: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x000000000041177f: mov edi, ebx; call qword ptr [rbx + 0x20]; 
0x000000000046d215: mov edi, ebx; call qword ptr [rdx + 0x30]; 
0x0000000000413297: mov edi, ebx; call rax; 
0x000000000049f553: mov edi, ebx; jne 0x9f540; pop rbx; ret; 
0x0000000000411ae8: mov edi, ebx; lea rsi, [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004003d3: mov edi, ebx; mov eax, 1; syscall; 
0x00000000004004a3: mov edi, ebx; mov eax, r10d; syscall; 
0x0000000000417558: mov edi, ebx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046c519: mov edi, ebx; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000499e60: mov edi, ebx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000453b78: mov edi, ebx; mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000413da5: mov edi, ebx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000045663f: mov edi, ebx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455972: mov edi, ebx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000456476: mov edi, ebx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e9a: mov edi, ebx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000411d18: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e14: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f84: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000410fd7: mov edi, ebx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045ee19: mov edi, ecx; call qword ptr [rax + 0x38]; 
0x000000000041bcca: mov edi, ecx; mov eax, 3; syscall; 
0x000000000041bc9e: mov edi, ecx; mov eax, r8d; syscall; 
0x00000000004411f5: mov edi, edi; call 0x1f100; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000411685: mov edi, edi; call rax; 
0x0000000000441ee4: mov edi, edi; call rbx; 
0x0000000000441eff: mov edi, edi; mov edx, 4; mov esi, 1; call rbx; 
0x000000000046d8a4: mov edi, edi; xor r8d, r8d; call rbx; 
0x000000000041036a: mov edi, edx; call qword ptr [rax + 0x60]; 
0x0000000000452f51: mov edi, edx; mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x000000000043fb71: mov edi, edx; mov eax, esi; syscall; 
0x000000000043fb81: mov edi, edx; mov eax, r8d; syscall; 
0x0000000000441202: mov edi, esi; call 0x1f100; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045072d: mov edi, esi; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000460d1f: mov edi, esi; call qword ptr [rax + 0x38]; 
0x0000000000441ec4: mov edi, esi; call rbx; 
0x0000000000412a67: mov edi, esi; mov eax, r9d; syscall; 
0x0000000000461495: mov edi, esi; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004607be: mov edi, esi; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000443182: mov edi, esp; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046bde9: mov edi, esp; call qword ptr [rax + 0x38]; 
0x0000000000441e7b: mov edi, esp; call rbx; 
0x000000000046f64b: mov edi, esp; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000416247: mov edi, esp; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000046d5ef: mov edi, esp; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f748: mov edi, esp; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000403cc8: mov edi, esp; mov eax, 3; syscall; 
0x0000000000440fa1: mov edi, esp; mov eax, 9; syscall; 
0x0000000000403eec: mov edi, esp; mov eax, r10d; syscall; 
0x00000000004127e1: mov edi, esp; mov eax, r9d; syscall; 
0x000000000046f9c5: mov edi, esp; mov r9, r15; call rbx; 
0x0000000000446604: mov edi, esp; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x000000000047beb9: mov edi, esp; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000047beb8: mov edi, r12d; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004223f9: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000422476: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000047cfc5: mov edx, 0; mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000046bde0: mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004003c8: mov edx, 0x1d; mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400400: mov edx, 0x1d; mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000043fcf8: mov edx, 0x1f; mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x0000000000400f21: mov edx, 0x3c; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000426ea7: mov edx, 0x4268d0; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x00000000004277cf: mov edx, 0x430cd0; cmove rax, rdx; ret; 
0x000000000046e062: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x00000000004160fc: mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x0000000000443846: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000004408c9: mov edx, 0x80000; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440ace: mov edx, 0x80000; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000472e10: mov edx, 0x90800; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000040e034: mov edx, 0xa; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x0000000000443842: mov edx, 0xba0028aa; add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000404a48: mov edx, 0xe9004a59; test eax, 0xb8fffff6; ret 0x4b7c; 
0x0000000000430669: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049b933: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x000000000041441e: mov edx, 0xffffffd0; cmp dword ptr fs:[rdx], 0x1d; je 0x143b4; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000004731ce: mov edx, 0xffffffd0; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000472f49: mov edx, 0xffffffd0; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000413478: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e011: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000413cd7: mov edx, 0xffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004507e7: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004508c1: mov edx, 0xffffffe0; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000447e57: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000410c8e: mov edx, 0xffffffff; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000044239a: mov edx, 1; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e6d: mov edx, 1; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044543f: mov edx, 1; je 0x45450; mov dword ptr [rip + 0x285b4c], edx; pop rbx; ret; 
0x000000000041bc93: mov edx, 1; lea rsi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000044398d: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000047952c: mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004420ee: mov edx, 1; mov esi, 1; mov rdi, r12; call rbx; 
0x000000000044236c: mov edx, 1; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000004127d8: mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000049d3fc: mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x0000000000442110: mov edx, 2; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423bf: mov edx, 2; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e92: mov edx, 2; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441fba: mov edx, 2; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000004420df: mov edx, 2; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441eb6: mov edx, 3; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442259: mov edx, 3; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442134: mov edx, 3; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fdb: mov edx, 3; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442786: mov edx, 3; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442661: mov edx, 3; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e3: mov edx, 3; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441f32: mov edx, 3; mov esi, 1; mov rdi, r14; call rbx; 
0x0000000000441fab: mov edx, 3; mov esi, 2; mov rdi, r14; call rbx; 
0x000000000044247c: mov edx, 4; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442403: mov edx, 4; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281f: mov edx, 4; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426fa: mov edx, 4; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442681: mov edx, 4; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004425a1: mov edx, 4; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f2: mov edx, 4; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442279: mov edx, 4; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed6: mov edx, 4; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442154: mov edx, 4; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4f: mov edx, 4; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442074: mov edx, 4; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ffb: mov edx, 4; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f01: mov edx, 4; mov esi, 1; call rbx; 
0x0000000000441f23: mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000445c80: mov edx, 8; mov eax, edx; ret; 
0x0000000000450c11: mov edx, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450a91: mov edx, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000400faa: mov edx, dword ptr [r9]; add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x0000000000400c85: mov edx, dword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x000000000040edf2: mov edx, dword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edca: mov edx, dword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004175e0: mov edx, dword ptr [rax + 8]; jne 0x175f0; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000400c74: mov edx, dword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000400c64: mov edx, dword ptr [rax]; mov eax, 0; call rdx; 
0x000000000046c4e8: mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x0000000000461498: mov edx, dword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000443b29: mov edx, dword ptr [rbp - 0x20]; movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x0000000000456487: mov edx, dword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000049ca6a: mov edx, dword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000049cfb4: mov edx, dword ptr [rbp]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048c7e1: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000410fc9: mov edx, dword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000413290: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046d20c: mov edx, dword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000042bccf: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042a3fd: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000400fab: mov edx, dword ptr [rcx]; add dword ptr [rsi], edx; and eax, 0xf; mov dword ptr [r8], eax; pop rbx; ret; 
0x0000000000415c77: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048c7f5: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041167e: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000048c854: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041611d: mov edx, dword ptr [rdi + 0xc0]; test edx, edx; jle 0x16170; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000049e729: mov edx, dword ptr [rdi]; mov rdi, rbp; call rbx; 
0x0000000000443ee7: mov edx, dword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047b098: mov edx, dword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000049c90b: mov edx, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049ea71: mov edx, dword ptr [rip + 0x1f0fffb6]; add byte ptr [rax - 0x75], cl; add eax, 0x22f2d1; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049a3e4: mov edx, dword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000400ee0: mov edx, dword ptr [rip + 0x2cc75a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043c625: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c645: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000436761: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000436680: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004364c1: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436610: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000436451: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043caa2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043c472: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004365a0: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004363e1: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ca83: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000043c463: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000436371: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb34: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000436301: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb54: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000436291: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043caf3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043c4b3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043cb74: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000436221: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb13: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043c4c3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043cad4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000435cd1: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435c51: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435bd1: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435b41: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435ab1: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a21: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432b01: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000432ce1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000432ec0: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004328f8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432ad8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cb8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e98: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432af4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cd4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eb4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432914: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004330c0: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004332c0: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c0: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432735: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433089: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433289: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433489: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432719: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332a5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432751: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435d51: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ca60: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004366f0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000043cab1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000436531: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000043ca41: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000043c421: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000049a189: mov edx, dword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048c96e: mov edx, dword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x0000000000480f4f: mov edx, dword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000450b7d: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480d42: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd0: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041f501: mov edx, dword ptr [rsp + 0x68]; call rax; 
0x00000000004207f9: mov edx, dword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x000000000049bee3: mov edx, dword ptr [rsp + rax*8 + 0x30]; ja 0x9bcb0; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049c989: mov edx, dword ptr [rsp]; mov edi, 1; call rax; 
0x0000000000443339: mov edx, dword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000048bb2c: mov edx, eax; lea rcx, [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x00000000004432ff: mov edx, eax; mov eax, r12d; syscall; 
0x00000000004607c1: mov edx, eax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000455fe9: mov edx, eax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413a87: mov edx, eax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000043fd15: mov edx, eax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000412a61: mov edx, eax; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000403ee6: mov edx, eax; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000044061f: mov edx, eax; neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x000000000046f648: mov edx, ebp; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000453fc3: mov edx, ebp; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000445c33: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x0000000000498231: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004981f1: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045f15e: mov edx, ebp; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000041453e: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000046f9bf: mov edx, ebp; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x000000000045ec12: mov edx, ebx; call qword ptr [rax + 0x38]; 
0x0000000000460e2b: mov edx, ebx; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460d0e: mov edx, ebx; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000455e89: mov edx, ebx; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000045d483: mov edx, ebx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046b973: mov edx, ebx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410a50: mov edx, ebx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440f9b: mov edx, ebx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004136c4: mov edx, ebx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000440fdb: mov edx, ebx; or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048bb15: mov edx, ecx; jg 0x8bb20; call 0x8b470; leave; ret; 
0x00000000004735e1: mov edx, ecx; mov eax, 0x106; syscall; 
0x00000000004438d1: mov edx, ecx; mov eax, 0x19; syscall; 
0x00000000004438d1: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004616df: mov edx, ecx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004542a1: mov edx, ecx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455975: mov edx, ecx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045a78c: mov edx, ecx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000045012d: mov edx, ecx; mov rdi, r13; xor eax, eax; syscall; 
0x000000000045015c: mov edx, ecx; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x00000000004602e8: mov edx, edi; call qword ptr [rax + 0x38]; 
0x000000000046c7e8: mov edx, edi; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000456b7e: mov edx, edx; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004571d4: mov edx, edx; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410cb2: mov edx, edx; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000413e9f: mov edx, esi; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004530d3: mov edx, esp; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049e927: mov edx, esp; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ee0c: mov edx, esp; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f778: mov edx, esp; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000454749: mov edx, esp; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f60: mov edx, esp; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b73d: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413571: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004736e6: mov edx, esp; syscall; 
0x0000000000473909: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000004c915c: mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c74dc: mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x00000000004423c6: mov es, word ptr [rip - 0x9cf0000]; mov rdi, r13; call rbx; 
0x0000000000440605: mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004015c7: mov esi, 0x20000; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x0000000000401556: mov esi, 0x20001; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x0000000000473519: mov esi, 0x441f0f66; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x0000000000446a0c: mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x0000000000447d95: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000048c3bd: mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000048c4e8: mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x0000000000480dce: mov esi, 0x48ffffc8; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004003cd: mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000400405: mov esi, 0x4a2b46; mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004408ce: mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440ad3: mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000447d7d: mov esi, 0x4a67398a; add byte ptr [rcx - 0x41f0b3b8], cl; mov bh, byte ptr [rdx]; add byte ptr [eax - 0x7f], cl; ret 0x6720; 
0x0000000000447d87: mov esi, 0x4a673a8a; add byte ptr [rax - 0x7f], cl; ret 0x6720; 
0x000000000046fbee: mov esi, 0x4b5e74; mov edi, 0x4b5d58; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x00000000004736d7: mov esi, 0x5401; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004bc27a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000041bc6f: mov esi, 0x80000; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x000000000044352e: mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x000000000044355d: mov esi, 0x80000; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000450650: mov esi, 0x80000; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x000000000045004b: mov esi, 0x80000; mov rdi, r13; mov eax, r15d; syscall; 
0x000000000044395b: mov esi, 0x80; cmp eax, edx; jne 0x4396c; nop; mov eax, 0xca; syscall; 
0x0000000000443a48: mov esi, 0x80; syscall; 
0x0000000000479531: mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000443988: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048c63e: mov esi, 0x89fffef8; add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000047f04f: mov esi, 0x89fffffe; ret 0x758b; 
0x0000000000412750: mov esi, 0x902; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000472f80: mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x000000000049ca6d: mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000482b8f: mov esi, 0xbe0f2414; ret 0x8349; 
0x0000000000420117: mov esi, 0xc0840045; jne 0x20148; mov rax, qword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x00000000004b915e: mov esi, 0xc2c1c0bf; ret; 
0x000000000041748a: mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000416b1b: mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043f4d4: mov esi, 0xf000000; lahf; ret 0xea81; 
0x0000000000430369: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004ba0e6: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004112ac: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416ca7: mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000416ca7: mov esi, 0xffffffff; call qword ptr [rax + 0x30]; cmp eax, -1; jne 0x16c9a; pop rbx; ret; 
0x000000000046cfc7: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000413e47: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9f: mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000441f06: mov esi, 1; call rbx; 
0x000000000049cfb7: mov esi, 1; mov edi, 1; call rax; 
0x000000000044ff4a: mov esi, 1; mov r13d, 1; mov eax, 3; syscall; 
0x00000000004420f3: mov esi, 1; mov rdi, r12; call rbx; 
0x0000000000441fbf: mov esi, 1; mov rdi, r13; call rbx; 
0x0000000000441f37: mov esi, 1; mov rdi, r14; call rbx; 
0x000000000044237d: mov esi, 1; mov rdi, rbp; call rbx; 
0x000000000046aa18: mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004410f1: mov esi, 2; jmp rax; 
0x0000000000442371: mov esi, 2; mov rdi, r12; call rbx; 
0x00000000004420e4: mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441fb0: mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000441f28: mov esi, 2; mov rdi, r15; call rbx; 
0x000000000044110b: mov esi, 3; jmp rax; 
0x00000000004428ec: mov esi, 3; mov rdi, r12; call rbx; 
0x0000000000442943: mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429c3: mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442ac3: mov esi, 3; mov rdi, r15; call rbx; 
0x000000000044070c: mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x000000000040edce: mov esi, dword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000441a42: mov esi, dword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000460d18: mov esi, dword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046149f: mov esi, dword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004616e9: mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000049cffa: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d092: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000453fc6: mov esi, dword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000456479: mov esi, dword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000456638: mov esi, dword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e9d: mov esi, dword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000443266: mov esi, dword ptr [rbx]; mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044169c: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049a25d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a1d9: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049e92e: mov esi, dword ptr [rdi + rbp*8 + 0x10]; call rbx; 
0x0000000000472f58: mov esi, dword ptr [rdx]; syscall; 
0x000000000049e725: mov esi, dword ptr [rsi + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x00000000004369bc: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004339f9: mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x00000000004369aa: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004339db: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000436997: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000433a0d: mov esi, dword ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x0000000000400ee7: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000042053e: mov esi, dword ptr [rsp + 0x18]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041eeb9: mov esi, dword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000445c36: mov esi, dword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000041fbe1: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000448b34: mov esi, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a9b3: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000041f1e1: mov esi, dword ptr [rsp + 0x48]; call rax; 
0x0000000000427d81: mov esi, dword ptr [rsp - 8]; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000472f57: mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000045474c: mov esi, eax; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f63: mov esi, eax; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046d212: mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000045012a: mov esi, eax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d7: mov esi, eax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004136c7: mov esi, ebp; mov eax, r13d; syscall; 
0x000000000045ee0f: mov esi, ebp; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f77b: mov esi, ebp; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e49f: mov esi, ebp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x000000000046bde6: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440f9e: mov esi, ebp; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000412a64: mov esi, ebp; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000043fcfe: mov esi, ebp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b740: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413574: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413ea2: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000441f1c: mov esi, ebx; call 0x41090; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441ef7: mov esi, ebx; call 0x41090; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x000000000044116f: mov esi, ebx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411b0: mov esi, ebx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048c706: mov esi, ebx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x00000000004571de: mov esi, ebx; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004127de: mov esi, ebx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000046c991: mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004222e7: mov esi, ebx; mov rdi, rax; call rcx; 
0x00000000004542ab: mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000415e59: mov esi, ecx; jbe 0x15df5; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000047d6c3: mov esi, ecx; je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x0000000000403ee9: mov esi, ecx; mov rdi, r12; mov eax, r10d; syscall; 
0x0000000000410cbc: mov esi, ecx; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000049d33a: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000045dd8b: mov esi, edi; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453b0b: mov esi, edi; mov rdi, rbx; call rax; 
0x00000000004607b7: mov esi, edi; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000044040c: mov esi, edx; mov eax, 4; syscall; 
0x000000000044045b: mov esi, edx; mov eax, 5; syscall; 
0x000000000047358c: mov esi, edx; mov eax, 6; syscall; 
0x000000000045015f: mov esi, edx; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000046fb3d: mov esi, esi; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x00000000004432f8: mov esi, esi; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000044333d: mov esi, esi; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000046f9c2: mov esi, esi; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000413a91: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fd4: mov esi, esi; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410a53: mov esi, esp; call qword ptr [rax + 0x38]; 
0x0000000000498234: mov esi, esp; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004981f4: mov esi, esp; mov edi, ebp; call rax; 
0x000000000045f161: mov esi, esp; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ec08: mov esi, esp; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045072a: mov esi, esp; mov rdi, r14; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000421685: mov esi, esp; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000499fa0: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000414541: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004207fe: mov esi, esp; mov rdi, rbx; call rax; 
0x00000000004213aa: mov esi, esp; pop rbp; pop r12; jmp rax; 
0x0000000000420be5: mov esi, esp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000045596c: mov esi, esp; sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000047d11b: mov esi, esp; syscall; 
0x00000000004b8611: mov esp, 0x130; add byte ptr [rax], al; ret 0x4b7d; 
0x000000000043c938: mov esp, 0x1d8d4cd2; add qword ptr [r14], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c335: mov esp, 0x1d8d4cd2; rol byte ptr [rsi + 0x63490006], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c955: mov esp, 0x1d8d4cd2; xor al, byte ptr [rcx + 0x63490006]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c807c: mov esp, 0x30000090; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004bfb7c: mov esp, 0x4000000b; cmc; hlt; call qword ptr [rax]; 
0x0000000000427181: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000004271b1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000004271a1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000430564: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c357c: mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x0000000000410cf4: mov esp, 0x8348d231; jnp 0x10d33; add byte ptr [rbp - 0x2e], dh; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004c667c: mov esp, 0x90000076; cwde; cli; jmp qword ptr [rax + 1]; 
0x000000000043cf60: mov esp, 0xa8000000; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x0000000000422474: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004b2bb8: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000426f4b: mov esp, 0xc22948c0; jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c1: mov esp, 0xc22948c0; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d1: mov esp, 0xc22948c0; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e1: mov esp, 0xc22948c0; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f1: mov esp, 0xc22948c0; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000424b63: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000426392: mov esp, 0xd32949d2; jbe 0x263a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004bf07c: mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x0000000000417401: mov esp, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000430569: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042ddab: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x0000000000427191: mov esp, 0xf80148c0; ret; 
0x000000000049cff2: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000414488: mov esp, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000004811fa: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x000000000049d09e: mov esp, ecx; ret; 
0x0000000000403919: mov esp, ecx; sub rsp, 0x48; test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x00000000004410a4: mov esp, edx; mov rbp, rax; call rax; 
0x00000000004164f4: mov esp, esi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000450124: mov fs, word ptr [rdi + 0x48000000]; mov esi, eax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x000000000042dc6e: mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a9fb: mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000044f33d: mov qword ptr [r12], rax; mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x000000000044ed85: mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4ed94; call rax; 
0x000000000046c21d: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000450b81: mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000410356: mov qword ptr [r8 + 8], r9; add dword ptr [r8 + 4], 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x00000000004369a0: mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000418581: mov qword ptr [r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000443eed: mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000411c22: mov qword ptr [rax + 0x10], r9; push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000046c198: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d8: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000413810: mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046d138: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000443ede: mov qword ptr [rax + 0x20], rdi; shl rdx, 4; mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046d134: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000046d034: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c19c: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c7e3: mov qword ptr [rax + 0x40], rdx; mov rdx, rdi; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046d1d6: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000046d1ce: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000046c18d: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d1: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000443ef5: mov qword ptr [rax + 8], rdx; ret; 
0x000000000048c84c: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048116d: mov qword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048c763: mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000047bfbe: mov qword ptr [rax], rcx; add rsp, 0x140; mov eax, ebx; pop rbx; ret; 
0x000000000046c6c4: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x000000000048c804: mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000046c604: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000046c195: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046c1d5: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000048c7f8: mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000049cf1e: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000460e2d: mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004616e1: mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460d10: mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000044352a: mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443439: mov qword ptr [rbp - 0x40], r12; syscall; 
0x00000000004542a3: mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000443526: mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; mov esi, 0x80000; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443435: mov qword ptr [rbp - 0x48], r12; mov qword ptr [rbp - 0x40], r12; syscall; 
0x000000000045474e: mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455977: mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000456b80: mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455fe1: mov qword ptr [rbp - 0x4d0], rcx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045646e: mov qword ptr [rbp - 0x4d8], r8; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455d27: mov qword ptr [rbp - 0x4e8], rsi; jmp rax; 
0x0000000000455e8b: mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004571e0: mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004571d6: mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000403771: mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000040376a: mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000047afb0: mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047d6c7: mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000047b199: mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x0000000000479225: mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x000000000045a78e: mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x00000000004030b5: mov qword ptr [rbp - 0xc0], rax; mov eax, 0; test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x000000000047a76f: mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b192: mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047afa9: mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x0000000000479552: mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047a768: mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047954b: mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x000000000047a8a0: mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b18b: mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x000000000047a899: mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x00000000004174ec: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000492aa2: mov qword ptr [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000489f70: mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000044e710: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480e34: mov qword ptr [rbx + 0x10], rax; add rsp, 0x30; pop rbx; ret; 
0x0000000000412cd6: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000480e6d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047d06e: mov qword ptr [rbx + 0x10], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004134d8: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000043fb0c: mov qword ptr [rbx + 0x10], rdx; je 0x3fae9; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412e85: mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041656c: mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048c4a7: mov qword ptr [rbx + 0x18], rax; mov dword ptr [rbx + 4], 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000412cce: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000480dd2: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049a1e4: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000412e81: mov qword ptr [rbx + 0x18], rsi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415cf2: mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x0000000000496812: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000412e91: mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000412e8d: mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415cee: mov qword ptr [rbx + 0x30], rax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x0000000000412e89: mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000041345c: mov qword ptr [rbx + 0x38], 0; mov eax, 3; movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x00000000004160c5: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000415d6d: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x00000000004174f0: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412c66: mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x00000000004134cd: mov qword ptr [rbx + 0x90], rsi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000049c90d: mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412d37: mov qword ptr [rbx + 0xd8], 0x4a2cc0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x00000000004127d4: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000412cd2: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000004134d4: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047cb0d: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416024: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000415e54: mov qword ptr [rbx + 8], rdx; mov rsi, rcx; jbe 0x15df5; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x00000000004161bb: mov qword ptr [rbx + 8], rdx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x00000000004469d2: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047d372: mov qword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x0000000000443335: mov qword ptr [rbx], r14; mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004432f4: mov qword ptr [rbx], r14; mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x0000000000497eb5: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000049a628: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000043f760: mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x00000000004168c9: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004168c1: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045864a: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000049cd59: mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000004507e3: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044fe9f: mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000048a84e: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000415caa: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043cc7c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc9c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5ec: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5cc: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043ccdf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c62f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043ccff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c64f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccc0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c610: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000415c82: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415cae: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000046fe6c: mov qword ptr [rdi + 0x20], rcx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000479716: mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000415c7e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415cb2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041989f: mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049cdb0: mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004166eb: mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004166f6: mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000043cc3c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c58c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc5c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5ac: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004364c7: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436457: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004363e7: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436377: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb3a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000436307: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4da: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043cb5a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000436297: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4ea: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043cb7a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000436227: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043c4fa: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000048bccf: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000048a153: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000048a847: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7d3: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000415c86: mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416c92: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000048ad6c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042792d: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000049cd68: mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000004325e4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432622: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048a73e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000432797: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432893: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327df: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432967: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b47: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d37: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f08: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433108: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433308: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325e0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043261e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432793: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043288f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327db: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432963: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b43: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d33: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f04: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433104: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433304: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325dc: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043261a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043278f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043288b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327d7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043295f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b3f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432d2f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432f00: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433100: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433300: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004325d8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432616: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043296b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435cd7: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432b4b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435c57: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432d3b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435bd7: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432f0c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435b48: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043310c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435ab8: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043330c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a28: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000048a737: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a6c9: mov qword ptr [rdi - 8], r9; ret; 
0x00000000004325e8: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432626: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043279b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432897: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327e3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435d57: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000048a730: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a840: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000045d265: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048a6c3: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a7cd: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000042d9b6: mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000048a698: mov qword ptr [rdi], r9; ret; 
0x000000000048bdf5: mov qword ptr [rdi], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000047ca77: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000043cac6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043caf6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043c4b6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043cb16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043c4c6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043cb37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043cb57: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043cb77: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042792a: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043cad7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000400597: mov qword ptr [rdi], rcx; ret; 
0x000000000043cab3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000436533: mov qword ptr [rdi], rdx; ret; 
0x000000000048bd3c: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043699d: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004339dd: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000048bd62: mov qword ptr [rdi], rsi; ret; 
0x0000000000412d42: mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x000000000043c05a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a84a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c07a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a86a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c09a: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a88a: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf2a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a77a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043bed3: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000043bfd3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a803: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043bff3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a813: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c013: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043a823: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c033: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043a833: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043c053: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a843: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c073: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a863: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c093: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a883: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf23: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a773: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a723: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000048c7e4: mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004175b1: mov qword ptr [rdx], rax; ret; 
0x000000000046c4e5: mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000004a1353: mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x00000000004a12aa: mov qword ptr [rip + 0x22c583], 0; add rsp, 8; ret; 
0x00000000004a09a5: mov qword ptr [rip + 0x22cd60], 0; add rsp, 8; ret; 
0x000000000049f6be: mov qword ptr [rip + 0x22debb], rbx; jne 0x9f6a8; pop rbx; ret; 
0x000000000049ebd7: mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea7f: mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000048c371: mov qword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000047c938: mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x0000000000479bc7: mov qword ptr [rip + 0x254232], rcx; test byte ptr [rax + 0x314], 4; jne 0x79be8; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000044deba: mov qword ptr [rip + 0x27f83b], 0; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000041ed35: mov qword ptr [rip + 0x2aca38], 0x41dba0; ret; 
0x000000000041ed2a: mov qword ptr [rip + 0x2aca4b], 0x41e4b0; mov qword ptr [rip + 0x2aca38], 0x41dba0; ret; 
0x00000000004179d4: mov qword ptr [rip + 0x2b5bc9], 0; ret; 
0x0000000000417961: mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000401939: mov qword ptr [rip + 0x2c9750], rax; xor eax, eax; ret; 
0x0000000000400704: mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x0000000000475916: mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x00000000004017e6: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049ea86: mov qword ptr [rsi + 0x28], rax; ret; 
0x00000000004017db: mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000476a48: mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000475913: mov qword ptr [rsi], rax; mov qword ptr [rsi + 0x10], rax; mov edi, 0x1002; mov eax, 0x9e; syscall; 
0x000000000047ca81: mov qword ptr [rsi], rax; ret; 
0x00000000004507d8: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004017e3: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049a955: mov qword ptr [rsp + 0x10], 0; call 0x9a630; add rsp, 0x28; ret; 
0x000000000041c68a: mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000411b68: mov qword ptr [rsp + 0x10], r10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000041c73c: mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x000000000041c685: mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000040fd5d: mov qword ptr [rsp + 0x18], rax; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fccc: mov qword ptr [rsp + 0x18], rax; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6c0: mov qword ptr [rsp + 0x18], rax; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf5d: mov qword ptr [rsp + 0x18], rax; call 0x8bf70; add rsp, 0xd8; ret; 
0x0000000000411af7: mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x000000000041176e: mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000041c741: mov qword ptr [rsp + 8], r8; mov qword ptr [rsp], rcx; call rdx; 
0x00000000004415a3: mov qword ptr [rsp + 8], rax; call 0x41120; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004415b5: mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000443268: mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x00000000004407cd: mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000049a206: mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x0000000000480a7d: mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x00000000004405df: mov qword ptr [rsp - 0x40], rax; je 0x40600; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000048be8e: mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000004783d1: mov qword ptr [rsp], r8; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x0000000000440526: mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x0000000000473806: mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x0000000000440586: mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000004404c6: mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x0000000000473676: mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x0000000000411773: mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004432fa: mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000041c746: mov qword ptr [rsp], rcx; call rdx; 
0x000000000044510f: mov qword ptr [rsp], rcx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x000000000049a202: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; je 0x9a214; mov edi, 0x6cc140; call rax; 
0x0000000000418580: mov qword ptr fs:[r9], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004507e2: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004507ed: mov qword ptr fs:[rdx], rax; ret; 
0x00000000004507d7: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004339dc: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004017e5: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000049bee2: mov r10, qword ptr [rsp + rax*8 + 0x30]; ja 0x9bcb0; movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x00000000004438d0: mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004438d0: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000450c10: mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450a90: mov r10d, 8; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000432730: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432714: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000480d3c: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cca: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000049cff1: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000403918: mov r12, rcx; sub rsp, 0x48; test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x00000000004164f3: mov r12, rsi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004748d7: mov r12b, 0xe8; ret 0xfcbb; 
0x0000000000414487: mov r12d, dword ptr [rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000414486: mov r12d, dword ptr fs:[rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000004410a3: mov r12d, edx; mov rbp, rax; call rax; 
0x00000000004034fb: mov r13, qword ptr [rax + 0x28]; mov eax, 0; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x000000000049cff5: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d08d: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000403594: mov r13, rcx; test rax, rax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x00000000004723db: mov r13b, 0x25; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xf748; 
0x000000000044ff4f: mov r13d, 1; mov eax, 3; syscall; 
0x0000000000441a48: mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000049cff9: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d091: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000427d80: mov r14, qword ptr [rsp - 8]; and edx, 0x7f; jne 0x27946; mov rax, rdi; ret; 
0x000000000047d6c2: mov r14, r9; je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000044ff49: mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000049cffd: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049d095: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000047a0bf: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x00000000004811f3: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000403d0b: mov r15, rax; je 0x3ec5; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000004602d9: mov r15, rax; mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004bcc10: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000047d6bf: mov r15d, r8d; mov r14, r9; je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000049a9f8: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049aad8: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049ca63: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000452fdc: mov r8, rax; add r8, rbx; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000049c97f: mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049cfad: mov r8, rbx; mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000047c900: mov r8, rcx; lea rdx, [rsi + 4]; cmp rdx, r8; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000480eb5: mov r8b, 0xff; inc dword ptr [rbp + 0x481b75c0]; cmp dword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x000000000047f50e: mov r8b, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000440709: mov r8d, eax; mov esi, 7; movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000410e26: mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x000000000044a9ad: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000448b2e: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000445c3a: mov r9, r14; call rbx; 
0x000000000046f9c7: mov r9, r15; call rbx; 
0x00000000004509a0: mov rax, 0xf; syscall; 
0x0000000000450800: mov rax, 0xffffffffffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000415240: mov rax, 0xffffffffffffffd0; cmp dword ptr fs:[rax], 0x1d; je 0x151e9; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004734e8: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x14; add rsp, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000000472ed8: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000440438: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499eb8: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000044ee10: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004737c8: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041db80: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000472f00: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000411305: mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000450bb8: mov rax, 0xffffffffffffffd0; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000400478: mov rax, 0xffffffffffffffd0; neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000415140: mov rax, 0xffffffffffffffd0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411f07: mov rax, 0xffffffffffffffd0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047d390: mov rax, 0xffffffffffffffd0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000450860: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450840: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000450820: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004403e3: mov rax, 0xffffffffffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000046f49b: mov rax, 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412c70: mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x0000000000413ce2: mov rax, 0xffffffffffffffff; ret; 
0x000000000046eed0: mov rax, 1; ret; 
0x000000000046eee0: mov rax, 2; ret; 
0x000000000046eef0: mov rax, 3; ret; 
0x000000000046ef00: mov rax, 4; ret; 
0x000000000046ef10: mov rax, 5; ret; 
0x000000000046ef20: mov rax, 6; ret; 
0x000000000046ef30: mov rax, 7; ret; 
0x00000000004811a1: mov rax, qword ptr [0]; add rax, -8; ret; 
0x000000000046bdd8: mov rax, qword ptr [r12 + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046be0c: mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046c98a: mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000040ee14: mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000047e8a4: mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004607c3: mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004602dc: mov rax, qword ptr [r14 + 0xd8]; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044ed7d: mov rax, qword ptr [r14*8 + 0x4a6ea0]; mov qword ptr [r14*8 + 0x6cc9c0], rbx; test rax, rax; je 0x4ed94; call rax; 
0x000000000046d040: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046d158: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfc0: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6d0: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000411d1b: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046c51b: mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000415dab: mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000411d22: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f87: mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000045a787: mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x00000000004162a7: mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000499e62: mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004165cb: mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000046d583: mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000041176a: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x00000000004508c7: mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000411aef: mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000411677: mov rax, qword ptr [rax + 0x70]; jne 0x11684; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000413289: mov rax, qword ptr [rax + 0x70]; jne 0x13296; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000049894c: mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004981e9: mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000480c50: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000480c60: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000045dd78: mov rax, qword ptr [rax + r11*8]; mov byte ptr [rbp - 0x514], r9b; mov byte ptr [rbp - 0x500], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453af8: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x4d4], r9d; mov byte ptr [rbp - 0x4d0], r8b; mov rsi, r15; mov rdi, rbx; call rax; 
0x000000000045080e: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000400bbf: mov rax, qword ptr [rax*8 + 0x4a1c78]; jmp rax; 
0x0000000000456101: mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456152: mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458242: mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d75: mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x0000000000460f50: mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x0000000000462274: mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462758: mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000460fe6: mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000049ccf5: mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000045080b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004508bd: mov rax, qword ptr [rax]; mov rdx, 0xffffffffffffffe0; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000480f4b: mov rax, qword ptr [rax]; mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000413809: mov rax, qword ptr [rbp + 0xa0]; mov qword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000041381b: mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x000000000046cf49: mov rax, qword ptr [rbp + 0xd8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b96b: mov rax, qword ptr [rbp + 0xd8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000441a4b: mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000446606: mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000400c80: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x0000000000400c6f: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000400c5f: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000044f341: mov rax, qword ptr [rbp*8 + 0x4a6ea0]; test rax, rax; je 0x4f350; call rax; 
0x000000000047afa1: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xc8], r11; mov qword ptr [rbp - 0xa8], r10; call rax; 
0x000000000047a760: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; mov qword ptr [rbp - 0xd0], r11; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047a560: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047a0c2: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r12]; call rax; 
0x000000000048c848: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048c800: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048c7f0: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411d10: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004141de: mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000455feb: mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000499f96: mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000413e40: mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d98: mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000041401f: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416c4a: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000410cfe: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000415e0c: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f7c: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454f58: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b735: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413569: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453fbb: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413e97: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000414536: mov rax, qword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000456630: mov rax, qword ptr [rbx + 0xd8]; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000413a89: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fcc: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410cb4: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000458530: mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413f8d: mov rax, qword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000453b7a: mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x00000000004155fe: mov rax, qword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004100c0: mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000412eb9: mov rax, qword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ee11: mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000043c056: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a846: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c076: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a866: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c096: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a886: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf26: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a776: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000047cfca: mov rax, qword ptr [rcx + rax]; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043bed0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000043bfd0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x000000000043a800: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000043bff0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x000000000043a810: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000043c010: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000043a820: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000043c030: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000043a830: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000043c050: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000043a840: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000043c070: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000043a860: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000043c090: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000043a880: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000043bf20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000043a770: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043a720: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000450201: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5020f; call rax; 
0x00000000004a1127: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x0000000000418100: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d580: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000415c7a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004178f0: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000413c70: mov rax, qword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000049cd00: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049cd80: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d000: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000049cdc0: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049ce20: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049ce10: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cdd0: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000049cd90: mov rax, qword ptr [rdi + 0xc0]; shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004530d5: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000041448d: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000004165c0: mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000004112a5: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416ca0: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000415da4: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x00000000004162a0: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004164f7: mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000045ec0a: mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410a48: mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000004161a0: mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000045de03: mov rax, qword ptr [rdi + 0xd8]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000414130: mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x0000000000417a04: mov rax, qword ptr [rdi + 8]; cmp rax, rcx; jae 0x17a30; movzx eax, byte ptr [rax]; ret; 
0x000000000049d330: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0x9d348; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000004307d0: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000430246: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x000000000044ee2b: mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000480be0: mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x80bf0; ret; 
0x00000000004175ae: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d380: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041035f: mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x000000000049ebd0: mov rax, qword ptr [rip + 0x22f179]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea78: mov rax, qword ptr [rip + 0x22f2d1]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000047ca70: mov rax, qword ptr [rip + 0x24e619]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000047ca7a: mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000047ca19: mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x000000000047c92d: mov rax, qword ptr [rip + 0x2514dc]; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x00000000004708a5: mov rax, qword ptr [rip + 0x25db6c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044dce0: mov rax, qword ptr [rip + 0x27fa19]; ret; 
0x0000000000446970: mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x000000000042011e: mov rax, qword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x00000000004178d0: mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x0000000000418e9d: mov rax, qword ptr [rip + 0x2b473c]; test rax, rax; je 0x18eab; call rax; 
0x000000000049d61b: mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049ab50: mov rax, qword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000049ab17: mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049ab40: mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x0000000000417550: mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049d650: mov rax, qword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000049cdf5: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000400eef: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000411dae: mov rax, qword ptr [rsp + 0x18]; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000448609: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f6c: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e4a6: mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x000000000048106b: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x68; ret; 
0x000000000043f763: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000048c41f: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004415ad: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000004415bc: mov rax, qword ptr [rsp + 8]; mov rdi, rax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004811a0: mov rax, qword ptr fs:[0]; add rax, -8; ret; 
0x000000000045080a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000417da3: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000421a99: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046b99a: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041dce4: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041db74: mov rax, r8; pop rbx; ret; 
0x0000000000433af4: mov rax, r8; ret; 
0x0000000000473b95: mov rax, r9; ret; 
0x0000000000413c49: mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046be28: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x00000000004410ea: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000046bdfb: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004104f5: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049cf29: mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004143bc: mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047d667: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bfe: mov rax, rbx; mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000004106a8: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041078d: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000440ebd: mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000412cda: mov rax, rbx; pop rbx; ret; 
0x0000000000417900: mov rax, rdi; ret; 
0x0000000000420abe: mov rax, rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a18d: mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048c972: mov rax, rdx; add rsp, 0x38; ret; 
0x00000000004404dd: mov rax, rdx; add rsp, 8; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000041ee17: mov rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418584: mov rax, rdx; add rsp, 8; ret; 
0x000000000047b09e: mov rax, rdx; call rax; 
0x000000000041f7b1: mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041896b: mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000043f617: mov rax, rdx; pop rbx; ret; 
0x0000000000427ea8: mov rax, rdx; ret; 
0x0000000000440403: mov rax, rsi; ja 0x40438; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473583: mov rax, rsi; ja 0x735b8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000473332: mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000499fb7: mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x000000000040ef93: mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000452ed3: mov rax, rsi; ret; 
0x000000000043ee4a: mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000047d207: mov rbp, 0xffffffffffffffff; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049d099: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000410d9e: mov rbp, qword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000400da7: mov rbp, qword ptr [rip - 0xbd6]; mov ebx, 0x4001d8; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000413da7: mov rbp, r12; call qword ptr [rax + 0x18]; 
0x00000000004811fc: mov rbp, r9; nop; jmp rdx; 
0x000000000040eda2: mov rbp, rax; call qword ptr [rbp]; 
0x00000000004410a6: mov rbp, rax; call rax; 
0x000000000048c5ee: mov rbp, rdi; push rbx; je 0x8c660; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x000000000049f3c0: mov rbp, rdi; sub rsp, 0x40; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x0000000000441e4e: mov rbp, rdi; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000416501: mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000411777: mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000045ec00: mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000048c79e: mov rbx, r15; jmp qword ptr [rsi + 0x2e]; 
0x0000000000441e55: mov rbx, rax; call rax; 
0x0000000000411d01: mov rbx, rdi; call 0x13fc0; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x00000000004161a8: mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000004164fe: mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x000000000043f78e: mov rbx, rdi; sub rsp, 0x18; test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x0000000000450205: mov rbx, rdi; test rax, rax; je 0x5020f; call rax; 
0x0000000000480a75: mov rbx, rdi; test rax, rax; je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x000000000044109e: mov rbx, rdi; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000410366: mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000473402: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047977a: mov rbx, rsi; sub rsp, 8; test rax, rax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x00000000004507db: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046c191: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045ee04: mov rcx, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f156: mov rcx, qword ptr [rbp - 0x4a0]; mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x00000000004037bf: mov rcx, qword ptr [rbp - 0x90]; je 0x37eb; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000436999: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cd53: mov rcx, qword ptr [rdi + rsi*8]; jne 0x9cd43; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049d3f8: mov rcx, qword ptr [rdx + 8]; mov edx, 1; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000043cc74: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc94: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cc34: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c584: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc54: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004339d5: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000432ad4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432af0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cb4: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cd0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e94: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eb0: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433084: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a0: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433284: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332a0: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433484: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a0: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043024a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x0000000000435b44: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435ab4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a24: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004307cc: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x30c83; xor eax, eax; ret; 
0x00000000004328f4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432910: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043cac0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c490: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043cad0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4a0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043caf0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000043c4b0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043cb10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000043c4c0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004364c4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436454: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004363e4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436374: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436304: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436294: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436224: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043cb50: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043cb70: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000411b63: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046fb34: mov rcx, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000480d46: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd4: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000436998: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049c982: mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000445c2d: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000046d89c: mov rcx, r13; lea rdx, [rbp - 0x40]; mov rdi, r15; xor r8d, r8d; call rbx; 
0x000000000049cfb0: mov rcx, r13; mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000046d5e7: mov rcx, r14; lea rsi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d7a3: mov rcx, r14; lea rsi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f744: mov rcx, r14; mov rdi, r12; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f644: mov rcx, r15; mov rdx, r13; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000048baed: mov rcx, rax; lea r8, [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x8af10; leave; ret; 
0x000000000049ca66: mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046f9bb: mov rcx, rbp; mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000433b10: mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000433b13: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004453f9: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x00000000004408d3: mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x00000000004415ff: mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441209: mov rdi, qword ptr [r13]; call rbx; 
0x0000000000441176: mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411b7: mov rdi, qword ptr [r15]; call rbx; 
0x000000000040edf5: mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004415b2: mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000441a44: mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000045dd8d: mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x000000000045ebf9: mov rdi, qword ptr [rbp - 0x4a0]; mov rbx, qword ptr [rbp - 0x4d8]; mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045f770: mov rdi, qword ptr [rbp - 0x4a0]; mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047ed3d: mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000044133e: mov rdi, qword ptr [rbp]; call rbx; 
0x000000000045d478: mov rdi, qword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004530c8: mov rdi, qword ptr [rdi + 0xe0]; movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049a260: mov rdi, qword ptr [rdi]; call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a1dc: mov rdi, qword ptr [rdi]; call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000044fea7: mov rdi, qword ptr [rdi]; syscall; 
0x00000000004a1347: mov rdi, qword ptr [rip + 0x22c542]; call 0x1f100; mov qword ptr [rip + 0x22c532], 0; pop rbx; ret; 
0x000000000049a17e: mov rdi, qword ptr [rsp + 0x10]; call 0x8c750; mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000044169e: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000448604: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f67: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000481187: mov rdi, qword ptr [rsp + 0x18]; call 0x1f100; add rsp, 0x48; ret; 
0x000000000048c963: mov rdi, qword ptr [rsp + 0x18]; call 0x8c750; mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000044934d: mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000040e4a1: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x0000000000448b38: mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a9b7: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000044adf7: mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044a0de: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004407d2: mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000044333f: mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000049e929: mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x0000000000443181: mov rdi, r12; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046bde8: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000441e7a: mov rdi, r12; call rbx; 
0x000000000046f64a: mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000416246: mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000046d5ee: mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f747: mov rdi, r12; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000403cc7: mov rdi, r12; mov eax, 3; syscall; 
0x0000000000440fa0: mov rdi, r12; mov eax, 9; syscall; 
0x0000000000403eeb: mov rdi, r12; mov eax, r10d; syscall; 
0x00000000004127e0: mov rdi, r12; mov eax, r9d; syscall; 
0x000000000046f9c4: mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000446603: mov rdi, r12; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000442f2f: mov rdi, r13; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441336: mov rdi, r13; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046c982: mov rdi, r13; call 0x6d8d0; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046c993: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000441e9f: mov rdi, r13; call rbx; 
0x0000000000450050: mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000450161: mov rdi, r13; mov eax, r8d; syscall; 
0x000000000045012f: mov rdi, r13; xor eax, eax; syscall; 
0x0000000000441201: mov rdi, r14; call 0x1f100; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045072c: mov rdi, r14; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000460d1e: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000441ec3: mov rdi, r14; call rbx; 
0x0000000000412a66: mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000461494: mov rdi, r14; mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004607bd: mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x00000000004411f4: mov rdi, r15; call 0x1f100; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000411684: mov rdi, r15; call rax; 
0x0000000000441ee3: mov rdi, r15; call rbx; 
0x0000000000441efe: mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x000000000046d8a3: mov rdi, r15; xor r8d, r8d; call rbx; 
0x0000000000400486: mov rdi, r8; mov eax, 3; syscall; 
0x0000000000400466: mov rdi, r8; mov eax, ebp; syscall; 
0x000000000043fd00: mov rdi, r8; mov eax, r9d; syscall; 
0x000000000041bcc9: mov rdi, r9; mov eax, 3; syscall; 
0x000000000041bc9d: mov rdi, r9; mov eax, r8d; syscall; 
0x00000000004009fd: mov rdi, rax; call 0x109b0; nop; leave; ret; 
0x0000000000400ab0: mov rdi, rax; call 0x10b80; nop; pop rbp; ret; 
0x00000000004415c1: mov rdi, rax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000400b4d: mov rdi, rax; call 0x1f100; nop; pop rbp; ret; 
0x0000000000411db8: mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004222e9: mov rdi, rax; call rcx; 
0x0000000000452ecc: mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x0000000000440408: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000473588: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000421687: mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x000000000044326d: mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x00000000004415f7: mov rdi, rbp; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x000000000046cfcc: mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046cf50: mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000046b975: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410da5: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000041fbe5: mov rdi, rbp; call rax; 
0x0000000000442382: mov rdi, rbp; call rbx; 
0x0000000000411c2a: mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410e23: mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004112a2: mov rdi, rbp; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000420546: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000004100c9: mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000413e4c: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000414026: mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000414026: mov rdi, rbx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000416c51: mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000453fcc: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413576: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000499fa2: mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000410cbe: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000410d05: mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000413a93: mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000413ea4: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000041177e: mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000046d214: mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000413296: mov rdi, rbx; call rax; 
0x000000000049f552: mov rdi, rbx; jne 0x9f540; pop rbx; ret; 
0x0000000000411ae7: mov rdi, rbx; lea rsi, [rsp + 0x20]; mov rax, qword ptr [rax + 0x60]; sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004003d2: mov rdi, rbx; mov eax, 1; syscall; 
0x00000000004004a2: mov rdi, rbx; mov eax, r10d; syscall; 
0x0000000000417557: mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046c518: mov rdi, rbx; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000499e5f: mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000453b77: mov rdi, rbx; mov rax, qword ptr [rbx + 0xd8]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000413da4: mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x000000000045663e: mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455971: mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x0000000000456475: mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e99: mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000411d17: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e13: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f83: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000410fd6: mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045ee18: mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000410369: mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000452f50: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x000000000043fb70: mov rdi, rdx; mov eax, esi; syscall; 
0x000000000043fb80: mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000041441d: mov rdx, 0xffffffffffffffd0; cmp dword ptr fs:[rdx], 0x1d; je 0x143b4; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000004731cd: mov rdx, 0xffffffffffffffd0; movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000472f48: mov rdx, 0xffffffffffffffd0; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000413477: mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e010: mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000413cd6: mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004507e6: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004508c0: mov rdx, 0xffffffffffffffe0; mov rax, qword ptr [rax + 0x58]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000049c988: mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049cfb3: mov rdx, qword ptr [r13]; mov esi, 1; mov edi, 1; call rax; 
0x000000000041167d: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000049e728: mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x0000000000400c84: mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x000000000040edf1: mov rdx, qword ptr [rax + 0x18]; mov rdi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edc9: mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004175df: mov rdx, qword ptr [rax + 8]; jne 0x175f0; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000400c73: mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000400c63: mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x0000000000461497: mov rdx, qword ptr [rbp - 0x10b8]; mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x0000000000443b28: mov rdx, qword ptr [rbp - 0x20]; movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x0000000000456486: mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x000000000049ca69: mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000048c7e0: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000410fc8: mov rdx, qword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000041328f: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046d20b: mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000415c76: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048c7f4: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048c853: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000443ee6: mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047b097: mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000049c90a: mov rdx, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049a3e3: mov rdx, qword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000400edf: mov rdx, qword ptr [rip + 0x2cc75a]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043c624: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c644: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004364c0: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436450: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004363e0: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000436370: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb33: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000436300: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb53: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043c4e3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000436290: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb73: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043c4f3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000436220: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435cd0: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435c50: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435bd0: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435b40: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435ab0: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a20: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432734: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433088: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433288: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433488: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432718: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332a4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432750: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435d50: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043cab0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000436530: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000049a188: mov rdx, qword ptr [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000048c96d: mov rdx, qword ptr [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret; 
0x0000000000480f4e: mov rdx, qword ptr [rsp + 0x38]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000450b7c: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480d41: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480ccf: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000041f500: mov rdx, qword ptr [rsp + 0x68]; call rax; 
0x00000000004207f8: mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000443338: mov rdx, qword ptr [rsp]; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000456b7d: mov rdx, r10; mov qword ptr [rbp - 0x4d0], r10; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004571d3: mov rdx, r10; mov qword ptr [rbp - 0x500], r10; mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410cb1: mov rdx, r10; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000460e2a: mov rdx, r11; mov qword ptr [rbp - 0x1078], r11; mov dword ptr [rbp - 0x1080], r9d; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000460d0d: mov rdx, r11; mov qword ptr [rbp - 0x10a0], r11; mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000455e88: mov rdx, r11; mov qword ptr [rbp - 0x4f0], r11; mov dword ptr [rbp - 0x500], r9d; mov rdi, rbx; mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x00000000004530d2: mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000049e926: mov rdx, r12; mov rdi, qword ptr [rsp]; mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000045ee0b: mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f777: mov rdx, r12; mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000454748: mov rdx, r12; mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f5f: mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b73c: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413570: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000046f647: mov rdx, r13; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000453fc2: mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000498230: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004981f0: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045f15d: mov rdx, r13; mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000046f9be: mov rdx, r13; mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000413e9e: mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004602e7: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000412a60: mov rdx, r8; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000403ee5: mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000045012c: mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x000000000045015b: mov rdx, r9; mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x000000000048bb2b: mov rdx, rax; lea rcx, [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x8b5f0; leave; ret; 
0x00000000004432fe: mov rdx, rax; mov eax, r12d; syscall; 
0x00000000004607c0: mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000455fe8: mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413a86: mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000043fd14: mov rdx, rax; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000445c32: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000041453d: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ec11: mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000045d482: mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046b972: mov rdx, rbx; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410a4f: mov rdx, rbx; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440f9a: mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004136c3: mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x0000000000440fda: mov rdx, rbx; or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048bb14: mov rdx, rcx; jg 0x8bb20; call 0x8b470; leave; ret; 
0x00000000004735e0: mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004616de: mov rdx, rcx; mov qword ptr [rbp - 0x1080], rcx; mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004542a0: mov rdx, rcx; mov qword ptr [rbp - 0x480], rcx; mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455974: mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045a78b: mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000046c7e7: mov rdx, rdi; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000004736e5: mov rdx, rsp; syscall; 
0x000000000049e724: mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000049e92d: mov rsi, qword ptr [r15 + rbp*8 + 0x10]; call rbx; 
0x000000000040edcd: mov rsi, qword ptr [rax + 0x20]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000441a41: mov rsi, qword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000460d17: mov rsi, qword ptr [rbp - 0x1088]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046149e: mov rsi, qword ptr [rbp - 0x1090]; call qword ptr [rax + 0x38]; 
0x00000000004616e8: mov rsi, qword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000453fc5: mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000456478: mov rsi, qword ptr [rbp - 0x4e0]; mov dword ptr [rbp - 0x4d0], r9d; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000456637: mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000455e9c: mov rsi, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000443265: mov rsi, qword ptr [rbx]; mov qword ptr [rsp + 8], rax; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x000000000044169b: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049a25c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9a8b0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049a1d8: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x9a970; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004339da: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000436996: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000400ee6: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000042053d: mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041eeb8: mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000445c35: mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000041fbe0: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000448b33: mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a9b2: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000041f1e0: mov rsi, qword ptr [rsp + 0x48]; call rax; 
0x000000000045015e: mov rsi, r10; mov rdi, r13; mov eax, r8d; syscall; 
0x00000000004571dd: mov rsi, r11; mov qword ptr [rbp - 0x4f0], r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004542aa: mov rsi, r11; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000410a52: mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000498233: mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004981f3: mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045f160: mov rsi, r12; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ec07: mov rsi, r12; mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000450729: mov rsi, r12; mov rdi, r14; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000421684: mov rsi, r12; mov rdi, rax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000499f9f: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000414540: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004207fd: mov rsi, r12; mov rdi, rbx; call rax; 
0x00000000004213a9: mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x0000000000420be4: mov rsi, r12; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000045596b: mov rsi, r12; sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000045ee0e: mov rsi, r13; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f77a: mov rsi, r13; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000046bde5: mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440f9d: mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000412a63: mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x0000000000413ea1: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000046fb3c: mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x00000000004432f7: mov rsi, r14; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000044333c: mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000046f9c1: mov rsi, r14; mov rdi, r12; mov r9, r15; call rbx; 
0x0000000000413a90: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fd3: mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x000000000045dd8a: mov rsi, r15; mov rdi, qword ptr [rbp - 0x4a0]; call rax; 
0x0000000000453b0a: mov rsi, r15; mov rdi, rbx; call rax; 
0x00000000004607b6: mov rsi, r15; sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000045474b: mov rsi, r8; mov qword ptr [rbp - 0x4a8], r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454f62: mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000403ee8: mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x0000000000410cbb: mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000450129: mov rsi, rax; mov rdx, r9; mov rdi, r13; xor eax, eax; syscall; 
0x00000000004005d6: mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004136c6: mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000040e49e: mov rsi, rbp; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x000000000043fcfd: mov rsi, rbp; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b73f: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413573: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000441f1b: mov rsi, rbx; call 0x41090; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000441ef6: mov rsi, rbx; call 0x41090; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x000000000044116e: mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411af: mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048c705: mov rsi, rbx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x00000000004127dd: mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x00000000004222e6: mov rsi, rbx; mov rdi, rax; call rcx; 
0x0000000000415e58: mov rsi, rcx; jbe 0x15df5; movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x000000000049d339: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000044040b: mov rsi, rdx; mov eax, 4; syscall; 
0x000000000044045a: mov rsi, rdx; mov eax, 5; syscall; 
0x000000000047358b: mov rsi, rdx; mov eax, 6; syscall; 
0x000000000047d11a: mov rsi, rsp; syscall; 
0x00000000004811f9: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000049d09d: mov rsp, rcx; ret; 
0x00000000004369bb: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000433a0c: mov si, word ptr [rsi]; mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x00000000004369c5: mov word ptr [r9 - 2], cx; ret; 
0x0000000000443d19: mov word ptr [rax + rcx*4], gs; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042791d: mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043fcc8: mov word ptr [rax], es; add byte ptr [rax], al; xor esi, esi; mov eax, 2; syscall; 
0x00000000004c354c: mov word ptr [rbp], es; add byte ptr [rax], dl; add bh, al; jmp qword ptr [rbx]; 
0x00000000004bfb4c: mov word ptr [rbx], cs; add byte ptr [rax], al; cmc; hlt; call qword ptr [rax]; 
0x000000000043cbbc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c52c: mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043ccc4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c614: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004c874c: mov word ptr [rdi + 0x26300000], ss; cld; call qword ptr [rax + 1]; 
0x0000000000436767: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043ca88: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000043c468: mov word ptr [rdi + 4], dx; ret; 
0x000000000043cada: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043c4aa: mov word ptr [rdi + 8], dx; ret; 
0x0000000000433a12: mov word ptr [rdi + rdx - 2], cx; ret; 
0x0000000000432cec: mov word ptr [rdi - 2], cx; ret; 
0x0000000000432b04: mov word ptr [rdi - 2], dx; ret; 
0x0000000000432ce8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ca53: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c433: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043edc5: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043676b: mov word ptr [rdi], cx; ret; 
0x000000000043ca43: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004367d3: mov word ptr [rdi], dx; ret; 
0x000000000049a1e0: mov word ptr [rdi], es; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004369c2: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000433a0f: mov word ptr [rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000043bfa8: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x000000000043a7e8: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000043bf53: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000043bf63: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x000000000043a7b3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000043a7a3: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004182ee: mov word ptr [rdx], es; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004c29aa: mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x000000000043edc8: mov word ptr [rsi - 2], cx; ret; 
0x00000000004c90b0: mov word ptr [rsi], es; add dword ptr [rdi], 3; test byte ptr [rcx], al; ret; 
0x00000000004c74e0: mov word ptr [rsi], es; add qword ptr [r15], 3; mov bl, 2; ret; 
0x00000000004c9160: mov word ptr [rsi], es; add qword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x000000000048bec9: mov word ptr [rsp - 0x10], si; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000004508f4: mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000433a0e: mov word ptr ss:[rdi], si; mov word ptr [rdi + rdx - 2], cx; ret; 
0x000000000044f345: movabs al, byte ptr [0x274c08548004a6e]; call rax; 
0x000000000046d003: movabs al, byte ptr [0x30788348000000]; je 0x6d010; ret; 
0x00000000004a3f64: movabs al, byte ptr [0x40fff80170fff800]; add bh, al; call qword ptr [rax]; 
0x00000000004a43b0: movabs al, byte ptr [0x40fff8e560fff8e3]; out 0xf8, eax; jmp qword ptr [rax]; 
0x00000000004ca0e9: movabs al, byte ptr [0x41380e0a01940301]; ret; 
0x0000000000411d13: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004166ee: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000047c38a: movabs al, byte ptr [0x840ffffa83fffffb]; pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000045d4a2: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046cfde: movabs al, byte ptr [0x8b48004d8b000000]; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000049cdec: movabs al, byte ptr [0xb74c0854800001f]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047d76c: movabs al, byte ptr [0xb8000001]; test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x00000000004a40f4: movabs al, byte ptr [0xc0fff855b0fff853]; push rdi; clc; call rax; 
0x00000000004a4500: movabs al, byte ptr [0xc0fff91e30fff91e]; sbb eax, 0x1d50fff9; stc; jmp rsi; 
0x00000000004a46d8: movabs al, byte ptr [0xc0fff92230fff922]; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a4a38: movabs al, byte ptr [0xc0fff97ab0fff97a]; jp 0xa4a3c; call rax; 
0x00000000004a4a90: movabs al, byte ptr [0xc0fff97fb0fff97f]; jg 0xa4a94; call rax; 
0x00000000004bcc14: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004a4ac0: movabs al, byte ptr [0xe0fff980c0fff980]; cmp cl, 0xff; add byte ptr [rcx - 0x7eef0007], al; stc; jmp qword ptr [rax]; 
0x00000000004478d7: movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004625dc: movabs al, byte ptr [0xffef5485c7004b49]; jmp qword ptr [rax]; 
0x00000000004bb27b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000043376a: movabs byte ptr [0x499314634900070b], al; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000004425ea: movabs byte ptr [0x4baffffea], al; mov esi, 2; mov rdi, r15; call rbx; 
0x000000000040a81c: movabs byte ptr [0x840f03f883000008], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000041c678: movabs dword ptr [0x4400401f0ffffffe], eax; mov byte ptr [rsp + 0x20], bl; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000442bdf: movabs eax, dword ptr [0x3befffff6]; mov rdi, r15; call rbx; 
0x000000000047adfc: movabs eax, dword ptr [0x4910438b48000005]; add eax, dword ptr [rdi]; call rax; 
0x00000000004bafbf: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x0000000000430468: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430568: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049a2a7: movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000049a2ac: movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x00000000004311dd: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310ec: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cbb0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c520: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cbf0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043c560: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c550: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cbd0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043c540: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043cc70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043c5e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cc30: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c580: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc50: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c6c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd10: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c660: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c680: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cb90: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cba0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c510: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c500: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043c6c4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd14: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c664: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd34: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c684: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6a4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004324ea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043239a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043224a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004320fa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431faa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e5a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d0a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a6a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043191a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043167a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043152a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043128a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043258b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043243b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322eb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043219b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043204b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431efb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431dab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c5b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc2: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b0b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043171b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043147b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043132b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361b1: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000427890: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043cd7d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6cd: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000436821: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367b1: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436741: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366d1: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436661: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004365f1: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436581: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436511: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364a1: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436431: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363c1: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436351: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362e1: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436271: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436201: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004361a7: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043643f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363cf: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043635f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362ef: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd1d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c66d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043627f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd3d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c68d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043620f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd5d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000043c6ad: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043682f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367bf: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043674f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366df: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043666f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004365ff: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043658f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043651f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364af: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000427895: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043599b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435a0b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436146: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360c6: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436036: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fb6: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f36: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435eb6: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e36: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435db6: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435d36: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435cb6: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c36: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435bb6: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b26: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a96: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a06: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435991: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000436137: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360b7: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436027: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fa7: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f27: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ea7: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e27: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435da7: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ca7: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c27: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ba7: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b17: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a87: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004359f7: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435987: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043cb94: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cba4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c514: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043cbf7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c567: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c557: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cbd7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043c547: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043cc78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043ccdb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c62b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043ccfb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c64b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccbc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c60c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043cc38: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c588: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc58: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043cbb8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c528: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cd79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd19: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c669: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd39: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c689: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043cd59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000043c6a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004361ba: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000436214: movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000049a2a2: movhps xmm0, qword ptr [rsp + 0x10]; movaps xmmword ptr [rsp + 0x20], xmm1; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000043cbb1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c521: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cbf1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043c561: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c551: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cbd1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043c541: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043cc71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043c5e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043cc31: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c581: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc51: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c6c1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd11: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c661: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd31: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c681: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6a1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cb91: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cba1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c511: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043c501: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043c6c5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd15: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c665: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd35: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c685: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043c6a5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004324eb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043239b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043224b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004320fb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e5b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d0b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a6b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043191b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043167b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043152b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043128b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043258c: movq qword ptr [r8], mm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043243c: movq qword ptr [r8], mm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322ec: movq qword ptr [r8], mm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043219c: movq qword ptr [r8], mm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043204c: movq qword ptr [r8], mm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431efc: movq qword ptr [r8], mm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431dac: movq qword ptr [r8], mm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c5c: movq qword ptr [r8], mm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc3: movq qword ptr [r8], mm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b0c: movq qword ptr [r8], mm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043171c: movq qword ptr [r8], mm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043147c: movq qword ptr [r8], mm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043132c: movq qword ptr [r8], mm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324ec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71e17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043239c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71f67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043224c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x720b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004320fc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e5c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x724a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d0c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x725f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a6c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043191c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x729e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72b37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043167c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72c87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043152c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72dd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x72f27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043128c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x73077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043258d: movq qword ptr [rax], mm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043243d: movq qword ptr [rax], mm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322ed: movq qword ptr [rax], mm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043219d: movq qword ptr [rax], mm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043204d: movq qword ptr [rax], mm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431efd: movq qword ptr [rax], mm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431dad: movq qword ptr [rax], mm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c5d: movq qword ptr [rax], mm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc4: movq qword ptr [rax], mm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b0d: movq qword ptr [rax], mm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043171d: movq qword ptr [rax], mm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043147d: movq qword ptr [rax], mm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043132d: movq qword ptr [rax], mm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361b2: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000427891: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043cd7e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6ce: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000436822: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367b2: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436742: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366d2: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436662: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004365f2: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436582: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436512: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364a2: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436432: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363c2: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436352: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362e2: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436272: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436202: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004361a8: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000436440: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004363d0: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436360: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362f0: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd1e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c66e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x0000000000436280: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd3e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c68e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000436210: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043cd5e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000043c6ae: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000436830: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004367c0: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436750: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004366e0: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436670: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436600: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436590: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436520: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004364b0: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000427896: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000043599c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x0000000000435a0c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000436147: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360c7: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436037: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fb7: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f37: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435eb7: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e37: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435db7: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435d37: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435cb7: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c37: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435bb7: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b27: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a97: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a07: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435992: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004311de: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436138: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004360b8: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436028: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435fa8: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435f28: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ea8: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435e28: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435da8: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ca8: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435c28: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435ba8: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435b18: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435a88: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004359f8: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435988: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004310ed: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cb95: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cba5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c515: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043cbf8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000043cc18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043c568: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043c558: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043cbd8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043c548: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043cc79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000043cc99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000043c5e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043c5c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043ccdc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000043c62c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043ccfc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c64c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccbd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c60d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043cc39: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043c589: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043cc59: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043c5a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043cbb9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000043c529: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cd7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043cd1a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c66a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043cd3a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000043c68a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043cd5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000043c6aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004361bb: movq qword ptr [rdi], mm0; ret; 
0x0000000000436215: movq qword ptr [rdi], mm1; ret; 
0x0000000000446a08: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x00000000004c941d: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; or byte ptr [rdi], 0xfd; call qword ptr [rax]; 
0x00000000004c1664: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr es:[rax], al; cwde; push -0xb; call qword ptr [rdx]; 
0x00000000004c29a2: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rsi + 0x48d4503], ecx; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000004726b3: movsb byte ptr [rdi], byte ptr [rsi]; and eax, 0x2d894c00; ret; 
0x00000000004726ac: movsb byte ptr [rdi], byte ptr [rsi]; and eax, 0x35894c00; add ah, byte ptr [rbp + riz + 0x2d894c00]; ret; 
0x00000000004a419d: movsb byte ptr [rdi], byte ptr [rsi]; clc; call qword ptr [rax - 0x4f00075b]; cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004bb102: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004c6764: movsb byte ptr [rdi], byte ptr [rsi]; ja 0xc6767; add byte ptr [rax - 0x64], bl; cli; jmp rdi; 
0x000000000049cc23: movsb byte ptr [rdi], byte ptr [rsi]; nop dword ptr [rax]; cmp byte ptr [r9 + 0xdf], 0; je 0x9cbe2; add rsp, 0x18; ret; 
0x00000000004bfb64: movsb byte ptr [rdi], byte ptr [rsi]; or eax, dword ptr [rax]; add byte ptr [rax], bh; cmc; hlt; call qword ptr [rdx]; 
0x0000000000440578: movsb byte ptr [rdi], byte ptr [rsi]; push rax; add byte ptr [rax], al; ret; 
0x0000000000401420: movsb byte ptr [rdi], byte ptr [rsi]; ret 0x2c; 
0x000000000041bd78: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004476f1: movsb byte ptr [rdi], byte ptr [rsi]; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000047d01c: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004185d7: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret; 
0x00000000004ca197: movsd dword ptr [rdi], dword ptr [rsi]; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x0000000000400707: movsd dword ptr [rdi], dword ptr [rsi]; mov ecx, 0x415d002c; pop rsp; ret; 
0x000000000048a6f2: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000445dfb: movsd dword ptr [rdi], dword ptr [rsi]; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000048be93: movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048be4d: movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000004801b1: movsx eax, dl; neg eax; ret; 
0x0000000000447d86: movsx ecx, byte ptr [rdx + 0x4a673a]; add rdx, 0x4a6720; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000447d94: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000447d85: movsx r9, byte ptr [rdx + 0x4a673a]; add rdx, 0x4a6720; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000440fe8: movsxd r10, r10d; syscall; 
0x0000000000440f97: movsxd r10, r14d; mov rdx, rbx; mov rsi, r13; mov rdi, r12; mov eax, 9; syscall; 
0x00000000004735dd: movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004530cf: movsxd r12, edx; mov rdx, r12; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000403cc4: movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x000000000041bc90: movsxd r9, eax; mov edx, 1; lea rsi, [rsp + 0x30]; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000049c479: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000049bef1: movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000049bb98: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x00000000004003c5: movsxd rbx, ebp; mov edx, 0x1d; mov esi, 0x4a2b28; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000045d47f: movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000042f69d: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043c2c9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049abf1: movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000443b2c: movsxd rcx, eax; cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; leave; ret; 
0x00000000004136bf: movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000047c163: movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004434e4: movsxd rdi, dword ptr [rbp - 0x58]; mov eax, 3; syscall; 
0x00000000004435d1: movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x0000000000413469: movsxd rdi, dword ptr [rbx + 0x70]; syscall; 
0x0000000000412c80: movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x0000000000413cc6: movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x0000000000440ad8: movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x0000000000440b5a: movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x0000000000440457: movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004735da: movsxd rdi, eax; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004731d4: movsxd rdi, ebp; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000041442a: movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000440711: movsxd rdi, ebx; mov eax, 0x48; syscall; 
0x0000000000472f4f: movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000044dd99: movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000040dfe3: movsxd rdi, ecx; syscall; 
0x00000000004405e9: movsxd rdi, edi; mov eax, 0x48; syscall; 
0x0000000000450c16: movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000472e15: movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000450a96: movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000004736d4: movsxd rdi, edi; mov esi, 0x5401; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000044ee28: movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x0000000000450807: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000403d14: movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000044ff46: movsxd rdi, r13d; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x000000000044ffa0: movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000004506f7: movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000430e1f: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000458537: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046be14: movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000414375: movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000040dfdb: movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000047c159: movsxd rdx, r12d; lea rsi, [rbp - 0x430]; movsxd rdi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000040dfd8: movsxd rsi, eax; movsxd rdx, edi; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000040dfc0: movsxd rsi, eax; test esi, esi; jne 0xdff8; mov eax, 0xba; syscall; 
0x00000000004405e6: movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000048be4e: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x000000000048be94: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x000000000045097c: movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000049bb95: movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048c8ac: movzx eax, al; neg eax; ret; 
0x000000000048c656: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004736c5: movzx eax, al; ret; 
0x0000000000427333: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000414ffc: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000004560fa: movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x000000000045614b: movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x000000000045823b: movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d6e: movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x0000000000462747: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000462259: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000462306: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov dword ptr [rbp - 0x1070], 1; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000460f3f: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x00000000004624ac: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046265f: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004625d9: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10ac], 0x20; mov dword ptr [rbp - 0x1098], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000462621: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000460fd5: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000462785: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10c0], 1; mov dword ptr [rbp - 0x1088], 0; mov rax, qword ptr [rax*8 + 0x4b43e0]; jmp rax; 
0x0000000000461013: movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000042f57d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000416c96: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000004142a3: movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000412ebd: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004161bf: movzx eax, byte ptr [rax]; pop rbx; ret; 
0x000000000041413a: movzx eax, byte ptr [rax]; ret; 
0x000000000049d979: movzx eax, byte ptr [rcx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000423bdb: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000049500d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x13488]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a2d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x15a68]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049107d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x17418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048f0ad: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x193e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004390b8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x6f3dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d368: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x7b12d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bcf8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x7c79d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a148: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x7e34d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f40f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000423a98: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043e2d0: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043e330: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043e320: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e310: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e300: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2f0: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043e2e0: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043e68a: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x3e805; xor eax, eax; ret; 
0x0000000000430550: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000430303: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043e2b7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000495033: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x13463]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a53: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x15a43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004910a3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x173f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d383: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x7b113]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bd13: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x7c783]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042a163: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x7e333]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f6b0: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000427310: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000423ab3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000415e5d: movzx eax, byte ptr [rdx]; pop rbx; ret; 
0x0000000000412ed0: movzx eax, byte ptr [rdx]; ret; 
0x0000000000414ffd: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000043f527: movzx eax, cl; pop rbx; ret; 
0x0000000000447e51: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043f54f: movzx eax, dl; pop rbx; ret; 
0x0000000000447e50: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000049beee: movzx ebx, bl; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x000000000043e90a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e900; ret; 
0x000000000043e9ba: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3e9b0; ret; 
0x000000000043ec7a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x3ec70; sub rax, 1; ret; 
0x0000000000423a94: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042f666: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x2f650; xor eax, eax; sub eax, ecx; ret; 
0x0000000000430554: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000423ab0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042f6b3: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000416c43: movzx ecx, dh; cmp eax, ecx; je 0x16c68; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000416c42: movzx ecx, sil; cmp eax, ecx; je 0x16c68; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000042f581: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043eb2a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x3eb20; lea rax, [rcx - 1]; ret; 
0x0000000000491318: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1717d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000048f3b8: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x190dd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bf1f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x7c576]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a3ef: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x7e0a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000423bdf: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042f413: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042481e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x24828; xchg edx, eax; sub eax, edx; ret; 
0x000000000043e2d4: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043e334: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043e324: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e314: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e304: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2f4: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043e2e4: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000436160: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000430307: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043e2bb: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000436840: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000427313: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000427339: movzx edx, dl; sub eax, edx; ret; 
0x00000000004360e0: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004367d0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000416242: movzx esi, byte ptr [r14]; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x0000000000416243: movzx esi, byte ptr [rsi]; mov rdi, r12; lea rbx, [r14 + 1]; call qword ptr [rax + 0x18]; 
0x000000000049beed: movzx r11d, r11b; movsxd rax, dword ptr [r8 + r11*4]; add rax, r8; jmp rax; 
0x00000000004736c4: movzx rax, al; ret; 
0x000000000046e137: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000049ce03: mul byte ptr [rsi - 0x70]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000431d15: mul dword ptr [rip + 0x63490007]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048166e: mulps xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048486d: mulsd xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048166d: mulss xmm0, xmm0; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046b957: neg byte ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; ret; 
0x0000000000445621: neg eax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000041347e: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e017: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000413cdd: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000400423: neg eax; mov dword ptr fs:[rdx], eax; xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x0000000000417a4f: neg eax; ret; 
0x0000000000400480: neg ecx; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x00000000004406c9: neg edx; cmp dword ptr [rsp + 0x10], 2; cmove eax, edx; add rsp, 0x60; pop rbx; ret; 
0x0000000000440621: neg edx; cmp dword ptr [rsp - 0x58], 2; cmove eax, edx; ret; 
0x0000000000450bbf: neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x0000000000410376: neg edx; test dword ptr [rbx], 0x8000; je 0x10388; mov eax, edx; pop rbx; ret; 
0x000000000048c092: neg edx; test dword ptr [rbx], 0x8000; je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x0000000000441205: neg esi; std; dec dword ptr [rcx - 0x75]; jge 0x4120d; call rbx; 
0x000000000040047f: neg r9d; mov dword ptr fs:[rax], r9d; mov rdi, r8; mov eax, 3; syscall; 
0x0000000000445620: neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000046eea8: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x00000000004797fb: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480c1b: nop dword ptr [rax + rax]; add rsp, 8; ret; 
0x00000000004249b3: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000427198: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042df08: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042483b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004980db: nop dword ptr [rax + rax]; call rbx; 
0x000000000043ed9b: nop dword ptr [rax + rax]; cmp dl, 8; jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000044055b: nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x28dcf5], 0; jne 0x4057d; mov eax, 1; syscall; 
0x00000000004404fb: nop dword ptr [rax + rax]; cmp dword ptr [rip + 0x28dd55], 0; jne 0x4051d; mov eax, 0; syscall; 
0x0000000000443b3b: nop dword ptr [rax + rax]; cmp eax, -1; jne 0x43b38; xor eax, eax; leave; ret; 
0x0000000000442973: nop dword ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442953: nop dword ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429b3: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a13: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f3: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a93: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a53: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a33: nop dword ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bf3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c53: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c93: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c73: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b73: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b53: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b33: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af3: nop dword ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000043d058: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000043d068: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000043d078: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000043d088: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000043d098: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfd8: nop dword ptr [rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000043cfe8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000043cff8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000043d008: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000043d018: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000043d028: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000043d038: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000043d048: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000043cfc8: nop dword ptr [rax + rax]; lea rax, [rdi]; ret; 
0x000000000043ca28: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c408: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043ca4b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000043c418: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004222d8: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000047351b: nop dword ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x000000000047351b: nop dword ptr [rax + rax]; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438e8: nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x0000000000473558: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x0000000000473558: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x0000000000473548: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x0000000000473548: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x0000000000473568: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x0000000000473568: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x0000000000441028: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x0000000000417878: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000047d383: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x000000000049d5db: nop dword ptr [rax + rax]; mov eax, 2; add rsp, 8; ret; 
0x000000000049d5cb: nop dword ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000049b6e8: nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x00000000004438a8: nop dword ptr [rax + rax]; mov eax, 8; syscall; 
0x00000000004175b8: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a5e8: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x0000000000435fc8: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c43b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000049cda8: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000450998: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x0000000000440433: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004737c3: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000450858: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450838: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000450818: nop dword ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000417868: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eec8: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x000000000046eed8: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x000000000046eee8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x000000000046eef8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x000000000046ef08: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x000000000046ef18: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x000000000046ef28: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000046d153: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfbb: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6cb: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413e3b: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004180fb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000046d578: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178e8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd78: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cdb8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049ce18: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049ce08: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cdc8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000415d0b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416298: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000041412b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x0000000000446968: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x00000000004178f8: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000043cabb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043c49b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043fb68: nop dword ptr [rax + rax]; mov rdi, rdx; mov eax, esi; syscall; 
0x0000000000450c2b: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043c47b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000041eeb3: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000427888: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043e32b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000043e31b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000043e30b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000043e2fb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000043e2eb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000043e2db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000412ec8: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x0000000000447e4b: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000436158: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d8: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000435fc1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450991: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450851: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450831: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000049cd71: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000436151: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000473626: nop dword ptr [rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000441066: nop dword ptr [rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000473536: nop dword ptr [rax + rax]; nop; mov eax, 0x66; syscall; 
0x0000000000441046: nop dword ptr [rax + rax]; nop; mov eax, 0xa; syscall; 
0x00000000004008e8: nop dword ptr [rax + rax]; pop rbp; ret; 
0x000000000048c5d3: nop dword ptr [rax + rax]; pop rbx; ret; 
0x000000000049cf3b: nop dword ptr [rax + rax]; ret; 
0x0000000000416cf3: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000046d2c3: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004223cb: nop dword ptr [rax + rax]; test edi, edi; je 0x223e0; mov eax, 0x16; ret; 
0x000000000049ab23: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000043f508: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000412c38: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000400f28: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043ce08: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000046ee9c: nop dword ptr [rax]; add rax, 1; ret; 
0x0000000000430cac: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000049f15c: nop dword ptr [rax]; and esi, 2; jne 0x9f16b; mov eax, 8; ret; 
0x0000000000427189: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000004271a9: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000004271cc: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000400db5: nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x0000000000497f39: nop dword ptr [rax]; call rax; 
0x000000000049cc24: nop dword ptr [rax]; cmp byte ptr [r9 + 0xdf], 0; je 0x9cbe2; add rsp, 0x18; ret; 
0x0000000000480f5c: nop dword ptr [rax]; cmp byte ptr [rsp + 0xf], 0; jne 0x80f70; xor eax, eax; add rsp, 0x48; ret; 
0x00000000004810ec: nop dword ptr [rax]; cmp byte ptr [rsp + 0xf], 0; jne 0x81100; xor eax, eax; add rsp, 0x48; ret; 
0x000000000043edcd: nop dword ptr [rax]; cmp dl, 1; jb 0x3edd7; mov byte ptr [rdi], cl; ret; 
0x00000000004737dc: nop dword ptr [rax]; cmp dword ptr [rip + 0x25aa75], 0; jne 0x737fd; mov eax, 0x14; syscall; 
0x000000000044049c: nop dword ptr [rax]; cmp dword ptr [rip + 0x28ddb5], 0; jne 0x404bd; mov eax, 2; syscall; 
0x0000000000415e1d: nop dword ptr [rax]; cmp eax, -1; je 0x15dd5; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415f8d: nop dword ptr [rax]; cmp eax, -1; je 0x15f45; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000442934: nop dword ptr [rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004160fd: nop dword ptr [rax]; cmp qword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x000000000041c67c: nop dword ptr [rax]; mov byte ptr [rsp + 0x20], r11b; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x000000000041ed41: nop dword ptr [rax]; mov dword ptr [rip + 0x2ae8b6], 0; ret; 
0x000000000044f23d: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000047d794: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000049866d: nop dword ptr [rax]; mov eax, 0; test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x00000000004403a9: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x000000000049a97d: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x000000000049a97d: nop dword ptr [rax]; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000440e4d: nop dword ptr [rax]; mov eax, 0x61; syscall; 
0x0000000000440e4d: nop dword ptr [rax]; mov eax, 0x61; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000046fbfd: nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000046fbfd: nop dword ptr [rax]; mov eax, 0xc9; syscall; ret; 
0x0000000000416189: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000411c6d: nop dword ptr [rax]; mov eax, dword ptr [rdx]; ret; 
0x000000000044541d: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x288f2a]; test eax, eax; je 0x45430; ret; 
0x000000000044383d: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x28aaba]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000043f554: nop dword ptr [rax]; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000473779: nop dword ptr [rax]; mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000043c46d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000445c7d: nop dword ptr [rax]; mov edx, 8; mov eax, edx; ret; 
0x00000000004366e9: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004168dc: nop dword ptr [rax]; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049cd61: nop dword ptr [rax]; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000476a41: nop dword ptr [rax]; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000004507fc: nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000472ed5: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x14; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000450bed: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000499eb1: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004717d1: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041db79: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000472efc: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000048bff1: nop dword ptr [rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000480c49: nop dword ptr [rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000048c7fd: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000415514: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049ccfd: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000046cff9: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x000000000049ea75: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x22f2d1]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000044dcdc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x27fa19]; ret; 
0x000000000049ab4c: nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000041754d: nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049d64d: nop dword ptr [rax]; mov rax, qword ptr [rsi + 8]; add rsp, 8; ret; 
0x000000000046e999: nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000043c4bd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043c4cd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000045d474: nop dword ptr [rax]; mov rdi, qword ptr [rdi + 0x218]; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e00d: nop dword ptr [rax]; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000436529: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004207f5: nop dword ptr [rax]; mov rdx, qword ptr [rsp + 0x68]; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000498394: nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000043c51c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043cb9d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000043c509: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000412c79: nop dword ptr [rax]; movsxd rdi, dword ptr [rdi + 0x70]; mov eax, 3; syscall; 
0x000000000044ee21: nop dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr [rdi*8 + 0x6cca40]; ret; 
0x000000000044ffb9: nop dword ptr [rax]; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000042730d: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000436839: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004367c9: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000445619: nop dword ptr [rax]; neg rax; mov dword ptr fs:[0xffffffffffffffd0], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000042df02: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043c413: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004178a3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000046d573: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178e3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000416293: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000004178c2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x000000000043eca2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000400935: nop dword ptr [rax]; pop rbp; ret; 
0x00000000004213a4: nop dword ptr [rax]; pop rbx; mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x000000000041f8b4: nop dword ptr [rax]; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000043f70c: nop dword ptr [rax]; pop rbx; ret; 
0x000000000040ee0d: nop dword ptr [rax]; shl rax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000046dded: nop dword ptr [rax]; test rsi, rsi; jne 0x6ddf9; xor rax, rax; ret; 
0x000000000043ed89: nop dword ptr [rax]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000049efbd: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000041db91: nop dword ptr [rax]; xor eax, eax; pop rbx; ret; 
0x00000000004124b4: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000042df49: nop dword ptr [rax]; xor rax, rax; ret; 
0x000000000046eea7: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042df07: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043d057: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000043d067: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000043d077: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000043d087: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000043d097: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfd7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000043cfe7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000043cff7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000043d007: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000043d017: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000043d027: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000043d037: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000043d047: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000043cfc7: nop dword ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000043ca27: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c407: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c417: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000441027: nop dword ptr cs:[rax + rax]; mov eax, 0xb; syscall; 
0x00000000004178a7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004175b7: nop dword ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000435fc7: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cda7: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000450997: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450857: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450837: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000417867: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eec7: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000046d577: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178e7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd77: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049ce07: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000416297: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000446967: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178c7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x00000000004178f7: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000427887: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000436157: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d7: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000473625: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000441065: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000473535: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x0000000000441045: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x000000000043eca7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000400f27: nop dword ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043ce07: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000480c1a: nop word ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000427197: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004980da: nop word ptr [rax + rax]; call rbx; 
0x000000000043ed9a: nop word ptr [rax + rax]; cmp dl, 8; jb 0x3edb0; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000443b3a: nop word ptr [rax + rax]; cmp eax, -1; jne 0x43b38; xor eax, eax; leave; ret; 
0x0000000000442972: nop word ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x41e9d; mov esi, 3; mov rdi, r13; call rbx; 
0x0000000000442952: nop word ptr [rax + rax]; cmp qword ptr [r13 + 0x10], 0; jne 0x423ca; mov esi, 3; mov rdi, r13; call rbx; 
0x00000000004429b2: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41ec1; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a12: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x41fe6; mov esi, 3; mov rdi, r14; call rbx; 
0x00000000004429f2: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x4213f; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a92: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x423ee; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a52: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x4266c; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442a32: nop word ptr [rax + rax]; cmp qword ptr [r14 + 0x10], 0; jne 0x42791; mov esi, 3; mov rdi, r14; call rbx; 
0x0000000000442bf2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41ee1; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c52: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x41f5a; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c92: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42006; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442c72: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4207f; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442bb2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x422fd; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ad2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4240e; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442ab2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42487; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b72: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x425ac; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b52: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4268c; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442b32: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x42705; mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000442af2: nop word ptr [rax + rax]; cmp qword ptr [r15 + 0x10], 0; jne 0x4282a; mov esi, 3; mov rdi, r15; call rbx; 
0x000000000047351a: nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x000000000047351a: nop word ptr [rax + rax]; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004438e7: nop word ptr [rax + rax]; mov eax, 0x63; syscall; 
0x000000000046c787: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000047d382: nop word ptr [rax + rax]; mov eax, 1; ret; 
0x000000000049d5da: nop word ptr [rax + rax]; mov eax, 2; add rsp, 8; ret; 
0x000000000049d5ca: nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x00000000004438a7: nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x000000000049a5e7: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x000000000043c43a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000440432: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004737c2: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000450817: nop word ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000046d152: nop word ptr [rax + rax]; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000413e3a: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000415d0a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041412a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14140; movzx eax, byte ptr [rax]; ret; 
0x000000000043c49a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043fb67: nop word ptr [rax + rax]; mov rdi, rdx; mov eax, esi; syscall; 
0x0000000000450c2a: nop word ptr [rax + rax]; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000412ec7: nop word ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x0000000000447e4a: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004008e7: nop word ptr [rax + rax]; pop rbp; ret; 
0x0000000000416cf2: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000046d2c2: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000049d5ea: nop word ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000043f507: nop word ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x00000000004144aa: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000046eea6: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042df06: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043d056: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000043d066: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000043d076: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000043d086: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000043d096: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfd6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000043cfe6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000043cff6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000043d006: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000043d016: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000043d026: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000043d036: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000043d046: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000043cfc6: nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000043ca26: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c406: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043c416: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000441026: nop word ptr cs:[rax + rax]; mov eax, 0xb; syscall; 
0x00000000004178a6: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004175b6: nop word ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000435fc6: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cda6: nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000450996: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000450856: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000450836: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000417866: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eec6: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000046d576: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178e6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd76: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049ce06: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000416296: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000446966: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178c6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x00000000004178f6: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000427886: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000436156: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360d6: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000473624: nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000441064: nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x0000000000473534: nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x0000000000441044: nop word ptr cs:[rax + rax]; nop; mov eax, 0xa; syscall; 
0x000000000043eca6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000400f26: nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043ce06: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004a4710: nop; adc bh, cl; call qword ptr [rax + 0x1a]; 
0x00000000004a4710: nop; adc bh, cl; call qword ptr [rax + 0x1a]; stc; call rax; 
0x00000000004c35b0: nop; add bh, al; call qword ptr [rcx]; 
0x0000000000411548: nop; add byte ptr [rax], 0; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000041451c: nop; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000495737: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95763; js 0x95782; call rsp; 
0x0000000000495a4c: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95a78; js 0x95a97; call rsp; 
0x0000000000495e13: nop; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; jl 0x95e3f; js 0x95e5e; call rsp; 
0x000000000043588b: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000046d6cb: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000495a7e: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000046b64b: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046d7a9: nop; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000042f9bc: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041c24a: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000470b36: nop; add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], 0x94; ret; 
0x000000000048f3c0: nop; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004bfe75: nop; add dword ptr [rsi + rcx + 0x10], ecx; je 0xbfe86; ret; 
0x00000000004be38c: nop; add edi, ebp; jmp rax; 
0x000000000043f76f: nop; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000445dff: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a44dc: nop; and bh, cl; jmp qword ptr [rax]; 
0x000000000042717f: nop; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004271df: nop; bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271ef: nop; bsf eax, eax; sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043c9af: nop; bsf rdx, rdx; lea r11, [rip + 0x680d5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c38f: nop; bsf rdx, rdx; lea r11, [rip + 0x68675]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049a74f: nop; call rax; 
0x00000000004c1430: nop; cmc; jmp qword ptr [rax]; 
0x00000000004be33c: nop; cmp bh, ch; call qword ptr [rax]; 
0x00000000004c9ac0: nop; cmp ch, bh; call qword ptr [rdi]; 
0x000000000043edbf: nop; cmp dl, 2; jb 0x3edd0; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000047364f: nop; cmp dword ptr [rip + 0x25ac05], 0; jne 0x7366d; mov eax, 3; syscall; 
0x00000000004c6680: nop; cwde; cli; jmp qword ptr [rax + 1]; 
0x00000000004a44c0: nop; fdiv st(0), st(0); jmp rax; 
0x00000000004a4394: nop; in eax, 0xf8; push qword ptr [rax - 0x19]; clc; call qword ptr [rax - 0x17]; 
0x00000000004a434c: nop; int1; clc; jmp qword ptr [rax]; 
0x00000000004811ff: nop; jmp rdx; 
0x000000000045b1bf: nop; lea eax, [rdi - 1]; xor edx, edx; div ecx; add eax, r8d; ret; 
0x00000000004a430c: nop; leave; clc; dec dword ptr [rax - 0x1c]; clc; call qword ptr [rax]; 
0x0000000000400a05: nop; leave; ret; 
0x000000000043291f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000047970f: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000432aff: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000432cdf: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044ef5f: nop; mov eax, 0; test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000040099f: nop; mov eax, 0; test rax, rax; je 0x998; call rax; 
0x000000000047362f: nop; mov eax, 0x15; syscall; 
0x000000000047362f: nop; mov eax, 0x15; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000044106f: nop; mov eax, 0x1c; syscall; 
0x000000000044106f: nop; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000047353f: nop; mov eax, 0x66; syscall; 
0x000000000047353f: nop; mov eax, 0x66; syscall; ret; 
0x000000000044104f: nop; mov eax, 0xa; syscall; 
0x000000000044104f: nop; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000443964: nop; mov eax, 0xca; syscall; 
0x0000000000417eff: nop; mov eax, 0xffffffff; ret; 
0x00000000004111df: nop; mov eax, dword ptr [rdx]; ret; 
0x0000000000432ebf: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ca5f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004438cf: nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000450c0f: nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000044ee0f: nop; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000047d38f: nop; mov rax, 0xffffffffffffffd0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000412c6f: nop; mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x0000000000416c1f: nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000041607f: nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416c9f: nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000046c4bf: nop; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000046d37f: nop; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049ebcf: nop; mov rax, qword ptr [rip + 0x22f179]; mov qword ptr [rip + 0x22f172], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000418214: nop; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000043c4af: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000043c4df: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043c4ef: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004009fc: nop; mov rdi, rax; call 0x109b0; nop; leave; ret; 
0x000000000044041f: nop; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043caaf: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000412a5f: nop; mov rdx, r8; mov rsi, r13; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000041fbdf: nop; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000043c54f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000043c4ff: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044ff9f: nop; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000450990: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000046eea5: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000043d055: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000043d065: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000043d075: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000043d085: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000043d095: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfd5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x000000000043cfe5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000043cff5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000043d005: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000043d015: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000043d025: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000043d035: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000043d045: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000043cfc5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x00000000004175b5: nop; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049cda5: nop; nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417865: nop; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eec5: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000049ce05: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004178f5: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000043ce05: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004c9220: nop; or ch, bh; call qword ptr [rbx + 2]; 
0x00000000004a4348: nop; out dx, eax; clc; call qword ptr [rax + 0x20fff8f1]; in al, 0xf8; jmp rax; 
0x0000000000400a75: nop; pop rbp; ret; 
0x00000000004c5820: nop; pop rsi; cli; jmp qword ptr [rdx + 1]; 
0x00000000004c7aa0: nop; pop rsi; sti; jmp qword ptr [rdx]; 
0x00000000004c8d60: nop; popfq; cld; call qword ptr [rax]; 
0x00000000004a42dc: nop; ret 0xfff8; 
0x0000000000409dac: nop; ret 0xffff; 
0x00000000004a42e0: nop; ret; 
0x00000000004c1f30: nop; sal ebp, cl; jmp rdx; 
0x00000000004a4200: nop; sar al, 0xff; sar eax, 0xff; xor dl, al; clc; jmp qword ptr [rax]; 
0x00000000004a42d8: nop; sar eax, 0xff; nop; ret 0xfff8; 
0x00000000004be34c: nop; std; call qword ptr [rax]; 
0x00000000004175ef: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004a40a8: nop; xchg al, bh; jmp rax; 
0x00000000004be32c: nop; xor al, 0xfd; call qword ptr [rax]; 
0x000000000042733f: nop; xor eax, eax; ret; 
0x00000000004be324: nop; xor ebp, edi; call qword ptr [rax]; 
0x00000000004271ff: nop; xor rax, rax; ret; 
0x000000000044e6d1: not byte ptr [rbx + 0x74]; or eax, dword ptr [rbx + 0x67403fe]; pop rbx; ret; 
0x0000000000445cc1: not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x00000000004c6e40: or ah, 0xfa; jmp rsp; 
0x000000000042b067: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c6df: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004737d2: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000473781: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000041db8a: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047374f: or al, 0; add rsp, 0x30; mov eax, ebx; pop rbx; ret; 
0x0000000000423a96: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042f668: or al, 0x16; test al, al; jne 0x2f650; xor eax, eax; sub eax, ecx; ret; 
0x000000000041dce2: or al, 0x18; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041db72: or al, 0x18; mov rax, r8; pop rbx; ret; 
0x00000000004a4584: or al, 0x1e; stc; call ptr [rbp + rbx + 0x1d2cfff9]; stc; call rdx; 
0x000000000048ca39: or al, 0x24; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, [rip + 0x67]; ret; 
0x000000000041c748: or al, 0x24; call rdx; 
0x0000000000445111: or al, 0x24; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x0000000000400e9a: or al, 0x41; call rsp; 
0x0000000000446a2f: or al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480ef0: or al, 0x48; add esp, 0x38; ret; 
0x0000000000499f95: or al, 0x48; mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000400eee: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000049a3e2: or al, 0x48; mov edx, dword ptr [rip + 0x23374e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047cf6b: or al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048c993: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000000049547f: or al, 0x5d; pop r12; pop r14; ret; 
0x000000000046acba: or al, 0x7e; ret; 
0x000000000045e0f9: or al, 0x83; ret; 
0x00000000004599fc: or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x000000000042a154: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004369a9: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000048294b: or al, 0x8d; push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x0000000000473908: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000042f69f: or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043c2cb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004ca196: or al, 0xa5; add ebp, eax; add ebp, esi; add al, byte ptr [rax]; ret; 
0x000000000049abf3: or al, 0xb6; add rcx, r14; jmp rcx; 
0x0000000000472230: or al, 0xb7; and eax, 0x96830f00; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000043c2cf: or al, 0xb; jmp rcx; 
0x00000000004bead8: or al, 0xd6; std; jmp rsp; 
0x0000000000480ee7: or al, 0xe8; adc esp, edx; stc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x0000000000436363: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000427883: or al, 0xf3; ret; 
0x000000000046b3db: or al, 0xf6; ret 0xf04; 
0x000000000045e07c: or al, 0xf6; ret 0xf08; 
0x000000000049cd55: or al, 0xf7; jne 0x9cd43; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x00000000004bf0cc: or al, 1; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x0000000000433680: or al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c753a: or al, 7; or byte ptr [rcx + 0xb], al; add byte ptr [rax + rax], cl; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c9174: or al, 7; or byte ptr [rcx + 0xb], al; add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x0000000000450d81: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000450d9d: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x50dc8; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000423d2d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b271: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423d51: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049ca6e: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000441051: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000441051: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x000000000040e035: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x00000000004aeb15: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000004aeb0d: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000048c20e: or al, byte ptr [rbp + 0x64cb75c9]; mov dword ptr [rdx], 5; pop rbx; ret; 
0x00000000004087b6: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000497540: or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000482477: or al, byte ptr [rcx + 0xf]; xchg edx, eax; ret 0x8348; 
0x00000000004c7bf3: or al, byte ptr [rcx]; ret; 
0x0000000000433828: or al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000492017: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004404c0: or al, ch; fidiv dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x0000000000440520: or al, ch; jp 0x40558; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x000000000047ff0d: or al, ch; lea edi, [rsi + 1]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040c678: or al, ch; ret 0xff99; 
0x000000000046dc28: or al, ch; ret 1; 
0x0000000000409277: or al, ch; ret; 
0x0000000000440580: or al, ch; sbb dh, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x0000000000479beb: or bh, bh; adc eax, 0x252596; xor eax, eax; add rsp, 8; ret; 
0x00000000004160fa: or bl, ch; mov edx, 0x48001f0f; cmp dword ptr [rdi + 0x38], 0; je 0x16110; ret; 
0x0000000000436523: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000450c27: or bl, dh; ret; 
0x000000000040a825: or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x00000000004127d6: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x0000000000497410: or byte ptr [r11 - 0x72b6fd18], r8b; jl 0x973de; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x00000000004279ac: or byte ptr [r11 - 0x72b7ef16], r8b; jbe 0x279c5; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000412ebb: or byte ptr [r15], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000416026: or byte ptr [r15], cl; mov dh, 2; pop rbx; ret; 
0x000000000047af31: or byte ptr [r8 + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x00000000004116f7: or byte ptr [r8 + 0x29], r9b; ret; 
0x0000000000414132: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000047cb0f: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043a778: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000498386: or byte ptr [r8 - 0x77], cl; ret; 
0x0000000000415cec: or byte ptr [r8 - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000040ed42: or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x0000000000441a77: or byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004117ac: or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004921f2: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049abed: or byte ptr [r8], r8b; add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x0000000000472ae3: or byte ptr [r9 + 0x39], cl; ret 0x8e0f; 
0x000000000049c477: or byte ptr [r9 + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000045b5ba: or byte ptr [r9 - 0x48], r8b; clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x000000000043a837: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x000000000046ca6f: or byte ptr [r9 - 0x77], r9b; ret; 
0x0000000000417e7b: or byte ptr [rax + 0x29], cl; ret 0x149; 
0x00000000004116f8: or byte ptr [rax + 0x29], cl; ret; 
0x000000000047af32: or byte ptr [rax + 0x29], cl; ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x00000000004116e2: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000041cfd9: or byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000048aad5: or byte ptr [rax + 0x39], cl; ret 0x8949; 
0x0000000000443725: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000414133: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000004407d6: or byte ptr [rax + 0x4f], bh; syscall; 
0x00000000004c710c: or byte ptr [rax + 0xb], cl; add byte ptr [rax + rax], dh; add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x00000000004c6b32: or byte ptr [rax + 0xb], cl; push rdx; ret; 
0x000000000046dbf7: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000047e4ab: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000041c2e7: or byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000004042fc: or byte ptr [rax + 1], cl; ret; 
0x00000000004981ec: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000443ad9: or byte ptr [rax + 5], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004c0c17: or byte ptr [rax + rax], al; add byte ptr [rsp + rbx], bl; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c9b97: or byte ptr [rax + rax], ch; add byte ptr [rax], al; fsubr qword ptr [rbx + 0x39f00000]; std; jmp qword ptr [rdi]; 
0x0000000000480c63: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000480c62: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000047070c: or byte ptr [rax - 0x39], cl; ret; 
0x000000000042721b: or byte ptr [rax - 0x73], cl; add eax, 0x1d; ret; 
0x000000000042722f: or byte ptr [rax - 0x73], cl; add eax, 0x8449; ret; 
0x0000000000426e52: or byte ptr [rax - 0x73], cl; push rax; add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000419c03: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x000000000047ca18: or byte ptr [rax - 0x75], cl; add eax, 0x2513f0; ret; 
0x00000000004415b1: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x00000000004407d1: or byte ptr [rax - 0x75], cl; jl 0x407fa; or byte ptr [rax + 0x4f], bh; syscall; 
0x000000000047b801: or byte ptr [rax - 0x75], cl; mov byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000049cd52: or byte ptr [rax - 0x75], cl; or al, 0xf7; jne 0x9cd43; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x000000000049d3f7: or byte ptr [rax - 0x75], cl; or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000049d3f6: or byte ptr [rax - 0x75], r9b; or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000046c1d4: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x6c1ec; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000411772: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x000000000040e40a: or byte ptr [rax - 0x77], cl; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000411599: or byte ptr [rax - 0x77], cl; and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000043a77d: or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004106a7: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047cb10: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000440ebc: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000442d58: or byte ptr [rax - 0x77], cl; fsubp st(0); mov edi, 0x49ffffe3; mov edi, dword ptr [rdi]; call rbx; 
0x000000000041c745: or byte ptr [rax - 0x77], cl; or al, 0x24; call rdx; 
0x000000000043a779: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000040e49d: or byte ptr [rax - 0x77], cl; out dx, al; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x0000000000420545: or byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x000000000041896a: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000047b860: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000040ed43: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000465cdd: or byte ptr [rax - 0x77], cl; ret; 
0x000000000047b809: or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000415ced: or byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000047b85f: or byte ptr [rax - 0x77], r9b; ret 0x8948; 
0x000000000041dba8: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000450da4: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000042d9c6: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042da4e: or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000046b83e: or byte ptr [rax - 0x7d], cl; ret 0x4803; 
0x000000000047bac8: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045d222: or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x00000000004419a7: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000049a9a3: or byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x0000000000452db1: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411ff8: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000004117ad: or byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x0000000000423f8c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000418814: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000004187d5: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x8948; 
0x0000000000459973: or byte ptr [rax], al; add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x0000000000423f8d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b411: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423fb1: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004167ac: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000041ecc6: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000004174ac: or byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; sar ebp, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000049d5b2: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000445c81: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x0000000000450c12: or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000450a92: or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000043f5d0: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000049f166: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004438b1: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004438b1: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004c7d4e: or byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + rcx*4 - 0x73180000], dl; sti; jmp qword ptr [rax + 1]; 
0x000000000040a81d: or byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc08], al; or byte ptr [eax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000040a826: or byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe08], al; ret 8; 
0x000000000049abee: or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; or al, 0xb6; add rcx, r14; jmp rcx; 
0x00000000004303e0: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042722c: or byte ptr [rax], al; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x000000000041bc72: or byte ptr [rax], al; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x0000000000443531: or byte ptr [rax], al; mov edi, 0x4a597d; mov eax, ebx; syscall; 
0x0000000000443560: or byte ptr [rax], al; mov edi, 0x4a5988; mov eax, ebx; syscall; 
0x0000000000450653: or byte ptr [rax], al; mov edi, 0x4a78c0; mov eax, ecx; syscall; 
0x0000000000442398: or byte ptr [rax], al; mov edx, 1; je 0x428e0; xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e6b: or byte ptr [rax], al; mov edx, 1; je 0x42900; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000044210e: or byte ptr [rax], al; mov edx, 2; je 0x42938; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000004423bd: or byte ptr [rax], al; mov edx, 2; je 0x42958; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441e90: or byte ptr [rax], al; mov edx, 2; je 0x42978; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441eb4: or byte ptr [rax], al; mov edx, 3; je 0x429b8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442257: or byte ptr [rax], al; mov edx, 3; je 0x429d8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442132: or byte ptr [rax], al; mov edx, 3; je 0x429f8; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441fd9: or byte ptr [rax], al; mov edx, 3; je 0x42a18; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000442784: or byte ptr [rax], al; mov edx, 3; je 0x42a38; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044265f: or byte ptr [rax], al; mov edx, 3; je 0x42a58; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004423e1: or byte ptr [rax], al; mov edx, 3; je 0x42a98; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044247a: or byte ptr [rax], al; mov edx, 4; je 0x42ab8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442401: or byte ptr [rax], al; mov edx, 4; je 0x42ad8; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044281d: or byte ptr [rax], al; mov edx, 4; je 0x42af8; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004426f8: or byte ptr [rax], al; mov edx, 4; je 0x42b38; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044267f: or byte ptr [rax], al; mov edx, 4; je 0x42b58; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000044259f: or byte ptr [rax], al; mov edx, 4; je 0x42b78; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004422f0: or byte ptr [rax], al; mov edx, 4; je 0x42bb8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442277: or byte ptr [rax], al; mov edx, 4; je 0x42bd8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ed4: or byte ptr [rax], al; mov edx, 4; je 0x42bf8; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442152: or byte ptr [rax], al; mov edx, 4; je 0x42c38; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441f4d: or byte ptr [rax], al; mov edx, 4; je 0x42c58; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442072: or byte ptr [rax], al; mov edx, 4; je 0x42c78; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000441ff9: or byte ptr [rax], al; mov edx, 4; je 0x42c98; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004408cc: or byte ptr [rax], al; mov esi, 0x4a5850; mov rdi, 0xffffffffffffff9c; mov eax, 0x101; syscall; 
0x0000000000440ad1: or byte ptr [rax], al; mov esi, 0x4a5850; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 0x101; syscall; 
0x000000000045004e: or byte ptr [rax], al; mov rdi, r13; mov eax, r15d; syscall; 
0x0000000000400c76: or byte ptr [rax], bh; call rdx; 
0x00000000004017de: or byte ptr [rax], dh; fisubr word ptr [rax + rax + 0x48]; mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004bf378: or byte ptr [rax], dh; hlt; call qword ptr [rdx]; 
0x00000000004017dd: or byte ptr [rax], r14b; fisubr word ptr [rax + rax + 0x48]; mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000042cace: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049e350: or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000048a47c: or byte ptr [rbp + 0x39], cl; sal dword ptr [rbp + rsi*2 + 0x4c], 0x89; ret 0xf749; 
0x0000000000498019: or byte ptr [rbp + 0x440f4cf6], al; ret; 
0x0000000000478c24: or byte ptr [rbp + 0x7b850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c7b3d: or byte ptr [rbp + 0xb], al; sub al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x000000000041078a: or byte ptr [rbp + 0xb], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004175e2: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000049ccf2: or byte ptr [rbp - 0x12], dh; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000004827d3: or byte ptr [rbp - 0x57f2faf], cl; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000044170e: or byte ptr [rbp - 0x7b], al; test byte ptr [rax - 0x75], 0x7d; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000047ca5c: or byte ptr [rbp - 0x7b], cl; sal byte ptr [rbp - 0x32], 0xf3; ret; 
0x000000000041eec0: or byte ptr [rbx + 0x5d], bl; jmp rax; 
0x0000000000405d93: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004438a2: or byte ptr [rbx + 0x5d], bl; repz ret; nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x0000000000401c15: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000413c7a: or byte ptr [rbx + 0x5d], bl; sub rax, rdx; ret; 
0x000000000049d536: or byte ptr [rbx + 0x634801eb], al; ret; 
0x0000000000458707: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x0000000000497411: or byte ptr [rbx - 0x72b6fd18], al; jl 0x973de; adc byte ptr [rax - 0x77], cl; retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x00000000004279ad: or byte ptr [rbx - 0x72b7ef16], al; jbe 0x279c5; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000410201: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000046d25a: or byte ptr [rbx - 0x77c03be], cl; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x0000000000443a44: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x0000000000479719: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000048bccb: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000472ae4: or byte ptr [rcx + 0x39], cl; ret 0x8e0f; 
0x000000000045d069: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x000000000049932a: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000049c478: or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004c753c: or byte ptr [rcx + 0xb], al; add byte ptr [rax + rax], cl; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c9176: or byte ptr [rcx + 0xb], al; add esp, dword ptr [rsi]; add dword ptr [rdx], ecx; ret; 
0x00000000004c4955: or byte ptr [rcx + 0xb], al; pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x000000000046a7fb: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000482b89: or byte ptr [rcx + 1], cl; fmul qword ptr [rcx + 0xf]; mov esi, 0xbe0f2414; ret 0x8349; 
0x0000000000499deb: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004980cf: or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x000000000048ad70: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000000411c21: or byte ptr [rcx + rcx*4 + 0x48], cl; adc byte ptr [rdi - 1], dl; jo 0x11c62; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004156d3: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004276ea: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000400485: or byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 3; syscall; 
0x0000000000417a44: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000048bcd2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000459022: or byte ptr [rcx - 0x48], al; clc; add byte ptr [r9 - 0x42], al; ret 0x4b40; 
0x000000000045b49e: or byte ptr [rcx - 0x48], al; clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x00000000004129da: or byte ptr [rcx - 0x74b777bb], cl; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000043a838: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000482332: or byte ptr [rcx - 0x77], cl; ret 0x44c6; 
0x000000000046ca70: or byte ptr [rcx - 0x77], cl; ret; 
0x0000000000410359: or byte ptr [rcx - 0x7d], al; add al, 1; mov rax, qword ptr [rdx + 0xd8]; mov rbx, rdx; mov rdi, rdx; call qword ptr [rax + 0x60]; 
0x0000000000451023: or byte ptr [rcx - 0x7d], cl; ret 0xf301; 
0x000000000040e55a: or byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000449c89: or byte ptr [rcx - 0xa], al; ret; 
0x000000000044ec59: or byte ptr [rcx], al; add byte ptr [rax], al; test rax, rax; je 0x4ec69; mov edi, 0x6cd720; call rax; 
0x000000000045bf41: or byte ptr [rcx], al; ret 0xd529; 
0x0000000000443abe: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x0000000000452d70: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000004189ab: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004bcc1e: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000479c9b: or byte ptr [rdi + 0x315], 4; add rsp, 8; ret; 
0x0000000000479bd7: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000044ffe9: or byte ptr [rdi + 0x4a], ch; add byte ptr [rdi + rcx - 0x4a], al; mov dl, 0x18; outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x00000000004797f1: or byte ptr [rdi + 0x6cc100], bh; pop rbx; pop rbp; jmp rax; 
0x0000000000480a81: or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x00000000004c0933: or byte ptr [rdi + 0xb], al; add dh, byte ptr [rbp + 0x41180e0a]; ret; 
0x00000000004c5c14: or byte ptr [rdi + 0xb], al; jae 0xc5c23; ret; 
0x0000000000481169: or byte ptr [rdi + r8 + 0x48], sil; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x000000000048116a: or byte ptr [rdi + rax + 0x48], dh; mov dword ptr [rax], 0x6ccac0; add rsp, 0x48; ret; 
0x0000000000464d68: or byte ptr [rdi + rcx - 0x4a], al; sub byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000048c1d4: or byte ptr [rdi], 0x84; mov ch, 0; add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x000000000044ac59: or byte ptr [rdi], 0x85; or dword ptr [rip - 0x72b80000], eax; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044afba: or byte ptr [rdi], 0x85; push rsi; add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000044ac75: or byte ptr [rdi], 0x85; test dword ptr [rax + rax], 0x428d4800; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000044b013: or byte ptr [rdi], 0x94; ret 0x8348; 
0x00000000004c9420: or byte ptr [rdi], 0xfd; call qword ptr [rax]; 
0x0000000000433edd: or byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044e259: or byte ptr [rdi], cl; mov bh, 0x43; add al, 0x29; ret 0x8941; 
0x0000000000412ebc: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004161be: or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000046ae31: or byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000049a1c9: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000416027: or byte ptr [rdi], cl; mov dh, 2; pop rbx; ret; 
0x0000000000498b58: or byte ptr [rdi], cl; test byte ptr [rcx - 0x75000000], dh; adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x000000000044eee4: or byte ptr [rdi], cl; test dh, dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000456846: or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x00000000004339d2: or byte ptr [rdx + 0x1b], dh; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040e033: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x000000000043ef21: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004c6673: or byte ptr [rdx + 0xb], cl; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x000000000043eda2: or byte ptr [rdx + 0xb], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000436993: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004127d7: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x000000000049d3fb: or byte ptr [rdx + 1], bh; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000049d3fa: or byte ptr [rdx + 1], dil; sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x00000000004a40b4: or byte ptr [rdx - 0x742f0008], 0xf8; jmp qword ptr [rax]; 
0x0000000000410c8d: or byte ptr [rdx - 1], bh; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000049c472: or byte ptr [rip + 0x438b5877], al; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000047a0bb: or byte ptr [rip - 0x74b30e8b], ah; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004c7bea: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004c7c22: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004c7c5a: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004004cc: or byte ptr [rsi], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000047f346: or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x00000000004c9221: or ch, bh; call qword ptr [rbx + 2]; 
0x00000000004bffa1: or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004a49c5: or cl, bh; jmp qword ptr [rax]; 
0x0000000000495107: or cl, byte ptr [rax + 0x29]; ret 0x8941; 
0x000000000044dde0: or cl, byte ptr [rax + 0x39]; ret 0x3a76; 
0x0000000000412eae: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x00000000004136f7: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000411595: or cl, byte ptr [rax - 0x77]; or byte ptr [rax - 0x77], cl; and byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000046d50f: or cl, byte ptr [rax - 0x77]; ret; 
0x00000000004264da: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004533c7: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000410a7c: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000482913: or cl, byte ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000046c4e7: or cl, byte ptr [rbx + 0x5bd08910]; ret; 
0x000000000041611c: or cl, byte ptr [rbx + 0xc097]; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000400538: or cl, byte ptr [rcx + 0x1c829f0]; sar dword ptr [rcx], 1; ret 0xffb8; 
0x00000000004c7539: or cl, byte ptr [rdi + rax]; or byte ptr [rcx + 0xb], al; add byte ptr [rax + rax], cl; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x000000000047a559: or cl, byte ptr [rdi]; test byte ptr [rbx + rcx], bl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000047adf9: or cl, byte ptr [rdi]; test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004827d9: or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000046b242: or cl, ch; ret 0xfffc; 
0x00000000004084b8: or cl, ch; ret; 
0x00000000004082b8: or cl, ch; retf; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000049a395: or cl, cl; cmove rax, rdx; ret; 
0x0000000000423bd9: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000049d5c7: or dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000436443: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000049eb45: or dh, bl; ret; 
0x000000000041200f: or dh, byte ptr [rax + rdi*4 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004980d7: or dh, byte ptr [rbp - 0x4d]; nop word ptr [rax + rax]; call rbx; 
0x000000000046d2b6: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x6d2b0; lea eax, [rdx + rdi]; ret; 
0x0000000000416ce6: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x16ce0; lea eax, [rdx + rdi]; ret; 
0x0000000000414ff9: or dh, byte ptr [rsp + rdi*2 + 0x40]; movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000041cbb3: or dh, dh; ret 0x7404; 
0x000000000041cb27: or dh, dh; ret 0xf04; 
0x0000000000402bee: or dh, dh; ret 0xfdf; 
0x000000000040dec7: or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000040259a: or dword ptr [rax - 0x73], ecx; mov ebx, 0x80; call rax; 
0x000000000047ed3c: or dword ptr [rax - 0x75], ecx; mov ebp, 0xffffff78; call rax; 
0x000000000042496e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000046b872: or dword ptr [rax], eax; add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401936: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x2c9750; xor eax, eax; ret; 
0x0000000000423ebd: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c97f: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423e17: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048bf63: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x000000000041130f: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000440fe4: or dword ptr [rax], eax; add byte ptr [rax], al; movsxd r10, r10d; syscall; 
0x0000000000440fa4: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000412752: or dword ptr [rax], eax; add byte ptr [rdi + 0x4a2b87], bh; mov eax, 2; syscall; 
0x0000000000472f83: or dword ptr [rax], eax; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000472e13: or dword ptr [rax], eax; movsxd rdi, edi; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000401551: or dword ptr [rbp - 0x4a], esi; xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x00000000004828f3: or dword ptr [rbp - 0x57f2faf], ecx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000430ad6: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000411c5e: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004134f0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043fea8: or dword ptr [rbx], eax; add byte ptr [rax - 0x77], cl; ret 0x6b8; 
0x000000000048a5cc: or dword ptr [rcx + 0x39], ecx; ret 0x870f; 
0x0000000000420eb6: or dword ptr [rcx - 0x7d], ecx; cli; adc al, 0x77; and ecx, dword ptr [rcx - 0x7d]; ret 0xeb5b; 
0x000000000042109c: or dword ptr [rcx - 0x7d], ecx; ret 0xe977; 
0x0000000000401a54: or dword ptr [rcx], esi; idiv byte ptr [rdi + 1]; call rax; 
0x0000000000431f03: or dword ptr [rdi + rax], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442933: or dword ptr [rdi], 0x4900401f; cmp dword ptr [rbp + 0x10], 0; jne 0x4211b; mov esi, 3; mov rdi, r13; call rbx; 
0x000000000046b687: or dword ptr [rdi], 0x841f; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000433d81: or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dec3: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000049d8c9: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000402e1b: or dword ptr [rdx - 0x76b7ffd4], esp; ret 0x8348; 
0x000000000047d379: or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x000000000044ac5c: or dword ptr [rip - 0x72b80000], eax; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000480175: or dword ptr [rsi - 0x18], esi; cmp ecx, r8d; je 0x800f0; mov eax, r8d; sub eax, ecx; ret; 
0x00000000004c7bf0: or eax, 0x10a0303; ret; 
0x0000000000499fb2: or eax, 0x10c48348; mov rax, rsi; pop rbx; pop rbp; pop r12; ret; 
0x00000000004c7c50: or eax, 0x1370303; ret; 
0x000000000049131e: or eax, 0x1717d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000049104f: or eax, 0x1744c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048f3be: or eax, 0x190dd; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043cd21: or eax, 0x1c478d48; ret; 
0x0000000000411300: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, 0xffffffffffffffd0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000479bc9: or eax, 0x254232; test byte ptr [rax + 0x314], 4; jne 0x79be8; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000416962: or eax, 0x28c48348; pop rbx; pop rbp; ret; 
0x00000000004c7be0: or eax, 0x34b0303; ret; 
0x00000000004c7c18: or eax, 0x35b0303; ret; 
0x00000000004c9157: or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c74d7: or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x000000000046d55a: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000046a82a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046af32: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000414483: or eax, 0x40; mov r12d, dword ptr fs:[rbp]; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000042dfa2: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x000000000047d666: or eax, 0x48d88948; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000046def5: or eax, 0x48fad348; test edx, edx; je 0x6df20; bsf rax, rdx; ret; 
0x00000000004427c0: or eax, 0x5ba; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe8; 
0x00000000004426c0: or eax, 0x5ba; add byte ptr [rax - 0x77], cl; fsubp st(0); ret 0xffe9; 
0x00000000004335b5: or eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd18: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c668: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d33a: or eax, 0x7b161; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042bf25: or eax, 0x7c576; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042bcca: or eax, 0x7c7d1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042a3f5: or eax, 0x7e0a6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000482967: or eax, 0x80d0518d; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000042aec7: or eax, 0x83480000; ret 0x4910; 
0x000000000042af31: or eax, 0x83480000; ret 0xe910; 
0x00000000004a193d: or eax, 0x834825eb; ret 0x4810; 
0x000000000048c903: or eax, 0x8948ffff; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004aef19: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004a3fd1: or eax, 0xea0fff8; clc; jmp qword ptr [rax]; 
0x00000000004362ea: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000441ede: or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x00000000004362f3: or eax, 0xf7f0ff3; ret; 
0x00000000004339f4: or eax, 0xfc164c8b; mov esi, dword ptr [rsi]; mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000044562c: or eax, 0xffffffff; ret; 
0x000000000041989c: or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000419899: or eax, 2; or eax, 1; mov qword ptr [rdi + 0x58], rcx; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004c9177: or eax, dword ptr [r11]; add dword ptr es:[rdx], ecx; ret; 
0x00000000004c753d: or eax, dword ptr [r8]; add byte ptr [rax], r8b; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c6675: or eax, dword ptr [rax]; add byte ptr [rax + rax], ah; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004c2165: or eax, dword ptr [rax]; add byte ptr [rax + rax], bl; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x0000000000423c5d: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b0d1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423c81: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045ed1f: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004bfb4d: or eax, dword ptr [rax]; add byte ptr [rax - 0xb], al; hlt; call qword ptr [rax]; 
0x0000000000441031: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000441031: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004bfb65: or eax, dword ptr [rax]; add byte ptr [rax], bh; cmc; hlt; call qword ptr [rdx]; 
0x00000000004c753e: or eax, dword ptr [rax]; add byte ptr [rax], r8b; add byte ptr [rbp + rax*4 + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x00000000004c710e: or eax, dword ptr [rax]; xor al, 0; add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x000000000044e6d4: or eax, dword ptr [rbx + 0x67403fe]; pop rbx; ret; 
0x00000000004c9178: or eax, dword ptr [rbx]; add dword ptr es:[rdx], ecx; ret; 
0x000000000043376b: or eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045ed1e: or eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042e0b7: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042e0be: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042dc6c: or eax, esp; mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004c7b3f: or ebp, dword ptr [rax + rax]; add byte ptr [rax], al; test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x00000000004175e4: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000412f38: or ebp, eax; ret 0xc1; 
0x00000000004c4956: or ebx, dword ptr [r8 + rax]; add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x00000000004c4957: or ebx, dword ptr [rax + rax]; add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x00000000004ca1ed: or ebx, eax; add dword ptr [rbx], eax; cmc; add al, byte ptr [rax]; ret; 
0x00000000004364b3: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000048bfee: or ebx, esi; ret; 
0x0000000000415147: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000041e539: or ecx, dword ptr [rax - 0x3f]; out dx, al; add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x0000000000419d54: or ecx, dword ptr [rax - 0x3f]; out dx, eax; add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x000000000049cdf4: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x28; ret; 
0x000000000041078c: or ecx, dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000410cc7: or ecx, dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x0000000000448e25: or ecx, dword ptr [rax - 0x7d]; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000048292f: or ecx, dword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x00000000004c5bde: or ecx, dword ptr [rdx + 0xa]; ret; 
0x00000000004a4989: or ecx, edi; jmp qword ptr [rax]; 
0x000000000042d9b4: or ecx, edx; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000042f577: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004508f2: or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000004a498d: or edi, ecx; jmp qword ptr [rax - 0xb]; 
0x000000000043c403: or edi, edi; loope 0x3c46d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043ca23: or edi, edi; loope 0x3ca8d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000411f0e: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000440fde: or edx, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x000000000048be47: or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000048be8c: or edx, eax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000424b5f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046dfa0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000048be89: or edx, ecx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048be45: or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000413f94: or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049c985: or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004c5c16: or esi, dword ptr [rbx + 0xa]; ret; 
0x000000000048bd5b: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004363d3: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004a11e0: or esi, esi; jmp qword ptr [rsi + 0x2e]; 
0x000000000048ca8c: or esp, dword ptr [rax + rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x8ca9c; lea rax, [rip + 4]; ret; 
0x0000000000411c5f: or esp, dword ptr [rax]; mov eax, 0xffffffff; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004134f1: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004828f2: or qword ptr [rbp - 0x57f2faf], rcx; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x0000000000440fdd: or r10d, 0x40; xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000436522: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x00000000004364b2: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x00000000004c7b3e: or r13d, dword ptr [r8 + rax]; add byte ptr [rax], al; test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x0000000000423bd8: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000436442: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x00000000004c5c15: or r14d, dword ptr [r11 + 0xa]; ret; 
0x00000000004363d2: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000042dc6b: or r8, r12; mov qword ptr [r10 + 0x18], r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004c2164: or r8d, dword ptr [r8]; add byte ptr [rax + rax], bl; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x000000000042d9b3: or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000044dddf: or r9b, byte ptr [r8 + 0x39]; ret 0x3a76; 
0x000000000046b241: or r9b, r13b; ret 0xfffc; 
0x00000000004c5bdd: or r9d, dword ptr [r10 + 0xa]; ret; 
0x00000000004c7c4f: or rax, 0x1370303; ret; 
0x00000000004c7bdf: or rax, 0x34b0303; ret; 
0x00000000004c7c17: or rax, 0x35b0303; ret; 
0x000000000046a829: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046af31: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000482966: or rax, 0xffffffff80d0518d; cli; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000044562b: or rax, 0xffffffffffffffff; ret; 
0x0000000000491ef2: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c6674: or rax, qword ptr [rax]; add byte ptr [rax + rax], ah; add byte ptr [rsi + rsi*2 - 0x67700000], bh; cli; jmp qword ptr [rax + 1]; 
0x00000000004c710d: or rax, qword ptr [rax]; xor al, 0; add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x000000000042e0b6: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042e0bd: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000048292e: or rcx, qword ptr [rbp - 0x57f2faf]; or cl, byte ptr [rdi]; xchg edx, eax; ret 0xb60f; 
0x000000000042f576: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000048be8b: or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000424b5e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046df9f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000048be88: or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048bd5a: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004a4510: out 0x1c, al; stc; call qword ptr [rsi + 0x23]; 
0x00000000004a4510: out 0x1c, al; stc; call qword ptr [rsi + 0x23]; stc; jmp rsi; 
0x00000000004508eb: out 0x3f, eax; pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000004439c0: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x439cc; ret; 
0x0000000000450d13: out 0x41, eax; call rdi; 
0x00000000004127e2: out 0x44, eax; mov eax, ecx; syscall; 
0x0000000000403eed: out 0x44, eax; mov eax, edx; syscall; 
0x000000000047e459: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048bd3b: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000045f162: out 0x48, al; mov eax, dword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045ec09: out 0x48, al; mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000421686: out 0x48, al; mov edi, eax; pop rbx; pop rbp; pop r12; jmp rcx; 
0x0000000000499fa1: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x48]; 
0x0000000000414542: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x78]; 
0x00000000004207ff: out 0x48, al; mov edi, ebx; call rax; 
0x000000000046d5f0: out 0x48, eax; lea edx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f749: out 0x48, eax; lea edx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000446605: out 0x48, eax; mov eax, dword ptr [rbp - 0x58]; call rax; 
0x0000000000416248: out 0x49, eax; lea ebx, [rsi + 1]; call qword ptr [rax + 0x18]; 
0x0000000000432966: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045072b: out 0x4c, al; mov edi, esi; call 0x41030; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000045596d: out 0x4c, al; sub ecx, esp; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000046f64c: out 0x4c, eax; lea ecx, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x0000000000432796: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432892: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327de: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046f9c6: out 0x4d, eax; mov ecx, edi; call rbx; 
0x0000000000420be6: out 0x5b, al; pop rbp; pop r12; jmp rax; 
0x0000000000416cb3: out 0x5b, al; ret; 
0x000000000047beba: out 0x5b, eax; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004213ab: out 0x5d, al; pop r12; jmp rax; 
0x0000000000498235: out 0x89, al; out dx, eax; call qword ptr [rbx]; 
0x00000000004981f5: out 0x89, al; out dx, eax; call rax; 
0x000000000040367b: out 0x89, eax; ret 0x8948; 
0x0000000000403cc9: out 0xb8, eax; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000440fa2: out 0xb8, eax; or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004bb100: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000049cdea: out 0xe8, al; movabs al, byte ptr [0xb74c0854800001f]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000446a9a: out 0xe8, al; rcr byte ptr [rax - 0x7cb70005], 0xc4; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000443183: out 0xe8, eax; ja 0x43146; std; dec dword ptr [rax - 0x75]; jge 0x4318d; call rbx; 
0x000000000049ee38: out 0xe8, eax; ret 0xffe7; 
0x0000000000416d37: out 0xe8, eax; ret; 
0x0000000000435cba: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435d3a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004bce28: out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000004c3361: out 0xf7, al; call qword ptr [rbx]; 
0x00000000004a3fcd: out 0xf7, eax; jmp qword ptr [rax]; 
0x00000000004a0917: out 0xf7, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4419: out 0xf8, al; call qword ptr [rax - 0x18]; 
0x00000000004a4419: out 0xf8, al; call qword ptr [rax - 0x18]; clc; inc dword ptr [rax - 0x16]; clc; call qword ptr [rax]; 
0x00000000004a4335: out 0xf8, al; jmp rax; 
0x00000000004a4315: out 0xf8, al; push rax; out 0xf8, eax; call rax; 
0x00000000004a4399: out 0xf8, eax; call qword ptr [rax - 0x17]; 
0x00000000004a4319: out 0xf8, eax; call rax; 
0x00000000004a43b9: out 0xf8, eax; jmp qword ptr [rax]; 
0x00000000004a43d9: out 0xf8, eax; jmp rax; 
0x0000000000440bca: out 0xfd, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000046485b: out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000410a54: out 0xff, al; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000045fe37: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000047d5f1: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000049f161: out 2, al; jne 0x9f16b; mov eax, 8; ret; 
0x000000000042d829: out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000041e53c: out dx, al; add ecx, dword ptr [rax - 0x77]; ret 0xce31; 
0x00000000004009a9: out dx, al; call rax; 
0x00000000004a4409: out dx, al; clc; call qword ptr [rax - 0x10]; 
0x00000000004a4409: out dx, al; clc; call qword ptr [rax - 0x10]; clc; jmp rax; 
0x00000000004a4429: out dx, al; clc; call qword ptr [rax]; 
0x00000000004a43c9: out dx, al; clc; call rax; 
0x00000000004be369: out dx, al; cld; call qword ptr [rax]; 
0x00000000004be369: out dx, al; cld; call qword ptr [rax]; int1; cld; jmp qword ptr [rax - 0xd]; 
0x00000000004360c0: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004136c8: out dx, al; mov eax, r13d; syscall; 
0x0000000000432a00: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049ccf4: out dx, al; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000045ee10: out dx, al; mov rax, qword ptr [rcx + 0xd8]; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000045f77c: out dx, al; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000040e4a0: out dx, al; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x30]; lea r15, [rbx + r14]; call rax; 
0x000000000046bde7: out dx, al; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000440f9f: out dx, al; mov rdi, r12; mov eax, 9; syscall; 
0x0000000000412a65: out dx, al; mov rdi, r14; mov eax, r9d; syscall; 
0x000000000043fcff: out dx, al; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000046b741: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413575: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413ea3: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004360ca: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042c82e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004707c6: out dx, al; shl byte ptr [rip + 0x358b4800], 1; call rax; 
0x0000000000453c97: out dx, al; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000431030: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040ed9d: out dx, eax; add byte ptr [r11 + 0x13], sil; mov rbp, rax; call qword ptr [rbp]; 
0x000000000040ed97: out dx, eax; add byte ptr [r8 + 0x3d], cl; sub bh, 0x4b; add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x000000000041f6c5: out dx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000419d57: out dx, eax; add ecx, dword ptr [rax - 0x77]; ret 0xcf31; 
0x000000000040095e: out dx, eax; add r15b, dil; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x00000000004415f9: out dx, eax; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441338: out dx, eax; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046c984: out dx, eax; call 0x6d8d0; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000046c995: out dx, eax; call qword ptr [rax + 0x18]; 
0x000000000046cf52: out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000046b977: out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000410da7: out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000498237: out dx, eax; call qword ptr [rbx]; 
0x000000000041fbe7: out dx, eax; call rax; 
0x0000000000441ea1: out dx, eax; call rbx; 
0x00000000004a4349: out dx, eax; clc; call qword ptr [rax + 0x20fff8f1]; in al, 0xf8; jmp rax; 
0x00000000004a43a9: out dx, eax; clc; call qword ptr [rax]; 
0x00000000004a4389: out dx, eax; clc; inc dword ptr [rax - 0xf]; clc; call rax; 
0x00000000004c2279: out dx, eax; cmc; call qword ptr [rax + 2]; 
0x0000000000436140: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004310f3: out dx, eax; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431034: out dx, eax; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000411c2c: out dx, eax; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000450052: out dx, eax; mov eax, r15d; syscall; 
0x0000000000450163: out dx, eax; mov eax, r8d; syscall; 
0x000000000043279a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432896: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327e2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000410e25: out dx, eax; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004112a4: out dx, eax; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000043614a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042c92d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000420548: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x0000000000416c5e: out dx, eax; pop rbx; ret; 
0x000000000042f723: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f738: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f74d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043ea53: out dx, eax; ret 0xf66; 
0x0000000000409d4d: out dx, eax; ret 0xffff; 
0x000000000042d825: out dx, eax; sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x0000000000430c3c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430c25: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000430c0e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f6ca: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c31d: out dx, eax; xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042f99f: out dx, eax; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fa5c: out dx, eax; xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042fa0b: out dx, eax; xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000450131: out dx, eax; xor eax, eax; syscall; 
0x000000000042a83e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce7e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004bac8c: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c17e1: outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rsi]; 
0x00000000004bca03: outsb dx, byte ptr [rsi]; ja 0xbc989; ret 0x48f; 
0x00000000004a41d8: outsb dx, byte ptr [rsi]; ret 0xfff8; 
0x0000000000409dce: outsb dx, byte ptr [rsi]; ret 0xffff; 
0x00000000004ba744: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x0000000000427cea: outsb dx, byte ptr [rsi]; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000044fff2: outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x000000000044ffea: outsd dx, dword ptr [rsi]; add byte ptr [rdi + r9 - 0x4a], al; mov dl, 0x18; outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x0000000000433f5d: outsd dx, dword ptr [rsi]; add eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307b8: outsd dx, dword ptr [rsi]; call 0xf69f071; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a406d: outsd dx, dword ptr [rsi]; clc; inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x0000000000436dec: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004c1821: outsd dx, dword ptr [rsi]; cmc; call qword ptr [rcx + 5]; 
0x000000000043079d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043059d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000422858: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042830e: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000043071d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430467: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430567: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000436f44: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000043069d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043049d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430add: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000430a3d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000046e13a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000043c6c6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004302cd: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043039d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043cd16: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c666: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043c6a6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x3c6b4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004bb106: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000046e18a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000043e9fc: outsd dx, dword ptr [rsi]; ret; 
0x0000000000430afd: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430c1e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000430a5d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430b9d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004bb105: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000041beaf: paddd mm7, mm7; dec dword ptr [rax - 0x39]; ret 0xffd0; 
0x00000000004415ed: pand mm7, mm5; dec dword ptr [rax - 0x75]; jge 0x415f5; call rbx; 
0x000000000042716f: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x271d0; xor rax, rax; ret; 
0x000000000046ee94: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x000000000046ee7f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000004249fb: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x000000000042716e: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x271d0; xor rax, rax; ret; 
0x00000000004249fa: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x00000000004bc505: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000004bc506: pcmpeqw mm5, qword ptr [rbp + riz*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x000000000041514b: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004508ed: pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000042df9c: pmovmskb eax, mm0; test eax, eax; je 0x2dfb0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004270cc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000427174: pmovmskb eax, mm1; test eax, eax; jne 0x271d0; xor rax, rax; ret; 
0x0000000000427134: pmovmskb eax, mm1; test eax, eax; jne 0x271f0; xor rax, rax; ret; 
0x000000000042df9b: pmovmskb eax, xmm0; test eax, eax; je 0x2dfb0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004270cb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000427173: pmovmskb eax, xmm1; test eax, eax; jne 0x271d0; xor rax, rax; ret; 
0x0000000000427133: pmovmskb eax, xmm1; test eax, eax; jne 0x271f0; xor rax, rax; ret; 
0x00000000004249ff: pmovmskb edx, mm4; test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x00000000004249fe: pmovmskb edx, xmm4; test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x00000000004c7f75: pop qword ptr [rax]; add al, ch; xchg ebx, eax; std; call rcx; 
0x00000000004c915a: pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x48068c05]; add dword ptr [rdi], 3; pop rbx; add cl, byte ptr [rdx]; ret; 
0x00000000004c74da: pop qword ptr [rbx]; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x0000000000492a59: pop r10; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000443975: pop r10; ret; 
0x000000000041f8ba: pop r12; jmp rax; 
0x000000000042168c: pop r12; jmp rcx; 
0x00000000004410ef: pop r12; mov esi, 2; jmp rax; 
0x0000000000441109: pop r12; mov esi, 3; jmp rax; 
0x000000000047bebd: pop r12; pop r13; jmp rax; 
0x000000000048772c: pop r12; pop r13; pop r14; fmul st(0); ret; 
0x00000000004876aa: pop r12; pop r13; pop r14; fmulp st(1); ret; 
0x00000000004428bb: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004024e3: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004018bf: pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004019e2: pop r12; pop r13; pop r14; ret; 
0x0000000000410045: pop r12; pop r13; pop rbp; ret; 
0x0000000000405d96: pop r12; pop r13; ret; 
0x00000000004953ac: pop r12; pop r14; ret; 
0x0000000000473cb1: pop r12; pop rbp; ret; 
0x000000000040060a: pop r12; ret; 
0x0000000000496bd8: pop r12; sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x000000000047bebf: pop r13; jmp rax; 
0x000000000048772e: pop r13; pop r14; fmul st(0); ret; 
0x00000000004876ac: pop r13; pop r14; fmulp st(1); ret; 
0x00000000004428bd: pop r13; pop r14; pop r15; jmp rax; 
0x00000000004024e5: pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c1: pop r13; pop r14; pop r15; ret; 
0x00000000004019e4: pop r13; pop r14; ret; 
0x0000000000410047: pop r13; pop rbp; ret; 
0x0000000000405d98: pop r13; ret; 
0x0000000000487730: pop r14; fmul st(0); ret; 
0x00000000004876ae: pop r14; fmulp st(1); ret; 
0x00000000004428bf: pop r14; pop r15; jmp rax; 
0x00000000004024e7: pop r14; pop r15; pop rbp; ret; 
0x00000000004018c3: pop r14; pop r15; ret; 
0x00000000004019e6: pop r14; ret; 
0x00000000004428c1: pop r15; jmp rax; 
0x00000000004024e9: pop r15; pop rbp; ret; 
0x00000000004018c5: pop r15; ret; 
0x00000000004198a1: pop r8; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000440ad5: pop rax; add byte ptr [rax + 0x63], cl; jl 0x40b00; adc byte ptr [rax + 0x101], bh; syscall; 
0x00000000004508ca: pop rax; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004c8c98: pop rax; cld; call qword ptr [rax]; 
0x000000000045076e: pop rax; js 0x507bb; add al, ch; stc; adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000004198a2: pop rax; mov dword ptr [rdi + 4], eax; ret; 
0x000000000049c475: pop rax; mov eax, dword ptr [rbx + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004335b4: pop rax; or eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480dd6: pop rax; pop rdx; pop rbx; ret; 
0x00000000004c6768: pop rax; pushfq; cli; jmp rdi; 
0x0000000000469cd4: pop rax; ret 0xfffa; 
0x0000000000409de4: pop rax; ret 0xffff; 
0x00000000004204e4: pop rax; ret; 
0x00000000004c80c8: pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004c4cd5: pop rbp; add byte ptr [rax], al; test al, 0xbb; clc; call qword ptr [rsi]; 
0x00000000004c57e9: pop rbp; cli; jmp rax; 
0x000000000041eec2: pop rbp; jmp rax; 
0x0000000000419cc2: pop rbp; mov dword ptr [r12 + 0x14], eax; pop r12; ret; 
0x00000000004008df: pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x000000000041f8b9: pop rbp; pop r12; jmp rax; 
0x000000000042168b: pop rbp; pop r12; jmp rcx; 
0x00000000004410ee: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000441108: pop rbp; pop r12; mov esi, 3; jmp rax; 
0x000000000047bebc: pop rbp; pop r12; pop r13; jmp rax; 
0x000000000048772b: pop rbp; pop r12; pop r13; pop r14; fmul st(0); ret; 
0x00000000004876a9: pop rbp; pop r12; pop r13; pop r14; fmulp st(1); ret; 
0x00000000004428ba: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004018be: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004019e1: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000405d95: pop rbp; pop r12; pop r13; ret; 
0x00000000004953ab: pop rbp; pop r12; pop r14; ret; 
0x0000000000400609: pop rbp; pop r12; ret; 
0x000000000048772f: pop rbp; pop r14; fmul st(0); ret; 
0x00000000004876ad: pop rbp; pop r14; fmulp st(1); ret; 
0x00000000004428be: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000004024e6: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c2: pop rbp; pop r14; pop r15; ret; 
0x00000000004019e5: pop rbp; pop r14; ret; 
0x0000000000410048: pop rbp; pop rbp; ret; 
0x000000000048bcd8: pop rbp; pop rbx; ret; 
0x00000000004403bf: pop rbp; push rdx; add byte ptr [rax], al; ret; 
0x00000000004438a4: pop rbp; repz ret; nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x0000000000442e9f: pop rbp; ret 0xfffd; 
0x00000000004004d1: pop rbp; ret; 
0x000000000048aa72: pop rbp; ror byte ptr [rax - 0x77], 0x14; ret; 
0x0000000000413c7c: pop rbp; sub rax, rdx; ret; 
0x000000000040fcd3: pop rbx; add al, 0; add rsp, 0xd8; ret; 
0x00000000004c9166: pop rbx; add cl, byte ptr [rdx]; ret; 
0x000000000043f2e3: pop rbx; add rax, 1; pop rbp; pop r12; pop r13; ret; 
0x00000000004b9cd8: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000043f57c: pop rbx; and eax, 0x3fc00; ret; 
0x000000000043f5af: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004b9cd6: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004bf559: pop rbx; hlt; call qword ptr [rax]; 
0x0000000000499e6a: pop rbx; jmp rax; 
0x000000000049547b: pop rbx; mov dword ptr [r10 + 0xc], edi; pop rbp; pop r12; pop r14; ret; 
0x00000000004121ae: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000045d279: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000047d397: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000043f613: pop rbx; mov eax, eax; ret; 
0x000000000046b75a: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000045b27e: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000004431a1: pop rbx; mov edi, 0x1f0ffffd; add bl, dh; ret; 
0x000000000047f32e: pop rbx; mov edi, 0x6cc140; jmp rax; 
0x0000000000400703: pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x0000000000411d1a: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415e16: pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f86: pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046be27: pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x00000000004213a8: pop rbx; mov rsi, r12; pop rbp; pop r12; jmp rax; 
0x0000000000410044: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000473cb0: pop rbx; pop r12; pop rbp; ret; 
0x000000000041eec1: pop rbx; pop rbp; jmp rax; 
0x000000000041f8b8: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000042168a: pop rbx; pop rbp; pop r12; jmp rcx; 
0x00000000004410ed: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000441107: pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x000000000047bebb: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004019e0: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000405d94: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004953aa: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000400608: pop rbx; pop rbp; pop r12; ret; 
0x00000000004438a3: pop rbx; pop rbp; repz ret; nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x00000000004004d0: pop rbx; pop rbp; ret; 
0x0000000000413c7b: pop rbx; pop rbp; sub rax, rdx; ret; 
0x00000000004bcfc0: pop rbx; ret 0x6f9; 
0x0000000000400fb5: pop rbx; ret; 
0x000000000044c057: pop rbx; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000445449: pop rbx; sub byte ptr [rax], al; pop rbx; ret; 
0x00000000004179d8: pop rbx; sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046f519: pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000004419ba: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000048c5c8: pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x0000000000404a49: pop rcx; add cl, bpl; test eax, 0xb8fffff6; ret 0x4b7c; 
0x00000000004212a2: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000431db3: pop rcx; and eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a4101: pop rcx; clc; jmp rax; 
0x00000000004bac86: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000047d159: pop rcx; dec dword ptr [rax + 0x63]; ret; 
0x0000000000436f45: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436918: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000048166f: pop rcx; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000481781: pop rcx; shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004c4fbd: pop rdi; add byte ptr [rax], al; mov al, 0xde; clc; call qword ptr [rbx]; 
0x000000000042cfbd: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000432d39: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b49: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004bc27e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004428c2: pop rdi; jmp rax; 
0x00000000004bb241: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x000000000049ecde: pop rdi; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000432969: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432799: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432895: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327e1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004024ea: pop rdi; pop rbp; ret; 
0x00000000004018c6: pop rdi; ret; 
0x00000000004c7ae1: pop rdi; sti; jmp qword ptr [rdx + 9]; 
0x00000000004c581d: pop rdx; add byte ptr [rax], al; nop; pop rsi; cli; jmp qword ptr [rdx + 1]; 
0x0000000000492a35: pop rdx; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000492a01: pop rdx; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000047e212: pop rdx; cmp eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000462740: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1088], 1; mov rax, qword ptr [rax*8 + 0x4b44e0]; jmp rax; 
0x0000000000460f38: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x1090], 1; mov rax, qword ptr [rax*8 + 0x4b42e0]; jmp rax; 
0x00000000004624a5: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000462658: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10a8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046261a: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b0], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x0000000000460fce: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10b8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x000000000046100c: pop rdx; ja 0x608d0; movzx eax, byte ptr [rax + 0x4b49a0]; mov dword ptr [rbp - 0x10c8], 1; mov rax, qword ptr [rax*8 + 0x4b47e0]; jmp rax; 
0x00000000004bbe61: pop rdx; je 0xbbe28; ret 0xacfc; 
0x00000000004bac84: pop rdx; jp 0xbace0; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004980ce: pop rdx; or byte ptr [rcx + 3], cl; sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x00000000004bce27: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x0000000000443974: pop rdx; pop r10; ret; 
0x0000000000480dd7: pop rdx; pop rbx; ret; 
0x0000000000443999: pop rdx; pop rsi; ret; 
0x0000000000443976: pop rdx; ret; 
0x000000000042cebe: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046fbf0: pop rsi; add byte ptr [r15 + 0x4b5d58], dil; call 0x1b70; nop dword ptr [rax]; mov eax, 0xc9; syscall; 
0x000000000047c393: pop rsi; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000042723c: pop rsi; add dword ptr [rax], eax; ret; 
0x0000000000427ce2: pop rsi; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000047bd01: pop rsi; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c5821: pop rsi; cli; jmp qword ptr [rdx + 1]; 
0x0000000000487731: pop rsi; fmul st(0); ret; 
0x00000000004876af: pop rsi; fmulp st(1); ret; 
0x000000000042d9c5: pop rsi; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004428c0: pop rsi; pop r15; jmp rax; 
0x00000000004024e8: pop rsi; pop r15; pop rbp; ret; 
0x00000000004018c4: pop rsi; pop r15; ret; 
0x0000000000401362: pop rsi; ret; 
0x00000000004bafbc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x00000000004c7aa1: pop rsi; sti; jmp qword ptr [rdx]; 
0x000000000042aa50: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c4958: pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rbx*2 - 0x62100000], bl; clc; jmp rbx; 
0x00000000004c2168: pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rsi - 0x1c000000], ch; cmc; jmp qword ptr [rdx]; 
0x00000000004c3728: pop rsp; add byte ptr [rax], al; add byte ptr [rdi + rax*2], ch; add byte ptr [rax], ah; add al, 0xf8; call rsp; 
0x00000000004c4c1d: pop rsp; add byte ptr [rax], al; mov al, 0xc4; std; call qword ptr [rbx]; 
0x000000000042b750: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x000000000041c682: pop rsp; and al, 0x20; mov qword ptr [rsp + 0x18], r8; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000480d3e: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480ccc: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x000000000044298e: pop rsp; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041f8bb: pop rsp; jmp rax; 
0x000000000042168d: pop rsp; jmp rcx; 
0x00000000004410f0: pop rsp; mov esi, 2; jmp rax; 
0x000000000044110a: pop rsp; mov esi, 3; jmp rax; 
0x00000000004c941c: pop rsp; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; or byte ptr [rdi], 0xfd; call qword ptr [rax]; 
0x0000000000423fb0: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047bebe: pop rsp; pop r13; jmp rax; 
0x000000000048772d: pop rsp; pop r13; pop r14; fmul st(0); ret; 
0x00000000004876ab: pop rsp; pop r13; pop r14; fmulp st(1); ret; 
0x00000000004428bc: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004024e4: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c0: pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004019e3: pop rsp; pop r13; pop r14; ret; 
0x0000000000410046: pop rsp; pop r13; pop rbp; ret; 
0x0000000000405d97: pop rsp; pop r13; ret; 
0x00000000004953ad: pop rsp; pop r14; ret; 
0x0000000000473cb2: pop rsp; pop rbp; ret; 
0x00000000004c4c1c: pop rsp; pop rsp; add byte ptr [rax], al; mov al, 0xc4; std; call qword ptr [rbx]; 
0x000000000040060b: pop rsp; ret; 
0x0000000000496bd9: pop rsp; sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x00000000004c0c1c: pop rsp; sbb al, 0; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c181c: pop rsp; sub byte ptr [rax], al; add byte ptr [rax], dh; outsd dx, dword ptr [rsi]; cmc; call qword ptr [rcx + 5]; 
0x0000000000417965: pop rsp; sub eax, dword ptr [rax]; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x000000000044107f: popfq; add byte ptr [r8], r8b; ret; 
0x00000000004c8da5: popfq; add byte ptr [rax], al; clc; ret 0xfffc; 
0x00000000004c8d5d: popfq; add byte ptr [rax], al; nop; popfq; cld; call qword ptr [rax]; 
0x00000000004c8cf5: popfq; add byte ptr [rax], al; test al, 0x3d; cld; call qword ptr [rax]; 
0x00000000004427ef: popfq; call 0x4bf27f4; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000004c48d1: popfq; clc; call qword ptr [rdx]; 
0x00000000004c4961: popfq; clc; jmp rbx; 
0x00000000004c8d61: popfq; cld; call qword ptr [rax]; 
0x000000000043f574: popfq; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000042bcff: popfq; mov dword ptr [rdi], 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000049c299: popfq; ret 0xf45; 
0x000000000048f4f0: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000460629: popfq; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000436212: psllq mm1, qword ptr [r15]; jg 0x36227; ret; 
0x0000000000436213: psllq mm1, qword ptr [rdi]; jg 0x36227; ret; 
0x000000000043c546: psllq mm1, qword ptr [rdi]; jg 0x3c552; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043c5a7: psllq mm1, qword ptr [rdi]; jg 0x3c5b3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043c6a8: psllq mm1, qword ptr [rdi]; jg 0x3c6b4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cbd6: psllq mm1, qword ptr [rdi]; jg 0x3cbe2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000043cc57: psllq mm1, qword ptr [rdi]; jg 0x3cc63; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043cd58: psllq mm1, qword ptr [rdi]; jg 0x3cd64; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044d23c: push -0x18917; jmp qword ptr [rsi + 0xf]; 
0x000000000043390c: push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x000000000043396f: push -0x30; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x00000000004bea84: push -0x36; std; push rsp; ret 0xfffd; 
0x00000000004bac8a: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000426ea3: push -0x45efffd6; shr byte ptr [rax + 0x42], 1; add byte ptr [rax + 0x43e820], bh; cmove rax, rdx; ret; 
0x000000000044c04d: push -0x4b40ffb6; push 0x16e8004a; pop rbx; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000416c1b: push -0x6f995915; mov rax, 0xffffffffffffffff; ret; 
0x0000000000492a34: push -0x74fffea6; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004538cf: push -0x76000005; ret 0x8941; 
0x0000000000495c8e: push -0x7a000006; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x0000000000463bef: push -0x7c000006; ret 0x8908; 
0x000000000046870a: push -0x9000007; ret 0xf02; 
0x0000000000415bc8: push -0x9617; jmp qword ptr [rsi - 0x70]; 
0x000000000043ce64: push -0x9ffffff; ret 0x7501; 
0x00000000004c1669: push -0xb; call qword ptr [rdx]; 
0x00000000004a4061: push -8; jmp rax; 
0x00000000004c5a2d: push 0; add al, ah; cli; call qword ptr [rsi]; 
0x000000000046f4d1: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; lea rdx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000445c30: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r14; call rbx; 
0x000000000044c052: push 0x16e8004a; pop rbx; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004c0157: push 0x2600e41; mov ecx, 0x41380e0a; ret; 
0x0000000000453122: push 0x2c; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000477fc1: push 0x30bf004b; imul ecx, dword ptr [rbx], 0xf89ba2e8; jmp qword ptr [rsi - 0x70]; 
0x000000000047e502: push 0x36; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000040dec2: push 0x40b60f09; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000049cbe8: push 0x48; add esp, 0x18; ret; 
0x00000000004207fc: push 0x48e6894c; mov edi, ebx; call rax; 
0x000000000047ca02: push 0x51; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c57e5: push 0x5de80000; cli; jmp rax; 
0x000000000046d032: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004a405d: push 0x6a40fff8; clc; jmp rax; 
0x00000000004bca02: push 0x6e; ja 0xbc989; ret 0x48f; 
0x00000000004034fd: push 0xb828; add byte ptr [rax], al; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x000000000046859c: push 0xffffff9; xchg esp, eax; ret; 
0x000000000046f42e: push 1; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000045b1c1: push qword ptr [r9]; sal bh, cl; int1; add eax, r8d; ret; 
0x00000000004a48d7: push qword ptr [rax + 0x19]; stc; jmp rax; 
0x0000000000411c27: push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410e20: push qword ptr [rax + 0x38]; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x00000000004a490b: push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x00000000004a44e3: push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a4a63: push qword ptr [rax + 0x7b]; stc; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a4453: push qword ptr [rax + 0xfff8cd]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004be373: push qword ptr [rax + 0xfffcf5]; clc; cld; call qword ptr [rax - 6]; 
0x00000000004a3f67: push qword ptr [rax + 1]; clc; inc dword ptr [rax + 2]; clc; call qword ptr [rax]; 
0x000000000044116b: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411ac: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004be363: push qword ptr [rax - 0x14]; cld; inc eax; out dx, al; cld; call qword ptr [rax]; 
0x00000000004a4397: push qword ptr [rax - 0x19]; clc; call qword ptr [rax - 0x17]; 
0x00000000004a4417: push qword ptr [rax - 0x1a]; clc; call qword ptr [rax - 0x18]; 
0x00000000004a4483: push qword ptr [rax - 0x23]; clc; inc eax; fdivp st(0); call qword ptr [rax]; 
0x00000000004a4497: push qword ptr [rax - 0x31]; clc; inc eax; sar al, 1; call qword ptr [rax]; 
0x00000000004a444f: push qword ptr [rax - 0x37]; clc; push qword ptr [rax + 0xfff8cd]; iretd; clc; call qword ptr [rax - 0x30]; 
0x00000000004a4a93: push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004a4a3b: push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a40f7: push qword ptr [rax - 0x3f0007ab]; push rdi; clc; call rax; 
0x00000000004a41e3: push qword ptr [rax - 0x3f]; clc; jmp qword ptr [rax - 0x3e]; 
0x00000000004a41bb: push qword ptr [rax - 0x53]; clc; call qword ptr [rax - 0x4f000752]; scasd eax, dword ptr [rdi]; clc; call rax; 
0x00000000004a419b: push qword ptr [rax - 0x5c]; clc; call qword ptr [rax - 0x4f00075b]; cmpsb byte ptr [rsi], byte ptr [rdi]; clc; call rax; 
0x00000000004a4a8b: push qword ptr [rax - 0x5f000684]; jg 0xa4a8c; push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004a3f77: push qword ptr [rax - 0x7f0007fc]; add eax, 0x650fff8; clc; jmp qword ptr [rax]; 
0x00000000004a46db: push qword ptr [rax]; and bh, cl; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a40d7: push qword ptr [rax]; clc; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004a4a7b: push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x000000000049ab13: push qword ptr [rax]; jne 0x9ab3b; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d617: push qword ptr [rax]; jne 0x9d640; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000049d677: push qword ptr [rax]; jne 0x9d6a0; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x00000000004a4a57: push qword ptr [rax]; jnp 0xa4a54; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4a1b: push qword ptr [rax]; jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a40af: push qword ptr [rax]; mov eax, edi; inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x00000000004a4207: push qword ptr [rax]; ret 0xfff8; 
0x00000000004a41b3: push qword ptr [rax]; stosd dword ptr [rdi], eax; clc; call qword ptr [rax - 0x54]; 
0x00000000004a42fb: push qword ptr [rax]; xbegin 0xfffffffff8d20402; call qword ptr [rax - 0x38]; 
0x0000000000427a99: push qword ptr [rbp + 0x14]; and edx, 7; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427c83: push qword ptr [rbp + 0x1a]; and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x000000000043e7e8: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x0000000000411d0b: push qword ptr [rbp + 2]; pop rbx; ret; 
0x00000000004c7c0b: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000041660d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000046d0c5: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000046def3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x00000000004407ca: push qword ptr [rbp + rdi*4 + 0x48]; mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000046d06d: push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x00000000004a1124: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x00000000004a4877: push qword ptr [rbp + rdx - 7]; push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x0000000000416cb1: push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x0000000000443b42: push qword ptr [rbp - 0xd]; xor eax, eax; leave; ret; 
0x00000000004c7bd3: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x0000000000416c59: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x0000000000412f36: push qword ptr [rbx + rcx - 0x18]; ret 0xc1; 
0x000000000046f66a: push qword ptr [rbx + rdx*2 - 0x7b]; ror byte ptr [rdi], 0x95; ret 0xe883; 
0x00000000004037c5: push qword ptr [rbx + riz + 0x4c]; mov dword ptr [rbp - 0x90], eax; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000499506: push qword ptr [rbx - 0x18]; ret; 
0x000000000047cb27: push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004121e1: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000047d289: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045b1c2: push qword ptr [rcx]; sal bh, cl; int1; add eax, r8d; ret; 
0x00000000004015c4: push qword ptr [rcx]; sar byte ptr [rsi + 0x20000], cl; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x000000000043fb7c: push qword ptr [rdi + 0x21]; hlt; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000044069c: push qword ptr [rdi + 0x41]; add rsp, 0x60; pop rbx; ret; 
0x000000000047320c: push qword ptr [rdi + 9]; pop rbx; ret; 
0x0000000000416136: push qword ptr [rdi + rax + 0x5b]; pop rbp; pop r12; ret; 
0x00000000004a47c7: push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x0000000000403c11: push qword ptr [rdx + rbp - 0x47]; add al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004a4657: push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x00000000004bee7f: push qword ptr [rdx - 0x2c]; std; jmp qword ptr [rdi - 0x2c]; 
0x0000000000413cd3: push qword ptr [rsi + 0x1a]; mov rdx, 0xffffffffffffffd0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004a452b: push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004734bd: push qword ptr [rsi + rsi - 0x77]; ret 0xe283; 
0x00000000004a41ef: push qword ptr [rsi - 0x40]; clc; jmp qword ptr [rdx]; 
0x00000000004a464f: push qword ptr [rsp + rbx + 0x2324fff9]; stc; push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x00000000004a487f: push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x0000000000448b2c: push r13; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x00000000004168c3: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000415d6f: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000400c86: push rax; adc byte ptr [rax], bh; call rdx; 
0x00000000004175f1: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000041c250: push rax; adc dh, dh; ret 0xf0f; 
0x00000000004a4938: push rax; adc eax, 0x14d0fff9; stc; call qword ptr [rax + 0x14]; 
0x00000000004193c4: push rax; add al, 0; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004c3580: push rax; add bh, al; jmp qword ptr [rbx]; 
0x000000000046d1d1: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000004168c4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000415d70: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c4025: push rax; add byte ptr [rax], al; cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x000000000044054d: push rax; add byte ptr [rax], al; ret; 
0x000000000043fcc3: push rax; add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x000000000045c560: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000045952c: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045c110: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004686e8: push rax; add dword ptr [rbx - 0x7cf0f706], eax; xchg edx, eax; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x000000000041b68f: push rax; add eax, 0xf6410000; ret 0xf01; 
0x0000000000426e55: push rax; add eax, ebp; add byte ptr fs:[rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000046cfe7: push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a46e4: push rax; and ecx, edi; jmp rax; 
0x00000000004a441c: push rax; call 0xffffffffea4b441a; clc; call qword ptr [rax]; 
0x0000000000445cc8: push rax; call rbx; 
0x00000000004a40e0: push rax; clc; jmp qword ptr [rax + 0x4b]; 
0x00000000004c0d91: push rax; cmc; jmp qword ptr [rcx]; 
0x0000000000410a56: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004a4434: push rax; in al, 0xf8; jmp qword ptr [rax]; 
0x00000000004a4404: push rax; in al, dx; clc; call qword ptr [rax - 0x12]; 
0x00000000004a4aa3: push rax; jg 0xa4aa0; call qword ptr [rax]; 
0x0000000000480cdc: push rax; jmp qword ptr [rax]; 
0x000000000049d643: push rax; jne 0x9d633; xor eax, eax; add rsp, 8; ret; 
0x000000000049d6a3: push rax; jne 0x9d693; xor eax, eax; add rsp, 8; ret; 
0x00000000004a4a73: push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a24: push rax; jp 0xa4a20; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a4b: push rax; jp 0xa4a48; inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004c5fe0: push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x00000000004c6d00: push rax; leave; cli; call qword ptr [rcx]; 
0x0000000000447d9a: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000041176d: push rax; mov qword ptr [rsp + 8], r14; mov qword ptr [rsp], rax; mov rbx, qword ptr [r15 + 0x98]; mov rdi, rbx; call qword ptr [rbx + 0x20]; 
0x0000000000411dad: push rax; mov rax, qword ptr [rsp + 0x18]; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000049a2e6: push rax; mov rax, rbx; pop rbx; ret; 
0x000000000044bd02: push rax; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046d5ed: push rax; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046c7e5: push rax; mov rdx, rdi; jbe 0x6c757; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000419c02: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x000000000046c1d3: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x6c1ec; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000400c75: push rax; or byte ptr [rax], bh; call rdx; 
0x00000000004175e1: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004bffa0: push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x000000000041cbb2: push rax; or dh, dh; ret 0x7404; 
0x000000000041cb26: push rax; or dh, dh; ret 0xf04; 
0x0000000000423ebc: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a4317: push rax; out 0xf8, eax; call rax; 
0x00000000004a4408: push rax; out dx, al; clc; call qword ptr [rax - 0x10]; 
0x00000000004a4408: push rax; out dx, al; clc; call qword ptr [rax - 0x10]; clc; jmp rax; 
0x0000000000440ad4: push rax; pop rax; add byte ptr [rax + 0x63], cl; jl 0x40b00; adc byte ptr [rax + 0x101], bh; syscall; 
0x0000000000448b2b: push rax; push r13; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000433ca3: push rax; push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000044a9ab: push rax; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004c0fc0: push rax; push rdi; cmc; jmp qword ptr [rbx]; 
0x0000000000416d31: push rax; push rsp; add byte ptr [r8 - 0x77], cl; out 0xe8, eax; ret; 
0x0000000000447d9c: push rax; push rsp; ret; 
0x000000000048c3be: push rax; ret; 
0x00000000004a4490: push rax; retf; clc; jmp qword ptr [rax]; 
0x00000000004a470b: push rax; sbb al, 0xf9; call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x00000000004a4714: push rax; sbb bh, cl; call rax; 
0x000000000040edcb: push rax; sbb byte ptr [rax - 0x75], cl; jo 0xedf1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edf3: push rax; sbb byte ptr [rax - 0x75], cl; js 0xee19; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004175e6: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000046d13a: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004a4920: push rax; sbb cl, bh; call rax; 
0x00000000004a450c: push rax; sbb eax, 0x1ce6fff9; stc; call qword ptr [rsi + 0x23]; 
0x00000000004a48d3: push rax; sbb ecx, edi; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x00000000004a4a0b: push rax; stc; inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; 
0x00000000004c76e1: push rax; sti; jmp qword ptr [rdx]; 
0x000000000046d136: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004a41ab: push rax; test al, 0xf8; call qword ptr [rax]; 
0x0000000000433ca4: push rax; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000040193c: push rax; xchg edi, eax; sub al, 0; xor eax, eax; ret; 
0x0000000000416c55: push rax; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x0000000000416cad: push rax; xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x000000000049f737: push rbp; adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000048b1cf: push rbp; add byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x000000000041d9fa: push rbp; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000441801: push rbp; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x000000000049ca6b: push rbp; add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x000000000049cfb5: push rbp; add byte ptr [rsi + 1], bh; mov edi, 1; call rax; 
0x000000000047d1c8: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x00000000004a40f9: push rbp; clc; inc eax; push rdi; clc; call rax; 
0x000000000044a9ac: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000448b2d: push rbp; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000411b62: push rbp; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], r10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x0000000000490638: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045b49d: push rbp; or byte ptr [rcx - 0x48], al; clc; add byte ptr [r9 - 0x44], al; ret 0x4b40; 
0x0000000000473400: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c7496: push rbp; ret; 
0x000000000046d8a1: push rbp; ror byte ptr [rcx + rcx*4 - 1], 0x45; xor eax, eax; call rbx; 
0x0000000000476d47: push rbp; sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000004593e7: push rbp; sub al, byte ptr [rcx]; add cl, ch; ret; 
0x000000000042717a: push rbp; xor rax, rax; ret; 
0x0000000000400db9: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000043fb0e: push rbx; adc byte ptr [rdi + rdx*8 + 0x48], dh; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000476316: push rbx; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x0000000000424899: push rbx; add qword ptr [rax], rax; ret; 
0x00000000004a40f5: push rbx; clc; push qword ptr [rax - 0x3f0007ab]; push rdi; clc; call rax; 
0x000000000044e6d2: push rbx; je 0x4e6e0; cmp esi, 3; je 0x4e6e0; pop rbx; ret; 
0x000000000046d039: push rbx; je 0x6d097; pop rbp; pop r12; ret; 
0x000000000046d0de: push rbx; je 0x6d13c; pop rbp; pop r12; ret; 
0x000000000048c5f1: push rbx; je 0x8c660; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x00000000004731f5: push rbx; mov ebx, dword ptr [rdi]; call 0x1f100; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000472f7a: push rbx; mov ecx, 2; mov esi, 0x90800; mov eax, ecx; sub rsp, 0x98; syscall; 
0x0000000000410fca: push rbx; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000450200: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5020f; call rax; 
0x00000000004164f6: push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004161a7: push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x0000000000473401: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000046b3da: push rbx; or al, 0xf6; ret 0xf04; 
0x0000000000417e7a: push rbx; or byte ptr [rax + 0x29], cl; ret 0x149; 
0x00000000004161bd: push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000040db39: push rbx; ret; 
0x00000000004c7811: push rbx; sti; jmp rdi; 
0x0000000000415114: push rbx; sub cl, ch; ret 0xfffe; 
0x000000000045c564: push rbx; sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000459530: push rbx; sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045c114: push rbx; sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000413291: push rbx; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000046aa16: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004404b9: push rcx; add byte ptr [rax], al; ret; 
0x00000000004bb0e5: push rcx; call qword ptr [rsi]; 
0x000000000047ca03: push rcx; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000436b1f: push rcx; jl 0x36b6a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436b26: push rcx; jl 0x36b71; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436b2d: push rcx; jl 0x36b78; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000436c86: push rcx; jl 0x36cd1; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c8d: push rcx; jl 0x36cd8; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c94: push rcx; jl 0x36cdf; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004136be: push rcx; movsxd rdi, dword ptr [r14 + 0x70]; mov rdx, rbx; mov rsi, rbp; mov eax, r13d; syscall; 
0x000000000049e34f: push rcx; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x00000000004827d5: push rcx; rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004c7789: push rcx; sti; jmp rsi; 
0x000000000043ca8a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000436379: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000043eee2: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x3ef30; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043cb3c: push rdi; add eax, 0xc478d48; ret; 
0x000000000049be9d: push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000431fb5: push rdi; and eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004325e2: push rdi; call 0xfffffffff062af34; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432620: push rdi; call 0xfffffffff062af72; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432658: push rdi; call 0xfffffffff062afaa; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432696: push rdi; call 0xfffffffff062afe8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004326ce: push rdi; call 0xfffffffff062b020; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004326f6: push rdi; call 0xfffffffff062b048; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043271e: push rdi; call 0xfffffffff062b070; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004a3f5d: push rdi; call rax; 
0x00000000004a40fd: push rdi; clc; call rax; 
0x00000000004a40fd: push rdi; clc; call rax; pop rcx; clc; jmp rax; 
0x0000000000432628: push rdi; clc; ret; 
0x00000000004327a0: push rdi; cld; ret; 
0x00000000004332c7: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004c0fc1: push rdi; cmc; jmp qword ptr [rbx]; 
0x0000000000435c59: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043069e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000450bbe: push rdi; fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; add rsp, 0xd0; ret; 
0x000000000043049e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041347d: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040e016: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000413cdc: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000400422: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x0000000000435bd9: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432d35: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432b45: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435a2a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000433306: push rdi; loope 0x33355; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043334e: push rdi; loope 0x3339d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043338c: push rdi; loope 0x333db; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333c4: push rdi; loope 0x33413; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433402: push rdi; loope 0x33451; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043343a: push rdi; loope 0x33489; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433462: push rdi; loope 0x334b1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430768: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004305e8: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004306e8: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430668: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000415c80: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415cb4: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000435aba: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000045e0f8: push rdi; or al, 0x83; ret; 
0x000000000045e07b: push rdi; or al, 0xf6; ret 0xf08; 
0x000000000048bcca: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000499dea: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x000000000048bcd1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000043cd20: push rdi; or eax, 0x1c478d48; ret; 
0x0000000000432965: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432795: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432891: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004327dd: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000411c26: push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000410e1f: push rdi; push qword ptr [rax + 0x38]; mov rdi, rbp; mov r9, qword ptr [rax + 0x10]; lea r8, [rsp + 0x18]; call qword ptr [rbp + 0x18]; 
0x0000000000411dac: push rdi; push rax; mov rax, qword ptr [rsp + 0x18]; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004013e2: push rdi; ret 0; 
0x0000000000430ade: push rdi; ret 0xff3; 
0x0000000000430a3e: push rdi; ret; 
0x0000000000415c78: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004334c7: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432cea: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x00000000004c7909: push rdi; sti; call rsi; 
0x00000000004330c7: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000041167f: push rdi; sub rdx, rsi; mov rdi, r15; call rax; 
0x000000000046e13b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004403c0: push rdx; add byte ptr [rax], al; ret; 
0x000000000047394a: push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046681a: push rdx; mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x0000000000443981: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000432589: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71d79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432439: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71ec9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322e9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432199: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432049: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x722b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ef9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431da9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c59: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x726a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b09: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x727f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431719: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72be9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72d39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431479: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72e89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431329: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72fd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a41fb: push rdx; ret 0xfff8; 
0x00000000004c6b35: push rdx; ret; 
0x0000000000447d96: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004c77a9: push rdx; sti; call qword ptr [rsi]; 
0x00000000004c77d9: push rdx; sti; jmp qword ptr [rdx]; 
0x000000000046d218: push rdx; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000043cd77: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000043c6c7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c626: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x3c636; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000043c646: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x3c656; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042f724: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043f029: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x3f077; adc dword ptr [rsi + 3], edx; ret; 
0x000000000046c602: push rsi; add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000436372: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000047c905: push rsi; add al, 0x4c; cmp edx, eax; jne 0x7c8ab; mov eax, dword ptr [rsi + 4]; ret; 
0x0000000000436611: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000436681: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000043f022: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x3f070; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000436302: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043cb35: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000043c4d5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000043f0bf: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044afbd: push rsi; add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000004365a1: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000043caa3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000043c473: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000042f739: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4514: push rsi; and edi, ecx; jmp rsi; 
0x0000000000432736: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043308a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043328a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043348a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043271a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004330a6: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332a6: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004334a6: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432752: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432ec1: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004328f9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432ad9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cb9: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432e99: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432af5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432cd5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432eb5: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000432915: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eeba: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004332c1: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004bca00: push rsi; cli; push 0x6e; ja 0xbc989; ret 0x48f; 
0x00000000004c0f61: push rsi; cmc; call qword ptr [rcx]; 
0x0000000000435c52: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e326: push rsi; cmc; sub eax, edx; ret; 
0x00000000004302ce: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043039e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000435bd2: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e316: push rsi; hlt; sub eax, edx; ret; 
0x0000000000435a22: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e2e6: push rsi; int1; sub eax, edx; ret; 
0x0000000000489f16: push rsi; jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x00000000004bc6dd: push rsi; jnp 0xbc6f6; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x0000000000430298: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430368: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000435b42: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435ab2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da4d: push rsi; or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000043cd17: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000043c667: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004bbe60: push rsi; pop rdx; je 0xbbe28; ret 0xacfc; 
0x000000000043c6a7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x3c6b4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043cd57: push rsi; psllq mm1, qword ptr [rdi]; jg 0x3cd64; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000046870d: push rsi; ret 0xf02; 
0x000000000045fb98: push rsi; ret 0xf10; 
0x000000000041fdc2: push rsi; ret; 
0x00000000004a4253: push rsi; sar al, 0xff; mov cl, 0xf8; inc esi; ret 0xfff8; 
0x00000000004334c1: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000432ce2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043eec1: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004330c1: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e2f6: push rsi; sub eax, edx; ret; 
0x0000000000435d52: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000004a427f: push rsi; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x000000000042f74e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a487b: push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x0000000000416d32: push rsp; add byte ptr [r8 - 0x77], cl; out 0xe8, eax; ret; 
0x00000000004c2270: push rsp; add byte ptr [rax], al; add byte ptr [rdx + rsi - 0x10e80000], dh; cmc; call qword ptr [rax + 2]; 
0x00000000004c1458: push rsp; add byte ptr [rax], al; add byte ptr [rsp + 0x65e00000], bl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000004736d9: push rsp; add byte ptr [rax], al; mov eax, 0x10; sub rsp, 0x30; mov rdx, rsp; syscall; 
0x00000000004c7114: push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x000000000041c68c: push rsp; and al, 0x10; call rax; 
0x0000000000411b6a: push rsp; and al, 0x10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x00000000004406aa: push rsp; and al, 0x10; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000049a18a: push rsp; and al, 0x10; mov rax, rdx; add rsp, 0x28; ret; 
0x000000000046d5f3: push rsp; and al, 0x18; lea r9, [rsp + 0x10]; call rbx; 
0x000000000048c96f: push rsp; and al, 0x18; mov rax, rdx; add rsp, 0x38; ret; 
0x000000000046f74c: push rsp; and al, 0x20; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046f0f2: push rsp; and al, 0x20; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; lea rcx, [rax + 1]; call rbx; 
0x000000000046f4de: push rsp; and al, 0x28; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000480f50: push rsp; and al, 0x38; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000450b7e: push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000480d43: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cd1: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000448601: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f64: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044934a: push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046fb41: push rsp; and al, 0x48; mov rdi, r12; call rbx; 
0x000000000044bd00: push rsp; and al, 0x50; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044adf4: push rsp; and al, 0x60; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041f502: push rsp; and al, 0x68; call rax; 
0x00000000004207fa: push rsp; and al, 0x68; mov rsi, r12; mov rdi, rbx; call rax; 
0x0000000000440602: push rsp; and al, 0xa8; mov esi, 0x10; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000048be90: push rsp; and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000048be4a: push rsp; and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000041bf95: push rsp; and eax, 0x950f4100; ret; 
0x00000000004b9b45: push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004be9d3: push rsp; ret 0xfffd; 
0x000000000041ce3a: push rsp; ret; 
0x00000000004bc62a: push rsp; syscall; 
0x000000000042a710: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x00000000004bf05c: pushfq; add byte ptr [rax], al; add dl, ah; sbb dh, ah; call qword ptr [rsi]; 
0x00000000004c8c95: pushfq; add byte ptr [rax], al; pop rax; cld; call qword ptr [rax]; 
0x00000000004c145c: pushfq; and al, 0; add al, ah; cmc; jmp qword ptr [rdi + 1]; 
0x0000000000448290: pushfq; and al, 0x80; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x00000000004c6769: pushfq; cli; jmp rdi; 
0x000000000041524c: pushfq; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046c4bd: pushfq; nop; mov rax, qword ptr [rdi + 0xd8]; push rbx; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000042b410: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000470fa3: pushfq; ret 0xb60f; 
0x000000000049c260: pushfq; ret 0xf45; 
0x00000000004a4588: pushfq; sbb eax, 0x1d2cfff9; stc; call rdx; 
0x00000000004a449c: rcl al, 0xf8; call qword ptr [rax]; 
0x00000000004a449c: rcl al, 0xf8; call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x0000000000448b2a: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; call rbx; 
0x000000000044a9aa: rcl byte ptr [rax + 0x55], cl; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004c2980: rcl byte ptr [rbp - 0xa]; jmp qword ptr [rsi]; 
0x00000000004a493c: rcl byte ptr [rcx + rdi*8]; call qword ptr [rax + 0x14]; 
0x00000000004a40fc: rcl byte ptr [rdi - 8], 0xff; rcr byte ptr [rcx - 8], 1; jmp rax; 
0x00000000004a4924: rcl byte ptr [rdi]; stc; call qword ptr [rax + 0x17]; 
0x00000000004a4924: rcl byte ptr [rdi]; stc; call qword ptr [rax + 0x17]; stc; call rax; 
0x00000000004a4934: rcl byte ptr [rip + 0x1550fff9]; stc; call rax; 
0x00000000004a492c: rcl byte ptr [rsi]; stc; call qword ptr [rax + 0x16]; 
0x00000000004a492c: rcl byte ptr [rsi]; stc; call qword ptr [rax + 0x16]; stc; call rax; 
0x0000000000478cc3: rcl dword ptr [rbp + 0x25]; add bh, dh; ret 0x804; 
0x00000000004bbe5f: rcl dword ptr [rsi + 0x5a], cl; je 0xbbe28; ret 0xacfc; 
0x0000000000446a9c: rcr byte ptr [rax - 0x7cb70005], 0xc4; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004a491c: rcr byte ptr [rax], 1; stc; call qword ptr [rax + 0x18]; 
0x00000000004a491c: rcr byte ptr [rax], 1; stc; call qword ptr [rax + 0x18]; stc; call rax; 
0x000000000046b9aa: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000004419bc: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000046b75c: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000048bcd7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000400962: rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000443ac0: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x00000000004186cf: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000041fcfe: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000004953a9: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x000000000040f02e: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000045d06b: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000041f7b3: rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000410c70: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004a4590: rcr byte ptr [rcx + rdi*8], cl; inc dword ptr [rdx + 0x23]; stc; call rdx; 
0x00000000004a4590: rcr byte ptr [rcx + rdi*8], cl; inc dword ptr [rdx + 0x23]; stc; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x00000000004a4100: rcr byte ptr [rcx - 8], 1; jmp rax; 
0x00000000004bc27d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004a4508: rcr byte ptr [rip + 0x1d50fff9], 0xf9; jmp rsi; 
0x000000000041817a: rcr byte ptr [rsi - 1], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000004bf0f0: rcr byte ptr [rsi], 1; hlt; call rdi; 
0x000000000044132c: rcr ch, 1; std; dec dword ptr [rcx - 0x75]; jge 0x41334; call rbx; 
0x00000000004a4488: rcr dh, 0xf8; call qword ptr [rax]; 
0x00000000004a447c: rcr dl, 1; clc; jmp qword ptr [rax]; 
0x000000000048a1d9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000042b0cc: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042cd19: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042c539: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c929: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c149: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bc2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b40c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042abec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042c2e8: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b74c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042af2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a70c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b8ec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042c7d9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bff9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042d109: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aa4c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ab82: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b882: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b3a2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c6da: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042d00a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042bbc2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aec2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a9e2: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b6e2: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c82a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c04a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000433b16: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ee48: rep stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x00000000004005d9: repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004438a5: repz ret; nop word ptr [rax + rax]; mov eax, 8; syscall; 
0x0000000000400624: ret 0; 
0x000000000045089b: ret 0x100; 
0x000000000046b38f: ret 0x107; 
0x00000000004af320: ret 0x10; 
0x000000000047ed66: ret 0x10eb; 
0x000000000041ce62: ret 0x110; 
0x000000000048bcac: ret 0x114d; 
0x0000000000448548: ret 0x1189; 
0x00000000004472db: ret 0x11e9; 
0x000000000047d1cc: ret 0x1272; 
0x00000000004661ca: ret 0x12; 
0x000000000049e103: ret 0x1374; 
0x00000000004765fd: ret 0x1376; 
0x000000000040b03a: ret 0x140; 
0x0000000000473791: ret 0x1477; 
0x000000000041c531: ret 0x148; 
0x0000000000416cc2: ret 0x149; 
0x000000000041ae43: ret 0x14c; 
0x0000000000436eef: ret 0x14d; 
0x000000000040a03a: ret 0x150; 
0x0000000000407a3a: ret 0x176; 
0x0000000000424bca: ret 0x17; 
0x0000000000436e2c: ret 0x180f; 
0x0000000000450336: ret 0x1874; 
0x00000000004271e5: ret 0x1876; 
0x0000000000418805: ret 0x18eb; 
0x000000000046fcef: ret 0x190; 
0x00000000004718be: ret 0x19be; 
0x00000000004813e2: ret 0x1a75; 
0x00000000004bc7da: ret 0x1ad4; 
0x00000000004baf6d: ret 0x1b49; 
0x000000000041eccf: ret 0x1be; 
0x00000000004b0ff0: ret 0x1d4; 
0x00000000004b1788: ret 0x1d5; 
0x0000000000400f65: ret 0x1d89; 
0x0000000000448e93: ret 0x1e76; 
0x000000000044aa27: ret 0x1f0f; 
0x000000000041f93e: ret 0x1f76; 
0x00000000004507b7: ret 0x200; 
0x000000000044808c: ret 0x2176; 
0x0000000000424968: ret 0x2288; 
0x000000000049eda6: ret 0x22; 
0x000000000049a46a: ret 0x2336; 
0x0000000000430c42: ret 0x2373; 
0x00000000004404d7: ret 0x23e8; 
0x00000000004afff8: ret 0x24; 
0x000000000047f03a: ret 0x24ed; 
0x00000000004157e9: ret 0x2501; 
0x000000000041ee7d: ret 0x2575; 
0x00000000004715eb: ret 0x25; 
0x000000000047133a: ret 0x25c5; 
0x0000000000470d32: ret 0x25cb; 
0x000000000047083a: ret 0x25d0; 
0x0000000000401706: ret 0x2773; 
0x000000000046df36: ret 0x2774; 
0x0000000000450784: ret 0x27; 
0x000000000044e94a: ret 0x27ed; 
0x00000000004323f6: ret 0x280f; 
0x0000000000446eaa: ret 0x2874; 
0x00000000004271d5: ret 0x2876; 
0x000000000041b1ba: ret 0x287; 
0x0000000000499438: ret 0x28f5; 
0x0000000000468a8d: ret 0x2941; 
0x00000000004116ed: ret 0x2948; 
0x000000000049c1ea: ret 0x2949; 
0x0000000000433b61: ret 0x294c; 
0x00000000004137fb: ret 0x294d; 
0x000000000041f84b: ret 0x2a75; 
0x000000000041138f: ret 0x2b48; 
0x000000000044757e: ret 0x2b49; 
0x0000000000415afa: ret 0x2b55; 
0x0000000000416ed2: ret 0x2b66; 
0x000000000043f4e2: ret 0x2b77; 
0x0000000000412b5a: ret 0x2ba5; 
0x000000000043f187: ret 0x2c76; 
0x0000000000400943: ret 0x2c; 
0x0000000000401402: ret 0x2cc2; 
0x00000000004012ee: ret 0x2cc3; 
0x000000000046af75: ret 0x2e66; 
0x0000000000466154: ret 0x2e; 
0x0000000000447465: ret 0x3101; 
0x0000000000403b16: ret 0x3145; 
0x0000000000478782: ret 0x314c; 
0x00000000004b04e8: ret 0x33; 
0x00000000004042c1: ret 0x348; 
0x000000000044d4bb: ret 0x349; 
0x0000000000481438: ret 0x357e; 
0x00000000004bc0ba: ret 0x3827; 
0x0000000000495b82: ret 0x3840; 
0x0000000000410daf: ret 0x3841; 
0x000000000044171f: ret 0x3845; 
0x00000000004271c5: ret 0x3876; 
0x0000000000444849: ret 0x3880; 
0x00000000004160cb: ret 0x389; 
0x00000000004ba746: ret 0x38ae; 
0x000000000048c1b6: ret 0x38b; 
0x0000000000450d91: ret 0x3948; 
0x000000000041e132: ret 0x3949; 
0x000000000044e2d6: ret 0x394c; 
0x0000000000453768: ret 0x394d; 
0x000000000043e902: ret 0x3a01; 
0x0000000000430c2b: ret 0x3a73; 
0x000000000044dde3: ret 0x3a76; 
0x0000000000443ab1: ret 0x3b01; 
0x000000000046fc1a: ret 0x3bba; 
0x000000000040e9fe: ret 0x3ce8; 
0x00000000004745af: ret 0x3d01; 
0x0000000000446ca5: ret 0x3d83; 
0x0000000000499027: ret 0x3e8; 
0x0000000000472ad2: ret 0x3e9; 
0x000000000049bf6f: ret 0x3ee9; 
0x000000000041a1e2: ret 0x4007; 
0x000000000046f106: ret 0x408d; 
0x0000000000480a9f: ret 0x40bf; 
0x0000000000447090: ret 0x4101; 
0x0000000000455d80: ret 0x4108; 
0x0000000000457848: ret 0x4110; 
0x000000000047791c: ret 0x412f; 
0x0000000000447e5e: ret 0x41c3; 
0x000000000042f5ba: ret 0x4266; 
0x0000000000470c32: ret 0x428d; 
0x000000000044ddda: ret 0x4372; 
0x000000000044e86b: ret 0x4389; 
0x0000000000446f4f: ret 0x438b; 
0x00000000004123e3: ret 0x4401; 
0x0000000000456307: ret 0x440f; 
0x000000000046cdb7: ret 0x4410; 
0x0000000000495671: ret 0x448d; 
0x0000000000482335: ret 0x44c6; 
0x000000000046acf2: ret 0x4502; 
0x00000000004762a8: ret 0x4574; 
0x000000000046b838: ret 0x45f6; 
0x00000000004a2931: ret 0x46; 
0x00000000004bb244: ret 0x474c; 
0x000000000049e353: ret 0x4776; 
0x000000000045b173: ret 0x47e9; 
0x0000000000402d1a: ret 0x4801; 
0x000000000042d831: ret 0x4802; 
0x000000000042d90d: ret 0x4803; 
0x00000000004046a0: ret 0x4804; 
0x000000000042d8dd: ret 0x4805; 
0x000000000042d8c5: ret 0x4806; 
0x00000000004248f3: ret 0x4808; 
0x0000000000450344: ret 0x4809; 
0x0000000000459634: ret 0x480f; 
0x000000000041c099: ret 0x4810; 
0x000000000044dcb0: ret 0x4811; 
0x0000000000453db2: ret 0x481e; 
0x000000000041bfdb: ret 0x4820; 
0x000000000045c87c: ret 0x482d; 
0x000000000044585f: ret 0x4830; 
0x0000000000401702: ret 0x4838; 
0x000000000042f4c6: ret 0x4840; 
0x0000000000424a08: ret 0x48c3; 
0x000000000046fdcd: ret 0x48d; 
0x000000000047c504: ret 0x48e9; 
0x00000000004bca06: ret 0x48f; 
0x00000000004033ae: ret 0x4901; 
0x000000000044d093: ret 0x4904; 
0x000000000042db4e: ret 0x4906; 
0x0000000000457eb8: ret 0x4908; 
0x0000000000472b69: ret 0x4909; 
0x0000000000423c62: ret 0x4910; 
0x0000000000421ed6: ret 0x4920; 
0x0000000000420e50: ret 0x4930; 
0x0000000000498574: ret 0x4976; 
0x0000000000404b64: ret 0x4a1f; 
0x00000000004753d2: ret 0x4b30; 
0x000000000045902b: ret 0x4b40; 
0x000000000047d900: ret 0x4b74; 
0x000000000040497e: ret 0x4b7c; 
0x00000000004b8618: ret 0x4b7d; 
0x00000000004be0f0: ret 0x4bd7; 
0x0000000000405d25: ret 0x4c01; 
0x000000000042da91: ret 0x4c02; 
0x000000000044db9f: ret 0x4c04; 
0x00000000004687d5: ret 0x4c08; 
0x00000000004534a6: ret 0x4c40; 
0x0000000000449b60: ret 0x4c88; 
0x0000000000447f71: ret 0x4d02; 
0x00000000004bc467: ret 0x4e27; 
0x0000000000472387: ret 0x4eb; 
0x0000000000445d18: ret 0x4ee9; 
0x0000000000446b6e: ret 0x4f74; 
0x0000000000430c14: ret 0x5173; 
0x0000000000450143: ret 0x527e; 
0x000000000046b5b8: ret 0x5389; 
0x0000000000468827: ret 0x53e8; 
0x000000000045bd6b: ret 0x53e9; 
0x000000000049590d: ret 0x5438; 
0x000000000048beb6: ret 0x5488; 
0x000000000044e15a: ret 0x5489; 
0x000000000045b9c3: ret 0x548b; 
0x00000000004ba6cc: ret 0x5508; 
0x000000000040592f: ret 0x5525; 
0x0000000000422342: ret 0x575; 
0x000000000047660b: ret 0x576; 
0x00000000004bc998: ret 0x5803; 
0x000000000040ebbb: ret 0x589; 
0x00000000004ba3a0: ret 0x591c; 
0x00000000004bb107: ret 0x5ae4; 
0x000000000044ae51: ret 0x5c77; 
0x00000000004bce32: ret 0x62c1; 
0x000000000045d233: ret 0x6348; 
0x0000000000412a02: ret 0x6349; 
0x0000000000440597: ret 0x63e8; 
0x000000000049b1a0: ret 0x65e9; 
0x0000000000482707: ret 0x6610; 
0x0000000000427152: ret 0x6620; 
0x0000000000424a55: ret 0x66c3; 
0x0000000000447d8f: ret 0x6720; 
0x000000000047d1de: ret 0x674; 
0x00000000004ba3bf: ret 0x67b2; 
0x000000000049768d: ret 0x6876; 
0x000000000049e552: ret 0x68e8; 
0x000000000043fead: ret 0x6b8; 
0x000000000049c247: ret 0x6be9; 
0x0000000000443ec5: ret 0x6c; 
0x000000000045062d: ret 0x6de8; 
0x00000000004bcfc1: ret 0x6f9; 
0x0000000000433bae: ret 0x7280; 
0x000000000047ebb9: ret 0x728d; 
0x000000000043f34b: ret 0x72e9; 
0x0000000000473687: ret 0x73e8; 
0x0000000000416611: ret 0x7401; 
0x000000000041fa3f: ret 0x7402; 
0x000000000041cbb5: ret 0x7404; 
0x0000000000411f03: ret 0x7408; 
0x0000000000401220: ret 0x7420; 
0x0000000000459a02: ret 0x7450; 
0x000000000043ce69: ret 0x7501; 
0x000000000043ce76: ret 0x7502; 
0x0000000000427909: ret 0x7504; 
0x000000000043e2a4: ret 0x7508; 
0x000000000043ce3b: ret 0x7510; 
0x0000000000427904: ret 0x7518; 
0x000000000043ce48: ret 0x7520; 
0x000000000043ce55: ret 0x7540; 
0x000000000047bb51: ret 0x758b; 
0x000000000042fb02: ret 0x7677; 
0x0000000000447572: ret 0x774; 
0x000000000048a49a: ret 0x777; 
0x000000000049c03b: ret 0x77e9; 
0x000000000041c4ca: ret 0x7ae9; 
0x00000000004480ba: ret 0x7b8; 
0x00000000004270e2: ret 0x7e20; 
0x000000000042285c: ret 0x7f10; 
0x00000000004626b6: ret 0x7f3c; 
0x0000000000423a39: ret 0x8000; 
0x000000000047238c: ret 0x8001; 
0x000000000047b2c5: ret 0x8005; 
0x0000000000497546: ret 0x8008; 
0x0000000000472d72: ret 0x8010; 
0x000000000047c3fe: ret 0x8018; 
0x0000000000478cc8: ret 0x804; 
0x0000000000433ece: ret 0x80; 
0x0000000000475010: ret 0x8116; 
0x0000000000469d2b: ret 0x8148; 
0x000000000045b984: ret 0x8166; 
0x000000000041af9c: ret 0x820f; 
0x0000000000404480: ret 0x8301; 
0x0000000000465581: ret 0x8308; 
0x000000000042f6d0: ret 0x830f; 
0x000000000043f210: ret 0x8341; 
0x0000000000402e00: ret 0x8348; 
0x000000000041c593: ret 0x8349; 
0x0000000000499be9: ret 0x8364; 
0x0000000000473bf2: ret 0x8401; 
0x0000000000412350: ret 0x840; 
0x0000000000418819: ret 0x840f; 
0x000000000043f2b0: ret 0x8444; 
0x000000000049c1b7: ret 0x8445; 
0x000000000045d225: ret 0x8504; 
0x000000000046b446: ret 0x8508; 
0x0000000000413f12: ret 0x850f; 
0x0000000000470e95: ret 0x8545; 
0x000000000041a2b2: ret 0x8548; 
0x0000000000450155: ret 0x854d; 
0x000000000045a7fc: ret 0x858b; 
0x000000000045809d: ret 0x85c6; 
0x00000000004560ea: ret 0x85c7; 
0x000000000049b438: ret 0x85e9; 
0x0000000000400efe: ret 0x860f; 
0x0000000000450aa5: ret 0x870f; 
0x00000000004b9cde: ret 0x871e; 
0x00000000004626bd: ret 0x875; 
0x00000000004271f5: ret 0x876; 
0x000000000044fb3a: ret 0x87e9; 
0x0000000000482330: ret 0x87e; 
0x0000000000498334: ret 0x87f6; 
0x00000000004490a1: ret 0x8804; 
0x000000000045eef2: ret 0x880f; 
0x000000000044fff7: ret 0x8840; 
0x00000000004484a2: ret 0x8901; 
0x0000000000463bf4: ret 0x8908; 
0x0000000000400fa6: ret 0x890f; 
0x000000000044e25f: ret 0x8941; 
0x0000000000400669: ret 0x8944; 
0x00000000004123cb: ret 0x8945; 
0x000000000040367d: ret 0x8948; 
0x000000000041117d: ret 0x8949; 
0x0000000000403ee7: ret 0x894c; 
0x000000000044706f: ret 0x894d; 
0x000000000048ad6b: ret 0x894e; 
0x000000000046632c: ret 0x89e9; 
0x000000000046af3a: ret 0x8b04; 
0x00000000004738e3: ret 0x8b05; 
0x00000000004bc50e: ret 0x8b36; 
0x00000000004503ca: ret 0x8b41; 
0x0000000000401874: ret 0x8b48; 
0x0000000000411b46: ret 0x8b49; 
0x000000000048acee: ret 0x8b4a; 
0x00000000004126a0: ret 0x8b4c; 
0x0000000000480b2e: ret 0x8b; 
0x0000000000476863: ret 0x8be9; 
0x0000000000463155: ret 0x8d01; 
0x00000000004533ca: ret 0x8d04; 
0x000000000045a530: ret 0x8d0f; 
0x000000000040d73f: ret 0x8d48; 
0x0000000000403696: ret 0x8d49; 
0x0000000000464a1e: ret 0x8d4a; 
0x0000000000412656: ret 0x8d4c; 
0x000000000041d8e4: ret 0x8d4e; 
0x0000000000411691: ret 0x8e0f; 
0x000000000040189e: ret 0x900; 
0x0000000000422485: ret 0x90c3; 
0x000000000041362b: ret 0x938b; 
0x00000000004686e0: ret 0x940f; 
0x0000000000482f86: ret 0x941; 
0x000000000046e1d8: ret 0x94c; 
0x0000000000403706: ret 0x94e8; 
0x000000000048c64f: ret 0x950f; 
0x0000000000456849: ret 0x9522; 
0x0000000000403d28: ret 0x953d; 
0x00000000004bb333: ret 0x9576; 
0x0000000000464490: ret 0x9589; 
0x000000000041c4e1: ret 0x976; 
0x00000000004bcf99: ret 0x990e; 
0x00000000004814b9: ret 0x9e74; 
0x00000000004115a8: ret 0x9e9; 
0x000000000047c909: ret 0x9f75; 
0x000000000048a0f0: ret 0xa074; 
0x00000000004bb023: ret 0xa514; 
0x00000000004aeb20: ret 0xa; 
0x00000000004bb4a7: ret 0xac65; 
0x000000000049e80e: ret 0xace8; 
0x00000000004bbe64: ret 0xacfc; 
0x000000000043f336: ret 0xaf0f; 
0x000000000041ce9f: ret 0xb48b; 
0x0000000000402c69: ret 0xb60f; 
0x0000000000470c4b: ret 0xb70f; 
0x0000000000460b89: ret 0xb848; 
0x0000000000450195: ret 0xb87f; 
0x000000000043fde0: ret 0xb8; 
0x00000000004277d7: ret 0xb8c3; 
0x000000000046fb82: ret 0xb8e9; 
0x0000000000467572: ret 0xb908; 
0x00000000004bb36e: ret 0xb9b9; 
0x000000000045706d: ret 0xbb41; 
0x000000000048a5c2: ret 0xbc41; 
0x000000000049c5d5: ret 0xbc80; 
0x000000000046163e: ret 0xbd83; 
0x0000000000467760: ret 0xbe08; 
0x00000000004bb0c4: ret 0xbe57; 
0x000000000045ba58: ret 0xbf07; 
0x0000000000466b41: ret 0xbf08; 
0x00000000004238f9: ret 0xc000; 
0x000000000048778e: ret 0xc001; 
0x0000000000487742: ret 0xc002; 
0x0000000000413e53: ret 0xc031; 
0x0000000000474150: ret 0xc084; 
0x0000000000426fa0: ret 0xc085; 
0x0000000000444206: ret 0xc141; 
0x000000000040ed46: ret 0xc148; 
0x0000000000412f3a: ret 0xc1; 
0x000000000046fced: ret 0xc269; 
0x000000000045bf26: ret 0xc283; 
0x0000000000430ae4: ret 0xc2b2; 
0x000000000043f551: ret 0xc35b; 
0x0000000000440537: ret 0xc3e8; 
0x000000000046002a: ret 0xc4; 
0x00000000004b9162: ret 0xc4c3; 
0x00000000004bac78: ret 0xc4ff; 
0x0000000000433c48: ret 0xc580; 
0x000000000049c1ed: ret 0xc5e9; 
0x0000000000465360: ret 0xc6e9; 
0x0000000000422381: ret 0xc6eb; 
0x0000000000439340: ret 0xc748; 
0x000000000041d145: ret 0xc789; 
0x00000000004160bc: ret 0xc883; 
0x0000000000497193: ret 0xc931; 
0x0000000000444689: ret 0xc985; 
0x00000000004248c1: ret 0xc9ff; 
0x0000000000463eed: ret 0xcb73; 
0x00000000004ba70a: ret 0xcca7; 
0x00000000004bc7ed: ret 0xcd11; 
0x000000000041e540: ret 0xce31; 
0x0000000000405134: ret 0xce80; 
0x00000000004637c5: ret 0xce83; 
0x0000000000419d5b: ret 0xcf31; 
0x000000000045a46b: ret 0xcfe8; 
0x0000000000495a9a: ret 0xd021; 
0x00000000004435af: ret 0xd029; 
0x0000000000433abc: ret 0xd073; 
0x000000000040593e: ret 0xd089; 
0x000000000046c9f5: ret 0xd108; 
0x00000000004696f9: ret 0xd129; 
0x000000000049ae06: ret 0xd284; 
0x00000000004685f7: ret 0xd309; 
0x000000000048189b: ret 0xd348; 
0x000000000045bf43: ret 0xd529; 
0x0000000000469770: ret 0xd629; 
0x000000000046fa3d: ret 0xd721; 
0x0000000000469682: ret 0xd729; 
0x000000000043f33b: ret 0xd889; 
0x00000000004801b3: ret 0xd8f7; 
0x00000000004bc285: ret 0xd8f; 
0x0000000000400806: ret 0xd975; 
0x00000000004aef20: ret 0xd; 
0x0000000000495860: ret 0xda38; 
0x0000000000410375: ret 0xdaf7; 
0x00000000004495d1: ret 0xdb85; 
0x00000000004bc366: ret 0xdcd9; 
0x00000000004732d0: ret 0xdd72; 
0x00000000004bb2e2: ret 0xde5d; 
0x0000000000411c85: ret 0xde74; 
0x000000000049bdb2: ret 0xde89; 
0x00000000004ba071: ret 0xde9e; 
0x0000000000469b48: ret 0xdee9; 
0x00000000004237b9: ret 0xe000; 
0x000000000043cdf9: ret 0xe074; 
0x00000000004480ad: ret 0xe077; 
0x000000000044431b: ret 0xe083; 
0x000000000044c633: ret 0xe183; 
0x0000000000445462: ret 0xe1eb; 
0x000000000044853b: ret 0xe277; 
0x000000000040df7c: ret 0xe281; 
0x00000000004010a2: ret 0xe283; 
0x0000000000473817: ret 0xe3e8; 
0x000000000046eb80: ret 0xe575; 
0x00000000004187f7: ret 0xe675; 
0x0000000000458a73: ret 0xe680; 
0x00000000004bc486: ret 0xe71f; 
0x00000000004016f8: ret 0xe72; 
0x0000000000453900: ret 0xe783; 
0x0000000000476ac5: ret 0xe874; 
0x000000000045a3e5: ret 0xe87f; 
0x0000000000455c82: ret 0xe883; 
0x0000000000476eae: ret 0xe8c0; 
0x00000000004007be: ret 0xe8c1; 
0x00000000004266f3: ret 0xe901; 
0x0000000000402f32: ret 0xe902; 
0x000000000044b019: ret 0xe904; 
0x0000000000495491: ret 0xe907; 
0x0000000000424956: ret 0xe908; 
0x000000000042a576: ret 0xe910; 
0x0000000000453ea9: ret 0xe920; 
0x0000000000420ef3: ret 0xe96e; 
0x00000000004ba7e7: ret 0xe970; 
0x00000000004813fc: ret 0xe974; 
0x000000000042109f: ret 0xe977; 
0x000000000043f4da: ret 0xea81; 
0x00000000004589f7: ret 0xeac0; 
0x0000000000400f81: ret 0xeac1; 
0x0000000000423c86: ret 0xeb10; 
0x0000000000420ebf: ret 0xeb5b; 
0x000000000040e9ba: ret 0xeb72; 
0x00000000004025c8: ret 0xebe8; 
0x00000000004bcf98: ret 0xec2; 
0x00000000004993c9: ret 0xec75; 
0x00000000004791f8: ret 0xed75; 
0x000000000044c18e: ret 0xed85; 
0x0000000000446fef: ret 0xee75; 
0x000000000045a54c: ret 0xee8; 
0x00000000004bcc3a: ret 0xef32; 
0x0000000000419886: ret 0xef75; 
0x0000000000423679: ret 0xf000; 
0x000000000040d908: ret 0xf001; 
0x0000000000402c1a: ret 0xf01; 
0x000000000041b266: ret 0xf02; 
0x000000000041cb29: ret 0xf04; 
0x000000000045e07e: ret 0xf08; 
0x000000000045af07: ret 0xf0e9; 
0x0000000000473d56: ret 0xf0eb; 
0x000000000041c253: ret 0xf0f; 
0x0000000000494364: ret 0xf10; 
0x000000000046a965: ret 0xf229; 
0x0000000000451026: ret 0xf301; 
0x000000000045e0ba: ret 0xf40; 
0x0000000000470e1d: ret 0xf43; 
0x000000000049c261: ret 0xf45; 
0x000000000046ca1a: ret 0xf48; 
0x000000000045b4c4: ret 0xf4c; 
0x0000000000402f3b: ret 0xf4e9; 
0x00000000004734ce: ret 0xf631; 
0x0000000000422629: ret 0xf66; 
0x000000000049954a: ret 0xf66d; 
0x000000000043f0fc: ret 0xf685; 
0x000000000041ce83: ret 0xf710; 
0x0000000000427c7c: ret 0xf748; 
0x000000000046e620: ret 0xf749; 
0x000000000048b7d5: ret 0xf74; 
0x00000000004a0d3a: ret 0xf7e3; 
0x0000000000423539: ret 0xf800; 
0x0000000000433b6e: ret 0xf80; 
0x00000000004b9f50: ret 0xf869; 
0x00000000004a45b4: ret 0xf91f; 
0x00000000004048ba: ret 0xf929; 
0x000000000045a909: ret 0xfa80; 
0x0000000000483396: ret 0xfa81; 
0x0000000000405952: ret 0xfac1; 
0x000000000045f89a: ret 0xfbf4; 
0x000000000046ddda: ret 0xfbf5; 
0x00000000004233f9: ret 0xfc00; 
0x00000000004848d6: ret 0xfc01; 
0x000000000048488a: ret 0xfc02; 
0x000000000044062a: ret 0xfc3; 
0x000000000047dbea: ret 0xfc62; 
0x00000000004748da: ret 0xfcbb; 
0x0000000000452b9a: ret 0xfcc1; 
0x0000000000448180: ret 0xfd83; 
0x000000000044133a: ret 0xfddd; 
0x0000000000402bf0: ret 0xfdf; 
0x00000000004232b9: ret 0xfe00; 
0x0000000000497d4a: ret 0xfe3f; 
0x000000000043f233: ret 0xfe83; 
0x0000000000433a8e: ret 0xfec5; 
0x0000000000423179: ret 0xff00; 
0x0000000000435a81: ret 0xff2; 
0x000000000042f4ea: ret 0xff3; 
0x0000000000423039: ret 0xff80; 
0x00000000004816d6: ret 0xff81; 
0x000000000048168a: ret 0xff82; 
0x000000000040c67a: ret 0xff99; 
0x0000000000469ce0: ret 0xff9f; 
0x0000000000453492: ret 0xffb0; 
0x0000000000400540: ret 0xffb8; 
0x0000000000487677: ret 0xffbf; 
0x0000000000422ef9: ret 0xffc0; 
0x0000000000420a5a: ret 0xffcd; 
0x00000000004003e6: ret 0xffd0; 
0x00000000004221be: ret 0xffdf; 
0x0000000000422db9: ret 0xffe0; 
0x0000000000408a2a: ret 0xffe2; 
0x000000000049ee3a: ret 0xffe7; 
0x00000000004427ca: ret 0xffe8; 
0x00000000004426ca: ret 0xffe9; 
0x000000000045abac: ret 0xffee; 
0x000000000040f26c: ret 0xffef; 
0x000000000040dece: ret 0xfff0; 
0x0000000000422b39: ret 0xfff8; 
0x0000000000455870: ret 0xfffa; 
0x00000000004401e9: ret 0xfffb; 
0x00000000004229f9: ret 0xfffc; 
0x0000000000442dfe: ret 0xfffd; 
0x00000000004056e8: ret 0xfffe; 
0x0000000000409d4e: ret 0xffff; 
0x0000000000402ad2: ret 1; 
0x000000000041ae2a: ret 2; 
0x00000000004308a2: ret 3; 
0x00000000004272a9: ret 4; 
0x000000000041b776: ret 5; 
0x0000000000419ed0: ret 6; 
0x00000000004b2fc4: ret 7; 
0x000000000040a82e: ret 8; 
0x000000000043d8aa: ret 9; 
0x00000000004002e1: ret; 
0x0000000000458842: retf 0; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x0000000000433b0d: retf 0x1073; mov rcx, rdx; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000497538: retf 0x1b8; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8008; 
0x0000000000443b32: retf 0x1f8; sbb eax, 0; leave; ret; 
0x000000000040edd3: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000481171: retf 0x6c; add rsp, 0x48; ret; 
0x000000000048c767: retf 0x6c; add rsp, 8; ret; 
0x000000000044ee30: retf 0x6c; ret; 
0x00000000004ba742: retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000048bb16: retf 0x77f; call 0x8b470; leave; ret; 
0x0000000000445dab: retf 0x8348; ret; 
0x0000000000423dd5: retf 0x8349; ret 0x7f10; 
0x000000000042a7d7: retf 0x8349; ret 0xf10; 
0x000000000048d97f: retf 0x850f; call qword ptr [rsi]; 
0x00000000004616e0: retf 0x8948; lea eax, [rax + 0x48ffffef]; mov esi, dword ptr [rbp - 0x1090]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004542a2: retf 0x8948; lea eax, [rax + 0x4cfffffb]; mov esi, ebx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045012e: retf 0x894c; out dx, eax; xor eax, eax; syscall; 
0x0000000000447e79: retf 0x894d; ret; 
0x000000000049741c: retf 0x8b48; xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000043c99d: retf 0x8d4c; sbb eax, 0x680eb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37d: retf 0x8d4c; sbb eax, 0x6868b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048be8a: retf 0x948; ret 0x8948; 
0x0000000000495ac2: retf 0x9e0f; ret 0xe8c1; 
0x000000000041754a: retf 0xdfeb; nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000424b60: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046dfa1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000430686: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a0d32: retf 0xf7e3; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7e3; 
0x000000000046daa2: retf 0xf940; jmp qword ptr [rsi + 0x2e]; 
0x000000000046fdc8: retf 0xfac1; add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000412b82: retf 0xffb4; jmp qword ptr [rsi + 0x2e]; 
0x000000000045e333: retf 0xfff8; jmp qword ptr [rsi + 0xf]; 
0x00000000004bea85: retf 0xfffd; hlt; ret 0xfffd; 
0x0000000000472a33: retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x00000000004bea81: retf 0xfffd; push -0x36; std; push rsp; ret 0xfffd; 
0x0000000000411713: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000041e20a: retf 1; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x0000000000491472: retf; adc eax, 0x83480000; ret 0xe910; 
0x00000000004439ad: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000492672: retf; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004a4491: retf; clc; jmp qword ptr [rax]; 
0x00000000004082ba: retf; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004014e1: retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000400a71: retf; int1; add byte ptr [rax], al; nop; pop rbp; ret; 
0x000000000041db6d: retf; jb 0x1db48; mov byte ptr [r8 + rbx], r9b; mov rax, r8; pop rbx; ret; 
0x000000000043fd8c: retf; lea rsi, [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000048c212: retf; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x0000000000491d72: retf; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000492072: retf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004ba6cb: retf; ret 0x5508; 
0x00000000004558a1: retf; ret 0xfffa; 
0x00000000004a42d4: rol al, 0xf8; call qword ptr [rax - 0x6f00073f]; ret 0xfff8; 
0x00000000004a4300: rol bh, 0xf8; call qword ptr [rax - 0x38]; 
0x000000000042f4c2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000046df32: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000415109: rol byte ptr [rax + rax*8 - 0x7d7af1], 0xff; dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x00000000004b29c0: rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000448e28: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x00000000004827d6: rol byte ptr [rax - 0x6df0f506], 1; ret 0xb60f; 
0x00000000004a4ac4: rol byte ptr [rax - 0x7f1f0007], 0xf9; inc dword ptr [rax]; cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x000000000049cd93: rol byte ptr [rax], 0; add byte ptr [rax - 0x3f], cl; call 0x481056dd; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000041611f: rol byte ptr [rax], 0; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000461345: rol byte ptr [rax], 0; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000042fa0d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049cc96: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000040fed4: rol byte ptr [rax], 1; add byte ptr [rax], al; mov eax, esi; pop rbx; ret; 
0x0000000000450b8b: rol byte ptr [rax], 1; add byte ptr [rax], al; ret; 
0x0000000000460b7d: rol byte ptr [rax], cl; add byte ptr [rbx + rcx*4 - 0x73], al; sub bh, 0xff; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000042ded2: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000464d41: rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x000000000047d6be: rol byte ptr [rbp - 0x77], 0xc7; mov r14, r9; je 0x7d6dc; mov qword ptr [rbp - 0xa8], rdx; mov edi, 0x6cc140; call rax; 
0x000000000048a1db: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000443e66: rol byte ptr [rbx - 0x24e6fe08], 0x83; ret; 
0x0000000000417a48: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000046eef2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000043f4d1: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000044d78b: rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x000000000041bcc1: rol byte ptr [rcx + rcx*4 + 5], 0x97; cli; sub al, byte ptr [rax]; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000441a47: rol byte ptr [rcx - 0x77], 0xdd; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000004573cc: rol byte ptr [rcx - 0x7cb7ffff], 0xf8; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x000000000049cbd7: rol byte ptr [rcx - 0xa], 0x81; mov dword ptr [rax], 0x75400000; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x000000000046eed2: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000047d06c: rol byte ptr [rcx], 0x48; mov dword ptr [rbx + 0x10], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c936: rol byte ptr [rcx], 0x48; mov dword ptr [rip + 0x2514d1], eax; add rsp, 8; ret; 
0x000000000043f2e6: rol byte ptr [rcx], 0x5d; pop r12; pop r13; ret; 
0x000000000044f2a2: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000414c43: rol byte ptr [rcx], 0xe9; sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043f347: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x000000000043f332: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x0000000000433abe: rol byte ptr [rcx], 1; ret 0x148; 
0x000000000046ef32: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000046eee2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000445cc6: rol byte ptr [rdx], 0x50; call rbx; 
0x00000000004c3610: rol byte ptr [rdx], 0xf8; call qword ptr [rdi]; 
0x00000000004967d7: rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x000000000043c33a: rol byte ptr [rsi + 0x63490006], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000046ef22: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000043390d: rol ch, 1; jp 0x33990; jb 0x338f3; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000443ee9: rol cl, 0x6c; add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x00000000004b9160: rol cl, 0xc2; ret; 
0x0000000000470c1f: rol cl, cl; cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000046ee7c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000043cdff: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000427136: rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000400593: rol dword ptr [rbx + rbp*8], 0xcc; mov qword ptr [rdi], rcx; ret; 
0x00000000004ba4ea: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x00000000004310ef: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000426f4c: ror byte ptr [rax + 0x29], 0xc2; jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000424b67: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000411a9a: ror byte ptr [rax + 0x29], 1; ret; 
0x000000000047c449: ror byte ptr [rax + 0x29], cl; ret 0x3949; 
0x000000000044807a: ror byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000443948: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000048abd6: ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x00000000004016f5: ror byte ptr [rax + 0x39], 1; ret 0xe72; 
0x000000000049bb97: ror byte ptr [rax + 0x63], 0x44; test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x0000000000444845: ror byte ptr [rax + 0xf], 0x44; ret 0x3880; 
0x00000000004705a0: ror byte ptr [rax + 0xf], 0xaf; ret; 
0x0000000000443942: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000042ddac: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000427192: ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000004814b6: ror byte ptr [rax + 1], cl; ret 0x9e74; 
0x00000000004813f9: ror byte ptr [rax + 1], cl; ret 0xe974; 
0x0000000000424b64: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000401932: ror byte ptr [rax + 5], 0; or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x2c9750; xor eax, eax; ret; 
0x000000000042e0b5: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004aedc8: ror byte ptr [rax + rax], 0; ret; 
0x0000000000427335: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424aa6: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a45: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000049a3c6: ror byte ptr [rax - 0x3f], 0xe9; adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x000000000045ea2a: ror byte ptr [rax - 0x3f], 1; clc; add cl, byte ptr [rax + 0x29]; ret; 
0x0000000000495438: ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x0000000000427182: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x00000000004271b2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x00000000004271a2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000041ce37: ror byte ptr [rax - 0x73], 0x54; ret; 
0x00000000004392c3: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000004392ff: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000043381b: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f7b8: ror byte ptr [rax - 0x73], 1; call 0x4160391c; pop rbp; pop rbp; ret; 
0x000000000041d14f: ror byte ptr [rax - 0x73], 1; push rsp; ret; 
0x0000000000410cfd: ror byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000410cb3: ror byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000048aa73: ror byte ptr [rax - 0x77], 0x14; ret; 
0x0000000000452ecb: ror byte ptr [rax - 0x77], 0xc7; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x0000000000413a85: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000472a05: ror byte ptr [rax - 0x77], 1; ret 0x8d48; 
0x000000000040df79: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000045a549: ror byte ptr [rax - 0x77], 1; ret 0xee8; 
0x0000000000421dd2: ror byte ptr [rax - 0x77], 1; xor dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x00000000004189ad: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004144d1: ror byte ptr [rax - 0x7b], 0xd2; jne 0x144e0; ret; 
0x000000000048c649: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000410ddf: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004736c0: ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x00000000004222cc: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041dce6: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049a1c5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000470139: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000049d8ce: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048c8a7: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000043381f: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043375f: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f0: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047b80c: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000457bb2: ror byte ptr [rax - 0x7d], 1; ret 0x4820; 
0x000000000047aa82: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000048c08a: ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg esp, eax; ret 0xdaf7; 
0x0000000000410cf6: ror byte ptr [rax - 0x7d], cl; jnp 0x10d33; add byte ptr [rbp - 0x2e], dh; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000047e98d: ror byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000044a613: ror byte ptr [rax - 0x7d], cl; ret 0x4906; 
0x000000000047265e: ror byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000449b54: ror byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000041d34b: ror byte ptr [rax - 0x7f], cl; sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x00000000004c0c20: ror byte ptr [rax - 0xb], 1; call qword ptr [rcx + 2]; 
0x000000000048c33a: ror byte ptr [rax - 9], cl; cmc; pop rbx; pop rbp; pop r12; ret; 
0x00000000004129d9: ror byte ptr [rax], 0x89; mov byte ptr [r8 - 0x75], r9b; or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000049a394: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000043c939: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add qword ptr [r14], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c336: ror byte ptr [rbp + rcx*4 + 0x1d], cl; rol byte ptr [rsi + 0x63490006], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c956: ror byte ptr [rbp + rcx*4 + 0x1d], cl; xor al, byte ptr [rcx + 0x63490006]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000047659d: ror byte ptr [rbp + rcx*4 + 0x4a], cl; dec dword ptr [rcx + 0x29]; ret 0x8d49; 
0x000000000046f433: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000049e34c: ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x0000000000426393: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000448e90: ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x0000000000448089: ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x0000000000448510: ror byte ptr [rcx + 0x39], cl; ret 0x2876; 
0x0000000000452fde: ror byte ptr [rcx + 1], 0xd8; add rsp, 0x20; mov rax, r8; pop rbx; ret; 
0x000000000045d264: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x0000000000403f14: ror byte ptr [rcx + rcx*4 - 0x19], 1; mov eax, 3; syscall; 
0x0000000000403ee4: ror byte ptr [rcx + rcx*4 - 0x3e], cl; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000046fb3b: ror byte ptr [rcx + rcx*4 - 0xa], 0x48; lea edx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000046d5e6: ror byte ptr [rcx + rcx*4 - 0xf], 0x48; lea esi, [rbp + 0x50]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046d7a2: ror byte ptr [rcx + rcx*4 - 0xf], 0x48; lea esi, [rbp + 0x90]; mov rdi, r12; lea rdx, [rsp + 0x18]; lea r9, [rsp + 0x10]; call rbx; 
0x000000000046f743: ror byte ptr [rcx + rcx*4 - 0xf], 0x4c; mov edi, esp; lea rdx, [rsp + 0x20]; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046d8a2: ror byte ptr [rcx + rcx*4 - 1], 0x45; xor eax, eax; call rbx; 
0x000000000046f643: ror byte ptr [rcx + rcx*4 - 7], 0x4c; mov edx, ebp; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000046e1ec: ror byte ptr [rcx + riz - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000045097e: ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x00000000004117a5: ror byte ptr [rcx - 0x75], 1; adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 - 9], r9b; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000047af35: ror byte ptr [rcx - 0x77], 1; add ch, cl; ret 0xfffd; 
0x000000000043f184: ror byte ptr [rcx - 0x77], 1; ret 0x2c76; 
0x000000000041269a: ror byte ptr [rcx - 0x77], 4; and al, 0x74; ret 0x8b4c; 
0x0000000000427ab9: ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x00000000004509a2: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000045014b: ror byte ptr [rdi], 0x1f; add byte ptr [rcx + 0x29], cl; ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x000000000044384c: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000470c48: ror byte ptr [rdi], 0x48; ret 0xb70f; 
0x0000000000440f57: ror byte ptr [rdi], 0x49; adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x000000000041eefd: ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446b04: ror byte ptr [rdi], 0x84; cmc; add dword ptr [rax], eax; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000446a05: ror byte ptr [rdi], 0x84; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000473947: ror byte ptr [rdi], 0x84; push rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046a59b: ror byte ptr [rdi], 0x84; ret; 
0x00000000004478dc: ror byte ptr [rdi], 0x84; test dword ptr [rdx], 0x83480000; ret; 
0x00000000004205ac: ror byte ptr [rdi], 0x85; add r8b, byte ptr [r8]; add byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg esp, eax; ret 0x8548; 
0x00000000004392ca: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000427138: ror byte ptr [rdi], 0x85; mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000045aba9: ror byte ptr [rdi], 0x85; ret 0xffee; 
0x0000000000439306: ror byte ptr [rdi], 0x85; ret; 
0x0000000000458bb7: ror byte ptr [rdi], 0x8a; ret 8; 
0x00000000004893d8: ror byte ptr [rdi], 0x8f; ret; 
0x00000000004435ac: ror byte ptr [rdi], 0x92; ret 0xd029; 
0x00000000004961cc: ror byte ptr [rdi], 0x94; ret 0x3840; 
0x000000000049590a: ror byte ptr [rdi], 0x94; ret 0x5438; 
0x000000000041c4c7: ror byte ptr [rdi], 0x94; ret 0x7ae9; 
0x00000000004626b3: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x000000000048c64c: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004685f4: ror byte ptr [rdi], 0x94; ret 0xd309; 
0x000000000049585d: ror byte ptr [rdi], 0x94; ret 0xda38; 
0x0000000000410cca: ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x00000000004736bd: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x0000000000450978: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x000000000046fb7f: ror byte ptr [rdi], 0x95; ret 0xb8e9; 
0x000000000046fa3a: ror byte ptr [rdi], 0x95; ret 0xd721; 
0x0000000000410372: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x000000000046f66e: ror byte ptr [rdi], 0x95; ret 0xe883; 
0x000000000049a1c2: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000048c8a4: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000410dac: ror byte ptr [rdi], 0x9f; ret 0x3841; 
0x0000000000495435: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000045097b: ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x000000000041a2d9: ror byte ptr [rdi], 1; test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044d6fe: ror byte ptr [rdi], 1; test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000476225: ror byte ptr [rdi], cl; test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046de8b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x0000000000424a4b: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000495b7f: ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x3840; 
0x0000000000495c93: ror byte ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x0000000000458bb6: ror byte ptr cs:[rdi], 0x8a; ret 8; 
0x00000000004c1e40: ror dh, 0xf5; call qword ptr [rbx]; 
0x000000000046e0ea: ror dword ptr [rax + 0x21], 0xce; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004117b3: ror dword ptr [rax + 0x29], cl; ret; 
0x0000000000495abf: ror dword ptr [rax + 0x39], 1; retf 0x9e0f; ret 0xe8c1; 
0x000000000046ddd4: ror dword ptr [rax + 0xf], 1; shr eax, 1; ret 0xfbf5; 
0x0000000000424b59: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000047b85c: ror dword ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004415bb: ror dword ptr [rax - 0x75], cl; and al, 8; mov rdi, rax; call 0x1f100; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048ba63: ror dword ptr [rax - 0x77], 0x34; ret 0x8348; 
0x000000000046fe6b: ror dword ptr [rax - 0x77], 0x4f; and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000045b170: ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x0000000000433b12: ror dword ptr [rax - 0x77], 1; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004415f6: ror dword ptr [rax - 0x77], cl; out dx, eax; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004980e1: ror dword ptr [rax - 0x77], cl; ret; 
0x0000000000410368: ror dword ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x60]; 
0x0000000000424aa2: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a41: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000040ef38: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000405722: ror dword ptr [rax - 0x7d], cl; ret; 
0x0000000000417a43: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000450152: ror dword ptr [rcx + 1], 1; ret 0x854d; 
0x000000000042d9b5: ror dword ptr [rcx + rcx*4 + 0xf], 1; pop rbx; ret; 
0x0000000000442f2e: ror dword ptr [rcx + rcx*4 - 0x11], cl; call 0x1f100; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000441335: ror dword ptr [rcx + rcx*4 - 0x11], cl; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000046be16: ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000443180: ror dword ptr [rcx + rcx*4 - 0x19], cl; call 0x1f100; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004411f3: ror dword ptr [rcx + rcx*4 - 1], cl; call 0x1f100; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000441200: ror dword ptr [rcx + rcx*4 - 9], cl; call 0x1f100; mov rdi, qword ptr [r13]; call rbx; 
0x000000000048ad68: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042d9af: ror dword ptr [rcx - 0x2d], 0xe1; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000043cdf7: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000430278: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430984: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430756: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x00000000004306d6: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000430a14: ror dword ptr [rdi], 0x85; je 0x30a1b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043050b: ror dword ptr [rdi], 0x85; jno 0x30517; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004305d3: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430250: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000470b3b: ror dword ptr [rdi], 0x94; ret; 
0x0000000000495432: ror dword ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x0000000000481898: ror dword ptr [rdi], 0x95; ret 0xd348; 
0x000000000049a3c3: ror dword ptr [rdi], 0xb7; ror byte ptr [rax - 0x3f], 0xe9; adc byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0xf48; 
0x000000000040ee1a: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040edd2: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040ee19: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040edd1: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004c8e6d: sahf; add byte ptr [rax], al; fmul st(7); cld; call qword ptr [rdi + 9]; 
0x0000000000448084: sahf; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x2176; 
0x000000000041ee9e: sahf; fcos; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004ba592: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x000000000042c97e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048b0b1: sahf; ret 0x148; 
0x00000000004715ea: sahf; ret 0x25; 
0x00000000004ba745: sahf; ret 0x38ae; 
0x00000000004522a0: sahf; ret 0x8348; 
0x0000000000495ac4: sahf; ret 0xe8c1; 
0x000000000049c273: sahf; ret 0xf45; 
0x000000000047eb6e: sahf; sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x00000000004a43cc: sal al, 1; clc; jmp qword ptr [rax - 0x1d]; 
0x0000000000417a4e: sal bh, 0xd8; ret; 
0x000000000043f629: sal bh, 0xf1; pop rbx; mov eax, eax; ret; 
0x0000000000423a37: sal bh, 1; ret 0x8000; 
0x00000000004238f7: sal bh, 1; ret 0xc000; 
0x00000000004237b7: sal bh, 1; ret 0xe000; 
0x0000000000423677: sal bh, 1; ret 0xf000; 
0x0000000000423537: sal bh, 1; ret 0xf800; 
0x00000000004233f7: sal bh, 1; ret 0xfc00; 
0x00000000004232b7: sal bh, 1; ret 0xfe00; 
0x0000000000423177: sal bh, 1; ret 0xff00; 
0x0000000000423037: sal bh, 1; ret 0xff80; 
0x0000000000422ef7: sal bh, 1; ret 0xffc0; 
0x0000000000422db7: sal bh, 1; ret 0xffe0; 
0x0000000000422c77: sal bh, 1; ret 0xfff0; 
0x0000000000422b37: sal bh, 1; ret 0xfff8; 
0x00000000004229f7: sal bh, 1; ret 0xfffc; 
0x00000000004228b7: sal bh, 1; ret 0xfffe; 
0x000000000045b1c4: sal bh, cl; int1; add eax, r8d; ret; 
0x000000000043ee47: sal bl, 0xaa; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000046f88f: sal bl, 1; ret; 
0x000000000040debd: sal byte ptr [rax + rdi*2 + 0x4c], 0x8d; push 0x40b60f09; or dword ptr [rax + rax*8 - 0x38b7938c], eax; ret 0xfff0; 
0x000000000048c5c5: sal byte ptr [rax + rdx + 0x5b], 0x31; test byte ptr [rbx + 0x2413f33d], 0; jmp rax; 
0x000000000043ce01: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000480eba: sal byte ptr [rbp + 0x1b], 0x48; cmp dword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x000000000047d36f: sal byte ptr [rbp + 0x1e], 0x48; mov dword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x000000000042011b: sal byte ptr [rbp + 0x2a], 0x48; mov eax, dword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x00000000004163a6: sal byte ptr [rbp + 0x30], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000046c5bb: sal byte ptr [rbp + 0x35], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000046c773: sal byte ptr [rbp + 0x3d], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000042def2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000047bf62: sal byte ptr [rbp + 0x4b], 0x89; ret; 
0x0000000000427178: sal byte ptr [rbp + 0x55], 0x48; xor eax, eax; ret; 
0x000000000049eb43: sal byte ptr [rbp + 0xa], 0xf3; ret; 
0x000000000046d558: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000497eb2: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000049eb28: sal byte ptr [rbp + 5], 0xf3; ret; 
0x00000000004599fe: sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000443961: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000004144d4: sal byte ptr [rbp + 9], cl; ret; 
0x0000000000441a3e: sal byte ptr [rbp + rax*2 + 0x48], 0x8b; xor byte ptr [rax - 0x75], cl; jge 0x41a08; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000046ee78: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000443971: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x00000000004175a5: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x000000000043eb30: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x000000000042f66b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x00000000004967d0: sal byte ptr [rbp - 0x24], cl; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000403f12: sal byte ptr [rbp - 0x30], 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x000000000047ca5f: sal byte ptr [rbp - 0x32], 0xf3; ret; 
0x000000000047139f: sal byte ptr [rbp - 0x74], 0xe9; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000049cdf2: sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000049821d: sal byte ptr [rbx + riz - 0x7d], 0xe8; add dword ptr [rbp + rcx*4 + 0x74], ecx; ret; 
0x0000000000401a52: sal byte ptr [rcx + rcx + 0x31], 0xf6; mov edi, 1; call rax; 
0x000000000047ed3a: sal byte ptr [rcx + rcx + 0x48], 0x8b; mov ebp, 0xffffff78; call rax; 
0x0000000000402598: sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0x80; call rax; 
0x0000000000480a7a: sal byte ptr [rcx + rdx + 0x48], 0x89; je 0x80aa5; or byte ptr [rdi + 0x6cc140], bh; call rax; 
0x0000000000424aac: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000004783ce: sal byte ptr [rcx + rdx + 0x4c], cl; mov dword ptr [rsp], eax; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x00000000004738fe: sal byte ptr [rcx + rdx - 0x77], cl; shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000445cbe: sal byte ptr [rcx], 0xc9; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x0000000000443946: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000043f609: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044dd1d: sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x4a6dc8]; mov eax, ecx; syscall; 
0x0000000000415606: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000441e52: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x3d; call rax; 
0x000000000048c760: sal byte ptr [rdi + rax + 0x48], 0xc7; add al, ah; retf 0x6c; add rsp, 8; ret; 
0x000000000046aa0d: sal byte ptr [rdi + rdi*4 + 0x48], 0x8d; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004405e3: sal byte ptr [rdx + rbx + 0x48], 0x63; test byte ptr [rax + 0x63], -1; mov eax, 0x48; syscall; 
0x000000000047e8a1: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rbp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000424963: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000046defb: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x0000000000430aff: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430c20: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042dda7: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000040dec9: sal byte ptr [rsp + rbp*2 + 0x48], 0xc7; ret 0xfff0; 
0x0000000000403cc1: sal byte ptr [rsp + rbx + 0x4d], 0x63; in al, 0x4c; mov edi, esp; mov eax, 3; syscall; 
0x000000000048c991: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000476021: sal byte ptr [rsp + riz*2 + 0x48], 0x83; ret; 
0x000000000048a47f: sal dword ptr [rbp + rsi*2 + 0x4c], 0x89; ret 0xf749; 
0x000000000048c79a: sal dword ptr [rcx], 1; shr cl, cl; mov rbx, r15; jmp qword ptr [rsi + 0x2e]; 
0x000000000044237a: sal dword ptr [rcx], cl; sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x00000000004004c4: sal dword ptr [rdx + rdx*4 - 0x15], 0xbd; add rsp, 0x608; pop rbx; pop rbp; ret; 
0x0000000000430a5f: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430b9f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047e457: sal dword ptr [rdx - 0x1a], 1; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000426396: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004c1f31: sal ebp, cl; jmp rdx; 
0x0000000000433b15: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000049ea7b: sal edx, 1; and al, byte ptr [rax]; mov qword ptr [rip + 0x22f2ca], rsi; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000430a5e: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430b9e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a4211: sar al, 0xff; adc ecx, eax; clc; jmp rcx; 
0x00000000004a41e1: sar al, 0xff; jo 0xa41a7; clc; jmp qword ptr [rax - 0x3e]; 
0x00000000004a4255: sar al, 0xff; mov cl, 0xf8; inc esi; ret 0xfff8; 
0x00000000004a42d5: sar al, 0xff; nop; sar eax, 0xff; nop; ret 0xfff8; 
0x00000000004a4201: sar al, 0xff; sar eax, 0xff; xor dl, al; clc; jmp qword ptr [rax]; 
0x00000000004a4295: sar al, 0xff; stosd dword ptr [rdi], eax; sar eax, 0xff; stosd dword ptr [rdi], eax; ret 0xfff8; 
0x00000000004a449d: sar al, 1; call qword ptr [rax]; 
0x00000000004a449d: sar al, 1; call qword ptr [rax]; sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x00000000004a44a1: sar al, cl; jmp qword ptr [rax - 0x2d]; 
0x0000000000427c80: sar bh, 0xff; push qword ptr [rbp + 0x1a]; and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x000000000048bdfa: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004a3f60: sar bh, 1; idiv edi; movabs al, byte ptr [0x40fff80170fff800]; add bh, al; call qword ptr [rax]; 
0x00000000004686da: sar bl, 0xff; dec dword ptr [rax + 0x39]; ret 0x940f; 
0x0000000000466a9c: sar bl, 0xff; dec dword ptr [rax - 0x77]; ret 0x348; 
0x00000000004670e3: sar bl, 0xff; dec dword ptr [rcx + 0x29]; fmul dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000463eb3: sar bl, 0xff; inc esi; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000455af3: sar bl, 0xff; jmp qword ptr [rax]; 
0x0000000000450656: sar byte ptr [rax + 0x4a], 0; mov eax, ecx; syscall; 
0x0000000000412c63: sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000048bfec: sar byte ptr [rax + 9], 0xf3; ret; 
0x000000000044ac57: sar byte ptr [rax + rax*4], 0xf; test dword ptr [rcx], ecx; add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000044afd5: sar byte ptr [rax + rax*4], 0xf; test dword ptr [rdi], ebp; add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x000000000044ac73: sar byte ptr [rax + rax*4], 0xf; test edi, esi; add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000044b011: sar byte ptr [rax + rax*4], 0xf; xchg esp, eax; ret 0x8348; 
0x0000000000440eea: sar byte ptr [rax - 0x3b], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004a4a70: sar byte ptr [rbx - 7], 1; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004bf3e0: sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x000000000044545d: sar byte ptr [rcx], cl; ret; 
0x000000000047d962: sar byte ptr [rdi + 0x4b74dc], 0xe8; ret; 
0x000000000047d9ec: sar byte ptr [rdi + 0x4be238], 0x83; ret; 
0x000000000040135e: sar byte ptr [rdi - 0x7f], 0xd; pop rsi; ret; 
0x00000000004a4a98: sar byte ptr [rdi - 7], 0xff; sar byte ptr [rdi - 7], 1; jmp rax; 
0x00000000004a4a9c: sar byte ptr [rdi - 7], 1; jmp rax; 
0x000000000047952b: sar byte ptr [rdx + 1], cl; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004a4a40: sar byte ptr [rdx - 7], 0xff; sar byte ptr [rdx - 7], 1; jmp rax; 
0x00000000004a4a44: sar byte ptr [rdx - 7], 1; jmp rax; 
0x0000000000422475: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004bafbd: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x00000000004015c6: sar byte ptr [rsi + 0x20000], cl; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x0000000000401555: sar byte ptr [rsi + 0x20001], cl; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x0000000000416124: sar byte ptr [rsi + 0x49], cl; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000044237c: sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x000000000044e721: sar byte ptr [rsi + 8], 0x83; call 0x848702b; pop rbx; ret; 
0x00000000004bb0df: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004be9cd: sar ch, 0xff; cmp al, al; std; push rsp; ret 0xfffd; 
0x00000000004be9d1: sar ch, 0xff; hlt; ret 0xfffd; 
0x0000000000436f27: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000414c46: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000443069: sar ch, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x000000000044305c: sar ch, 0xff; mov rdi, qword ptr [r14]; call rbx; 
0x000000000040abd6: sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046cfea: sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000414377: sar dword ptr [rax + 2], 1; syscall; 
0x00000000004368e5: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004368ec: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x368f0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004368f3: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x368f8; ret; 
0x000000000040053e: sar dword ptr [rcx], 1; ret 0xffb8; 
0x000000000040301e: sar dword ptr [rdi + 0x6ccfe0], cl; call rbx; 
0x0000000000480e69: sar dword ptr [rdi + rdi*8 - 1], cl; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004420ed: sar dword ptr [rdx + 1], cl; mov esi, 1; mov rdi, r12; call rbx; 
0x000000000044236b: sar dword ptr [rdx + 1], cl; mov esi, 2; mov rdi, r12; call rbx; 
0x0000000000441fb9: sar dword ptr [rdx + 2], cl; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000004420de: sar dword ptr [rdx + 2], cl; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000441f31: sar dword ptr [rdx + 3], cl; mov esi, 1; mov rdi, r14; call rbx; 
0x0000000000441faa: sar dword ptr [rdx + 3], cl; mov esi, 2; mov rdi, r14; call rbx; 
0x00000000004a4259: sar eax, 0xff; mov dl, 0xf8; inc esi; ret; 
0x00000000004a42d9: sar eax, 0xff; nop; ret 0xfff8; 
0x00000000004a4299: sar eax, 0xff; stosd dword ptr [rdi], eax; ret 0xfff8; 
0x00000000004a4205: sar eax, 0xff; xor dl, al; clc; jmp qword ptr [rax]; 
0x0000000000400701: sar eax, 1; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x000000000046d2cc: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x0000000000411af4: sar eax, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x00000000004607ba: sar eax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000496bdb: sar eax, 3; pop r13; pop r14; pop r15; ret; 
0x0000000000427331: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000004174b2: sar ebp, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442f34: sar ebp, 0xff; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000442f26: sar ebp, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000442f19: sar ebp, 0xff; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004be9bd: sar ebp, 0xff; sub cl, al; std; call rax; 
0x00000000004bebc5: sar ebp, cl; jmp rsp; 
0x00000000004bae43: sar ecx, 1; jnp 0xbae00; ret; 
0x000000000047eb6f: sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x00000000004602e4: sar edi, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047f2bd: sar edi, cl; call qword ptr [rbx - 0xa]; 
0x000000000040d654: sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000045de0e: sar edx, 2; call qword ptr [rax + 0x38]; 
0x0000000000427337: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424aa8: sar edx, cl; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a47: sar edx, cl; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000046def7: sar edx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de87: sar edx, cl; test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004602e3: sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046d2cb: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000411af3: sar r8, 2; mov qword ptr [rsp + 0x20], rax; call qword ptr [rbx + 0x30]; 
0x0000000000400700: sar rax, 1; pop rbx; mov qword ptr [rip + 0x2cb9a5], rax; pop rbp; pop r12; ret; 
0x00000000004607b9: sar rax, 2; mov rdi, r14; mov rdx, rax; mov rax, qword ptr [r14 + 0xd8]; call qword ptr [rax + 0x38]; 
0x0000000000496bda: sar rax, 3; pop r13; pop r14; pop r15; ret; 
0x0000000000427330: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000045de0d: sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000427336: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000424aa7: sar rdx, cl; test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a46: sar rdx, cl; test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000046def6: sar rdx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de86: sar rdx, cl; test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004c0c1d: sbb al, 0; add al, dl; cmc; call qword ptr [rcx + 2]; 
0x00000000004c0d68: sbb al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; sbb eax, 0x4fc00000; cmc; call qword ptr [rsi]; 
0x00000000004bf078: sbb al, 0; add byte ptr [rax], al; mov esp, 0xd8000000; sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004bf0c8: sbb al, 0; add byte ptr [rax], al; or al, 1; add byte ptr [rax], al; sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x00000000004c76d8: sbb al, 0; add byte ptr [rax], al; sbb al, 0x87; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x0000000000441071: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000441071: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x00000000004c13f0: sbb al, 0; add byte ptr [rax], al; xor al, 0x24; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004c1cdc: sbb al, 0x2d; add byte ptr [rax], al; mov al, 0xc0; cmc; call qword ptr [rcx]; 
0x0000000000400c7f: sbb al, 0x48; mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x00000000004c5fdc: sbb al, 0x70; add byte ptr [rax], al; push rax; js 0xc5fdd; call qword ptr [rcx]; 
0x0000000000419c93: sbb al, 0x74; add eax, 0x5c415d5b; ret; 
0x00000000004c76dc: sbb al, 0x87; add byte ptr [rax], al; add byte ptr [rax - 5], dl; jmp qword ptr [rdx]; 
0x000000000047059e: sbb al, 0x89; ror byte ptr [rax + 0xf], 0xaf; ret; 
0x000000000047a55c: sbb al, 0xb; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004005cd: sbb al, 0xe2; add byte ptr [r9 + 0xe], dil; mov rsi, rax; repe cmpsb byte ptr [rsi], byte ptr [rdi]; jne 0x5de; ret; 
0x00000000004c39f9: sbb al, 0xf8; call qword ptr [rax]; 
0x00000000004a470d: sbb al, 0xf9; call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x00000000004a46d1: sbb al, 0xf9; call qword ptr [rax]; 
0x00000000004a4511: sbb al, 0xf9; call qword ptr [rsi + 0x23]; 
0x00000000004a4511: sbb al, 0xf9; call qword ptr [rsi + 0x23]; stc; jmp rsi; 
0x00000000004a4591: sbb al, 0xf9; inc dword ptr [rdx + 0x23]; stc; call rdx; 
0x00000000004a4591: sbb al, 0xf9; inc dword ptr [rdx + 0x23]; stc; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x0000000000476313: sbb al, 0xf; mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x7cb7eb8c], eax; ret; 
0x00000000004bf3dc: sbb al, 4; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004980d2: sbb al, byte ptr [rbx + 0xa3c0fe0]; jne 0x9808d; nop word ptr [rax + rax]; call rbx; 
0x00000000004618f5: sbb al, byte ptr [rcx - 0x7d]; ret; 
0x000000000040fd61: sbb al, ch; cmp dword ptr [rax], ebp; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x000000000048bf61: sbb al, ch; or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000004a0d30: sbb al, ch; retf 0xf7e3; dec dword ptr [rax - 0x77]; fucompi st(0); ret 0xf7e3; 
0x000000000045d401: sbb al, ch; test eax, 0x48ffff84; add esp, 0xd8; ret; 
0x00000000004c3941: sbb bh, al; call qword ptr [rbx]; 
0x00000000004a3ff5: sbb bh, al; jmp qword ptr [rax]; 
0x0000000000410083: sbb bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000480a95: sbb bh, byte ptr [rax]; test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x00000000004c2278: sbb bh, ch; cmc; call qword ptr [rax + 2]; 
0x00000000004be2f5: sbb bh, ch; jmp qword ptr [rax]; 
0x00000000004a4715: sbb bh, cl; call rax; 
0x000000000049c7c4: sbb bh, dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000454352: sbb bl, al; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b9bc5: sbb bl, byte ptr [rsi]; ret; 
0x000000000041607b: sbb bl, ch; fldenv [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000043ccfa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c64a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccbb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c60b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043ccf9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000043c649: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043ccba: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000043c60a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000049e348: sbb byte ptr [r13 + 0x31], r8b; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x0000000000480dd4: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000415cb0: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049f73b: sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000041656e: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041184a: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000048c646: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000416e5d: sbb byte ptr [rax + 0x39], cl; and byte ptr [rsi + 0x1d], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047a1ab: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000480dd5: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000418213: sbb byte ptr [rax + 0x5bd88948], dl; pop rbp; pop r12; ret; 
0x000000000043fb2a: sbb byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000049e342: sbb byte ptr [rax + rax], al; add byte ptr [rbx + rcx*4 + 0x4d], cl; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x00000000004485fe: sbb byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000448f61: sbb byte ptr [rax - 0x73], cl; push rsp; and al, 0x48; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000449351: sbb byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000040edcc: sbb byte ptr [rax - 0x75], cl; jo 0xedf1; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040edf4: sbb byte ptr [rax - 0x75], cl; js 0xee19; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000415c79: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000415ca9: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000046bdfa: sbb byte ptr [rax - 0x77], cl; call 0x5c481b5d; pop r13; ret; 
0x000000000044e84a: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000004014dc: sbb byte ptr [rax - 0x77], cl; fucompi st(0); retf; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000412e84: sbb byte ptr [rax - 0x77], cl; jae 0x12e99; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000415cb1: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004115a1: sbb byte ptr [rax - 0x77], cl; sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000041ef97: sbb byte ptr [rax - 0x77], cl; xor dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x000000000042d826: sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000042d82e: sbb byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000044a6f4: sbb byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000049f73c: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000042d82d: sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000041656f: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004403b1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004403b1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000445298: sbb byte ptr [rax], bh; test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x000000000049a229: sbb byte ptr [rax], bh; test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049e349: sbb byte ptr [rbp + 0x31], al; ror byte ptr [rbp - 0x75], 0x51; or byte ptr [rbp + 0x39], cl; ret 0x4776; 
0x000000000046fb38: sbb byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0xa], 0x48; lea edx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x0000000000411db2: sbb byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x20; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046d5f5: sbb byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; call rbx; 
0x0000000000445c39: sbb byte ptr [rbp - 0x77], cl; int1; call rbx; 
0x00000000004c13f8: sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x0000000000417dc3: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000042dc71: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000411c69: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000427cdf: sbb byte ptr [rbx + rcx*4 + 0x5e], cl; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000004175e7: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000046d13b: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000047a0c9: sbb byte ptr [rcx + 3], cl; add al, 0x24; call rax; 
0x0000000000491084: sbb byte ptr [rcx + rax], dh; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041c689: sbb byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x10; call rax; 
0x0000000000411b67: sbb byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x10; lea r8, [rsp + 0x30]; lea rsi, [rsp + 0x20]; call qword ptr [rbx + 8]; 
0x000000000046d6d3: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000417da2: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041dce3: sbb byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041db73: sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x0000000000411b43: sbb byte ptr [rcx - 0x77], cl; ret 0x8b49; 
0x000000000041184b: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x000000000046d727: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000048c647: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000044fff1: sbb byte ptr [rdi + 0x4a], ch; add byte ptr [rax - 0x77], cl; ret 0x8840; 
0x0000000000411dab: sbb byte ptr [rdi + 0x50], dl; mov rax, qword ptr [rsp + 0x18]; lea r8, [rsp + 0x20]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004c7908: sbb byte ptr [rdi - 5], dl; call rsi; 
0x00000000004a44f8: sbb byte ptr [rdi], 0xf9; call qword ptr [rax]; 
0x00000000004bf1c8: sbb byte ptr [rdi], ah; hlt; jmp qword ptr [rbx]; 
0x000000000041f6c2: sbb byte ptr [rdi], cl; test edi, ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004c3940: sbb byte ptr [rdx], 0xf8; call qword ptr [rbx]; 
0x000000000045d47b: sbb byte ptr [rdx], al; add byte ptr [rax], al; movsxd rbx, edx; mov rdx, rbx; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x38]; 
0x000000000047ca13: sbb byte ptr [rip + 0x8750000], ah; mov rax, qword ptr [rip + 0x2513f0]; ret; 
0x00000000004c5cd8: sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rax + rbp*2], 0xa; ret; 
0x00000000004c0e40: sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rsi + riz*2], 0xa; ret; 
0x00000000004c0a30: sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rdx + rax], -0xc; ret; 
0x00000000004c3370: sbb byte ptr [rsi + 0x200e4403], al; add dword ptr [rsp + rbp*2], 0xa; ret; 
0x00000000004bf0d0: sbb byte ptr [rsi], 0xf4; jmp qword ptr [rdi]; 
0x000000000049a624: sbb ch, ah; std; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004be2f1: sbb ch, bh; inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x00000000004a4478: sbb cl, 0xf8; call rax; 
0x00000000004a491d: sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a491d: sbb cl, bh; call qword ptr [rax + 0x18]; stc; call rax; 
0x00000000004a47a1: sbb cl, bh; call qword ptr [rdx]; 
0x00000000004a4921: sbb cl, bh; call rax; 
0x00000000004a48dd: sbb cl, bh; jmp qword ptr [rax + 0x18]; 
0x00000000004a48e1: sbb cl, bh; jmp rax; 
0x00000000004405e5: sbb cl, byte ptr [rax + 0x63]; test byte ptr [rax + 0x63], -1; mov eax, 0x48; syscall; 
0x0000000000413cd5: sbb cl, byte ptr [rax - 0x39]; ret 0xffd0; 
0x000000000042462d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042b0cd: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042421d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000423d29: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000424539: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042cd1a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042c53a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c92a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c14a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bc2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b40d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x0000000000423fad: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042abed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x00000000004242ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000424609: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c2e9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004246d9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b74d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042af2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a70d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b8ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042448d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423c7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042407d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042c7da: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bffa: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042d10a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042455d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000423d4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042aa4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423def: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042414d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042ab83: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b883: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b3a3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c6db: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042d00b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004243bd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042bbc3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aec3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a9e3: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b6e3: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c82b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c04b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423e13: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004bf081: sbb dh, ah; call qword ptr [rsi + 1]; 
0x00000000004bf061: sbb dh, ah; call qword ptr [rsi]; 
0x0000000000440582: sbb dh, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x000000000041436e: sbb dh, dh; je 0x14375; je 0x143e0; movsxd rdx, ecx; mov eax, 2; syscall; 
0x00000000004be2f4: sbb dil, bpl; jmp qword ptr [rax]; 
0x000000000048f748: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041a2d6: sbb dword ptr [rax + 0x39], ecx; ror byte ptr [rdi], 1; test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000460623: sbb dword ptr [rax - 0x74b40000], edi; popfq; sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x000000000049d62c: sbb dword ptr [rax - 0x80], eax; call qword ptr [rax]; 
0x000000000048f6d1: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048f749: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004438d4: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004438d4: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000454148: sbb dword ptr [rbx - 0x4a743], eax; call qword ptr [rax]; 
0x0000000000419eb2: sbb dword ptr [rbx], ebp; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000419ea7: sbb dword ptr [rbx], ebp; add byte ptr [rbp + rcx*4 + 0x34], cl; sub eax, dword ptr [rbx + rcx*4 + 0x2d]; sbb qword ptr [r11], r13; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004bc47d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000043e807: sbb eax, -1; ret; 
0x00000000004141e0: sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000455fed: sbb eax, 0; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], r9d; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000499f98: sbb eax, 0; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000413e42: sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000413d9a: sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; mov rbp, r12; call qword ptr [rax + 0x18]; 
0x0000000000414021: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000416c4c: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000410d00: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000415e0e: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000415f7e: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000454f5a: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, r8; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046b737: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041356b: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000453fbd: sbb eax, 0; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x4a8]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413e99: sbb eax, 0; add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000414538: sbb eax, 0; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000456632: sbb eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x4e0]; mov rdi, rbx; mov rdx, qword ptr [rbp - 0x4e8]; call qword ptr [rax + 0x38]; 
0x0000000000413a8b: sbb eax, 0; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000410fce: sbb eax, 0; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000410cb6: sbb eax, 0; add byte ptr [rax], al; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000458532: sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413f8f: sbb eax, 0; add byte ptr [rax], al; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000412d39: sbb eax, 0; add byte ptr [rax], al; shr byte ptr [rdx + rcx*2], 0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x0000000000453b7c: sbb eax, 0; add byte ptr [rax], al; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000415600: sbb eax, 0; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004100c2: sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000443b35: sbb eax, 0; leave; ret; 
0x00000000004a450d: sbb eax, 0x1ce6fff9; stc; call qword ptr [rsi + 0x23]; 
0x00000000004a4709: sbb eax, 0x1cf0fff9; stc; call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x00000000004a4589: sbb eax, 0x1d2cfff9; stc; call rdx; 
0x00000000004a4509: sbb eax, 0x1d50fff9; stc; jmp rsi; 
0x000000000049f6c0: sbb eax, 0x22debb; jne 0x9f6a8; pop rbx; ret; 
0x00000000004362e5: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004362e0: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000045ee13: sbb eax, 0x48000000; mov edi, ecx; call qword ptr [rax + 0x38]; 
0x00000000004415df: sbb eax, 0x49fffddb; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004c0d6d: sbb eax, 0x4fc00000; cmc; call qword ptr [rsi]; 
0x00000000004c0d8d: sbb eax, 0x50000000; cmc; jmp qword ptr [rcx]; 
0x0000000000414427: sbb eax, 0x63488a74; std; mov eax, 3; syscall; 
0x0000000000432594: sbb eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004438e3: sbb eax, 0x66c30000; nop dword ptr [rax + rax]; mov eax, 0x63; syscall; 
0x000000000043ca17: sbb eax, 0x68074; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9e2: sbb eax, 0x680a9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9b6: sbb eax, 0x680d5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c9a0: sbb eax, 0x680eb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c97e: sbb eax, 0x6810d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c959: sbb eax, 0x68132; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c93c: sbb eax, 0x6814f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c8e4: sbb eax, 0x681a7; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3f7: sbb eax, 0x68614; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c3c2: sbb eax, 0x68649; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c396: sbb eax, 0x68675; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c380: sbb eax, 0x6868b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c35e: sbb eax, 0x686ad; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c339: sbb eax, 0x686d2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c31c: sbb eax, 0x686ef; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2c4: sbb eax, 0x68747; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000435933: sbb eax, 0x6eb98; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355d5: sbb eax, 0x6eef6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435780: sbb eax, 0x6ef8b; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435455: sbb eax, 0x6f076; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435518: sbb eax, 0x6f1f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352d5: sbb eax, 0x6f1f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435398: sbb eax, 0x6f373; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435155: sbb eax, 0x6f376; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435218: sbb eax, 0x6f4f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fd5: sbb eax, 0x6f4f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435099: sbb eax, 0x6f672; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e55: sbb eax, 0x6f676; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f18: sbb eax, 0x6f7f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cd5: sbb eax, 0x6f7f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d98: sbb eax, 0x6f973; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b55: sbb eax, 0x6f976; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c18: sbb eax, 0x6faf3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349d5: sbb eax, 0x6faf6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a98: sbb eax, 0x6fc73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434855: sbb eax, 0x6fc76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434918: sbb eax, 0x6fdf3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346d5: sbb eax, 0x6fdf6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434798: sbb eax, 0x6ff73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434555: sbb eax, 0x6ff76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434618: sbb eax, 0x700f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343d5: sbb eax, 0x700f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434498: sbb eax, 0x70273; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434255: sbb eax, 0x70276; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434318: sbb eax, 0x703f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340d5: sbb eax, 0x703f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f5c: sbb eax, 0x7056f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434198: sbb eax, 0x70573; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434018: sbb eax, 0x706f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d5d: sbb eax, 0x7076e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433edb: sbb eax, 0x70830; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7f: sbb eax, 0x7098c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433826: sbb eax, 0x70ae5; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433769: sbb eax, 0x70ba2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043367e: sbb eax, 0x70c8d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335b3: sbb eax, 0x70d58; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432592: sbb eax, 0x71d79; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004324f4: sbb eax, 0x71e17; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432442: sbb eax, 0x71ec9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004323a4: sbb eax, 0x71f67; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004322f2: sbb eax, 0x72019; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432254: sbb eax, 0x720b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004321a2: sbb eax, 0x72169; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432104: sbb eax, 0x72207; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432052: sbb eax, 0x722b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431fb4: sbb eax, 0x72357; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431f02: sbb eax, 0x72409; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431e64: sbb eax, 0x724a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431db2: sbb eax, 0x72559; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431d14: sbb eax, 0x725f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c62: sbb eax, 0x726a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bc9: sbb eax, 0x72742; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b12: sbb eax, 0x727f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a74: sbb eax, 0x72897; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004319c2: sbb eax, 0x72949; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431924: sbb eax, 0x729e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431872: sbb eax, 0x72a99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004317d4: sbb eax, 0x72b37; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431722: sbb eax, 0x72be9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431684: sbb eax, 0x72c87; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004315d2: sbb eax, 0x72d39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431534: sbb eax, 0x72dd7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431482: sbb eax, 0x72e89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004313e4: sbb eax, 0x72f27; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431332: sbb eax, 0x72fd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431294: sbb eax, 0x73077; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004311e8: sbb eax, 0x73123; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f7: sbb eax, 0x73214; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431038: sbb eax, 0x732d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fce: sbb eax, 0x7333d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edf: sbb eax, 0x7342c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e1a: sbb eax, 0x734f1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f5: sbb eax, 0x740d6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043007b: sbb eax, 0x74150; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffec: sbb eax, 0x741df; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fde1: sbb eax, 0x743ea; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcaf: sbb eax, 0x7451c; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe9: sbb eax, 0x745e2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb6b: sbb eax, 0x74660; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fad4: sbb eax, 0x746f7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d8: sbb eax, 0x748f3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a7: sbb eax, 0x74a24; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f698: sbb eax, 0x74b33; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000411ff4: sbb eax, 0x8c48348; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004003c9: sbb eax, 0xbe000000; sub byte ptr [rbx], ch; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x0000000000400401: sbb eax, 0xbe000000; sub r9d, dword ptr [rdx]; mov rdi, rbx; mov eax, 1; syscall; 
0x0000000000416e63: sbb eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000046d20a: sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000048f4f1: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048f569: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049bb91: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000048a1da: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000049d401: sbb eax, eax; cmp qword ptr [rsi + 8], rcx; cmova eax, edx; ret; 
0x000000000043e805: sbb eax, eax; sbb eax, -1; ret; 
0x000000000044103e: sbb ebp, 0x45; add byte ptr [rax], al; ret; 
0x0000000000495609: sbb ebx, 0x89000001; ret; 
0x000000000047c92c: sbb ecx, dword ptr [rax - 0x75]; add eax, 0x2514dc; add rax, 1; mov qword ptr [rip + 0x2514d1], rax; add rsp, 8; ret; 
0x000000000045852f: sbb ecx, dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045d230: sbb ecx, dword ptr [rax - 0x77]; ret 0x6348; 
0x0000000000480ebc: sbb ecx, dword ptr [rax - 0x7d]; jl 0x80ee5; sub byte ptr [rax], al; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000447d97: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x0000000000400b37: sbb ecx, dword ptr [rdx]; call 0x109b0; nop; leave; ret; 
0x00000000004a4799: sbb ecx, edi; call qword ptr [rdx]; 
0x00000000004a4919: sbb ecx, edi; call rax; 
0x00000000004a4919: sbb ecx, edi; call rax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x00000000004a4915: sbb ecx, edi; jmp qword ptr [rax + 0x19]; 
0x00000000004a48d9: sbb ecx, edi; jmp rax; 
0x00000000004a48d5: sbb ecx, edi; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x000000000048bb91: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000401531: sbb esi, ecx; add eax, dword ptr [rax]; cmp eax, -1; je 0x1623; add rsp, 0x98; ret; 
0x000000000047ca73: sbb esi, esp; and al, 0; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x251387]; mov qword ptr [rsi], rax; ret; 
0x000000000041449c: sbb esp, dword ptr [rsp + rax*2 - 0x77]; add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000419eb1: sbb qword ptr [r11], r13; add byte ptr [rax + 0x39], cl; ret; 
0x000000000048bb90: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000041607a: sbb r11b, bpl; fldenv [rsi - 0x70]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000426c4d: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042cd6e: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x0000000000433765: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335af: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040199c: scasb al, byte ptr [rdi]; insb byte ptr [rdi], dx; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000450d9c: scasb al, byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x50dc8; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000042ce6d: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048c67b: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi + 0x48c590], bh; mov edi, 0x6cd9c4; call rdx; 
0x00000000004266ed: scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004a41c5: scasd eax, dword ptr [rdi]; clc; call rax; 
0x0000000000410da0: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004116ec: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000043f34a: scasd eax, dword ptr [rdi]; ret 0x72e9; 
0x0000000000421dd8: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000401873: scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x000000000043f335: scasd eax, dword ptr [rdi]; ret 0xaf0f; 
0x0000000000450ca0: scasd eax, dword ptr [rdi]; ret 0xc748; 
0x000000000049a3cd: scasd eax, dword ptr [rdi]; ret 0xf48; 
0x0000000000401754: scasd eax, dword ptr [rdi]; ret; 
0x000000000044394c: setae al; ret; 
0x00000000004736be: sete al; add rsp, 0x48; movzx eax, al; ret; 
0x0000000000450979: sete al; movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000048c8a5: setne al; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a1c3: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000417a4c: setne al; neg eax; ret; 
0x0000000000433764: sfence; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335ae: sfence; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046e5d5: sgdt [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004a4390: shl bl, 1; clc; call qword ptr [rax + 0x70fff8e5]; out 0xf8, eax; call qword ptr [rax - 0x17]; 
0x00000000004a44ec: shl byte ptr [rax], 1; stc; jmp qword ptr [rax + 0x20]; 
0x00000000004a46e0: shl byte ptr [rcx], 0xf9; call qword ptr [rax + 0x21]; 
0x00000000004a46e0: shl byte ptr [rcx], 0xf9; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x0000000000481782: shl byte ptr [rdi + rax*8], 0x22; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004a41a8: shl byte ptr [rdi - 0x570f0008], 1; clc; call qword ptr [rax]; 
0x00000000004a4598: shl byte ptr [rdx], cl; stc; jmp qword ptr [rdx + 0x22]; 
0x00000000004707c7: shl byte ptr [rip + 0x358b4800], 1; call rax; 
0x000000000043f622: shl byte ptr [rip + 0x3ffc0000], cl; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000043f60b: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000047139b: shl byte ptr [rip + 0x75c08500], 1; mov ecx, gs; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000043ea4f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000043cdf3: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000422625: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x0000000000430c0b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000430c22: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000046e187: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000046e176: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000430b01: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004afff0: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000473902: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004bafc8: shl dword ptr [rdi - 5], 1; ret; 
0x000000000043cdeb: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000046e172: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000043e8ab: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x0000000000430b86: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430c3d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000430c26: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000430c0f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042f6cb: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000430ba1: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000426f9c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x0000000000430a61: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040ee11: shl eax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000445511: shl eax, cl; pop rbx; pop rbp; ret; 
0x0000000000424b5b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044550e: shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x000000000048a73c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a6c7: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a696: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d9b1: shl ecx, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000042e0ba: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000047d014: shl edx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x0000000000443ee3: shl edx, 4; mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000048bd3a: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048a73b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a6c6: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a695: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d9b0: shl r9, cl; or r9, r10; mov qword ptr [rdi], r9; pop rbx; ret; 
0x000000000040ee10: shl rax, 5; mov rax, qword ptr [r13 + rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000424b5a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000042e0b9: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000047d013: shl rdx, 4; cmp r8, qword ptr [rsi + rdx]; jae 0x7cfc1; xor eax, eax; ret; 
0x0000000000443ee2: shl rdx, 4; mov rdx, qword ptr [rdx + 0x6cc1c0]; mov qword ptr [rax + 0x10], 0x443ea0; mov qword ptr [rax + 8], rdx; ret; 
0x000000000048bd39: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048a734: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a6c0: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048a733: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048a6bf: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004a43c4: shr ah, 1; clc; call rax; 
0x00000000004478d4: shr al, 0xa6; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000480e67: shr al, 0xd3; jl 0x80e6b; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004104d7: shr al, cl; ret; 
0x000000000040095d: shr bh, 0x4b; add bh, bh; rcr byte ptr [rbp - 0x3a], 1; add eax, 0x2cc1f5; add ebx, esi; ret; 
0x0000000000473517: shr bl, 0xbe; nop word ptr [rax + rax]; mov eax, 0x3f; syscall; 
0x0000000000400f1e: shr bl, 0xd5; mov edx, 0x3c; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000049ce01: shr bl, 0xf6; nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000446f4d: shr bl, cl; ret 0x438b; 
0x00000000004732ef: shr bl, cl; ret; 
0x0000000000400c7d: shr bl, cl; sbb al, 0x48; mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x10]; mov eax, 0; call rdx; 
0x0000000000400c6c: shr bl, cl; sub eax, 0xf8458b48; mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x0000000000426ea8: shr byte ptr [rax + 0x42], 1; add byte ptr [rax + 0x43e820], bh; cmove rax, rdx; ret; 
0x000000000040396e: shr byte ptr [rax + rax + 0x41], 1; call rdi; 
0x0000000000400b4a: shr byte ptr [rax + rax], cl; mov rdi, rax; call 0x1f100; nop; pop rbp; ret; 
0x0000000000470b33: shr byte ptr [rcx - 0x3e], cl; nop; add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], 0x94; ret; 
0x000000000042f66f: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000470c30: shr byte ptr [rcx], cl; ret 0x428d; 
0x000000000044db08: shr byte ptr [rcx], cl; ret; 
0x000000000046f42d: shr byte ptr [rdx + 1], 0x31; leave; xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000412d3e: shr byte ptr [rdx + rcx*2], 0; mov qword ptr [rdx + 0x130], 0x4a29c0; pop rbx; ret; 
0x00000000004be35c: shr byte ptr [rsi], 0xfd; jmp qword ptr [rax]; 
0x000000000045cb64: shr cl, 0x63; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045cbdc: shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000048c79c: shr cl, cl; mov rbx, r15; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fa27: shr cl, cl; ret; 
0x00000000004be368: shr dh, 0xfc; call qword ptr [rax]; 
0x00000000004be368: shr dh, 0xfc; call qword ptr [rax]; int1; cld; jmp qword ptr [rax - 0xd]; 
0x00000000004a43c8: shr dh, 1; clc; call rax; 
0x0000000000443eea: shr dword ptr [rax + rax + 0x48], 0xc7; adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x00000000004797f4: shr dword ptr [rax + rax + 0x5b], 0x5d; jmp rax; 
0x000000000049a236: shr dword ptr [rax + rax - 1], 0xd0; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000480aa2: shr dword ptr [rax + rax - 1], 0xd0; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049a2de: shr dword ptr [rax + rax - 1], 0xd0; add rsp, 0x50; mov rax, rbx; pop rbx; ret; 
0x000000000043ce3e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000427dc9: shr dword ptr [rdx], cl; add dword ptr [rax], eax; ret; 
0x000000000048bed3: shr eax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000454a5c: shr eax, 0x2e; in al, 0xff; dec dword ptr [rax - 0x7d]; jge 0x54a96; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000049cd98: shr eax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043f55a: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000046ddd8: shr eax, 1; ret 0xfbf5; 
0x000000000043f539: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000442b6c: shr ecx, cl; imul edi, ebx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004429ec: shr ecx, cl; imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000442b8c: shr ecx, cl; imul edi, edx, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000442a2c: shr ecx, cl; lodsd eax, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000048a84c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7d1: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a7a0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044298c: shr ecx, cl; pop rsp; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046d3d3: shr edx, 2; sub eax, edx; ret; 
0x00000000004478d3: shr r8b, 0xa6; movabs al, byte ptr [0xf7840fc08548ffff]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048a84b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7d0: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a79f: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000048bed2: shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000049cd97: shr rax, 0x3f; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d3d2: shr rdx, 2; sub eax, edx; ret; 
0x000000000048a844: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7ca: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048a843: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048a7c9: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004af1c1: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000046c987: sldt word ptr [rax]; mov rax, qword ptr [r13 + 0xd8]; mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004bff9d: sldt word ptr [rax]; push rax; or ch, dh; jmp qword ptr [rdi + 1]; 
0x00000000004af1c9: sldt word ptr [rax]; ret; 
0x000000000043e42f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000450773: stc; adc edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000446fdc: stc; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041b7f2: stc; add eax, 0xf6410000; ret 0xf01; 
0x00000000004a4586: stc; call ptr [rbp + rbx + 0x1d2cfff9]; stc; call rdx; 
0x00000000004a493e: stc; call qword ptr [rax + 0x14]; 
0x00000000004a4936: stc; call qword ptr [rax + 0x15]; 
0x00000000004a4936: stc; call qword ptr [rax + 0x15]; stc; call rax; 
0x00000000004a492e: stc; call qword ptr [rax + 0x16]; 
0x00000000004a492e: stc; call qword ptr [rax + 0x16]; stc; call rax; 
0x00000000004a4926: stc; call qword ptr [rax + 0x17]; 
0x00000000004a4926: stc; call qword ptr [rax + 0x17]; stc; call rax; 
0x00000000004a491e: stc; call qword ptr [rax + 0x18]; 
0x00000000004a491e: stc; call qword ptr [rax + 0x18]; stc; call rax; 
0x00000000004a4712: stc; call qword ptr [rax + 0x1a]; 
0x00000000004a4712: stc; call qword ptr [rax + 0x1a]; stc; call rax; 
0x00000000004a450a: stc; call qword ptr [rax + 0x1d]; 
0x00000000004a450a: stc; call qword ptr [rax + 0x1d]; stc; jmp rsi; 
0x00000000004a44da: stc; call qword ptr [rax + 0x20fff922]; and bh, cl; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a46e2: stc; call qword ptr [rax + 0x21]; 
0x00000000004a46e2: stc; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x00000000004a470e: stc; call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x00000000004a4a22: stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a22: stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a5e: stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4a7e: stc; call qword ptr [rax + 0x7c]; 
0x00000000004a4a66: stc; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a4a32: stc; call qword ptr [rax - 0x5f000686]; jp 0xa4a34; push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a44fa: stc; call qword ptr [rax]; 
0x00000000004a4ace: stc; call qword ptr [rax]; cmp ecx, 0xf98120ff; inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4a76: stc; call qword ptr [rax]; jl 0xa4a74; push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004a4a12: stc; call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a45b6: stc; call qword ptr [rdx + 0x1f]; 
0x00000000004a45b6: stc; call qword ptr [rdx + 0x1f]; stc; jmp rdx; 
0x00000000004a45a6: stc; call qword ptr [rdx]; 
0x00000000004a4512: stc; call qword ptr [rsi + 0x23]; 
0x00000000004a4512: stc; call qword ptr [rsi + 0x23]; stc; jmp rsi; 
0x00000000004a4522: stc; call qword ptr [rsi + 0x26fff921]; and ecx, edi; push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004c511a: stc; call qword ptr [rsi + 0x2b]; 
0x00000000004a467e: stc; call qword ptr [rsi + rbx - 7]; jmp rsp; 
0x00000000004a4542: stc; call qword ptr [rsi]; 
0x00000000004a44ea: stc; call rax; 
0x00000000004a493a: stc; call rax; adc al, 0xf9; call qword ptr [rax + 0x14]; 
0x00000000004a44ea: stc; call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004a4a9a: stc; call rax; jg 0xa4a98; jmp rax; 
0x00000000004a4a6e: stc; call rax; jnp 0xa4a6c; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a42: stc; call rax; jp 0xa4a40; jmp rax; 
0x00000000004a491a: stc; call rax; sbb cl, bh; call qword ptr [rax + 0x18]; 
0x000000000046f9c9: stc; call rbx; 
0x00000000004c5412: stc; call rdi; 
0x00000000004a458e: stc; call rdx; 
0x00000000004a4596: stc; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x00000000004a4532: stc; call rsi; 
0x00000000004a465e: stc; call rsp; 
0x00000000004a499d: stc; clc; jmp qword ptr [rax]; 
0x0000000000480eeb: stc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000004a4582: stc; dec dword ptr [rsi + rbx]; stc; call ptr [rbp + rbx + 0x1d2cfff9]; stc; call rdx; 
0x00000000004a3fc9: stc; idiv edi; and bh, 0xf7; jmp qword ptr [rax]; 
0x00000000004a490e: stc; inc dword ptr [rax + 0x12]; stc; jmp rax; 
0x00000000004a4906: stc; inc dword ptr [rax + 0x13]; stc; push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x00000000004a46fe: stc; inc dword ptr [rax + 0x1e]; stc; call rax; 
0x00000000004a44e6: stc; inc dword ptr [rax + 0x21]; stc; call rax; 
0x00000000004a44e6: stc; inc dword ptr [rax + 0x21]; stc; call rax; and cl, bh; jmp qword ptr [rax + 0x20]; 
0x00000000004a4a1e: stc; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a1e: stc; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4a5a: stc; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4ade: stc; inc dword ptr [rax - 0x5f00067f]; cmp ecx, 0xf981c0ff; jmp rax; 
0x00000000004a4af6: stc; inc dword ptr [rax - 0x7e]; stc; jmp qword ptr [rax - 0x7e]; 
0x00000000004a4ad6: stc; inc dword ptr [rax - 0x7f]; stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ab2: stc; inc dword ptr [rax - 0x80]; stc; jmp qword ptr [rax - 0x80]; 
0x00000000004a494e: stc; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x00000000004a4aca: stc; inc dword ptr [rax]; cmp ecx, 0xf98110ff; jmp qword ptr [rax]; 
0x00000000004a4a4e: stc; inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004a4a0e: stc; inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; 
0x00000000004a4a0e: stc; inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; jp 0xa4a10; jmp qword ptr [rax]; 
0x00000000004a4592: stc; inc dword ptr [rdx + 0x23]; stc; call rdx; 
0x00000000004a4592: stc; inc dword ptr [rdx + 0x23]; stc; call rdx; and bh, cl; jmp qword ptr [rdx + 0x22]; 
0x00000000004a465a: stc; inc dword ptr [rdx + riz - 7]; call rsp; 
0x00000000004a47c2: stc; inc dword ptr [rdx]; adc al, 0xf9; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004a452e: stc; inc dword ptr [rsi + 0x20]; stc; call rsi; 
0x00000000004a46de: stc; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a46de: stc; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; stc; jmp rax; 
0x00000000004a4a96: stc; inc eax; jg 0xa4a94; call rax; 
0x00000000004a4a96: stc; inc eax; jg 0xa4a94; call rax; jg 0xa4a98; jmp rax; 
0x00000000004a4a3e: stc; inc eax; jp 0xa4a3c; call rax; 
0x00000000004a4a3e: stc; inc eax; jp 0xa4a3c; call rax; jp 0xa4a40; jmp rax; 
0x00000000004a4506: stc; inc eax; sbb eax, 0x1d50fff9; stc; jmp rsi; 
0x00000000004a48fe: stc; jmp qword ptr [rax + 0x14]; 
0x00000000004a48f6: stc; jmp qword ptr [rax + 0x15]; 
0x00000000004a48ee: stc; jmp qword ptr [rax + 0x16]; 
0x00000000004a48e6: stc; jmp qword ptr [rax + 0x17]; 
0x00000000004a48de: stc; jmp qword ptr [rax + 0x18]; 
0x00000000004a4916: stc; jmp qword ptr [rax + 0x19]; 
0x00000000004a4706: stc; jmp qword ptr [rax + 0x1d]; 
0x00000000004a44ee: stc; jmp qword ptr [rax + 0x20]; 
0x00000000004a4a26: stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a4afa: stc; jmp qword ptr [rax - 0x7e]; 
0x00000000004a4ada: stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004a4ab6: stc; jmp qword ptr [rax - 0x80]; 
0x00000000004a498e: stc; jmp qword ptr [rax - 0xb]; 
0x00000000004a44de: stc; jmp qword ptr [rax]; 
0x00000000004a459a: stc; jmp qword ptr [rdx + 0x22]; 
0x00000000004a45ca: stc; jmp qword ptr [rdx]; 
0x00000000004a4536: stc; jmp qword ptr [rsi + 0x1f]; 
0x00000000004c55fa: stc; jmp qword ptr [rsi + 0x28]; 
0x000000000046daa4: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046f470: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000046681c: stc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4526: stc; jmp qword ptr [rsi]; 
0x00000000004a46e6: stc; jmp rax; 
0x00000000004a45ba: stc; jmp rdx; 
0x00000000004a450e: stc; jmp rsi; 
0x00000000004a4682: stc; jmp rsp; 
0x00000000004bae44: stc; jnp 0xbae00; ret; 
0x00000000004334c8: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c2: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000046f646: stc; mov rdx, r13; mov rdi, r12; lea r9, [rsp + 0x60]; lea rsi, [rsp + 0x30]; call rbx; 
0x000000000047adf8: stc; or cl, byte ptr [rdi]; test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x00000000004a48d6: stc; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x00000000004a490a: stc; push qword ptr [rax + 0x40fff912]; adc bh, cl; jmp rax; 
0x00000000004a44e2: stc; push qword ptr [rax + 0x40fff921]; and ecx, edi; call rax; 
0x00000000004a4a62: stc; push qword ptr [rax + 0x7b]; stc; call qword ptr [rax - 0x4f000685]; jnp 0xa4a68; call rax; 
0x00000000004a4a92: stc; push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004a4a3a: stc; push qword ptr [rax - 0x3f000686]; jp 0xa4a3c; call rax; 
0x00000000004a4a8a: stc; push qword ptr [rax - 0x5f000684]; jg 0xa4a8c; push qword ptr [rax - 0x3f000681]; jg 0xa4a94; call rax; 
0x00000000004a46da: stc; push qword ptr [rax]; and bh, cl; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004a4a7a: stc; push qword ptr [rax]; jl 0xa4a78; call qword ptr [rax + 0x7c]; 
0x00000000004a4a56: stc; push qword ptr [rax]; jnp 0xa4a54; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x00000000004a4a1a: stc; push qword ptr [rax]; jp 0xa4a18; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4876: stc; push qword ptr [rbp + rdx - 7]; push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x00000000004a47c6: stc; push qword ptr [rdx + 0x13]; stc; jmp rdx; 
0x00000000004a4656: stc; push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x00000000004a452a: stc; push qword ptr [rsi + 0x46fff920]; and cl, bh; call rsi; 
0x00000000004a464e: stc; push qword ptr [rsp + rbx + 0x2324fff9]; stc; push qword ptr [rdx + riz + 0x2244fff9]; stc; call rsp; 
0x00000000004a487e: stc; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x00000000004a4aa2: stc; push rax; jg 0xa4aa0; call qword ptr [rax]; 
0x00000000004a4a72: stc; push rax; jnp 0xa4a70; call qword ptr [rax]; 
0x00000000004a4a4a: stc; push rax; jp 0xa4a48; inc dword ptr [rax]; jnp 0xa4a4c; call qword ptr [rax]; 
0x00000000004a470a: stc; push rax; sbb al, 0xf9; call qword ptr [rax + 0x50fff912]; sbb bh, cl; call rax; 
0x00000000004a48d2: stc; push rax; sbb ecx, edi; push qword ptr [rax + 0x19]; stc; jmp rax; 
0x00000000004a4a0a: stc; push rax; stc; inc dword ptr [rax]; jp 0xa4a0c; call qword ptr [rax]; 
0x00000000004a487a: stc; push rsp; adc al, 0xf9; push qword ptr [rsp + rdx - 7]; jmp rsp; 
0x000000000040dfe5: stc; syscall; 
0x0000000000436df4: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000462b2a: std; add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004be31a: std; call qword ptr [rax + 0xf]; 
0x00000000004be31a: std; call qword ptr [rax + 0xf]; std; call qword ptr [rax]; 
0x00000000004be31e: std; call qword ptr [rax]; 
0x00000000004be356: std; call qword ptr [rax]; std; inc eax; std; jmp qword ptr [rax]; 
0x00000000004c9222: std; call qword ptr [rbx + 2]; 
0x00000000004c4c22: std; call qword ptr [rbx]; 
0x00000000004c99d2: std; call qword ptr [rcx + 1]; 
0x00000000004c9ac2: std; call qword ptr [rdi]; 
0x00000000004beeb2: std; call qword ptr [rsi + rdx*8]; std; jmp rsp; 
0x00000000004be2e2: std; call rax; 
0x00000000004c7f7a: std; call rcx; 
0x00000000004bea1a: std; call rdx; 
0x00000000004beede: std; call rsp; 
0x00000000004a4969: std; clc; jmp qword ptr [rax]; 
0x000000000044133c: std; dec dword ptr [rax - 0x75]; jge 0x41342; call rbx; 
0x00000000004415ef: std; dec dword ptr [rax - 0x75]; jge 0x415f5; call rbx; 
0x0000000000443187: std; dec dword ptr [rax - 0x75]; jge 0x4318d; call rbx; 
0x0000000000473804: std; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 0x14; syscall; 
0x0000000000473674: std; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x000000000049a626: std; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000440bcb: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004415fd: std; dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000441207: std; dec dword ptr [rcx - 0x75]; jge 0x4120d; call rbx; 
0x000000000044132e: std; dec dword ptr [rcx - 0x75]; jge 0x41334; call rbx; 
0x0000000000441471: std; dec dword ptr [rcx - 0x75]; jge 0x41477; call rbx; 
0x00000000004415e1: std; dec dword ptr [rcx - 0x75]; jge 0x415e7; call rbx; 
0x0000000000442dff: std; dec dword ptr [rcx - 0x75]; jge 0x42e05; call rbx; 
0x0000000000442f27: std; dec dword ptr [rcx - 0x75]; jge 0x42f2d; call rbx; 
0x000000000044306a: std; dec dword ptr [rcx - 0x75]; jge 0x43070; call rbx; 
0x000000000044316b: std; dec dword ptr [rcx - 0x75]; jge 0x43171; call rbx; 
0x00000000004bead6: std; dec dword ptr [rsi + rdx*8]; std; jmp rsp; 
0x00000000004be9e2: std; dec edx; ret; 
0x00000000004be2f2: std; inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x00000000004be312: std; inc dword ptr [rax + 0x29]; std; jmp qword ptr [rax]; 
0x00000000004be2ea: std; inc dword ptr [rax + 0x60fffd16]; sbb ch, bh; inc dword ptr [rax + 0x1a]; std; jmp qword ptr [rax]; 
0x000000000047bf5f: std; inc dword ptr [rbp - 0x76b48a40]; ret; 
0x00000000004be35a: std; inc eax; std; jmp qword ptr [rax]; 
0x0000000000473531: std; inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x66; syscall; 
0x0000000000480a0e: std; jbe 0x80a18; ret; 
0x00000000004be2ee: std; jmp qword ptr [rax + 0x18]; 
0x00000000004be30e: std; jmp qword ptr [rax + 0x27]; 
0x00000000004bee62: std; jmp qword ptr [rax - 0x32]; 
0x00000000004bea16: std; jmp qword ptr [rax - 0x39]; 
0x00000000004be9ea: std; jmp qword ptr [rax - 0x3c]; 
0x00000000004be2f6: std; jmp qword ptr [rax]; 
0x00000000004c9fba: std; jmp qword ptr [rbx]; 
0x00000000004c989a: std; jmp qword ptr [rcx]; 
0x00000000004bee82: std; jmp qword ptr [rdi - 0x2c]; 
0x00000000004c9ba2: std; jmp qword ptr [rdi]; 
0x00000000004c9b5a: std; jmp qword ptr [rdx]; 
0x0000000000446fa8: std; jmp qword ptr [rsi + 0xf]; 
0x00000000004be2fe: std; jmp rax; 
0x00000000004be9f2: std; jmp rdx; 
0x00000000004beada: std; jmp rsp; 
0x0000000000432ce3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004731d6: std; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000041442c: std; mov eax, 3; syscall; 
0x000000000044ff48: std; mov r14d, 1; mov r13d, 1; mov eax, 3; syscall; 
0x0000000000432ceb: std; mov word ptr [rdi - 2], cx; ret; 
0x00000000004bee7e: std; push qword ptr [rdx - 0x2c]; std; jmp qword ptr [rdi - 0x2c]; 
0x000000000048c5f0: std; push rbx; je 0x8c660; mov esi, 0x48c350; mov edi, 0x6cd9c0; call rax; 
0x00000000004be9d2: std; push rsp; ret 0xfffd; 
0x000000000045586f: std; ret 0xfffa; 
0x000000000040128f: std; ret; 
0x000000000044ee2e: std; retf 0x6c; ret; 
0x000000000049f3c2: std; sub rsp, 0x40; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x0000000000436b24: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368ea: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043eec2: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004597e1: std; xor byte ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000441e50: std; xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x000000000041d34e: sti; add byte ptr [rax - 0x6af0ff94], bh; ret 0x8348; 
0x000000000043fcbf: sti; add edi, dword ptr [rdi + 0x4a5060]; jne 0x3fd58; xor esi, esi; mov eax, 2; syscall; 
0x0000000000411d03: sti; call 0x13fc0; cmp eax, -1; jne 0x11d10; pop rbx; ret; 
0x00000000004161aa: sti; call qword ptr [rax + 0x20]; 
0x00000000004c806a: sti; call qword ptr [rax]; 
0x00000000004c760a: sti; call qword ptr [rdi]; 
0x00000000004c80ca: sti; call qword ptr [rdx]; 
0x00000000004c77aa: sti; call qword ptr [rsi]; 
0x00000000004c74aa: sti; call rdx; 
0x00000000004c7232: sti; call rsi; 
0x0000000000474737: sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000046ec25: sti; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000476d49: sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000046a597: sti; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000000046884a: sti; dec dword ptr [rax - 0x7d]; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x000000000044f666: sti; inc dword ptr [rbx - 0x76be0008]; ret; 
0x00000000004c7d5a: sti; jmp qword ptr [rax + 1]; 
0x00000000004c72d2: sti; jmp qword ptr [rbp + 0xb]; 
0x00000000004c754a: sti; jmp qword ptr [rbp + 1]; 
0x00000000004c748a: sti; jmp qword ptr [rcx]; 
0x00000000004c738a: sti; jmp qword ptr [rdi]; 
0x00000000004c7ae2: sti; jmp qword ptr [rdx + 9]; 
0x00000000004c76c2: sti; jmp qword ptr [rdx]; 
0x000000000045bab4: sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000044a470: sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000445dfc: sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004c7f0a: sti; jmp qword ptr [rsi]; 
0x00000000004c7812: sti; jmp rdi; 
0x00000000004c778a: sti; jmp rsi; 
0x00000000004330c8: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000440713: sti; mov eax, 0x48; syscall; 
0x0000000000472f51: sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000044dd9b: sti; mov eax, 3; syscall; 
0x00000000004330c2: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000416500: sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x0000000000487676: sti; ret 0xffbf; 
0x00000000004bafca: sti; ret; 
0x000000000043f790: sti; sub rsp, 0x18; test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x0000000000450207: sti; test rax, rax; je 0x5020f; call rax; 
0x0000000000480a77: sti; test rax, rax; je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000436de6: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004410a0: sti; xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000426f52: stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000004c9abd: stosb byte ptr [rdi], al; add byte ptr [rax], al; nop; cmp ch, bh; call qword ptr [rdi]; 
0x00000000004c9a05: stosb byte ptr [rdi], al; add byte ptr [rax], al; test al, 0x36; std; call rcx; 
0x00000000004737e3: stosb byte ptr [rdi], al; and eax, 0x14750000; mov eax, 0x14; syscall; 
0x00000000004a41b1: stosb byte ptr [rdi], al; clc; push qword ptr [rax]; stosd dword ptr [rdi], eax; clc; call qword ptr [rax - 0x54]; 
0x000000000043ee49: stosb byte ptr [rdi], al; mov rax, rsi; sub rax, rdx; vzeroupper; ret; 
0x000000000049ec3a: stosb byte ptr [rdi], al; ret; 
0x0000000000470e18: stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x0000000000443843: stosb byte ptr [rdi], al; sub byte ptr [rax], al; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000470e19: stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x00000000004bcc16: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000418d69: stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add rsp, 0x80; mov eax, 0x6cb800; ret; 
0x0000000000476ea1: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004c9b55: stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov byte ptr [rcx], bh; std; jmp qword ptr [rdx]; 
0x00000000004a41b5: stosd dword ptr [rdi], eax; clc; call qword ptr [rax - 0x54]; 
0x000000000046dfa4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004a0949: stosd dword ptr [rdi], eax; int 0x22; add cl, ch; fiadd word ptr [rsi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004a429c: stosd dword ptr [rdi], eax; ret 0xfff8; 
0x00000000004a42a0: stosd dword ptr [rdi], eax; ret; 
0x00000000004a4298: stosd dword ptr [rdi], eax; sar eax, 0xff; stosd dword ptr [rdi], eax; ret 0xfff8; 
0x000000000040d653: stosd dword ptr [rdi], eax; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000046df05: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x00000000004c55f9: stosd dword ptr [rdi], eax; stc; jmp qword ptr [rsi + 0x28]; 
0x0000000000470e17: stosd dword ptr [rdi], eax; stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x0000000000481555: stosd dword ptr [rdi], eax; xchg ecx, eax; add r8b, bpl; adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004c2a20: sub al, 0; add byte ptr [rax], al; cmp al, byte ptr fs:[rax]; add al, cl; mov cl, 0xf6; call qword ptr [rsi + 1]; 
0x00000000004c9b98: sub al, 0; add byte ptr [rax], al; fsubr qword ptr [rbx + 0x39f00000]; std; jmp qword ptr [rdi]; 
0x00000000004c8078: sub al, 0; add byte ptr [rax], al; mov esp, 0x30000090; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004c3578: sub al, 0; add byte ptr [rax], al; mov esp, 0x50000045; add bh, al; jmp qword ptr [rbx]; 
0x00000000004c3548: sub al, 0; add byte ptr [rax], al; mov word ptr [rbp], es; add byte ptr [rax], dl; add bh, al; jmp qword ptr [rbx]; 
0x00000000004bf3d8: sub al, 0; add byte ptr [rax], al; sbb al, 4; add byte ptr [rax], al; sar byte ptr [rbx], 0xf4; call qword ptr [rbp + 9]; 
0x00000000004c7b40: sub al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x0000000000400968: sub al, 0; add ebx, esi; ret; 
0x00000000004010d8: sub al, 0; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400b4b: sub al, 0; mov rdi, rax; call 0x1f100; nop; pop rbp; ret; 
0x0000000000400ee4: sub al, 0; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000400709: sub al, 0; pop rbp; pop r12; ret; 
0x00000000004002d1: sub al, 0; test rax, rax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000040193e: sub al, 0; xor eax, eax; ret; 
0x00000000004a458c: sub al, 0x1d; stc; call rdx; 
0x0000000000443d1a: sub al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000430253: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004bead4: sub al, 0xd5; std; dec dword ptr [rsi + rdx*8]; std; jmp rsp; 
0x00000000004beedc: sub al, 0xe9; std; call rsp; 
0x0000000000453123: sub al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046e0f0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004bf0ec: sub al, 1; add byte ptr [rax], al; rcr byte ptr [rsi], 1; hlt; call rdi; 
0x0000000000431686: sub al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000426ea4: sub al, byte ptr [rax]; adc byte ptr [rdx + 0x4268d0], bh; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x000000000042241b: sub al, byte ptr [rax]; add al, 0; add byte ptr [rax], al; je 0x2242a; lea rax, [rip + 0x1a966]; ret; 
0x000000000042780a: sub al, byte ptr [rax]; add byte ptr [rax], al; add al, byte ptr [rax]; je 0x27819; lea rax, [rip + 0x17647]; ret; 
0x000000000041ed4c: sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000427228: sub al, byte ptr [rax]; add byte ptr [rax], al; or byte ptr [rax], al; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x000000000042488e: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; je 0x2489d; lea rax, [rip + 0x14853]; ret; 
0x0000000000427dbe: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; je 0x27dcd; lea rax, [rip + 0x12ad3]; ret; 
0x000000000042266e: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x2267d; lea rax, [rip + 3]; ret; 
0x0000000000427214: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27224; lea rax, [rip + 0x1d]; ret; 
0x0000000000427eda: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27ee9; lea rax, [rip + 0x67]; ret; 
0x0000000000427f2d: sub al, byte ptr [rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27f3c; lea rax, [rip + 4]; ret; 
0x000000000041bc6b: sub al, byte ptr [rax]; jne 0x1bcd3; mov esi, 0x80000; mov edi, 0x4a3560; mov eax, 2; syscall; 
0x000000000041bcc7: sub al, byte ptr [rax]; mov rdi, r9; mov eax, 3; syscall; 
0x0000000000420123: sub al, byte ptr [rax]; test rax, rax; je 0x2012c; call rax; 
0x0000000000463a11: sub al, byte ptr [rbx - 0x5f743]; call qword ptr [rax]; 
0x0000000000473672: sub al, byte ptr [rbx]; std; dec dword ptr [rax - 0x77]; add al, 0x24; mov eax, 3; syscall; 
0x00000000004593e8: sub al, byte ptr [rcx]; add cl, ch; ret; 
0x0000000000431874: sub al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000427227: sub al, byte ptr fs:[rax]; add byte ptr [rax], al; or byte ptr [rax], al; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x0000000000427213: sub al, byte ptr fs:[rax]; add byte ptr [rdx], al; add byte ptr [rax], al; jne 0x27224; lea rax, [rip + 0x1d]; ret; 
0x000000000047dbe8: sub al, ch; ret 0xfc62; 
0x000000000040ed9c: sub bh, 0x4b; add byte ptr [rbx + 0x13], dh; mov rbp, rax; call qword ptr [rbp]; 
0x0000000000460b83: sub bh, 0xff; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000046062a: sub bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000460ed0: sub bh, 0xff; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000403c13: sub bh, byte ptr [rcx + 2]; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004c74a9: sub bl, bh; call rdx; 
0x00000000004c7489: sub bl, bh; jmp qword ptr [rcx]; 
0x000000000049eb11: sub bl, dh; ret; 
0x000000000049eb10: sub bl, r14b; ret; 
0x000000000049ebc6: sub byte ptr [r11 - 0x17], bl; xor dl, byte ptr [rsi + rsi*4]; jmp qword ptr [rsi - 0x70]; 
0x000000000041184e: sub byte ptr [r8 + 1], r9b; ret 0x8949; 
0x00000000004765fa: sub byte ptr [rax + 0x39], cl; ret 0x1376; 
0x00000000004753f6: sub byte ptr [rax + 0x39], cl; ret 0x860f; 
0x00000000004667f7: sub byte ptr [rax + 0x48000000], 0x39; ret 0x820f; 
0x000000000041184f: sub byte ptr [rax + 1], cl; ret 0x8949; 
0x00000000004c39f8: sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x000000000046881d: sub byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x53e8; 
0x0000000000412e90: sub byte ptr [rax - 0x77], cl; jae 0x12eb5; call qword ptr [rax + 0x70]; 
0x000000000041fbe4: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000046d137: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004115a5: sub byte ptr [rax - 0x77], cl; ret 0x9e9; 
0x000000000046b65c: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004059ff: sub byte ptr [rax - 0x77], cl; ret; 
0x000000000041fcd7: sub byte ptr [rax - 0x7d], cl; call 0x415f57ef; pop rsp; pop r13; ret; 
0x0000000000464d6c: sub byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000040d869: sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c17dd: sub byte ptr [rax], al; add al, al; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rsi]; 
0x00000000004c181d: sub byte ptr [rax], al; add byte ptr [rax], dh; outsd dx, dword ptr [rsi]; cmc; call qword ptr [rcx + 5]; 
0x0000000000440504: sub byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; mov eax, 0; syscall; 
0x0000000000440564: sub byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; mov eax, 1; syscall; 
0x00000000004404a4: sub byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; mov eax, 2; syscall; 
0x0000000000480ec1: sub byte ptr [rax], al; jne 0x80ed0; add rsp, 0x38; ret; 
0x0000000000443844: sub byte ptr [rax], al; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000044544a: sub byte ptr [rax], al; pop rbx; ret; 
0x0000000000446975: sub byte ptr [rax], al; ret; 
0x0000000000445424: sub byte ptr [rax], al; test eax, eax; je 0x45430; ret; 
0x00000000004034fe: sub byte ptr [rax], bh; test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x00000000004a4068: sub byte ptr [rbp - 8], 0xff; and byte ptr [rdi - 8], ch; inc eax; jo 0xa406b; jmp qword ptr [rax + 0x72]; 
0x00000000004c09fa: sub byte ptr [rbx + 0x300e4a05], al; add ah, byte ptr [rdx + 0x41280e0a]; ret; 
0x000000000040df4a: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000416966: sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000480d3b: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cc9: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x0000000000427ce7: sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000049ebc7: sub byte ptr [rbx - 0x17], bl; xor dl, byte ptr [rsi + rsi*4]; jmp qword ptr [rsi - 0x70]; 
0x0000000000445403: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000445402: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x00000000004003ce: sub byte ptr [rbx], ch; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; syscall; 
0x0000000000480ee3: sub byte ptr [rcx - 0x17f3dbbc], cl; adc esp, edx; stc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x000000000049b88f: sub byte ptr [rcx - 0x3a], al; xchg byte ptr [rdx + 1], dh; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004811f6: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000044e2ba: sub byte ptr [rcx - 0x77], al; ret 0x8b4c; 
0x000000000041fcfc: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000431a76: sub byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048c8ab: sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000043f5cb: sub byte ptr [rdx + rcx*2], cl; mov eax, 8; pop rbx; ret; 
0x00000000004141da: sub byte ptr [rdx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000041401b: sub byte ptr [rdx], 0x4a; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004c97e8: sub byte ptr [rdx], dh; std; call rsp; 
0x000000000041bd8c: sub byte ptr [rip - 0x7417ffb6], dh; ret; 
0x00000000004c0eb2: sub byte ptr [rsi + 0x300e4405], al; add dword ptr [rsi], 2; xchg ebp, eax; ret; 
0x00000000004a437c: sub cl, 0xf8; jmp qword ptr [rax - 0x15]; 
0x00000000004be9c0: sub cl, al; std; call rax; 
0x000000000042011d: sub cl, byte ptr [rax - 0x75]; add eax, 0x2ad4cb; test rax, rax; je 0x2012c; call rax; 
0x000000000047a64e: sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000470e1a: sub cl, byte ptr [rcx + 1]; ret 0xf43; 
0x0000000000445422: sub cl, byte ptr [rdi - 0x3f7affd8]; je 0x45430; ret; 
0x0000000000413818: sub cl, byte ptr [rdx]; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x00000000004141db: sub cl, byte ptr [rdx]; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000041401c: sub cl, byte ptr [rdx]; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000415115: sub cl, ch; ret 0xfffe; 
0x000000000045c565: sub dh, al; add byte ptr [rip - 0x2fd17], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000459531: sub dh, al; add byte ptr [rip - 0x42117], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000045c115: sub dh, al; add byte ptr [rip - 0xa8d17], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4400: sub dl, 0xf8; call qword ptr [rax - 0x14]; 
0x0000000000467202: sub dword ptr [rax], eax; add byte ptr [rcx - 0x7afcb730], cl; push -0x7c000006; ret 0x8908; 
0x00000000004185a6: sub dword ptr [rdi - 2], edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000431926: sub dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000412d4a: sub dword ptr [rdx], ecx; pop rbx; ret; 
0x0000000000430a36: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000049a2a8: sub dword ptr [rsp + 0x20], ecx; movaps xmmword ptr [rsp + 0x30], xmm0; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000049a2ad: sub dword ptr [rsp + 0x30], eax; je 0x9a2ba; mov edi, 0x6cc140; call rax; 
0x000000000041fcd9: sub eax, 0x10; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004560f5: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3960]; jmp rax; 
0x0000000000456146: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3a60]; jmp rax; 
0x0000000000458236: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3b60]; jmp rax; 
0x0000000000456d69: sub eax, 0x20; cdqe; movzx eax, byte ptr [rax + 0x4b4020]; mov rax, qword ptr [rax*8 + 0x4b3e60]; jmp rax; 
0x000000000041eceb: sub eax, 0x2ae9; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000431536: sub eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045e131: sub eax, 0x83000000; ret; 
0x00000000004bcc1a: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000042d36f: sub eax, 0x8b0007b1; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004c1cdd: sub eax, 0xc0b00000; cmc; call qword ptr [rcx]; 
0x00000000004bcfb4: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000400c6e: sub eax, 0xf8458b48; mov rdx, qword ptr [rax + 8]; mov eax, 0; call rdx; 
0x000000000045c118: sub eax, 0xfff572e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000459534: sub eax, 0xfffbdee9; jmp qword ptr [rsi + 0xf]; 
0x000000000045c568: sub eax, 0xfffd02e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000400da9: sub eax, 0xfffff42a; mov ebx, 0x4001d8; jne 0xdd5; nop dword ptr [rax]; call qword ptr [rbx + 0x10]; 
0x000000000043fdac: sub eax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000044e724: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000043ec84: sub eax, 1; ret; 
0x0000000000480c66: sub eax, dword ptr [0]; ret; 
0x00000000004179d9: sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000417966: sub eax, dword ptr [rax]; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x0000000000418965: sub eax, dword ptr [rax]; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004178d5: sub eax, dword ptr [rax]; ret; 
0x0000000000418ea2: sub eax, dword ptr [rax]; test rax, rax; je 0x18eab; call rax; 
0x000000000040abd1: sub eax, dword ptr [rbp + 1]; add cl, ch; sar cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000401c0f: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419ead: sub eax, dword ptr [rbx + rcx*4 + 0x2d]; sbb qword ptr [r11], r13; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041810e: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000431724: sub eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004175c3: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000041627d: sub eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046f51b: sub eax, ebp; pop rbp; pop r12; ret; 
0x0000000000416cf9: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x000000000048bdfd: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000423a9c: sub eax, ecx; ret; 
0x000000000046d2c9: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000048bd37: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000424b69: sub eax, edi; ret; 
0x0000000000413a84: sub eax, edx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000413c7e: sub eax, edx; ret; 
0x000000000043ee37: sub eax, edx; vzeroupper; ret; 
0x000000000046cccc: sub eax, esi; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004163de: sub eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000413ad8: sub eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004be315: sub ebp, edi; jmp qword ptr [rax]; 
0x00000000004c0659: sub ebp, esi; call qword ptr [rsi + 4]; 
0x00000000004b9cd5: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000426395: sub ebx, edx; jbe 0x263a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000048ade5: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004453fd: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x000000000040042c: sub ecx, dword ptr [rdx]; mov eax, 2; syscall; 
0x00000000004003cf: sub ecx, dword ptr [rdx]; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000040042b: sub ecx, dword ptr fs:[rdx]; mov eax, 2; syscall; 
0x000000000044550c: sub ecx, eax; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x000000000045596f: sub ecx, esp; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x000000000044550b: sub ecx, r8d; shl ecx, 3; shl eax, cl; pop rbx; pop rbp; ret; 
0x00000000004311e3: sub edi, 0x20; lea r11, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f2: sub edi, 0x40; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431033: sub edi, 0x40; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004be319: sub edi, ebp; call qword ptr [rax + 0xf]; 
0x00000000004be319: sub edi, ebp; call qword ptr [rax + 0xf]; std; call qword ptr [rax]; 
0x000000000043592f: sub edi, edx; lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043544e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043514e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e4e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b4e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043484e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043454e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043424e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f55: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004bc6e2: sub edi, esi; int 0x6b; ret; 
0x00000000004279ae: sub edx, 0x10; lea rsi, [rsi + 0x10]; lea rdi, [rdi + 0x10]; jne 0x279a0; mov rax, rdi; ret; 
0x0000000000433821: sub edx, 0x40; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433761: sub edx, 0x40; sfence; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046d3cc: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000004175f0: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004175e5: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046d3e1: sub edx, dword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000426f4e: sub edx, eax; jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c4: sub edx, eax; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d4: sub edx, eax; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e4: sub edx, eax; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f4: sub edx, eax; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043c99c: sub edx, ecx; lea r11, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37c: sub edx, ecx; lea r11, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453b82: sub edx, esi; call qword ptr [rax + 0x38]; 
0x0000000000410fda: sub edx, esi; call qword ptr [rax + 0x70]; 
0x0000000000443271: sub edx, esi; mov eax, r12d; syscall; 
0x0000000000411682: sub edx, esi; mov rdi, r15; call rax; 
0x0000000000413294: sub edx, esi; mov rdi, rbx; call rax; 
0x000000000045de0b: sub edx, esi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000043102f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355d1: sub esi, edx; lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435451: sub esi, edx; lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352d1: sub esi, edx; lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435151: sub esi, edx; lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fd1: sub esi, edx; lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e51: sub esi, edx; lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cd1: sub esi, edx; lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b51: sub esi, edx; lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349d1: sub esi, edx; lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434851: sub esi, edx; lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346d1: sub esi, edx; lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434551: sub esi, edx; lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343d1: sub esi, edx; lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434251: sub esi, edx; lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340d1: sub esi, edx; lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f58: sub esi, edx; lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043592c: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047d114: sub esp, 0x1000; mov rsi, rsp; syscall; 
0x0000000000401a4d: sub esp, 0x10; test rax, rax; je 0x1a5e; xor esi, esi; mov edi, 1; call rax; 
0x000000000043f792: sub esp, 0x18; test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x0000000000445109: sub esp, 0x18; test rax, rax; mov qword ptr [rsp], rcx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x00000000004736e2: sub esp, 0x30; mov rdx, rsp; syscall; 
0x000000000049f3c4: sub esp, 0x40; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x000000000040391c: sub esp, 0x48; test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x000000000041794f: sub esp, 0x80; call 0x43950; add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x00000000004103b5: sub esp, 0x80; call 0x43980; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004733cf: sub esp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x0000000000452e57: sub esp, 0x80; call 0x43980; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000042107a: sub esp, 0x80; call 0x43980; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000472e1b: sub esp, 0x98; syscall; 
0x00000000004a1ac1: sub esp, 8; add rsp, 8; ret; 
0x00000000004737fe: sub esp, 8; call 0x439a0; mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x0000000000479be9: sub esp, 8; call qword ptr [rip + 0x252596]; xor eax, eax; add rsp, 8; ret; 
0x000000000040e031: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x0000000000473406: sub esp, 8; syscall; 
0x000000000047977e: sub esp, 8; test rax, rax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x0000000000480bf6: sub esp, 8; test rax, rax; je 0x80c05; mov edi, 0x6cc140; call rax; 
0x00000000004319c3: sub qword ptr [r15], rax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000426394: sub r11, rdx; jbe 0x263a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000418964: sub r8, qword ptr [rax]; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000416cf8: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x000000000046d2c8: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000418ea1: sub r8d, dword ptr [r8]; test rax, rax; je 0x18eab; call rax; 
0x0000000000400406: sub r9d, dword ptr [rdx]; mov rdi, rbx; mov eax, 1; syscall; 
0x000000000041fcd8: sub rax, 0x10; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043fdab: sub rax, 1; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000043ec83: sub rax, 1; ret; 
0x0000000000480c65: sub rax, qword ptr [0]; ret; 
0x000000000041810d: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000480c64: sub rax, qword ptr fs:[0]; ret; 
0x0000000000413ad7: sub rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046cccb: sub rax, r14; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004163dd: sub rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041627c: sub rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046f51a: sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000424b68: sub rax, rdi; ret; 
0x0000000000413a83: sub rax, rdx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000413c7d: sub rax, rdx; ret; 
0x000000000043ee36: sub rax, rdx; vzeroupper; ret; 
0x00000000004453fc: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x453e0; mov eax, 1; ret; 
0x000000000045596e: sub rcx, r12; mov rdi, rbx; mov rdx, rcx; mov qword ptr [rbp - 0x4b0], rcx; call qword ptr [rax + 0x38]; 
0x00000000004311e2: sub rdi, 0x20; lea r11, [rip + 0x73123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f1: sub rdi, 0x40; lea r11, [rip + 0x73214]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431032: sub rdi, 0x40; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043592e: sub rdi, rdx; lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043544d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043514d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fcd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e4d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434ccd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b4d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043484d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043454d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043424d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f54: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433820: sub rdx, 0x40; lea r11, [rip + 0x70ae5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433760: sub rdx, 0x40; sfence; lea r11, [rip + 0x70ba2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046d3cb: sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000046d3e0: sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000410fd9: sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000426f4d: sub rdx, rax; jbe 0x27200; add rax, rdi; add rax, rcx; ret; 
0x00000000004271c3: sub rdx, rax; jbe 0x27200; add rax, rdi; ret; 
0x00000000004271d3: sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004271e3: sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004271f3: sub rdx, rax; jbe 0x27200; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043c99b: sub rdx, rcx; lea r11, [rip + 0x680eb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c37b: sub rdx, rcx; lea r11, [rip + 0x6868b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453b81: sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000443270: sub rdx, rsi; mov eax, r12d; syscall; 
0x0000000000411681: sub rdx, rsi; mov rdi, r15; call rax; 
0x0000000000413293: sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000045de0a: sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000043102e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x732d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355d0: sub rsi, rdx; lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435450: sub rsi, rdx; lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352d0: sub rsi, rdx; lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435150: sub rsi, rdx; lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fd0: sub rsi, rdx; lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e50: sub rsi, rdx; lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434cd0: sub rsi, rdx; lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b50: sub rsi, rdx; lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349d0: sub rsi, rdx; lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434850: sub rsi, rdx; lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346d0: sub rsi, rdx; lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434550: sub rsi, rdx; lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343d0: sub rsi, rdx; lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434250: sub rsi, rdx; lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340d0: sub rsi, rdx; lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f57: sub rsi, rdx; lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043592b: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047d113: sub rsp, 0x1000; mov rsi, rsp; syscall; 
0x0000000000401a4c: sub rsp, 0x10; test rax, rax; je 0x1a5e; xor esi, esi; mov edi, 1; call rax; 
0x000000000043f791: sub rsp, 0x18; test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x0000000000445108: sub rsp, 0x18; test rax, rax; mov qword ptr [rsp], rcx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x00000000004736e1: sub rsp, 0x30; mov rdx, rsp; syscall; 
0x000000000049f3c3: sub rsp, 0x40; test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x000000000040391b: sub rsp, 0x48; test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x000000000041794e: sub rsp, 0x80; call 0x43950; add rsp, 0x80; mov qword ptr [rip + 0x2b5c40], rdx; add dword ptr [rip + 0x2b5c35], 1; ret; 
0x00000000004103b4: sub rsp, 0x80; call 0x43980; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004733ce: sub rsp, 0x80; call 0x43980; add rsp, 0x80; pop rbx; ret; 
0x0000000000452e56: sub rsp, 0x80; call 0x43980; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000421079: sub rsp, 0x80; call 0x43980; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000472e1a: sub rsp, 0x98; syscall; 
0x00000000004a1ac0: sub rsp, 8; add rsp, 8; ret; 
0x00000000004737fd: sub rsp, 8; call 0x439a0; mov qword ptr [rsp], rax; mov eax, 0x14; syscall; 
0x0000000000479be8: sub rsp, 8; call qword ptr [rip + 0x252596]; xor eax, eax; add rsp, 8; ret; 
0x000000000040e030: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x0000000000473405: sub rsp, 8; syscall; 
0x000000000047977d: sub rsp, 8; test rax, rax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x0000000000480bf5: sub rsp, 8; test rax, rax; je 0x80c05; mov edi, 0x6cc140; call rax; 
0x00000000004003da: syscall; 
0x0000000000472eee: syscall; add rsp, 0x98; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000440695: syscall; cmp rax, -0x1000; ja 0x406e0; add rsp, 0x60; pop rbx; ret; 
0x0000000000473205: syscall; cmp rax, -0x1000; ja 0x73218; pop rbx; ret; 
0x00000000004403b5: syscall; cmp rax, -0xfff; jae 0x45620; ret; 
0x0000000000443997: syscall; pop rdx; pop rsi; ret; 
0x000000000046fc05: syscall; ret; 
0x00000000004967cd: syscall; test edx, edx; jne 0x967af; mov dword ptr fs:[0x2d0], eax; ret; 
0x00000000004862e5: sysenter; 
0x000000000043cfad: test ah, 0x20; jne 0x3d090; test ah, 0x40; jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cfb6: test ah, 0x40; jne 0x3d0a0; lea rax, [rdi + 0xf]; ret; 
0x000000000043cece: test ah, 0x40; jne 0x3d0a0; test dh, 0x40; jne 0x3ce10; lea rax, [rdi + 0xf]; ret; 
0x000000000048c1d2: test ah, 0x80; je 0x8c290; mov rax, rdx; pop rbx; ret; 
0x000000000044ac3f: test ah, bh; add al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000476227: test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045f058: test ah, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x4db43], al; call qword ptr [rax]; 
0x00000000004425a7: test ah, cl; add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x0000000000458cd7: test ah, dh; adc dword ptr [rax], eax; add byte ptr [rax - 0x12743], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9895: test al, 0; add byte ptr [rax + 0x34], bh; std; jmp qword ptr [rcx]; 
0x00000000004166f9: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049ab53: test al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000044fe94: test al, 0; add byte ptr [rax], al; mov dword ptr [rdi + 8], 1; mov qword ptr [rdi + 0x10], 0; mov rdi, qword ptr [rdi]; syscall; 
0x000000000049ce23: test al, 0; add byte ptr [rax], al; ret; 
0x00000000004c97e5: test al, 0; add byte ptr [rax], ch; xor bh, ch; call rsp; 
0x000000000043cf5c: test al, 0x20; jne 0x3d020; test al, 0x40; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000046d066: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdi*4 - 0xa]; ret 0x7508; 
0x00000000004c9a08: test al, 0x36; std; call rcx; 
0x00000000004c8cf8: test al, 0x3d; cld; call qword ptr [rax]; 
0x000000000043cf64: test al, 0x40; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000043ce4c: test al, 0x40; jne 0x3d030; test dl, 0x40; jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x00000000004c11a8: test al, 0x60; cmc; jmp qword ptr [rsi + 2]; 
0x00000000004ba597: test al, 0x97; xchg esp, eax; ret; 
0x0000000000497acd: test al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004434e7: test al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004c4cd8: test al, 0xbb; clc; call qword ptr [rsi]; 
0x0000000000440604: test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000004bb0db: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004bfa98: test al, 0xf3; hlt; call qword ptr [rbx]; 
0x00000000004a41ad: test al, 0xf8; call qword ptr [rax]; 
0x00000000004a4254: test al, 0xf8; inc esi; sar eax, 0xff; mov dl, 0xf8; inc esi; ret; 
0x00000000004435a9: test al, 0xf; xchg edi, eax; ror byte ptr [rdi], 0x92; ret 0xd029; 
0x0000000000440626: test al, 2; cmove eax, edx; ret; 
0x00000000004117c3: test al, ah; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000461344: test al, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000042011a: test al, al; jne 0x20148; mov rax, qword ptr [rip + 0x2ad4cb]; test rax, rax; je 0x2012c; call rax; 
0x000000000042f66a: test al, al; jne 0x2f650; xor eax, eax; sub eax, ecx; ret; 
0x00000000004801a9: test al, al; jne 0x800f8; movsx eax, dl; neg eax; ret; 
0x0000000000479764: test al, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000044af9f: test al, cl; add al, 0; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000041b720: test al, dh; add eax, 0xf6410000; ret 0xf01; 
0x0000000000422426: test ax, 1; ret; 
0x000000000044dd94: test bh, al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x0000000000461554: test bh, al; add byte ptr [rax], al; add byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x000000000049a9f4: test bh, bh; jns 0x9a9fb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049d714: test bh, bh; jns 0x9d71b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049f054: test bh, bh; jns 0x9f05b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x00000000004440ec: test bh, cl; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe39], al; ret 0x4901; 
0x00000000004478de: test bh, dh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a1c4: test bh, dl; add al, 0; add dh, dh; ret; 
0x000000000045ca63: test bl, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047db85: test byte ptr [r8 - 0x77], r9b; ret; 
0x000000000049cbd8: test byte ptr [r9 + 0xc7], 0x40; jne 0x9cc28; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x0000000000479bce: test byte ptr [rax + 0x314], 4; jne 0x79be8; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000004405e8: test byte ptr [rax + 0x63], -1; mov eax, 0x48; syscall; 
0x00000000004421d3: test byte ptr [rax + 0xa], al; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000442643: test byte ptr [rax + 3], dl; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000446a07: test byte ptr [rax + rax + 0xbe0000], ah; ja 0x46a54; add byte ptr [rdi + 0x6cd6d8], bh; call rax; 
0x00000000004963e3: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x00000000004959b9: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046be0e: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046bdda: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000495a7c: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rbx + 0x3950245c], cl; ret; 
0x000000000046fb3e: test byte ptr [rax - 0x73], 0x54; and al, 0x48; mov rdi, r12; call rbx; 
0x000000000044333e: test byte ptr [rax - 0x75], 0x7c; and al, 8; xor eax, eax; syscall; 
0x0000000000441711: test byte ptr [rax - 0x75], 0x7d; add byte ptr [rcx + 0xf], al; lahf; ret; 
0x00000000004100c8: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x10]; 
0x0000000000415608: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000413a92: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x70]; 
0x0000000000410fd5: test byte ptr [rax - 0x77], -0x21; sub rdx, r14; call qword ptr [rax + 0x70]; 
0x0000000000441e54: test byte ptr [rax - 0x77], -0x3d; call rax; 
0x00000000004432f9: test byte ptr [rax - 0x77], 4; and al, 0x48; mov edx, eax; mov eax, r12d; syscall; 
0x000000000047db86: test byte ptr [rax - 0x77], cl; ret; 
0x00000000004343d6: test byte ptr [rax], 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000478681: test byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c74a5: test byte ptr [rax], al; add al, bl; sub bl, bh; call rdx; 
0x000000000046eeaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042719a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042df0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043d05a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000043d06a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000043d07a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000043d08a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000043d09a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000043cfda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x000000000043cfea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000043cffa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000043d00a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000043d01a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000043d02a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000043d03a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000043d04a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000043cfca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x000000000043ca2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000043c40a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000043c41a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004222da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004438ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x63; syscall; 
0x000000000047355a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047355a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047354a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047354a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047356a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047356a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044102a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000041787a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000049b6ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 5; ret; 
0x00000000004438aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; syscall; 
0x00000000004175ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049a5ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x233d0a]; ret; 
0x0000000000435fca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000049cdaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000045099a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000045085a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045083a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045081a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041786a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046eeca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000046eeda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000046eeea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000046eefa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000046ef0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000046ef1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000046ef2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000046d57a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004178ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049cd7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049cdba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049ce1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049ce0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049cdca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041629a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000044696a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2879f1]; ret; 
0x00000000004178ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b37e9]; ret; 
0x00000000004178fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043fb6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, esi; syscall; 
0x000000000042788a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000412eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000043615a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004360da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000473628: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x0000000000441068: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x0000000000473538: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x66; syscall; 
0x0000000000441048: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xa; syscall; 
0x00000000004008ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043f50a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000412c3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000400f2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000043ce0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004c9f0c: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x10], bh; add dword ptr [rdx], 0x69; ret; 
0x00000000004c4020: test byte ptr [rax], al; add byte ptr [rax], al; push rax; add byte ptr [rax], al; cmp byte ptr [rdx - 8], al; call qword ptr [rbx + 5]; 
0x000000000046e9ac: test byte ptr [rax], bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000049b64b: test byte ptr [rax], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; jl 0x9b678; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a2db: test byte ptr [rax], dh; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046e9c4: test byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004c7544: test byte ptr [rbp + 0x47c80000], al; sti; jmp qword ptr [rbp + 1]; 
0x000000000048c1d6: test byte ptr [rbp + 0x48000000], dh; mov eax, edx; pop rbx; ret; 
0x0000000000403013: test byte ptr [rbp + 4], ah; add byte ptr [rax], al; mov edi, 0x6cd720; call rbx; 
0x000000000044250e: test byte ptr [rbp + 5], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000044252e: test byte ptr [rbp + 6], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004185d6: test byte ptr [rbp - 0xa000000], ah; ret; 
0x000000000048c5ca: test byte ptr [rbx + 0x2413f33d], 0; jmp rax; 
0x00000000004c7b44: test byte ptr [rbx + 0x69c80000], cl; sti; jmp qword ptr [rdx]; 
0x000000000041436f: test byte ptr [rbx + 0x74], 2; je 0x143e0; movsxd rdx, ecx; mov eax, 2; syscall; 
0x000000000047a55b: test byte ptr [rbx + rcx], bl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000040d647: test byte ptr [rbx + rdx*8 - 0x76bb0001], dh; and byte ptr [rcx - 0x5416fb90], cl; sar edi, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000432ad7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041f207: test byte ptr [rbx - 0xa000000], cl; ret; 
0x000000000041695e: test byte ptr [rbx], 0x80; jne 0x16970; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004340d6: test byte ptr [rbx], 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004423a0: test byte ptr [rbx], bh; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x000000000043e432: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000044a6dc: test byte ptr [rbx], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004187fe: test byte ptr [rbx], dl; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x18eb; 
0x000000000048c3b8: test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rsi + 0x48c350], bh; mov edi, 0x6cd9c0; call rax; 
0x000000000049abe2: test byte ptr [rcx + 0x40000000], bh; cmp dh, 0x2f; ja 0x9b43e; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x000000000047adfb: test byte ptr [rcx + 0x48000005], ah; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; call rax; 
0x000000000049cbd9: test byte ptr [rcx + 0xc7], 0x40; jne 0x9cc28; cmp qword ptr [r9 + 0x38], 0; je 0x9cc53; add rsp, 0x18; ret; 
0x000000000043e429: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000444e5f: test byte ptr [rcx + rax], ah; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000049e71f: test byte ptr [rcx + rax], al; add byte ptr [rax], al; mov rsi, qword ptr [r14 + 8]; mov rdx, qword ptr [r15]; mov rdi, rbp; call rbx; 
0x000000000046e0ef: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000049d392: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x000000000046f9c3: test byte ptr [rcx + rcx*4 - 0x19], 0x4d; mov ecx, edi; call rbx; 
0x0000000000498b5a: test byte ptr [rcx - 0x75000000], dh; adc byte ptr [r13 - 0x497bf040], al; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x000000000045884a: test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x00000000004410a2: test byte ptr [rcx - 0x77], 0xd4; mov rbp, rax; call rax; 
0x0000000000423e16: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004c90b5: test byte ptr [rcx], al; ret; 
0x0000000000459971: test byte ptr [rcx], dl; or byte ptr [rax], al; add byte ptr [rax - 0x12743], al; jmp qword ptr [rdi - 0x75]; 
0x000000000047f340: test byte ptr [rdi + 0x314], 8; je 0x7f3ad; pop rbx; ret; 
0x0000000000413cc0: test byte ptr [rdi + 0x74], 2; je 0x13cf8; movsxd rdi, dword ptr [rdi + 0x70]; xor eax, eax; syscall; 
0x00000000004427ac: test byte ptr [rdi + 3], ah; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000046b584: test byte ptr [rdi + rdi*8 - 1], bl; dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8508; 
0x000000000044d700: test byte ptr [rdi - 0x16000003], dl; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000419067: test byte ptr [rdi - 0xa000000], cl; ret; 
0x000000000046976d: test byte ptr [rdi], -0x61; ret 0xd629; 
0x000000000041f2e6: test byte ptr [rdi], -0x6c; ret 0x8548; 
0x0000000000495a97: test byte ptr [rdi], -0x6c; ret 0xd021; 
0x000000000044151a: test byte ptr [rdi], -0x7c; ret 0; 
0x00000000004a054e: test byte ptr [rdi], -0x7c; ret; 
0x000000000046e5ec: test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000400603: test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046e5d4: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004125c4: test byte ptr [rdi], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000441edc: test byte ptr [rdi], dl; or eax, 0xf6310000; mov rdi, r15; call rbx; 
0x000000000046e061: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x0000000000470e21: test byte ptr [rdx], dl; fsubrp st(3); add byte ptr [r8 - 0x77], cl; ret; 
0x0000000000426ea0: test byte ptr [rip + 0x2a6821], 0x10; mov edx, 0x4268d0; mov eax, 0x43e820; cmove rax, rdx; ret; 
0x000000000047c27e: test byte ptr [rip - 0x428], al; add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000046de8d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000042f63a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000434e57: test byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000405e45: test byte ptr [rsi], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000424a4d: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000044f84d: test byte ptr [rsi], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043f522: test ch, 0xf0; je 0x3f512; movzx eax, cl; pop rbx; ret; 
0x0000000000440b56: test ch, ch; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x000000000041eeff: test ch, dh; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446b06: test ch, dh; add dword ptr [rax], eax; add byte ptr [rsi + 0x447700], bh; mov edi, 0x6cd6d8; call rax; 
0x0000000000468848: test cl, al; sti; dec dword ptr [rax - 0x7d]; clc; adc byte ptr [rax - 0x77], cl; ret 0x860f; 
0x0000000000446fdb: test cl, bh; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041b7f1: test cl, bh; add eax, 0xf6410000; ret 0xf01; 
0x000000000049ec32: test cl, bl; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x25], cl; stosb byte ptr [rdi], al; ret; 
0x000000000043e90f: test cl, cl; jne 0x3e900; ret; 
0x000000000043e9bf: test cl, cl; jne 0x3e9b0; ret; 
0x000000000043ec7f: test cl, cl; jne 0x3ec70; sub rax, 1; ret; 
0x00000000004218a6: test cl, dl; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret; 
0x000000000043ced7: test dh, 0x40; jne 0x3ce10; lea rax, [rdi + 0xf]; ret; 
0x000000000043e366: test dh, 0x40; jne 0x3e330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043f5a2: test dh, 0xf0; je 0x3f512; lea rax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043cf1d: test dh, 4; jne 0x3ce10; lea rax, [rdi + 0xb]; ret; 
0x0000000000422141: test dh, 7; mov eax, 0x16; je 0x22150; ret; 
0x00000000004711fd: test dh, cl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000447e55: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044eee6: test dh, dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049a9f3: test dil, dil; jns 0x9a9fb; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049d713: test dil, dil; jns 0x9d71b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000049f053: test dil, dil; jns 0x9f05b; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; add rsp, 8; ret; 
0x000000000043ce54: test dl, 0x40; jne 0x3ce10; lea rax, [rdi + 7]; ret; 
0x000000000043e2b2: test dl, 0x40; jne 0x3e330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000427914: test dl, 2; je 0x27884; mov word ptr [rax + rdx - 2], cx; ret; 
0x000000000043ce82: test dl, 4; jne 0x3ce10; lea rax, [rdi + 3]; ret; 
0x000000000041e209: test dl, cl; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000046ee77: test dl, dl; je 0x6ee90; mov cl, dl; and cl, 0xf; je 0x6eea0; ret; 
0x000000000043eb2f: test dl, dl; jne 0x3eb20; lea rax, [rcx - 1]; ret; 
0x000000000041ee12: test dword ptr [rax + 0x48000000], edi; mov eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048c7db: test dword ptr [rax + 0x48000000], edx; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000041380b: test dword ptr [rax + 0x48000000], esp; mov dword ptr [rax + 0x130], 0x4a2a80; mov rax, qword ptr [rbp + 0xd8]; call qword ptr [rax + 0x40]; 
0x0000000000427d89: test dword ptr [rax + 0x48fffffb], edi; mov eax, edi; ret; 
0x0000000000461288: test dword ptr [rax + 0x74ffffef], ecx; and byte ptr [rbx - 0x106f43], al; call qword ptr [rax]; 
0x0000000000460ecf: test dword ptr [rax + 0xffffef], eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043cf5f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x3d030; lea rax, [rdi + 7]; ret; 
0x000000000041ac97: test dword ptr [rax + rax - 0x74b80000], ecx; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000043fcc7: test dword ptr [rax + rax - 0x9cf0000], ecx; mov eax, 2; syscall; 
0x000000000044ac78: test dword ptr [rax + rax], 0x428d4800; add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000046191b: test dword ptr [rax - 0x16000006], ebp; ret 0xffef; 
0x0000000000497b94: test dword ptr [rax - 0x3f], 0x894803e0; ret 0x8948; 
0x0000000000442a7e: test dword ptr [rax - 0x41000006], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442b9e: test dword ptr [rax - 0x41000007], edx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000046cfdd: test dword ptr [rax - 0x75000000], esp; add byte ptr [r8 - 0x75], r9b; push rax; and cl, ch; sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004607bf: test dword ptr [rax - 0x77], 0x868b49c2; fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x38]; 
0x00000000004c7545: test dword ptr [rax], eax; add al, cl; sti; jmp qword ptr [rbp + 1]; 
0x000000000045d4a9: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000049bb9b: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000049bb9a: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000044299e: test dword ptr [rbp - 0x41000004], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000442c1e: test dword ptr [rbp - 0x4100000b], esi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000042d6ff: test dword ptr [rbp - 0xc000004], esp; ret; 
0x000000000043cf18: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x3ce10; lea rax, [rdi + 0xb]; ret; 
0x0000000000430537: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430986: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000498a09: test dword ptr [rbx - 0x16000002], esi; ret; 
0x000000000046881a: test dword ptr [rbx - 0x38b7d78a], 0; add byte ptr [rax - 0x77], cl; ret 0x53e8; 
0x0000000000432913: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000435d53: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000410378: test dword ptr [rbx], 0x8000; je 0x10388; mov eax, edx; pop rbx; ret; 
0x000000000048c094: test dword ptr [rbx], 0x8000; je 0x8c0a0; mov eax, edx; pop rbx; ret; 
0x0000000000419400: test dword ptr [rbx], ecx; add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x000000000040f1db: test dword ptr [rbx], esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042713a: test dword ptr [rcx + 0x48000000], esi; xor eax, eax; ret; 
0x0000000000427aa0: test dword ptr [rcx + 0x48fffffe], esp; mov eax, edi; ret; 
0x0000000000411176: test dword ptr [rcx + 0xf], 0x8948c046; ret 0x8949; 
0x000000000043050d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043041d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430349: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043032d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045159e: test dword ptr [rcx - 0x3f], 0x834904eb; ret; 
0x00000000004428e7: test dword ptr [rcx - 0x41000006], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000004429de: test dword ptr [rcx - 0x41000008], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x0000000000442bde: test dword ptr [rcx - 0x4100000a], esp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000412911: test dword ptr [rcx - 0x41ffffff], eax; add cl, byte ptr [rcx]; add byte ptr [rax], al; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x000000000047f997: test dword ptr [rcx], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044ac5b: test dword ptr [rcx], ecx; add eax, 0x8d480000; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000041c4da: test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rbp + 0x39], cl; ret 0x976; 
0x0000000000497a7a: test dword ptr [rcx], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000427c8a: test dword ptr [rdi + 0x48fffffc], esi; mov eax, edi; ret; 
0x0000000000403f0b: test dword ptr [rdi + 0x4dfffffd], esi; test eax, eax; jne 0x3ee5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000460550: test dword ptr [rdi + rbp*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000496c83: test dword ptr [rdi + rdi*8 - 1], ecx; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000443177: test dword ptr [rdi - 0x74b60003], edi; cmp al, 0x24; call rbx; 
0x000000000045c09c: test dword ptr [rdi - 0x7c00000c], esi; ret; 
0x000000000042d515: test dword ptr [rdi - 0xc000002], ecx; ret; 
0x000000000042483a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004209d4: test dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000044afd9: test dword ptr [rdi], ebp; add eax, 0x8d490000; add r9d, dword ptr [r8 + 0x39]; ret; 
0x000000000043054b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000430449: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000430252: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004478df: test dword ptr [rdx], 0x83480000; ret; 
0x0000000000441ebd: test dword ptr [rdx], 0xf6310000; mov rdi, r14; call rbx; 
0x0000000000427224: test dword ptr [rip + 0x2a6462], 0x80000; je 0x27238; lea rax, [rip + 0x8449]; ret; 
0x000000000043ce7d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x3ce10; lea rax, [rdi + 3]; ret; 
0x000000000043e692: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042fad5: test dword ptr [rsi + 7], 0xc634900; xchg ebx, eax; add rcx, r11; jmp rcx; 
0x0000000000442b1e: test dword ptr [rsi - 0x41000004], ecx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000042d7fe: test dword ptr [rsi - 0xc000005], esp; ret; 
0x0000000000442c3e: test dword ptr [rsi*8 + 0x3beffff], ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000434cd7: test dword ptr [rsi], 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041274b: test dword ptr [rsi], esp; add dword ptr [rax], eax; add byte ptr [rsi + 0x902], bh; mov edi, 0x4a2b87; mov eax, 2; syscall; 
0x0000000000430758: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x000000000045f891: test dword ptr [rsp + rsi*8 - 0x76b70001], ecx; fucompi st(0); ret 0xfbf4; 
0x000000000045d403: test eax, 0x48ffff84; add esp, 0xd8; ret; 
0x00000000004bc280: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000433ec6: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004bcfb2: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000404a4d: test eax, 0xb8fffff6; ret 0x4b7c; 
0x00000000004454ee: test eax, 0xd8c48148; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042c532: test eax, 0xe3c4c9eb; jns 0x2c59c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042cd12: test eax, 0xe3c4c9eb; jns 0x2cd7c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043ec98: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000044384b: test eax, eax; cmove eax, edx; ret; 
0x0000000000440f56: test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000418dc8: test eax, eax; je 0x18dce; pop rbx; ret; 
0x0000000000418ea5: test eax, eax; je 0x18eab; call rax; 
0x0000000000401a51: test eax, eax; je 0x1a5e; xor esi, esi; mov edi, 1; call rax; 
0x0000000000420126: test eax, eax; je 0x2012c; call rax; 
0x0000000000424823: test eax, eax; je 0x24828; xchg edx, eax; sub eax, edx; ret; 
0x0000000000402597: test eax, eax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004027e3: test eax, eax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004002d4: test eax, eax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x000000000042dda6: test eax, eax; je 0x2ddc0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042df9f: test eax, eax; je 0x2dfb0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004030c2: test eax, eax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x0000000000403311: test eax, eax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403598: test eax, eax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x0000000000403505: test eax, eax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403766: test eax, eax; je 0x378d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x0000000000403920: test eax, eax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403a68: test eax, eax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x0000000000403cc0: test eax, eax; je 0x3ce0; movsxd r12, r12d; mov rdi, r12; mov eax, 3; syscall; 
0x000000000043f796: test eax, eax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x000000000043f7ae: test eax, eax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000044529f: test eax, eax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x0000000000445426: test eax, eax; je 0x45430; ret; 
0x0000000000446a04: test eax, eax; je 0x46ab0; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x0000000000446b03: test eax, eax; je 0x46d00; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x000000000044ec5e: test eax, eax; je 0x4ec69; mov edi, 0x6cd720; call rax; 
0x000000000044ec8d: test eax, eax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c7: test eax, eax; je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044ed8e: test eax, eax; je 0x4ed94; call rax; 
0x000000000044eded: test eax, eax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef66: test eax, eax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f246: test eax, eax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000044f34a: test eax, eax; je 0x4f350; call rax; 
0x0000000000450209: test eax, eax; je 0x5020f; call rax; 
0x0000000000479221: test eax, eax; je 0x7923a; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479298: test eax, eax; je 0x792af; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x0000000000479547: test eax, eax; je 0x7956e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479782: test eax, eax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x000000000047d776: test eax, eax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d79e: test eax, eax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d814: test eax, eax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed39: test eax, eax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f32a: test eax, eax; je 0x7f349; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f2e1: test eax, eax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000480a9c: test eax, eax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000480a79: test eax, eax; je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480bfa: test eax, eax; je 0x80c05; mov edi, 0x6cc140; call rax; 
0x0000000000480c0b: test eax, eax; je 0x80c20; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c36d: test eax, eax; je 0x8c37c; mov qword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000048c5c4: test eax, eax; je 0x8c5d8; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x000000000048c6fd: test eax, eax; je 0x8c610; mov rsi, rbx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x000000000048c75f: test eax, eax; je 0x8c76a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048c990: test eax, eax; je 0x8c9a0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008db: test eax, eax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400929: test eax, eax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400958: test eax, eax; je 0x963; mov edi, 0x4befc0; call rax; 
0x0000000000498676: test eax, eax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x00000000004986a2: test eax, eax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x0000000000498948: test eax, eax; je 0x98955; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a6: test eax, eax; je 0x998; call rax; 
0x000000000049a230: test eax, eax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2d8: test eax, eax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049cdf1: test eax, eax; je 0x9ce00; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d335: test eax, eax; je 0x9d348; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049f3c8: test eax, eax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x000000000049f489: test eax, eax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x00000000004a112c: test eax, eax; je 0xa1137; call rax; 
0x000000000044e720: test eax, eax; jle 0x4e72c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004163a5: test eax, eax; jne 0x163d9; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000427177: test eax, eax; jne 0x271d0; xor rax, rax; ret; 
0x0000000000427137: test eax, eax; jne 0x271f0; xor rax, rax; ret; 
0x000000000042def1: test eax, eax; jne 0x2df40; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043ce00: test eax, eax; jne 0x3ce14; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000403f11: test eax, eax; jne 0x3ee5; mov rdi, r12; mov eax, 3; syscall; 
0x00000000004435cd: test eax, eax; jne 0x43598; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x0000000000443970: test eax, eax; jne 0x43964; pop rdx; pop r10; ret; 
0x000000000046d557: test eax, eax; jne 0x6d568; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000047b08f: test eax, eax; jne 0x7a560; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047d36e: test eax, eax; jne 0x7d390; mov qword ptr [rbx], 0; or dword ptr [rip + 0x24edf0], 1; pop rbx; ret; 
0x0000000000480eb9: test eax, eax; jne 0x80ed8; cmp qword ptr [rsp + 0x28], 0; jne 0x80ed0; add rsp, 0x38; ret; 
0x00000000004967c2: test eax, eax; jne 0x967af; mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000412c62: test eax, eax; js 0x12c70; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x000000000044510d: test eax, eax; mov qword ptr [rsp], rcx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x00000000004403e1: test eax, eax; mov rax, 0xffffffffffffffff; cmove rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000452eca: test eax, eax; mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x00000000004736bc: test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x000000000048c8a3: test eax, eax; setne al; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000049a1c1: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000046b96d: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x38]; 
0x000000000046cf4b: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000046c98c: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 0x1076b322], cl; call qword ptr [rax + 0x18]; 
0x000000000045852c: test ebp, ebp; jle 0x5854b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000462b2c: test ebp, ebp; jle 0x62b4b; mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000049f59e: test ebp, ebp; jne 0x9f578; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004303de: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004270a0: test ebx, ebp; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000048c30e: test ebx, ebx; jne 0x8c320; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403007: test ebx, ebx; mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x347d; mov edi, 0x6cd720; call rbx; 
0x000000000049f6bc: test ebx, ebx; mov qword ptr [rip + 0x22debb], rbx; jne 0x9f6a8; pop rbx; ret; 
0x000000000049f550: test ebx, ebx; mov rdi, rbx; jne 0x9f540; pop rbx; ret; 
0x000000000041b77f: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000043ce42: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000473b88: test ecx, ecx; je 0x73b19; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x0000000000473b61: test ecx, ecx; jne 0x73b11; xor eax, eax; ret; 
0x000000000047b3b4: test ecx, ecx; jne 0x7ae00; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000048c20f: test ecx, ecx; jne 0x8c1de; mov dword ptr fs:[rdx], 5; pop rbx; ret; 
0x000000000041f6c4: test edi, ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004223d0: test edi, edi; je 0x223e0; mov eax, 0x16; ret; 
0x0000000000403c10: test edi, edi; je 0x3c3e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004407c9: test edi, edi; je 0x4078a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x000000000044116a: test edi, edi; je 0x41176; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411ab: test edi, edi; je 0x411b7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004411e3: test edi, edi; je 0x411ef; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044124c: test edi, edi; je 0x41258; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441284: test edi, edi; je 0x41290; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004412d2: test edi, edi; je 0x412de; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044130a: test edi, edi; je 0x41316; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044138f: test edi, edi; je 0x4139b; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004413c7: test edi, edi; je 0x413d3; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441415: test edi, edi; je 0x41421; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044144d: test edi, edi; je 0x41459; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414b6: test edi, edi; je 0x414c2; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414ee: test edi, edi; je 0x414fa; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441540: test edi, edi; je 0x4154c; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442d1d: test edi, edi; je 0x42d29; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442d55: test edi, edi; je 0x42d61; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442da3: test edi, edi; je 0x42daf; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ddb: test edi, edi; je 0x42de7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e45: test edi, edi; je 0x42e51; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e7d: test edi, edi; je 0x42e89; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442ecb: test edi, edi; je 0x42ed7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f03: test edi, edi; je 0x42f0f; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f88: test edi, edi; je 0x42f94; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442fc0: test edi, edi; je 0x42fcc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044300e: test edi, edi; je 0x4301a; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443046: test edi, edi; je 0x43052; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430b0: test edi, edi; je 0x430bc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430e8: test edi, edi; je 0x430f4; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443136: test edi, edi; je 0x43142; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443154: test edi, edi; je 0x43160; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x000000000044e707: test edi, edi; je 0x4e6da; call 0x80e90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004a1123: test edi, edi; je 0xa113c; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x000000000046a714: test edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000044ac77: test edi, esi; add al, 0; add byte ptr [rax - 0x73], cl; add ecx, dword ptr [rax + 0x39]; ret; 
0x00000000004211bc: test edi, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000427c7e: test edx, 0xffffffc0; jne 0x27ca0; and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427a94: test edx, 0xfffffff8; jne 0x27ab0; and edx, 7; jne 0x27946; mov rax, rdi; ret; 
0x0000000000443941: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000424a02: test edx, edx; je 0x24a0a; bsf eax, edx; ret; 
0x0000000000424aab: test edx, edx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a4a: test edx, edx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000046defa: test edx, edx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de8a: test edx, edx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004783cd: test edx, edx; je 0x783e2; mov qword ptr [rsp], r8; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x000000000047e8a0: test edx, edx; je 0x7e8ae; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c4e4: test edx, edx; je 0x8c4fe; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c677: test edx, edx; je 0x8c72e; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x0000000000416123: test edx, edx; jle 0x16170; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004144d3: test edx, edx; jne 0x144e0; ret; 
0x000000000047a891: test edx, edx; jne 0x7a367; mov qword ptr [rbp - 0xf8], r11; mov qword ptr [rbp - 0xd0], rsi; mov qword ptr [rbp - 0xc8], r10; call rax; 
0x000000000047b183: test edx, edx; jne 0x7acd5; mov qword ptr [rbp - 0xe0], r11; mov qword ptr [rbp - 0xc8], r10; mov qword ptr [rbp - 0xa8], rsi; call rax; 
0x00000000004967cf: test edx, edx; jne 0x967af; mov dword ptr fs:[0x2d0], eax; ret; 
0x0000000000497eb1: test edx, edx; jne 0x97eb8; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000040f69b: test edx, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041e213: test edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000043ce35: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000046ddf1: test esi, esi; jne 0x6ddf9; xor rax, rax; ret; 
0x000000000040dfc3: test esi, esi; jne 0xdff8; mov eax, 0xba; syscall; 
0x000000000043ce4f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000432912: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000440b55: test r13b, r13b; je 0x40b66; movsxd rdi, dword ptr [rsp + 0x10]; mov eax, 3; syscall; 
0x0000000000403f10: test r8, r8; jne 0x3ee5; mov rdi, r12; mov eax, 3; syscall; 
0x0000000000424822: test r8d, r8d; je 0x24828; xchg edx, eax; sub eax, edx; ret; 
0x000000000047b08e: test r8d, r8d; jne 0x7a560; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x000000000047b3b3: test r9d, r9d; jne 0x7ae00; mov rdx, qword ptr [rdx + 8]; add rdx, qword ptr [rax]; mov rax, rdx; call rax; 
0x0000000000418dc7: test rax, rax; je 0x18dce; pop rbx; ret; 
0x0000000000418ea4: test rax, rax; je 0x18eab; call rax; 
0x0000000000401a50: test rax, rax; je 0x1a5e; xor esi, esi; mov edi, 1; call rax; 
0x0000000000420125: test rax, rax; je 0x2012c; call rax; 
0x0000000000402596: test rax, rax; je 0x25a4; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004027e2: test rax, rax; je 0x27f0; lea rdi, [rbx + 0x80]; call rax; 
0x00000000004002d3: test rax, rax; je 0x2dd; call 0xffffffffffc00000; add rsp, 8; ret; 
0x00000000004030c1: test rax, rax; je 0x30cd; mov edi, 0x6cd060; call rax; 
0x0000000000403310: test rax, rax; je 0x3326; mov edi, 0x6ccfe0; call rax; 
0x0000000000403597: test rax, rax; je 0x3351; mov edi, 0x6ccfe0; call rax; 
0x0000000000403504: test rax, rax; je 0x351a; mov edi, 0x6ccfe0; call rax; 
0x0000000000403765: test rax, rax; je 0x378d; mov qword ptr [rbp - 0x90], r8; mov qword ptr [rbp - 0x88], rcx; mov edi, 0x6cd060; call rax; 
0x000000000040391f: test rax, rax; je 0x392b; mov edi, 0x6cd0a0; call rax; 
0x0000000000403a67: test rax, rax; je 0x3a73; mov edi, 0x6cd0a0; call rax; 
0x000000000043f795: test rax, rax; je 0x3f7a1; mov edi, 0x6cd720; call rax; 
0x000000000043f7ad: test rax, rax; je 0x3f7b9; mov edi, 0x6cd720; call rax; 
0x000000000044529e: test rax, rax; je 0x452aa; mov edi, 0x6cc140; call rax; 
0x0000000000446a03: test rax, rax; je 0x46ab0; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x0000000000446b02: test rax, rax; je 0x46d00; mov esi, 0x447700; mov edi, 0x6cd6d8; call rax; 
0x000000000044ec5d: test rax, rax; je 0x4ec69; mov edi, 0x6cd720; call rax; 
0x000000000044ec8c: test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x000000000044f2c6: test rax, rax; je 0x4eca3; mov edi, 0x6cd720; call rax; 
0x000000000044ed8d: test rax, rax; je 0x4ed94; call rax; 
0x000000000044edec: test rax, rax; je 0x4edf8; mov edi, 0x6cd720; call rax; 
0x000000000044ef65: test rax, rax; je 0x4ef78; mov edi, 0x6cd720; call rax; 
0x000000000044f245: test rax, rax; je 0x4f251; mov edi, 0x6cd720; call rax; 
0x000000000044f349: test rax, rax; je 0x4f350; call rax; 
0x0000000000450208: test rax, rax; je 0x5020f; call rax; 
0x0000000000479220: test rax, rax; je 0x7923a; mov qword ptr [rbp - 0xb8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479297: test rax, rax; je 0x792af; mov dword ptr [rbp - 0xa0], edx; mov edi, 0x6cc140; call rax; 
0x0000000000479546: test rax, rax; je 0x7956e; mov qword ptr [rbp - 0xd0], r8; mov qword ptr [rbp - 0xc8], r9; mov edi, 0x6cc140; call rax; 
0x0000000000479781: test rax, rax; je 0x7978d; mov edi, 0x6cc100; call rax; 
0x000000000047d775: test rax, rax; je 0x7d781; mov edi, 0x6cc140; call rax; 
0x000000000047d79d: test rax, rax; je 0x7d7a9; mov edi, 0x6cc140; call rax; 
0x000000000047d813: test rax, rax; je 0x7d81f; mov edi, 0x6cc140; call rax; 
0x000000000047ed38: test rax, rax; je 0x7ed46; mov rdi, qword ptr [rbp - 0x88]; call rax; 
0x000000000047f329: test rax, rax; je 0x7f349; pop rbx; mov edi, 0x6cc140; jmp rax; 
0x000000000047f2e0: test rax, rax; je 0x7f350; mov edi, 0x6cc140; call rax; 
0x0000000000480a9b: test rax, rax; je 0x80a62; mov edi, 0x6cc140; call rax; 
0x0000000000480a78: test rax, rax; je 0x80a8e; mov qword ptr [rsp + 8], rsi; mov edi, 0x6cc140; call rax; 
0x0000000000480bf9: test rax, rax; je 0x80c05; mov edi, 0x6cc140; call rax; 
0x0000000000480c0a: test rax, rax; je 0x80c20; mov edi, 0x6cc140; add rsp, 8; jmp rax; 
0x000000000048c5c3: test rax, rax; je 0x8c5d8; pop rbx; xor esi, esi; mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x000000000048c6fc: test rax, rax; je 0x8c610; mov rsi, rbx; mov edi, dword ptr [rip + 0x2412b6]; call rax; 
0x000000000048c75e: test rax, rax; je 0x8c76a; mov qword ptr [rax], 0x6ccae0; add rsp, 8; ret; 
0x000000000048c98f: test rax, rax; je 0x8c9a0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004008da: test rax, rax; je 0x8f0; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400928: test rax, rax; je 0x938; pop rbp; mov edi, 0x6ccb50; jmp rax; 
0x0000000000400957: test rax, rax; je 0x963; mov edi, 0x4befc0; call rax; 
0x0000000000498675: test rax, rax; je 0x98681; mov edi, 0x6cc140; call rax; 
0x00000000004986a1: test rax, rax; je 0x986ad; mov edi, 0x6cc140; call rax; 
0x0000000000498947: test rax, rax; je 0x98955; mov rax, qword ptr [rax + 8]; add rax, qword ptr [rbx]; call rax; 
0x00000000004009a5: test rax, rax; je 0x998; call rax; 
0x000000000049a22f: test rax, rax; je 0x9a23b; mov edi, 0x6cc140; call rax; 
0x000000000049a2d7: test rax, rax; je 0x9a2e3; mov edi, 0x6cc140; call rax; 
0x000000000049cdf0: test rax, rax; je 0x9ce00; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049d334: test rax, rax; je 0x9d348; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049f3c7: test rax, rax; je 0x9f3d3; mov edi, 0x6cc100; call rax; 
0x000000000049f488: test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x00000000004a112b: test rax, rax; je 0xa1137; call rax; 
0x00000000004435cc: test rax, rax; jne 0x43598; movsxd rdi, dword ptr [rbp - 0x68]; mov eax, 3; syscall; 
0x0000000000412c61: test rax, rax; js 0x12c70; mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x000000000044510c: test rax, rax; mov qword ptr [rsp], rcx; je 0x4511c; mov edi, 0x6cc140; call rax; 
0x0000000000452ec9: test rax, rax; mov rdi, rax; mov byte ptr [rsi], dl; jne 0x52eb8; mov rax, rsi; ret; 
0x000000000049f59d: test rbp, rbp; jne 0x9f578; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048c30d: test rbx, rbx; jne 0x8c320; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403006: test rbx, rbx; mov eax, dword ptr fs:[rax]; mov dword ptr [rbp - 0xc4], eax; je 0x347d; mov edi, 0x6cd720; call rbx; 
0x000000000049f6bb: test rbx, rbx; mov qword ptr [rip + 0x22debb], rbx; jne 0x9f6a8; pop rbx; ret; 
0x000000000049f54f: test rbx, rbx; mov rdi, rbx; jne 0x9f540; pop rbx; ret; 
0x0000000000403c0f: test rdi, rdi; je 0x3c3e; mov ecx, 2; xor esi, esi; mov eax, ecx; syscall; 
0x00000000004407c8: test rdi, rdi; je 0x4078a; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; mov eax, 0x4f; syscall; 
0x0000000000441169: test rdi, rdi; je 0x41176; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004411aa: test rdi, rdi; je 0x411b7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004411e2: test rdi, rdi; je 0x411ef; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044124b: test rdi, rdi; je 0x41258; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441283: test rdi, rdi; je 0x41290; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004412d1: test rdi, rdi; je 0x412de; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441309: test rdi, rdi; je 0x41316; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044138e: test rdi, rdi; je 0x4139b; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004413c6: test rdi, rdi; je 0x413d3; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000441414: test rdi, rdi; je 0x41421; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044144c: test rdi, rdi; je 0x41459; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414b5: test rdi, rdi; je 0x414c2; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004414ed: test rdi, rdi; je 0x414fa; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044153f: test rdi, rdi; je 0x4154c; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442d1c: test rdi, rdi; je 0x42d29; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442d54: test rdi, rdi; je 0x42d61; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442da2: test rdi, rdi; je 0x42daf; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442dda: test rdi, rdi; je 0x42de7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e44: test rdi, rdi; je 0x42e51; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442e7c: test rdi, rdi; je 0x42e89; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442eca: test rdi, rdi; je 0x42ed7; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f02: test rdi, rdi; je 0x42f0f; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442f87: test rdi, rdi; je 0x42f94; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000442fbf: test rdi, rdi; je 0x42fcc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044300d: test rdi, rdi; je 0x4301a; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443045: test rdi, rdi; je 0x43052; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430af: test rdi, rdi; je 0x430bc; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004430e7: test rdi, rdi; je 0x430f4; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443135: test rdi, rdi; je 0x43142; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000443153: test rdi, rdi; je 0x43160; mov rsi, rbx; call 0x41120; mov rdi, qword ptr [r14]; call rbx; 
0x000000000044e706: test rdi, rdi; je 0x4e6da; call 0x80e90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004a1122: test rdi, rdi; je 0xa113c; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa1137; call rax; 
0x0000000000427c7d: test rdx, -0x40; jne 0x27ca0; and edx, 0x3f; jne 0x27946; mov rax, rdi; ret; 
0x0000000000427a93: test rdx, -8; jne 0x27ab0; and edx, 7; jne 0x27946; mov rax, rdi; ret; 
0x0000000000443940: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000424aaa: test rdx, rdx; je 0x24ac0; bsf rax, rdx; ret; 
0x0000000000424a49: test rdx, rdx; je 0x24ad0; bsf rax, rdx; ret; 
0x000000000046def9: test rdx, rdx; je 0x6df20; bsf rax, rdx; ret; 
0x000000000046de89: test rdx, rdx; je 0x6df30; bsf rax, rdx; ret; 
0x00000000004783cc: test rdx, rdx; je 0x783e2; mov qword ptr [rsp], r8; lea rdi, [rax + 0x6cc1e0]; call rdx; 
0x000000000047e89f: test rdx, rdx; je 0x7e8ae; mov rax, qword ptr [r13]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c4e3: test rdx, rdx; je 0x8c4fe; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x000000000048c676: test rdx, rdx; je 0x8c72e; mov esi, 0x48c590; mov edi, 0x6cd9c4; call rdx; 
0x00000000004144d2: test rdx, rdx; jne 0x144e0; ret; 
0x000000000046ddf0: test rsi, rsi; jne 0x6ddf9; xor rax, rax; ret; 
0x0000000000422140: test sil, 7; mov eax, 0x16; je 0x22150; ret; 
0x0000000000447e54: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043f5c7: ud0; and al, 0xc5; sub byte ptr [rdx + rcx*2], cl; mov eax, 8; pop rbx; ret; 
0x0000000000414fff: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x000000000043697d: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004339b0: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000436981: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000433994: vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004339b4: vmovdqu xmm7, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043698a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000433c96: vmovdqu xmmword ptr [rax + 0x30], xmm8; vmovdqu xmmword ptr [rax + 0x40], xmm9; vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433c9b: vmovdqu xmmword ptr [rax + 0x40], xmm9; vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433ca0: vmovdqu xmmword ptr [rax + 0x50], xmm10; vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433ca5: vmovdqu xmmword ptr [rax + 0x60], xmm11; vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433caa: vmovdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000433be0: vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433bdb: vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433bd6: vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433bd1: vmovdqu xmmword ptr [rcx - 0x40], xmm9; vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x0000000000433bcc: vmovdqu xmmword ptr [rcx - 0x50], xmm8; vmovdqu xmmword ptr [rcx - 0x40], xmm9; vmovdqu xmmword ptr [rcx - 0x30], xmm10; vmovdqu xmmword ptr [rcx - 0x20], xmm11; vmovdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000043ed79: vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043399e: vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043ed53: vmovdqu xmmword ptr [rdi + 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000433962: vmovdqu xmmword ptr [rdi + 0x30], xmm3; vmovdqu xmmword ptr [rdx - 0x40], xmm4; vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x00000000004339a9: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004339a3: vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000436986: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043ed75: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043399a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + 0x10], xmm1; vmovdqu xmmword ptr [rdi + rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004339ba: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000043ed90: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000433aef: vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x0000000000433913: vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000433976: vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433aea: vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x000000000043390e: vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x0000000000433971: vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433ae5: vmovdqu xmmword ptr [rdx - 0x30], xmm10; vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x0000000000433909: vmovdqu xmmword ptr [rdx - 0x30], xmm13; vmovdqu xmmword ptr [rdx - 0x20], xmm14; vmovdqu xmmword ptr [rdx - 0x10], xmm15; ret; 
0x000000000043396c: vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433967: vmovdqu xmmword ptr [rdx - 0x40], xmm4; vmovdqu xmmword ptr [rdx - 0x30], xmm5; vmovdqu xmmword ptr [rdx - 0x20], xmm6; vmovdqu xmmword ptr [rdx - 0x10], xmm7; ret; 
0x0000000000433ae0: vmovdqu xmmword ptr [rdx - 0x40], xmm9; vmovdqu xmmword ptr [rdx - 0x30], xmm10; vmovdqu xmmword ptr [rdx - 0x20], xmm11; vmovdqu xmmword ptr [rdx - 0x10], xmm12; mov rax, r8; ret; 
0x000000000043ed3a: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed35: vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed30: vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed2b: vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043ed26: vmovdqu xmmword ptr [rsi - 0x50], xmm0; vmovdqu xmmword ptr [rsi - 0x40], xmm0; vmovdqu xmmword ptr [rsi - 0x30], xmm0; vmovdqu xmmword ptr [rsi - 0x20], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000436969: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043696d: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436949: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436976: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043695d: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436957: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436952: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436972: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043694e: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000043ef0b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043ee31: vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043ef0f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043ee2c: vmovdqu ymmword ptr [rsi - 0x40], ymm0; vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043ee27: vmovdqu ymmword ptr [rsi - 0x60], ymm0; vmovdqu ymmword ptr [rsi - 0x40], ymm0; vmovdqu ymmword ptr [rsi - 0x20], ymm0; sub rax, rdx; vzeroupper; ret; 
0x000000000043eda5: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043eda9: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000436c85: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c8c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436c93: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004368dd: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b2c: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043692e: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004368f2: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b25: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436927: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004368eb: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436b1e: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004368e4: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436920: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043eedd: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436de0: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436de7: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436dee: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000436df5: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043eef8: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f0ba: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c1: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f0c8: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043f01d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f024: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043f02b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043eeca: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eec3: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043eebc: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000405a0d: vpsubsb xmm15, xmm15, xmmword ptr [rdi + rbp*8 + 0x29480001]; ret; 
0x000000000043ee39: vzeroupper; ret; 
0x00000000004c8b6d: wait; add byte ptr [rax], al; adc byte ptr [rsp + rdi*8], bh; jmp qword ptr [rdx]; 
0x00000000004c8b25: wait; add byte ptr [rax], al; cwde; jp 0xc8b1e; jmp qword ptr [rsi]; 
0x0000000000477fcb: wait; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a4279: xabort -1; xbegin 0xa3980; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x00000000004a427c: xbegin 0xa3980; xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x00000000004a42fd: xbegin 0xfffffffff8d20402; call qword ptr [rax - 0x38]; 
0x00000000004a4281: xbegin 0xfffffffff8d2c986; jmp qword ptr [rsi]; 
0x000000000042462f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042b0cf: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042421f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000423d2b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a40a9: xchg al, bh; jmp rax; 
0x0000000000417552: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x00000000004602de: xchg al, bl; add byte ptr [rax], al; add byte ptr [rcx - 0x3f], cl; inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004a4284: xchg al, cl; clc; jmp qword ptr [rsi]; 
0x000000000042453b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042cd1c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000042c53c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000042c92c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c14c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049296d: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443547: xchg bl, ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd0; 
0x0000000000491471: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x0000000000492671: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491d71: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000492071: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000491769: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c3c3: xchg byte ptr [r14], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000049ab42: xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x000000000049ab52: xchg byte ptr [rax + 0x48000000], ch; add esp, 8; ret; 
0x000000000049ab19: xchg byte ptr [rax + 0x48000000], dh; add esp, 8; ret; 
0x000000000042bc2f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b40f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x0000000000423faf: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042abef: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x00000000004242ef: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000042460b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004c7605: xchg byte ptr [rax], al; add al, cl; sti; call qword ptr [rdi]; 
0x00000000004c76bd: xchg byte ptr [rax], al; add byte ptr [rax + 0x4f], dh; sti; jmp qword ptr [rdx]; 
0x000000000042c2eb: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004246db: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004c7604: xchg byte ptr [rax], r8b; add al, cl; sti; call qword ptr [rdi]; 
0x000000000042b74f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042af2f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a70f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b8ef: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042448f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000423c7f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000049c47c: xchg byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x000000000042407f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042c7dc: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042bffc: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042d10c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000426f51: xchg byte ptr [rdx + 0x48000002], ch; add eax, edi; add rax, rcx; ret; 
0x000000000049b892: xchg byte ptr [rdx + 1], dh; add byte ptr [rax], al; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000042455f: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000423d4f: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042aa4f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c74d4: xchg byte ptr [rdx], al; or eax, 0x38f4806; mov es, word ptr [rcx*4 + 0x4b068c05]; add dword ptr [rdi], 3; mov bl, 2; ret; 
0x0000000000423df1: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049d5c6: xchg byte ptr [rdx], cl; idiv edi; nop word ptr [rax + rax]; mov eax, 4; add rsp, 8; ret; 
0x000000000042414f: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000491a16: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ab85: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b885: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492916: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000492016: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000491d16: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043c31e: xchg byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042b3a5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042c6dd: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004a4540: xchg byte ptr [rsi], bl; stc; call qword ptr [rsi]; 
0x000000000049170e: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042d00d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004243bf: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049079f: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004905bf: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000490f97: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048feb7: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490db7: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042bbc5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aec5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000042a9e5: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042b6e5: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042c82d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042c04d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000423e15: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000458841: xchg dl, cl; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx - 0x77000000], dh; ret 0xe283; 
0x000000000043c2c5: xchg dword ptr [r14], r8d; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000413c72: xchg dword ptr [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; sub rax, rdx; ret; 
0x000000000046d002: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x6d010; ret; 
0x00000000004c77a5: xchg dword ptr [rax], eax; add byte ptr [rax + 0x52], ch; sti; call qword ptr [rsi]; 
0x00000000004c76dd: xchg dword ptr [rax], eax; add byte ptr [rax], al; push rax; sti; jmp qword ptr [rdx]; 
0x0000000000479746: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000478943: xchg dword ptr [rax], esp; ret 0x6c; 
0x000000000049abec: xchg dword ptr [rbp + 8], ecx; add byte ptr [rax], al; movsxd rcx, dword ptr [r14 + rsi*4]; add rcx, r14; jmp rcx; 
0x0000000000446456: xchg dword ptr [rbp + rcx*4 + 0x24], ecx; ret; 
0x000000000047f341: xchg dword ptr [rbx + rax], edx; add byte ptr [rax], al; or byte ptr [rsp + riz*2 + 0x5b], dh; ret; 
0x000000000045ed1d: xchg dword ptr [rbx + rcx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000467545: xchg dword ptr [rbx - 0x76fffffd], eax; ret 0x348; 
0x000000000044f955: xchg dword ptr [rbx - 0x7c000005], ecx; ret 0x8901; 
0x0000000000412756: xchg dword ptr [rbx], ebp; add byte ptr [rax + 2], dil; syscall; 
0x000000000047ca7d: xchg dword ptr [rbx], edx; and eax, 0x6894800; ret; 
0x00000000004b9f4c: xchg dword ptr [rcx + 0x79], ecx; xchg edx, eax; ret 0xf869; 
0x000000000046557b: xchg dword ptr [rcx - 0x7d000000], ebx; ret 0x8308; 
0x000000000044aa62: xchg dword ptr [rcx], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x0000000000431685: xchg dword ptr [rdi + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046a4b3: xchg dword ptr [rdi - 0x77000000], ebp; ret 0x348; 
0x000000000044396e: xchg dword ptr [rdi], eax; test eax, eax; jne 0x43964; pop rdx; pop r10; ret; 
0x0000000000476ea8: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x00000000004682c9: xchg dword ptr [rip - 0x76ffffff], eax; ret 0x348; 
0x000000000043c2c6: xchg dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004ba0eb: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000049cd92: xchg eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; call 0x481056dd; mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000045de05: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000410a4a: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; call qword ptr [rax + 0x38]; 
0x00000000004164f9: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; mov rbp, rdx; call qword ptr [rax + 0x60]; 
0x00000000004161a2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov ebx, edi; call qword ptr [rax + 0x20]; 
0x00000000004165c2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x00000000004112a7: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000416ca2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x00000000004221b7: xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x00000000004a40ad: xchg eax, edi; push qword ptr [rax]; mov eax, edi; inc dword ptr [rax - 0x2f000776]; mov edi, eax; jmp qword ptr [rax]; 
0x000000000048faf8: xchg ebp, eax; adc eax, 0x83480000; ret 0xe910; 
0x000000000041ceab: xchg ebp, eax; add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; and al, 0x89; ret 0xb48b; 
0x0000000000448e8b: xchg ebp, eax; add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rcx + 0x39], cl; ret 0x1e76; 
0x000000000046cf86: xchg ebp, eax; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000044d80b: xchg ebp, eax; add byte ptr [rbp + 0xd840fd2], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x0000000000412572: xchg ebp, eax; add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x0000000000453ea2: xchg ebp, eax; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0xe920; 
0x000000000046f9d3: xchg ebp, eax; mov dword ptr [rbx - 0x74b7f808], 0xf70244c; xchg ebp, eax; ret 0x8b4c; 
0x0000000000495b81: xchg ebp, eax; ret 0x3840; 
0x000000000046b5b7: xchg ebp, eax; ret 0x5389; 
0x000000000041d354: xchg ebp, eax; ret 0x8348; 
0x000000000046f9de: xchg ebp, eax; ret 0x8b4c; 
0x0000000000482f85: xchg ebp, eax; ret 0x941; 
0x0000000000403d27: xchg ebp, eax; ret 0x953d; 
0x00000000004706cb: xchg ebp, eax; ret 0xb60f; 
0x000000000046fb81: xchg ebp, eax; ret 0xb8e9; 
0x000000000047414f: xchg ebp, eax; ret 0xc084; 
0x000000000045bf25: xchg ebp, eax; ret 0xc283; 
0x0000000000444688: xchg ebp, eax; ret 0xc985; 
0x000000000048189a: xchg ebp, eax; ret 0xd348; 
0x000000000046fa3c: xchg ebp, eax; ret 0xd721; 
0x0000000000410374: xchg ebp, eax; ret 0xdaf7; 
0x0000000000445461: xchg ebp, eax; ret 0xe1eb; 
0x000000000046f670: xchg ebp, eax; ret 0xe883; 
0x000000000049c30d: xchg ebp, eax; ret 0xf45; 
0x000000000047063f: xchg ebp, eax; ret 0xf748; 
0x000000000041bf9a: xchg ebp, eax; ret; 
0x000000000049a1c4: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000048c8a6: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000417a4d: xchg ebp, eax; sal bh, 0xd8; ret; 
0x00000000004686d9: xchg ebp, eax; sar bl, 0xff; dec dword ptr [rax + 0x39]; ret 0x940f; 
0x000000000041f0e9: xchg ebx, eax; add al, byte ptr [rax]; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000472b70: xchg ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048f0b5: xchg ebx, eax; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042f6a0: xchg ebx, eax; add rcx, r11; jmp rcx; 
0x00000000004c6591: xchg ebx, eax; cli; jmp qword ptr [rax]; 
0x000000000048c369: xchg ebx, eax; cmp al, 0xb7; inc dword ptr [rbp + 0x480b74c0]; mov dword ptr [rip + 0x24164c], 0x6cd9e0; add rsp, 8; ret; 
0x000000000046d20d: xchg ebx, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x000000000043c2cc: xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430e22: xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443169: xchg ebx, eax; mov edi, 0x8b49fffd; jge 0x43171; call rbx; 
0x000000000049b6e7: xchg ebx, eax; nop dword ptr [rax + rax]; mov eax, 5; ret; 
0x0000000000450d90: xchg ebx, eax; ret 0x3948; 
0x00000000004518ee: xchg ebx, eax; ret 0x3949; 
0x000000000041234f: xchg ebx, eax; ret 0x840; 
0x0000000000451dc3: xchg ebx, eax; ret 0x8548; 
0x000000000046c9f4: xchg ebx, eax; ret 0xd108; 
0x00000000004c7f79: xchg ebx, eax; std; call rcx; 
0x00000000004c80c5: xchg ecx, eax; add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x0000000000481556: xchg ecx, eax; add r8b, bpl; adc al, byte ptr [rsi]; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000470683: xchg ecx, eax; frstor dword ptr [rip - 0x3b7cb800]; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000042bcd1: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000436f26: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000004c8069: xchg ecx, eax; sti; call qword ptr [rax]; 
0x00000000004c80c9: xchg ecx, eax; sti; call qword ptr [rdx]; 
0x000000000042a3ff: xchg ecx, eax; sub eax, edx; ret; 
0x00000000004c879d: xchg edi, eax; add byte ptr [rax], al; jo 0xc87c9; cld; call qword ptr [rbp + 5]; 
0x00000000004c874d: xchg edi, eax; add byte ptr [rax], al; xor byte ptr [rsi], ah; cld; call qword ptr [rax + 1]; 
0x00000000004bb39f: xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x000000000041bcc5: xchg edi, eax; cli; sub al, byte ptr [rax]; mov rdi, r9; mov eax, 3; syscall; 
0x00000000004181d5: xchg edi, eax; lea eax, [rdx]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000441106: xchg edi, eax; pop rbx; pop rbp; pop r12; mov esi, 3; jmp rax; 
0x0000000000409ca5: xchg edi, eax; ret; 
0x000000000041611e: xchg edi, eax; rol byte ptr [rax], 0; add byte ptr [rbp + 0x48497ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000004435ab: xchg edi, eax; ror byte ptr [rdi], 0x92; ret 0xd029; 
0x000000000040193d: xchg edi, eax; sub al, 0; xor eax, eax; ret; 
0x0000000000431a75: xchg edi, eax; sub byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004ba598: xchg edi, eax; xchg esp, eax; ret; 
0x0000000000419e74: xchg edi, esp; add al, 0; add dh, dh; ret; 
0x00000000004686ef: xchg edx, eax; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x000000000041ce2c: xchg edx, eax; add dword ptr [rax], eax; add byte ptr [rbx + 0x488d2404], cl; add dword ptr [rcx], eax; ror byte ptr [rax - 0x73], 0x54; ret; 
0x00000000004188fa: xchg edx, eax; add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000489f12: xchg edx, eax; add r8b, bpl; push rsi; jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x00000000004bbe5d: xchg edx, eax; jae 0xbbe33; push rsi; pop rdx; je 0xbbe28; ret 0xacfc; 
0x000000000049104c: xchg edx, eax; lea rcx, [rip + 0x1744c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042d337: xchg edx, eax; lea rcx, [rip + 0x7b161]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042bcc7: xchg edx, eax; lea rcx, [rip + 0x7c7d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000047d3e9: xchg edx, eax; ret 0x8348; 
0x000000000047dc56: xchg edx, eax; ret 0xb60f; 
0x00000000004435ae: xchg edx, eax; ret 0xd029; 
0x00000000004b9f4f: xchg edx, eax; ret 0xf869; 
0x0000000000402d6a: xchg edx, eax; ret; 
0x0000000000443ee8: xchg edx, eax; rol cl, 0x6c; add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 0x4800443e], spl; mov dword ptr [rax + 8], edx; ret; 
0x00000000004a47a0: xchg edx, eax; sbb cl, bh; call qword ptr [rdx]; 
0x0000000000424827: xchg edx, eax; sub eax, edx; ret; 
0x000000000042f9a0: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000472236: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000004356d7: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000479bee: xchg esi, eax; and eax, 0xc0310025; add rsp, 8; ret; 
0x00000000004a4524: xchg esi, eax; and ecx, edi; jmp qword ptr [rsi]; 
0x000000000042fa5d: xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f9bb: xchg esi, eax; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004bc7ec: xchg esi, eax; ret 0xcd11; 
0x000000000042fa0c: xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004bf554: xchg esp, eax; add eax, 0x5b680000; hlt; call qword ptr [rax]; 
0x000000000047dbba: xchg esp, eax; and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rcx + 0x48b48d8], cl; ret 0x8b48; 
0x000000000045289d: xchg esp, eax; in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000004bafba: xchg esp, eax; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x0000000000416b1a: xchg esp, eax; mov esi, 0xc48348ff; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004bc9ff: xchg esp, eax; push rsi; cli; push 0x6e; ja 0xbc989; ret 0x48f; 
0x0000000000476217: xchg esp, eax; ret 0x1f0f; 
0x00000000004961ce: xchg esp, eax; ret 0x3840; 
0x000000000049590c: xchg esp, eax; ret 0x5438; 
0x000000000041c4c9: xchg esp, eax; ret 0x7ae9; 
0x00000000004626b5: xchg esp, eax; ret 0x7f3c; 
0x000000000043f20f: xchg esp, eax; ret 0x8341; 
0x000000000044b015: xchg esp, eax; ret 0x8348; 
0x000000000043f2af: xchg esp, eax; ret 0x8444; 
0x0000000000477e71: xchg esp, eax; ret 0x8545; 
0x000000000041f2e8: xchg esp, eax; ret 0x8548; 
0x000000000048c64e: xchg esp, eax; ret 0x950f; 
0x0000000000456848: xchg esp, eax; ret 0x9522; 
0x0000000000402c68: xchg esp, eax; ret 0xb60f; 
0x00000000004745ac: xchg esp, eax; ret 0xc283; 
0x0000000000495a99: xchg esp, eax; ret 0xd021; 
0x00000000004685f6: xchg esp, eax; ret 0xd309; 
0x000000000049585f: xchg esp, eax; ret 0xda38; 
0x0000000000410ccc: xchg esp, eax; ret 0xdaf7; 
0x000000000049c2ac: xchg esp, eax; ret 0xf45; 
0x000000000045a908: xchg esp, eax; ret 0xfa80; 
0x000000000043f232: xchg esp, eax; ret 0xfe83; 
0x000000000041f3d8: xchg esp, eax; ret; 
0x0000000000415108: xchg esp, eax; rol byte ptr [rax + rax*8 - 0x7d7af1], 0xff; dec dword ptr [rax - 0x75]; push rbx; sub cl, ch; ret 0xfffe; 
0x00000000004736bf: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x0000000000495434: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000045097a: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x0000000000443068: xchg esp, eax; sar ch, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045cb63: xchg esp, eax; shr cl, 0x63; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045cbdb: xchg esp, eax; shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9b54: xchg esp, eax; stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov byte ptr [rcx], bh; std; jmp qword ptr [rdx]; 
0x00000000004bcc17: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000043fd0f: xchg esp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004009fb: xchg r8d, eax; mov rdi, rax; call 0x109b0; nop; leave; ret; 
0x0000000000412571: xchg rbp, rax; add byte ptr [rcx - 0x7cb768f4], cl; ret 0x4801; 
0x000000000041a1c5: xlatb; add al, 0; add dh, dh; ret; 
0x00000000004727f5: xlatb; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004b2019: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000435512: xlatb; add rsi, rdx; lea r11, [rip + 0x6f1f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435392: xlatb; add rsi, rdx; lea r11, [rip + 0x6f373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435212: xlatb; add rsi, rdx; lea r11, [rip + 0x6f4f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435093: xlatb; add rsi, rdx; lea r11, [rip + 0x6f672]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434f12: xlatb; add rsi, rdx; lea r11, [rip + 0x6f7f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434d92: xlatb; add rsi, rdx; lea r11, [rip + 0x6f973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434c12: xlatb; add rsi, rdx; lea r11, [rip + 0x6faf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a92: xlatb; add rsi, rdx; lea r11, [rip + 0x6fc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434912: xlatb; add rsi, rdx; lea r11, [rip + 0x6fdf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434792: xlatb; add rsi, rdx; lea r11, [rip + 0x6ff73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434612: xlatb; add rsi, rdx; lea r11, [rip + 0x700f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434492: xlatb; add rsi, rdx; lea r11, [rip + 0x70273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434312: xlatb; add rsi, rdx; lea r11, [rip + 0x703f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434192: xlatb; add rsi, rdx; lea r11, [rip + 0x70573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434012: xlatb; add rsi, rdx; lea r11, [rip + 0x706f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fc8: xlatb; add rsi, rdx; lea r11, [rip + 0x7333d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb11: xlatb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041036b: xlatb; call qword ptr [rax + 0x60]; 
0x000000000045a90e: xlatb; dec dword ptr [rcx - 0xef43]; inc dword ptr [rax - 0x12743]; jmp qword ptr [rdi + 0xf]; 
0x000000000047a826: xlatb; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041b363: xlatb; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004bafc3: xlatb; jo 0xbb037; mov ebp, 0xfb67d10d; ret; 
0x0000000000435d2b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435930: xlatb; lea r11, [rip + 0x6eb98]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043577d: xlatb; lea r11, [rip + 0x6ef8b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ed8: xlatb; lea r11, [rip + 0x70830]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d7c: xlatb; lea r11, [rip + 0x7098c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043367b: xlatb; lea r11, [rip + 0x70c8d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edc: xlatb; lea r11, [rip + 0x7342c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e17: xlatb; lea r11, [rip + 0x734f1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f2: xlatb; lea r11, [rip + 0x740d6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000430078: xlatb; lea r11, [rip + 0x74150]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ffe9: xlatb; lea r11, [rip + 0x741df]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fdde: xlatb; lea r11, [rip + 0x743ea]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fcac: xlatb; lea r11, [rip + 0x7451c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fbe6: xlatb; lea r11, [rip + 0x745e2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fb68: xlatb; lea r11, [rip + 0x74660]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042fad1: xlatb; lea r11, [rip + 0x746f7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f8d5: xlatb; lea r11, [rip + 0x748f3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f7a4: xlatb; lea r11, [rip + 0x74a24]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042f695: xlatb; lea r11, [rip + 0x74b33]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000452f52: xlatb; mov byte ptr [rsi], al; jne 0x52f30; mov rax, rsi; ret; 
0x000000000040dfdd: xlatb; mov eax, 0xea; movsxd rdi, ecx; syscall; 
0x000000000043fb72: xlatb; mov eax, esi; syscall; 
0x000000000043fb82: xlatb; mov eax, r8d; syscall; 
0x0000000000431bc1: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x72742]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004bc466: xlatb; ret 0x4e27; 
0x000000000046e1d7: xlatb; ret 0x94c; 
0x0000000000426f9f: xlatb; ret 0xc085; 
0x0000000000422570: xlatb; ret 0xc148; 
0x0000000000424a24: xlatb; ret 0xf66; 
0x0000000000422579: xlatb; ret; 
0x000000000042ded1: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000043cdfe: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000427135: xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004392c2: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000004392fe: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000043cdf6: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000423a36: xlatb; sal bh, 1; ret 0x8000; 
0x00000000004238f6: xlatb; sal bh, 1; ret 0xc000; 
0x00000000004237b6: xlatb; sal bh, 1; ret 0xe000; 
0x0000000000423676: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000423536: xlatb; sal bh, 1; ret 0xf800; 
0x00000000004233f6: xlatb; sal bh, 1; ret 0xfc00; 
0x00000000004232b6: xlatb; sal bh, 1; ret 0xfe00; 
0x0000000000423176: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000423036: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000422ef6: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000422db6: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000422c76: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000422b36: xlatb; sal bh, 1; ret 0xfff8; 
0x00000000004229f6: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000004228b6: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000442f25: xlatb; sar ebp, 0xff; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000400b36: xlatb; sbb ecx, dword ptr [rdx]; call 0x109b0; nop; leave; ret; 
0x00000000004335ad: xlatb; sfence; lea r11, [rip + 0x70d58]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdf2: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000046e186: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000046e175: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000431535: xlatb; sub eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004355cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6eef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043544f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004352cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f1f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043514f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434fcf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f4f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434e4f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434ccf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b4f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6f976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004349cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6faf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043484f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6fc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6fdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043454f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6ff76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x700f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043424f: xlatb; sub rsi, rdx; lea r11, [rip + 0x70276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x703f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f56: xlatb; sub rsi, rdx; lea r11, [rip + 0x7056f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004bf379: xor ah, dh; call qword ptr [rdx]; 
0x0000000000440523: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0; syscall; 
0x0000000000440583: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x00000000004404c3: xor al, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x00000000004c7110: xor al, 0; add byte ptr [rax], al; push rsp; add dword ptr [rax], 0xfafa3800; jmp rdi; 
0x00000000004b9f4a: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg edx, eax; ret 0xf869; 
0x00000000004c13f4: xor al, 0x24; add byte ptr [rax], al; sbb byte ptr [rbp - 0xb], ah; jmp qword ptr [rax]; 
0x00000000004183c9: xor al, 0x2b; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004017d9: xor al, 0x39; mov qword ptr [rsi + 8], 0x6cde30; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041bd74: xor al, 0x4a; add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c39f4: xor al, 0x4a; add byte ptr [rax], al; sub byte ptr [rax + rdi*8], bl; call qword ptr [rax]; 
0x00000000004c55f4: xor al, 0x66; add byte ptr [rax], al; js 0xc55a5; stc; jmp qword ptr [rsi + 0x28]; 
0x000000000040592d: xor al, 0x89; ret 0x5525; 
0x00000000004c80f4: xor al, 0x91; add byte ptr [rax], al; pop rax; xchg ecx, eax; sti; call qword ptr [rdx]; 
0x00000000004c8cf4: xor al, 0x9d; add byte ptr [rax], al; test al, 0x3d; cld; call qword ptr [rax]; 
0x000000000046aa17: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004bb12a: xor al, 0xd8; ret; 
0x000000000047e767: xor al, 0xf8; jmp qword ptr [rsi + 0xf]; 
0x00000000004c3eb1: xor al, 0xf8; jmp rsp; 
0x00000000004be32d: xor al, 0xfd; call qword ptr [rax]; 
0x00000000004c9899: xor al, 0xfd; jmp qword ptr [rcx]; 
0x0000000000430e1c: xor al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c2275: xor al, byte ptr [rax]; add byte ptr [rax], bl; out dx, eax; cmc; call qword ptr [rax + 2]; 
0x000000000043c95a: xor al, byte ptr [rcx + 0x63490006]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043103a: xor al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a1356: xor al, ch; and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000474736: xor bh, bl; dec dword ptr [rax + 0x39]; ret; 
0x00000000004c97e9: xor bh, ch; call rsp; 
0x00000000004a43a0: xor bl, ch; clc; call qword ptr [rax]; 
0x00000000004270bd: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000427131: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000415cf0: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000049f304: xor byte ptr [rax + 0x39], cl; ret; 
0x000000000047051d: xor byte ptr [rax - 0x39], cl; ret; 
0x000000000044adfb: xor byte ptr [rax - 0x75], cl; and al, 0x20; call rax; 
0x0000000000441a43: xor byte ptr [rax - 0x75], cl; jge 0x41a08; mov r13d, ebx; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000480d40: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000480cce: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x50; jmp qword ptr [rax]; 
0x00000000004163a8: xor byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000042492f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000415cf1: xor byte ptr [rax - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x0000000000412e8c: xor byte ptr [rax - 0x77], cl; jae 0x12eb9; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000004766c3: xor byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000046d0c2: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004a4ab0: xor byte ptr [rax - 0x7fbf0007], al; stc; jmp qword ptr [rax - 0x80]; 
0x000000000046d042: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000046d15a: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfc2: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6d2: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000411d1d: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040ee22: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000040edda: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040fd59: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x125a0; add rsp, 0xd8; ret; 
0x000000000040fcc8: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x558b0; add rsp, 0xd8; ret; 
0x000000000047c6bc: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7c030; add rsp, 0xd8; ret; 
0x000000000048bf59: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8bf70; add rsp, 0xd8; ret; 
0x000000000043f5ec: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000046d00a: xor byte ptr [rax], al; je 0x6d010; ret; 
0x000000000049ab14: xor byte ptr [rbp + 0x24], dh; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000049d618: xor byte ptr [rbp + 0x25], dh; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x0000000000416960: xor byte ptr [rbp + 0xd], 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000043c8e1: xor byte ptr [rbp + rcx*4 + 0x1d], cl; cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rsi], 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043c2c1: xor byte ptr [rbp + rcx*4 + 0x1d], cl; xchg dword ptr [r14], r8d; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000403963: xor byte ptr [rbp - 0x7b], cl; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a054b: xor byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], -0x7c; ret; 
0x00000000004a40d8: xor byte ptr [rbp - 8], al; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; 
0x00000000004a40d8: xor byte ptr [rbp - 8], al; inc dword ptr [rax + 0x47]; clc; call qword ptr [rax + 0x49]; clc; jmp qword ptr [rax + 0x4b]; 
0x0000000000416c56: xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000049ee5e: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000427ceb: xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x0000000000416cae: xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x00000000004975db: xor byte ptr [rbx - 0xbf7b], cl; jmp qword ptr [rsi - 0x77]; 
0x00000000004c7810: xor byte ptr [rbx - 5], dl; jmp rdi; 
0x00000000004a4a58: xor byte ptr [rbx - 7], bh; inc dword ptr [rax + 0x7b]; stc; call qword ptr [rax + 0x7b]; 
0x000000000046d033: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000421a98: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000041bc9c: xor byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x00000000004a40b0: xor byte ptr [rcx - 0x757f0008], cl; clc; call rax; 
0x00000000004a40b0: xor byte ptr [rcx - 0x757f0008], cl; clc; call rax; mov edi, eax; jmp qword ptr [rax]; 
0x0000000000459817: xor byte ptr [rcx - 0x7d], al; std; xor byte ptr [rdi], cl; xchg esp, eax; ret; 
0x00000000004b8612: xor byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4b7d; 
0x000000000046d043: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000046d15b: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000046cfc3: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000046c6d3: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004168cc: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000411d1e: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000489f0c: xor byte ptr [rdi - 0x1f40ffb5], dl; xchg edx, eax; add r8b, bpl; push rsi; jl 0x89f10; jmp qword ptr [rsi + 0xf]; 
0x00000000004c1820: xor byte ptr [rdi - 0xb], ch; call qword ptr [rcx + 5]; 
0x000000000045da6d: xor byte ptr [rdi], 0x4b; add al, ch; cli; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004537ed: xor byte ptr [rdi], 0x4b; add al, ch; jp 0x537d7; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000431296: xor byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004597e2: xor byte ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000045cbd9: xor byte ptr [rdi], cl; xchg esp, eax; shr cl, 0x87; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004a4a1c: xor byte ptr [rdx - 7], bh; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; 
0x00000000004a4a1c: xor byte ptr [rdx - 7], bh; inc dword ptr [rax + 0x7a]; stc; call qword ptr [rax + 0x7a]; stc; jmp qword ptr [rax + 0x7a]; 
0x00000000004a46dc: xor byte ptr [rdx], ah; stc; inc eax; and ecx, edi; call qword ptr [rax + 0x21]; 
0x00000000004c24f7: xor byte ptr [rdx], al; ret; 
0x00000000004c3867: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; mov bh, 1; ret; 
0x00000000004bcfb6: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000042f74f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f74a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046e13c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004270be: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000427132: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000040e4aa: xor byte ptr [rsi - 0x73], cl; cmp al, 0x33; call rax; 
0x00000000004c8750: xor byte ptr [rsi], ah; cld; call qword ptr [rax + 1]; 
0x00000000004c7230: xor byte ptr [rsi], al; sti; call rsi; 
0x00000000004a4504: xor byte ptr [rsi], bl; stc; inc eax; sbb eax, 0x1d50fff9; stc; jmp rsi; 
0x000000000046e7bb: xor cl, byte ptr [rax + 0x39]; ret; 
0x0000000000413cc5: xor cl, byte ptr [rax + 0x63]; jg 0x13d3a; xor eax, eax; syscall; 
0x0000000000400c5e: xor cl, byte ptr [rax - 0x75]; clc; mov rdx, qword ptr [rax]; mov eax, 0; call rdx; 
0x000000000047bb76: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x000000000049741f: xor cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x0000000000441fe2: xor cl, byte ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000004017df: xor dh, bl; insb byte ptr [rdi], dx; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x00000000004a4208: xor dl, al; clc; jmp qword ptr [rax]; 
0x000000000049ebca: xor dl, byte ptr [rsi + rsi*4]; jmp qword ptr [rsi - 0x70]; 
0x000000000047f840: xor dl, dh; ret; 
0x0000000000440456: xor dword ptr [rax + 0x63], ecx; clc; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000040dfc6: xor dword ptr [rax + 0xba], edi; syscall; 
0x0000000000421dd5: xor dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000045b16d: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x000000000041ef9a: xor dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x00000000004168cb: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x00000000004404eb: xor dword ptr [rax], 0x51; add byte ptr [rax], al; ret; 
0x00000000004c20e5: xor dword ptr [rax], eax; add byte ptr [rax - 0x21], ch; cmc; jmp qword ptr [rdi + 3]; 
0x00000000004c216d: xor dword ptr [rax], eax; add byte ptr [rax], al; in al, 0xf5; jmp qword ptr [rdx]; 
0x000000000044ec86: xor dword ptr [rax], edi; test rax, rax; je 0x4eca0; mov edi, 0x6cd720; call rax; 
0x00000000004311ea: xor dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442483: xor dword ptr [rsi], eax; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000041796a: xor eax, 0x1002b5c; ret; 
0x000000000049ebd9: xor eax, 0x22f172; mov qword ptr [rsi + 0x28], rax; ret; 
0x000000000049ea81: xor eax, 0x22f2ca; mov qword ptr [rsi + 0x28], rax; ret; 
0x0000000000486dc9: xor eax, 0x40b9; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004bb0da: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000413f89: xor eax, 0x48ffffff; mov eax, dword ptr [rbx + 0xd8]; or esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004050c8: xor eax, 0x70e9004b; mov dl, 0xff; call qword ptr [rbp + 0x48]; 
0x000000000049a114: xor eax, 0x8948fffe; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000049ab3d: xor eax, 0x8b48fff7; xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x000000000041bd8d: xor eax, 0x8be8004a; ret; 
0x000000000046c5bd: xor eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x0000000000466815: xor eax, 0xe8004b4a; push rdx; mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x000000000040ee1f: xor eax, dword ptr [0x30]; call rax; 
0x00000000004c239d: xor eax, dword ptr [rax]; add byte ptr [rax], al; div ch; call qword ptr [rdx]; 
0x0000000000430fd0: xor eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000410dde: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000049d8cd: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000480f67: xor eax, eax; add rsp, 0x48; ret; 
0x000000000048103f: xor eax, eax; add rsp, 0x68; ret; 
0x000000000047d28a: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452e69: xor eax, eax; add rsp, 8; ret; 
0x000000000046d8a7: xor eax, eax; call rbx; 
0x0000000000417a47: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000443947: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000473caa: xor eax, eax; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000443b45: xor eax, eax; leave; ret; 
0x000000000046fb3a: xor eax, eax; mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000046b9a9: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004419bb: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000443abf: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041fcfd: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004953a8: xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000040f02d: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004249bc: xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004134dc: xor eax, eax; pop rbx; ret; 
0x0000000000401940: xor eax, eax; ret; 
0x000000000042f66e: xor eax, eax; sub eax, ecx; ret; 
0x0000000000413cca: xor eax, eax; syscall; 
0x000000000043f520: xor eax, eax; test ch, 0xf0; je 0x3f512; movzx eax, cl; pop rbx; ret; 
0x0000000000473b86: xor eax, eax; test ecx, ecx; je 0x73b19; cmp byte ptr [rsi - 2], 0x3a; cmove rax, r9; ret; 
0x00000000004144d0: xor eax, eax; test rdx, rdx; jne 0x144e0; ret; 
0x000000000046e05b: xor eax, edx; and rax, rcx; je 0x6e220; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e2df: xor eax, edx; and rsi, rax; je 0x6e220; bsr rax, rsi; add rax, rdi; ret; 
0x000000000045a785: xor ebp, ebp; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x00000000004be325: xor ebp, edi; call qword ptr [rax]; 
0x0000000000470453: xor ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000047cb28: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004732cd: xor ecx, dword ptr [rax + 0x39]; ret 0xdd72; 
0x0000000000443337: xor ecx, dword ptr [rax - 0x75]; adc al, 0x24; mov rsi, r14; mov rdi, qword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000043f762: xor ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000044169d: xor ecx, dword ptr [rax - 0x75]; jl 0x416c6; adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000443267: xor ecx, dword ptr [rax - 0x77]; and al, 8; mov rdi, rax; sub rdx, rsi; mov eax, r12d; syscall; 
0x00000000004104f4: xor ecx, dword ptr [rax - 0x77]; call 0x5c426257; ret; 
0x0000000000449281: xor ecx, dword ptr [rax - 0x77]; ret; 
0x000000000046ec45: xor ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000042f699: xor ecx, dword ptr [rbx + 7]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004127d3: xor ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov rdi, r12; mov eax, r9d; syscall; 
0x00000000004432f6: xor ecx, dword ptr [rcx + rcx*4 - 0xa]; mov qword ptr [rsp], rax; mov rdx, rax; mov eax, r12d; syscall; 
0x000000000046e0e9: xor ecx, eax; and rsi, rcx; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000450342: xor ecx, eax; ret 0x4809; 
0x0000000000445cbf: xor ecx, ecx; not eax; xor edx, edx; add eax, 2; push rax; call rbx; 
0x000000000046f430: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x0000000000440fe1: xor edi, edi; mov eax, 9; movsxd r10, r10d; syscall; 
0x0000000000400f30: xor edi, edi; mov eax, edx; syscall; 
0x000000000040edd7: xor edx, dword ptr [0x30]; call rdx; 
0x0000000000445cc3: xor edx, edx; add eax, 2; push rax; call rbx; 
0x0000000000443a3f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000043f60a: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000410cf5: xor edx, edx; cmp qword ptr [rbx + 0x38], 0; jne 0x10cd0; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000045b1c3: xor edx, edx; div ecx; add eax, r8d; ret; 
0x000000000048c339: xor edx, edx; div rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000046f432: xor edx, edx; lea r9, [rsp + 0x20]; lea rsi, [rsp + 0x40]; call rbx; 
0x000000000047c894: xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047952a: xor edx, edx; mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x00000000004015c5: xor edx, edx; mov esi, 0x20000; mov edi, 0x4a1d7d; mov eax, 2; syscall; 
0x0000000000401554: xor edx, edx; mov esi, 0x20001; mov edi, 0x4a1d73; mov eax, 2; syscall; 
0x000000000044237b: xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx; 
0x00000000004165c9: xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000004189ac: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000403ee3: xor edx, edx; mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000049a393: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000044dd1c: xor edx, edx; xor esi, esi; mov edi, 0x4a6dc8; mov eax, ecx; syscall; 
0x0000000000441e51: xor edx, edx; xor esi, esi; mov rbx, rax; call rax; 
0x0000000000415605: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004bb39d: xor esi, dword ptr [rcx]; xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x000000000040e039: xor esi, esi; call 0xf0a0; add rsp, 8; ret; 
0x0000000000416b16: xor esi, esi; call 0xffffffffffc00000; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000049f481: xor esi, esi; mov eax, 0; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x000000000043fccc: xor esi, esi; mov eax, 2; syscall; 
0x0000000000403c19: xor esi, esi; mov eax, ecx; syscall; 
0x0000000000400428: xor esi, esi; mov edi, 0x4a2b64; mov eax, 2; syscall; 
0x000000000044dd1e: xor esi, esi; mov edi, 0x4a6dc8; mov eax, ecx; syscall; 
0x0000000000401a55: xor esi, esi; mov edi, 1; call rax; 
0x000000000048c5c9: xor esi, esi; mov edi, dword ptr [rip + 0x2413f3]; jmp rax; 
0x00000000004734cf: xor esi, esi; mov edi, ebx; call 0x730e0; add rsp, 0x90; pop rbx; ret; 
0x00000000004410a1: xor esi, esi; mov r12d, edx; mov rbp, rax; call rax; 
0x0000000000441e53: xor esi, esi; mov rbx, rax; call rax; 
0x0000000000441e78: xor esi, esi; mov rdi, r12; call rbx; 
0x0000000000441e9d: xor esi, esi; mov rdi, r13; call rbx; 
0x0000000000441ec1: xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000441ee1: xor esi, esi; mov rdi, r15; call rbx; 
0x00000000004100c7: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000415607: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000443a3e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000479529: xor r10d, r10d; mov edx, 1; mov esi, 0x81; add rdi, 0x1c; mov eax, 0xca; syscall; 
0x0000000000403ee2: xor r10d, r10d; mov rdx, r8; mov rsi, r9; mov rdi, r12; mov eax, r10d; syscall; 
0x000000000045a784: xor r13d, r13d; mov rax, qword ptr [rax + 0x38]; mov rdx, rcx; mov qword ptr [rbp - 0xb8], rcx; mov rdi, rbx; call rax; 
0x000000000049f480: xor r14d, r14d; mov eax, 0; test rax, rax; je 0x9f494; mov edi, 0x6cc100; call rax; 
0x000000000046d8a6: xor r8d, r8d; call rbx; 
0x000000000046fb39: xor r8d, r8d; mov rsi, r14; lea rdx, [rsp + 0x48]; mov rdi, r12; call rbx; 
0x000000000040ee1e: xor rax, qword ptr [0x30]; call rax; 
0x000000000040ee1d: xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000042713f: xor rax, rax; ret; 
0x000000000046e05a: xor rax, rdx; and rax, rcx; je 0x6e220; bsr rax, rax; add rax, rdi; ret; 
0x000000000046e2de: xor rax, rdx; and rsi, rax; je 0x6e220; bsr rax, rsi; add rax, rdi; ret; 
0x000000000046e0e8: xor rcx, rax; and rsi, rcx; je 0x6e220; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000040edd6: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040edd5: xor rdx, qword ptr fs:[0x30]; call rdx; 

19333 gadgets found
